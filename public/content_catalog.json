[
  {
    "url": "https://docs.streamlit.io/develop",
    "content": "# Develop\n\nGet all the information you need to build beautiful, performant web apps with Streamlit!\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"book\"\n        bold=\"Concepts.\"\n        href=\"/develop/concepts\"\n    >Learn how Streamlit works with in-depth guides to our execution model and features.</InlineCallout>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"list\"\n        bold=\"API reference.\"\n        href=\"/develop/api-reference\"\n    >Learn about our API with function definitions and examples.</InlineCallout>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"auto_awesome\"\n        bold=\"Tutorials.\"\n        href=\"/develop/tutorials\"\n    >Follow step-by-step instructions to build example apps and useful snippets.</InlineCallout>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"bolt\"\n        bold=\"Quick references.\"\n        href=\"/develop/quick-reference\"\n    >Check out our quick references for easy access to convenient information like our changelog, cheat sheet, pre-release features, and roadmap.</InlineCallout>\n</InlineCalloutContainer>"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base",
    "content": "# Knowledge base\n\nThe knowledge base is a self-serve library of tips, step-by-step tutorials, and articles that answer your questions about creating and deploying Streamlit apps.\n\n<InlineCalloutContainer>\n  <InlineCallout\n    color=\"darkBlue-70\"\n    icon=\"quiz\"\n    bold=\"FAQ\"\n    href=\"/knowledge-base/using-streamlit\"\n  >Here are some frequently asked questions about using Streamlit.</InlineCallout>\n  <InlineCallout\n    color=\"darkBlue-70\"\n    icon=\"downloading\"\n    bold=\"Installing dependencies.\"\n    href=\"/knowledge-base/dependencies\"\n  >If you run into problems installing dependencies for your Streamlit apps, we've got you covered.</InlineCallout>\n  <InlineCallout\n    color=\"darkBlue-70\"\n    icon=\"report\"\n    bold=\"Deployment issues.\"\n    href=\"/knowledge-base/deploy\"\n  >Have questions about deploying Streamlit apps to the cloud? This section covers deployment-related issues.</InlineCallout>\n</InlineCalloutContainer>"
  },
  {
    "url": "https://docs.streamlit.io/deploy",
    "content": "# Deploy\n\nGet all the information you need to deploy your app and share it with your users.\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"book\"\n        bold=\"Concepts.\"\n        href=\"/deploy/concepts\"\n    >Understand the basics of app deployment.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"cloud\"\n        bold=\"Streamlit Community Cloud.\"\n        href=\"/deploy/streamlit-community-cloud\"\n    >Deploy your app on our free platform and join a community of developers who share their apps around the world. This is a great place for your non-commerical, personal, and educational apps.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"ac_unit\"\n        bold=\"Snowflake.\"\n        href=\"/deploy/snowflake\"\n    >Deploy your app in Snowflake for a secure, enterprise-grade environment. This is a great place for your business apps.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"bolt\"\n        bold=\"Other platforms.\"\n        href=\"/deploy/tutorials\"\n    >Learn how to deploy your app on a variety of platforms with our convenient collection of tutorials.</InlineCallout>\n</InlineCalloutContainer>"
  },
  {
    "url": "https://docs.streamlit.io/get-started",
    "content": "# Get started with Streamlit\n\nThis Get Started guide explains how Streamlit works, how to install Streamlit on your preferred\noperating system, and how to create your first Streamlit app!\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"orange-70\"\n        icon=\"downloading\"\n        bold=\"Installation\"\n        href=\"/get-started/installation\"\n    >helps you set up your development environment. Walk through installing Streamlit on Windows, macOS, or Linux. Alternatively, code right in your browser with GitHub Codespaces or Streamlit in Snowflake.</InlineCallout>\n    <InlineCallout\n        color=\"orange-70\"\n        icon=\"description\"\n        bold=\"Fundamentals\"\n        href=\"/get-started/fundamentals\"\n    >introduces you to Streamlit's data model and development flow. You'll learn what makes Streamlit the most powerful way to build data apps, including the ability to display and style data, draw charts and maps, add interactive widgets, customize app layouts, cache computation, and define themes.</InlineCallout>\n    <InlineCallout\n        color=\"orange-70\"\n        icon=\"auto_awesome\"\n        bold=\"First steps\"\n        href=\"/get-started/tutorials\"\n    >walks you through creating apps using core features to fetch and cache data, draw charts, plot information on a map, and use interactive widgets to filter results.</InlineCallout>\n    <InlineCallout\n        color=\"orange-70\"\n        icon=\"rocket_launch\"\n        bold=\"Use GitHub Codespaces\"\n        href=\"/get-started/installation/community-cloud\"\n    >if you want to skip past local installation and code right in your browser. This guide uses Streamlit Community Cloud to help you automatically configure a codespace.</InlineCallout>\n</InlineCalloutContainer>\n\n<NoteSplit\nbackground=\"gray-20\"\ntitle=\"30 Days of Streamlit 🎈\"\ncopy=\"30 Days of Streamlit 🎈 is a free, self-paced 30 day challenge that teaches you how to build and deploy data apps with Streamlit. Complete the daily challenges, share your solutions with us on Twitter and LinkedIn, and stop by the forum with any questions!\"\nbutton={{\n        text: \"Start the challenge\",\n        link: \"https://30days.streamlit.app/\",\n        target: \"_blank\",\n      }}\nimage=\"/30days.png\"\n/>"
  },
  {
    "url": "https://docs.streamlit.io/get-started/fundamentals/summary",
    "content": "# App model summary\n\nNow that you know a little more about all the individual pieces, let's close\nthe loop and review how it works together:\n\n1. Streamlit apps are Python scripts that run from top to bottom.\n1. Every time a user opens a browser tab pointing to your app, the script is executed and a new session starts.\n1. As the script executes, Streamlit draws its output live in a browser.\n1. Every time a user interacts with a widget, your script is re-executed and Streamlit redraws its output in the browser.\n   - The output value of that widget matches the new value during that rerun.\n1. Scripts use the Streamlit cache to avoid recomputing expensive functions, so updates happen very fast.\n1. Session State lets you save information that persists between reruns when you need more than a simple widget.\n1. Streamlit apps can contain multiple pages, which are defined in separate `.py` files in a `pages` folder.\n\n![The Streamlit app model](/images/app_model.png)"
  },
  {
    "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts",
    "content": "# Basic concepts of Streamlit\n\nWorking with Streamlit is simple. First you sprinkle a few Streamlit commands\ninto a normal Python script, then you run it with `streamlit run`:\n\n```bash\nstreamlit run your_script.py [-- script args]\n```\n\nAs soon as you run the script as shown above, a local Streamlit server will\nspin up and your app will open in a new tab in your default web browser. The app\nis your canvas, where you'll draw charts, text, widgets, tables, and more.\n\nWhat gets drawn in the app is up to you. For example\n[`st.text`](/develop/api-reference/text/st.text) writes raw text to your app, and\n[`st.line_chart`](/develop/api-reference/charts/st.line_chart) draws — you guessed it — a\nline chart. Refer to our [API documentation](/develop/api-reference) to see all commands that\nare available to you.\n\n<Note>\n\nWhen passing your script some custom arguments, they must be passed after two dashes. Otherwise the\narguments get interpreted as arguments to Streamlit itself.\n\n</Note>\n\nAnother way of running Streamlit is to run it as a Python module. This can be\nuseful when configuring an IDE like PyCharm to work with Streamlit:\n\n```bash\n# Running\npython -m streamlit run your_script.py\n\n# is equivalent to:\nstreamlit run your_script.py\n```\n\n<Tip>\n\nYou can also pass a URL to `streamlit run`! This is great when combined with\nGitHub Gists. For example:\n\n```bash\nstreamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py\n```\n\n</Tip>\n\n## Development flow\n\nEvery time you want to update your app, save the source file. When you do\nthat, Streamlit detects if there is a change and asks you whether you want to\nrerun your app. Choose \"Always rerun\" at the top-right of your screen to\nautomatically update your app every time you change its source code.\n\nThis allows you to work in a fast interactive loop: you type some code, save\nit, try it out live, then type some more code, save it, try it out, and so on\nuntil you're happy with the results. This tight loop between coding and viewing\nresults live is one of the ways Streamlit makes your life easier.\n\n<Tip>\n\nWhile developing a Streamlit app, it's recommended to lay out your editor and\nbrowser windows side by side, so the code and the app can be seen at the same\ntime. Give it a try!\n\n</Tip>\n\nAs of Streamlit version 1.10.0 and higher, Streamlit apps cannot be run from the root directory of Linux distributions. If you try to run a Streamlit app from the root directory, Streamlit will throw a `FileNotFoundError: [Errno 2] No such file or directory` error. For more information, see GitHub issue [#5239](https://github.com/streamlit/streamlit/issues/5239).\n\nIf you are using Streamlit version 1.10.0 or higher, your main script should live in a directory other than the root directory. When using Docker, you can use the `WORKDIR` command to specify the directory where your main script lives. For an example of how to do this, read [Create a Dockerfile](/deploy/tutorials/docker#create-a-dockerfile).\n\n## Data flow\n\nStreamlit's architecture allows you to write apps the same way you write plain\nPython scripts. To unlock this, Streamlit apps have a unique data flow: any\ntime something must be updated on the screen, Streamlit reruns your entire\nPython script from top to bottom.\n\nThis can happen in two situations:\n\n- Whenever you modify your app's source code.\n\n- Whenever a user interacts with widgets in the app. For example, when dragging\n  a slider, entering text in an input box, or clicking a button.\n\nWhenever a callback is passed to a widget via the `on_change` (or `on_click`) parameter, the callback will always run before the rest of your script. For details on the Callbacks API, please refer to our [Session State API Reference Guide](/develop/api-reference/caching-and-state/st.session_state#use-callbacks-to-update-session-state).\n\nAnd to make all of this fast and seamless, Streamlit does some heavy lifting\nfor you behind the scenes. A big player in this story is the\n[`@st.cache_data`](#caching) decorator, which allows developers to skip certain\ncostly computations when their apps rerun. We'll cover caching later in this\npage.\n\n## Display and style data\n\nThere are a few ways to display data (tables, arrays, data frames) in Streamlit\napps. [Below](#use-magic), you will be introduced to _magic_\nand [`st.write()`](/develop/api-reference/write-magic/st.write), which can be used to write\nanything from text to tables. After that, let's take a look at methods designed\nspecifically for visualizing data.\n\n### Use magic\n\nYou can also write to your app without calling any Streamlit methods.\nStreamlit supports \"[magic commands](/develop/api-reference/write-magic/magic),\" which means you don't have to use\n[`st.write()`](/develop/api-reference/write-magic/st.write) at all! To see this in action try this snippet:\n\n```python\n\"\"\"\n# My first app\nHere's our first attempt at using data to create a table:\n\"\"\"\n\nimport streamlit as st\nimport pandas as pd\ndf = pd.DataFrame({\n  'first column': [1, 2, 3, 4],\n  'second column': [10, 20, 30, 40]\n})\n\ndf\n```\n\nAny time that Streamlit sees a variable or a literal\nvalue on its own line, it automatically writes that to your app using\n[`st.write()`](/develop/api-reference/write-magic/st.write). For more information, refer to the\ndocumentation on [magic commands](/develop/api-reference/write-magic/magic).\n\n### Write a data frame\n\nAlong with [magic commands](/develop/api-reference/write-magic/magic),\n[`st.write()`](/develop/api-reference/write-magic/st.write) is Streamlit's \"Swiss Army knife\". You\ncan pass almost anything to [`st.write()`](/develop/api-reference/write-magic/st.write):\ntext, data, Matplotlib figures, Altair charts, and more. Don't worry, Streamlit\nwill figure it out and render things the right way.\n\n```python\nimport streamlit as st\nimport pandas as pd\n\nst.write(\"Here's our first attempt at using data to create a table:\")\nst.write(pd.DataFrame({\n    'first column': [1, 2, 3, 4],\n    'second column': [10, 20, 30, 40]\n}))\n```\n\nThere are other data specific functions like\n[`st.dataframe()`](/develop/api-reference/data/st.dataframe) and\n[`st.table()`](/develop/api-reference/data/st.table) that you can also use for displaying\ndata. Let's understand when to use these features and how to add colors and styling to your data frames.\n\nYou might be asking yourself, \"why wouldn't I always use `st.write()`?\" There are\na few reasons:\n\n1. _Magic_ and [`st.write()`](/develop/api-reference/write-magic/st.write) inspect the type of\n   data that you've passed in, and then decide how to best render it in the\n   app. Sometimes you want to draw it another way. For example, instead of\n   drawing a dataframe as an interactive table, you may want to draw it as a\n   static table by using `st.table(df)`.\n2. The second reason is that other methods return an object that can be used\n   and modified, either by adding data to it or replacing it.\n3. Finally, if you use a more specific Streamlit method you can pass additional\n   arguments to customize its behavior.\n\nFor example, let's create a data frame and change its formatting with a Pandas\n`Styler` object. In this example, you'll use Numpy to generate a random sample,\nand the [`st.dataframe()`](/develop/api-reference/data/st.dataframe) method to draw an\ninteractive table.\n\n<Note>\n\nThis example uses Numpy to generate a random sample, but you can use Pandas\nDataFrames, Numpy arrays, or plain Python arrays.\n\n</Note>\n\n```python\nimport streamlit as st\nimport numpy as np\n\ndataframe = np.random.randn(10, 20)\nst.dataframe(dataframe)\n```\n\nLet's expand on the first example using the Pandas `Styler` object to highlight\nsome elements in the interactive table.\n\n```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\ndataframe = pd.DataFrame(\n    np.random.randn(10, 20),\n    columns=('col %d' % i for i in range(20)))\n\nst.dataframe(dataframe.style.highlight_max(axis=0))\n```\n\nStreamlit also has a method for static table generation:\n[`st.table()`](/develop/api-reference/data/st.table).\n\n```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\ndataframe = pd.DataFrame(\n    np.random.randn(10, 20),\n    columns=('col %d' % i for i in range(20)))\nst.table(dataframe)\n```\n\n### Draw charts and maps\n\nStreamlit supports several popular data charting libraries like [Matplotlib,\nAltair, deck.gl, and more](/develop/api-reference#chart-elements). In this section, you'll\nadd a bar chart, line chart, and a map to your app.\n\n### Draw a line chart\n\nYou can easily add a line chart to your app with\n[`st.line_chart()`](/develop/api-reference/charts/st.line_chart). We'll generate a random\nsample using Numpy and then chart it.\n\n```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\nchart_data = pd.DataFrame(\n     np.random.randn(20, 3),\n     columns=['a', 'b', 'c'])\n\nst.line_chart(chart_data)\n```\n\n### Plot a map\n\nWith [`st.map()`](/develop/api-reference/charts/st.map) you can display data points on a map.\nLet's use Numpy to generate some sample data and plot it on a map of\nSan Francisco.\n\n```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\nmap_data = pd.DataFrame(\n    np.random.randn(1000, 2) / [50, 50] + [37.76, -122.4],\n    columns=['lat', 'lon'])\n\nst.map(map_data)\n```\n\n## Widgets\n\nWhen you've got the data or model into the state that you want to explore, you\ncan add in widgets like [`st.slider()`](/develop/api-reference/widgets/st.slider),\n[`st.button()`](/develop/api-reference/widgets/st.button) or\n[`st.selectbox()`](/develop/api-reference/widgets/st.selectbox). It's really straightforward\n— treat widgets as variables:\n\n```python\nimport streamlit as st\nx = st.slider('x')  # 👈 this is a widget\nst.write(x, 'squared is', x * x)\n```\n\nOn first run, the app above should output the text \"0 squared is 0\". Then\nevery time a user interacts with a widget, Streamlit simply reruns your script\nfrom top to bottom, assigning the current state of the widget to your variable\nin the process.\n\nFor example, if the user moves the slider to position `10`, Streamlit will\nrerun the code above and set `x` to `10` accordingly. So now you should see the\ntext \"10 squared is 100\".\n\nWidgets can also be accessed by key, if you choose to specify a string to use as the unique key for the widget:\n\n```python\nimport streamlit as st\nst.text_input(\"Your name\", key=\"name\")\n\n# You can access the value at any point with:\nst.session_state.name\n```\n\nEvery widget with a key is automatically added to Session State. For more information about Session State, its association with widget state, and its limitations, see [Session State API Reference Guide](/develop/api-reference/caching-and-state/st.session_state).\n\n### Use checkboxes to show/hide data\n\nOne use case for checkboxes is to hide or show a specific chart or section in\nan app. [`st.checkbox()`](/develop/api-reference/widgets/st.checkbox) takes a single argument,\nwhich is the widget label. In this sample, the checkbox is used to toggle a\nconditional statement.\n\n```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\nif st.checkbox('Show dataframe'):\n    chart_data = pd.DataFrame(\n       np.random.randn(20, 3),\n       columns=['a', 'b', 'c'])\n\n    chart_data\n```\n\n### Use a selectbox for options\n\nUse [`st.selectbox`](/develop/api-reference/widgets/st.selectbox) to choose from a series. You\ncan write in the options you want, or pass through an array or data frame\ncolumn.\n\nLet's use the `df` data frame we created earlier.\n\n```python\nimport streamlit as st\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'first column': [1, 2, 3, 4],\n    'second column': [10, 20, 30, 40]\n    })\n\noption = st.selectbox(\n    'Which number do you like best?',\n     df['first column'])\n\n'You selected: ', option\n```\n\n## Layout\n\nStreamlit makes it easy to organize your widgets in a left panel sidebar with\n[`st.sidebar`](/develop/api-reference/layout/st.sidebar). Each element that's passed to\n[`st.sidebar`](/develop/api-reference/layout/st.sidebar) is pinned to the left, allowing\nusers to focus on the content in your app while still having access to UI\ncontrols.\n\nFor example, if you want to add a selectbox and a slider to a sidebar,\nuse `st.sidebar.slider` and `st.sidebar.selectbox` instead of `st.slider` and\n`st.selectbox`:\n\n```python\nimport streamlit as st\n\n# Add a selectbox to the sidebar:\nadd_selectbox = st.sidebar.selectbox(\n    'How would you like to be contacted?',\n    ('Email', 'Home phone', 'Mobile phone')\n)\n\n# Add a slider to the sidebar:\nadd_slider = st.sidebar.slider(\n    'Select a range of values',\n    0.0, 100.0, (25.0, 75.0)\n)\n```\n\nBeyond the sidebar, Streamlit offers several other ways to control the layout\nof your app. [`st.columns`](/develop/api-reference/layout/st.columns) lets you place widgets side-by-side, and\n[`st.expander`](/develop/api-reference/layout/st.expander) lets you conserve space by hiding away large content.\n\n```python\nimport streamlit as st\n\nleft_column, right_column = st.columns(2)\n# You can use a column just like st.sidebar:\nleft_column.button('Press me!')\n\n# Or even better, call Streamlit functions inside a \"with\" block:\nwith right_column:\n    chosen = st.radio(\n        'Sorting hat',\n        (\"Gryffindor\", \"Ravenclaw\", \"Hufflepuff\", \"Slytherin\"))\n    st.write(f\"You are in {chosen} house!\")\n```\n\n<Note>\n\n`st.echo` and `st.spinner` are not currently supported inside the sidebar\nor layout options. Rest assured, though, we're currently working on adding support for those too!\n\n</Note>\n\n### Show progress\n\nWhen adding long running computations to an app, you can use\n[`st.progress()`](/develop/api-reference/status/st.progress) to display status in real time.\n\nFirst, let's import time. We're going to use the `time.sleep()` method to\nsimulate a long running computation:\n\n```python\nimport time\n```\n\nNow, let's create a progress bar:\n\n```python\nimport streamlit as st\nimport time\n\n'Starting a long computation...'\n\n# Add a placeholder\nlatest_iteration = st.empty()\nbar = st.progress(0)\n\nfor i in range(100):\n  # Update the progress bar with each iteration.\n  latest_iteration.text(f'Iteration {i+1}')\n  bar.progress(i + 1)\n  time.sleep(0.1)\n\n'...and now we\\'re done!'\n```"
  },
  {
    "url": "https://docs.streamlit.io/get-started/fundamentals/additional-features",
    "content": "# Additional Streamlit features\n\nSo you've read all about Streamlit's [Basic concepts](/get-started/fundamentals/main-concepts) and gotten a taste of caching and Session State in [Advanced concepts](/get-started/fundamentals/advanced-concepts). But what about the bells and whistles? Here's a quick look at some extra features to take your app to the next level.\n\n## Theming\n\nStreamlit supports Light and Dark themes out of the box. Streamlit will first\ncheck if the user viewing an app has a Light or Dark mode preference set by\ntheir operating system and browser. If so, then that preference will be used.\nOtherwise, the Light theme is applied by default.\n\nYou can also change the active theme from \"⋮\" → \"Settings\".\n\n![Changing Themes](/images/change_theme.gif)\n\nWant to add your own theme to an app? The \"Settings\" menu has a theme editor\naccessible by clicking on \"Edit active theme\". You can use this editor to try\nout different colors and see your app update live.\n\n![Editing Themes](/images/edit_theme.gif)\n\nWhen you're happy with your work, themes can be saved by\n[setting config options](/develop/concepts/configuration)\nin the `[theme]` config section. After you've defined a theme for your app, it\nwill appear as \"Custom Theme\" in the theme selector and will be applied by\ndefault instead of the included Light and Dark themes.\n\nMore information about the options available when defining a theme can be found\nin the [theme option documentation](/develop/concepts/configuration/theming).\n\n<Note>\n\nThe theme editor menu is available only in local development. If you've deployed your app using\nStreamlit Community Cloud, the \"Edit active theme\" button will no longer be displayed in the \"Settings\"\nmenu.\n\n</Note>\n\n<Tip>\n\nAnother way to experiment with different theme colors is to turn on the \"Run on save\" option, edit\nyour config.toml file, and watch as your app reruns with the new theme colors applied.\n\n</Tip>\n\n## Pages\n\nAs apps grow large, it becomes useful to organize them into multiple pages. This makes the app easier to manage as a developer and easier to navigate as a user. Streamlit provides a powerful way to create multipage apps using [`st.Page`](/develop/api-reference/navigation/st.page) and [`st.navigation`](/develop/api-reference/navigation/st.navigation). Just create your pages and connect them with navigation as follows:\n\n1. Create an entry point script that defines and connects your pages\n2. Create separate Python files for each page's content\n3. Use [`st.Page`](/develop/api-reference/navigation/st.page) to define your pages and [`st.navigation`](/develop/api-reference/navigation/st.navigation) to connect them\n\nHere's an example of a three-page app:\n\n<details open>\n<summary><code>streamlit_app.py</code></summary>\n\n```python\nimport streamlit as st\n\n# Define the pages\nmain_page = st.Page(\"main_page.py\", title=\"Main Page\", icon=\"🎈\")\npage_2 = st.Page(\"page_2.py\", title=\"Page 2\", icon=\"❄️\")\npage_3 = st.Page(\"page_3.py\", title=\"Page 3\", icon=\"🎉\")\n\n# Set up navigation\npg = st.navigation([main_page, page_2, page_3])\n\n# Run the selected page\npg.run()\n```\n\n</details>\n\n<details open>\n<summary><code>main_page.py</code></summary>\n\n```python\nimport streamlit as st\n\n# Main page content\nst.markdown(\"# Main page 🎈\")\nst.sidebar.markdown(\"# Main page 🎈\")\n```\n\n</details>\n\n<details open>\n<summary><code>page_2.py</code></summary>\n\n```python\nimport streamlit as st\n\nst.markdown(\"# Page 2 ❄️\")\nst.sidebar.markdown(\"# Page 2 ❄️\")\n```\n\n</details>\n\n<details open>\n<summary><code>page_3.py</code></summary>\n\n```python\nimport streamlit as st\n\nst.markdown(\"# Page 3 🎉\")\nst.sidebar.markdown(\"# Page 3 🎉\")\n```\n\n</details>\n<br />\n\nNow run `streamlit run streamlit_app.py` and view your shiny new multipage app! The navigation menu will automatically appear, allowing users to switch between pages.\n\n<Image src=\"/images/mpa-v2-main-concepts.gif\" />\n\nOur documentation on [Multipage apps](/develop/concepts/multipage-apps) teaches you how to add pages to your app, including how to define pages, structure and run multipage apps, and navigate between pages. Once you understand the basics, [create your first multipage app](/get-started/tutorials/create-a-multipage-app)!\n\n## Custom components\n\nIf you can't find the right component within the Streamlit library, try out custom components to extend Streamlit's built-in functionality. Explore and browse through popular, community-created components in the [Components gallery](https://streamlit.io/components). If you dabble in frontend development, you can build your own custom component with Streamlit's [components API](/develop/concepts/custom-components/intro).\n\n## Static file serving\n\nAs you learned in Streamlit fundamentals, Streamlit runs a server that clients connect to. That means viewers of your app don't have direct access to the files which are local to your app. Most of the time, this doesn't matter because Streamlt commands handle that for you. When you use `st.image(<path-to-image>)` your Streamlit server will access the file and handle the necessary hosting so your app viewers can see it. However, if you want a direct URL to an image or file you'll need to host it. This requires setting the correct configuration and placing your hosted files in a directory named `static`. For example, your project could look like:\n\n```bash\nyour-project/\n├── static/\n│   └── my_hosted-image.png\n└── streamlit_app.py\n```\n\nTo learn more, read our guide on [Static file serving](/develop/concepts/configuration/serving-static-files).\n\n## App testing\n\nGood development hygiene includes testing your code. Automated testing allows you to write higher quality code, faster! Streamlit has a built-in testing framework that let's you build tests easily. Use your favorite testing framework to run your tests. We like [`pytest`](https://pypi.org/project/pytest/). When you test a Streamlit app, you simulate running the app, declare user input, and inspect the results. You can use GitHub workflows to automate your tests and get instant alerts about breaking changes. Learn more in our guide to [App testing](/develop/concepts/app-testing)."
  },
  {
    "url": "https://docs.streamlit.io/get-started/fundamentals",
    "content": "# Fundamental concepts\n\nAre you new to Streamlit and want the grand tour? If so, you're in the right place!\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"orange-70\"\n        icon=\"description\"\n        bold=\"Basic concepts.\"\n        href=\"/get-started/fundamentals/main-concepts\"\n    >Learn the fundamental concepts of Streamlit. How is a Streamlit app structured? How does it run? How does it magically get your data on a webpage?</InlineCallout>\n    <InlineCallout\n        color=\"orange-70\"\n        icon=\"description\"\n        bold=\"Advanced concepts.\"\n        href=\"/get-started/fundamentals/advanced-concepts\"\n    >After you understand the rerun logic of Streamlit, learn how to make efficient and dynamic apps with caching and Session State. Get introduced to handling database connections.</InlineCallout>\n    <InlineCallout\n        color=\"orange-70\"\n        icon=\"description\"\n        bold=\"Additional features.\"\n        href=\"/get-started/fundamentals/additional-features\"\n    >Learn about Streamlit's additional features. You don't need to know these concepts for your first app, but check it out to know what's available.</InlineCallout>\n</InlineCalloutContainer>"
  },
  {
    "url": "https://docs.streamlit.io/get-started/fundamentals/advanced-concepts",
    "content": "# Advanced concepts of Streamlit\n\nNow that you know how a Streamlit app runs and handles data, let's talk about being efficient. Caching allows you to save the output of a function so you can skip over it on rerun. Session State lets you save information for each user that is preserved between reruns. This not only allows you to avoid unecessary recalculation, but also allows you to create dynamic pages and handle progressive processes.\n\n## Caching\n\nCaching allows your app to stay performant even when loading data from the web, manipulating large datasets, or performing expensive computations.\n\nThe basic idea behind caching is to store the results of expensive function calls and return the cached result when the same inputs occur again. This avoids repeated execution of a function with the same input values.\n\nTo cache a function in Streamlit, you need to apply a caching decorator to it. You have two choices:\n\n- `st.cache_data` is the recommended way to cache computations that return data. Use `st.cache_data` when you use a function that returns a serializable data object (e.g. str, int, float, DataFrame, dict, list). **It creates a new copy of the data at each function call**, making it safe against [mutations and race conditions](/develop/concepts/architecture/caching#mutation-and-concurrency-issues). The behavior of `st.cache_data` is what you want in most cases – so if you're unsure, start with `st.cache_data` and see if it works!\n- `st.cache_resource` is the recommended way to cache global resources like ML models or database connections. Use `st.cache_resource` when your function returns unserializable objects that you don’t want to load multiple times. **It returns the cached object itself**, which is shared across all reruns and sessions without copying or duplication. If you mutate an object that is cached using `st.cache_resource`, that mutation will exist across all reruns and sessions.\n\nExample:\n\n```python\n@st.cache_data\ndef long_running_function(param1, param2):\n    return …\n```\n\nIn the above example, `long_running_function` is decorated with `@st.cache_data`. As a result, Streamlit notes the following:\n\n- The name of the function (`\"long_running_function\"`).\n- The value of the inputs (`param1`, `param2`).\n- The code within the function.\n\nBefore running the code within `long_running_function`, Streamlit checks its cache for a previously saved result. If it finds a cached result for the given function and input values, it will return that cached result and not rerun function's code. Otherwise, Streamlit executes the function, saves the result in its cache, and proceeds with the script run. During development, the cache updates automatically as the function code changes, ensuring that the latest changes are reflected in the cache.\n\n<Image src=\"/images/caching-high-level-diagram.png\" caption=\"Streamlit's two caching decorators and their use cases.\" alt=\"Streamlit's two caching decorators and their use cases. Use st.cache_data for anything you'd store in a database. Use st.cache_resource for anything you can't store in a database, like a connection to a database or a machine learning model.\" />\n\nFor more information about the Streamlit caching decorators, their configuration parameters, and their limitations, see [Caching](/develop/concepts/architecture/caching).\n\n## Session State\n\nSession State provides a dictionary-like interface where you can save information that is preserved between script reruns. Use `st.session_state` with key or attribute notation to store and recall values. For example, `st.session_state[\"my_key\"]` or `st.session_state.my_key`. Remember that widgets handle their statefulness all by themselves, so you won't always need to use Session State!\n\n### What is a session?\n\nA session is a single instance of viewing an app. If you view an app from two different tabs in your browser, each tab will have its own session. So each viewer of an app will have a Session State tied to their specific view. Streamlit maintains this session as the user interacts with the app. If the user refreshes their browser page or reloads the URL to the app, their Session State resets and they begin again with a new session.\n\n### Examples of using Session State\n\nHere's a simple app that counts the number of times the page has been run. Every time you click the button, the script will rerun.\n\n```python\nimport streamlit as st\n\nif \"counter\" not in st.session_state:\n    st.session_state.counter = 0\n\nst.session_state.counter += 1\n\nst.header(f\"This page has run {st.session_state.counter} times.\")\nst.button(\"Run it again\")\n```\n\n- **First run:** The first time the app runs for each user, Session State is empty. Therefore, a key-value pair is created (`\"counter\":0`). As the script continues, the counter is immediately incremented (`\"counter\":1`) and the result is displayed: \"This page has run 1 times.\" When the page has fully rendered, the script has finished and the Streamlit server waits for the user to do something. When that user clicks the button, a rerun begins.\n\n- **Second run:** Since \"counter\" is already a key in Session State, it is not reinitialized. As the script continues, the counter is incremented (`\"counter\":2`) and the result is displayed: \"This page has run 2 times.\"\n\nThere are a few common scenarios where Session State is helpful. As demonstrated above, Session State is used when you have a progressive process that you want to build upon from one rerun to the next. Session State can also be used to prevent recalculation, similar to caching. However, the differences are important:\n\n- Caching associates stored values to specific functions and inputs. Cached values are accessible to all users across all sessions.\n- Session State associates stored values to keys (strings). Values in session state are only available in the single session where it was saved.\n\nIf you have random number generation in your app, you'd likely use Session State. Here's an example where data is generated randomly at the beginning of each session. By saving this random information in Session State, each user gets different random data when they open the app but it won't keep changing on them as they interact with it. If you select different colors with the picker you'll see that the data does not get re-randomized with each rerun. (If you open the app in a new tab to start a new session, you'll see different data!)\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nif \"df\" not in st.session_state:\n    st.session_state.df = pd.DataFrame(np.random.randn(20, 2), columns=[\"x\", \"y\"])\n\nst.header(\"Choose a datapoint color\")\ncolor = st.color_picker(\"Color\", \"#FF0000\")\nst.divider()\nst.scatter_chart(st.session_state.df, x=\"x\", y=\"y\", color=color)\n```\n\nIf you are pulling the same data for all users, you'd likely cache a function that retrieves that data. On the other hand, if you pull data specific to a user, such as querying their personal information, you may want to save that in Session State. That way, the queried data is only available in that one session.\n\nAs mentioned in [Basic concepts](/get-started/fundamentals/main-concepts#widgets), Session State is also related to widgets. Widgets are magical and handle statefulness quietly on their own. As an advanced feature however, you can manipulate the value of widgets within your code by assigning keys to them. Any key assigned to a widget becomes a key in Session State tied to the value of the widget. This can be used to manipulate the widget. After you finish understanding the basics of Streamlit, check out our guide on [Widget behavior](/develop/concepts/architecture/widget-behavior) to dig in the details if you're interested.\n\n## Connections\n\nAs hinted above, you can use `@st.cache_resource` to cache connections. This is the most general solution which allows you to use almost any connection from any Python library. However, Streamlit also offers a convenient way to handle some of the most popular connections, like SQL! `st.connection` takes care of the caching for you so you can enjoy fewer lines of code. Getting data from your database can be as easy as:\n\n```python\nimport streamlit as st\n\nconn = st.connection(\"my_database\")\ndf = conn.query(\"select * from my_table\")\nst.dataframe(df)\n```\n\nOf course, you may be wondering where your username and password go. Streamlit has a convenient mechanism for [Secrets management](/develop/concepts/connections/secrets-management). For now, let's just see how `st.connection` works very nicely with secrets. In your local project directory, you can save a `.streamlit/secrets.toml` file. You save your secrets in the toml file and `st.connection` just uses them! For example, if you have an app file `streamlit_app.py` your project directory may look like this:\n\n```bash\nyour-LOCAL-repository/\n├── .streamlit/\n│   └── secrets.toml # Make sure to gitignore this!\n└── streamlit_app.py\n```\n\nFor the above SQL example, your `secrets.toml` file might look like the following:\n\n```toml\n[connections.my_database]\n    type=\"sql\"\n    dialect=\"mysql\"\n    username=\"xxx\"\n    password=\"xxx\"\n    host=\"example.com\" # IP or URL\n    port=3306 # Port number\n    database=\"mydb\" # Database name\n```\n\nSince you don't want to commit your `secrets.toml` file to your repository, you'll need to learn how your host handles secrets when you're ready to publish your app. Each host platform may have a different way for you to pass your secrets. If you use Streamlit Community Cloud for example, each deployed app has a settings menu where you can load your secrets. After you've written an app and are ready to deploy, you can read all about how to [Deploy your app](/deploy/streamlit-community-cloud/deploy-your-app) on Community Cloud."
  },
  {
    "url": "https://docs.streamlit.io/get-started/installation/anaconda-distribution",
    "content": "# Install Streamlit using Anaconda Distribution\n\nThis page walks you through installing Streamlit locally using Anaconda Distribution. At the end, you'll build a simple \"Hello world\" app and run it. You can read more about [Getting started with Anaconda Distribution](https://docs.anaconda.com/free/anaconda/getting-started/) in Anaconda's docs. If you prefer to manage your Python environments via command line, check out how to [Install Streamlit using command line](/get-started/installation/command-line).\n\n## Prerequisites\n\n1. **A code editor**\n\n   Anaconda Distribution includes Python and basically everything you need to get started.\n   The only thing left for you to choose is a code editor.\n\n   Our favorite editor is [VS Code](https://code.visualstudio.com/download), which is also what we\n   use in all our tutorials.\n\n1. **Knowledge about environment managers**\n\n   Environment managers create virtual environments to isolate Python package installations between\n   projects. For a detailed introduction to Python environments, check out\n   [Python Virtual Environments: A Primer](https://realpython.com/python-virtual-environments-a-primer/).\n\n   But don't worry! In this guide we'll teach you how to install and use an environment manager\n   (Anaconda).\n\n## Install Anaconda Distribution\n\n1. Go to [anaconda.com/download](https://www.anaconda.com/download).\n\n2. Install Anaconda Distribution for your OS.\n\n## Create an environment using Anaconda Navigator\n\n3. Open Anaconda Navigator (the graphical interface included with Anaconda Distribution).\n\n4. You can decline signing in to Anaconda if prompted.\n\n5. In the left menu, click \"**Environments**.\"\n   ![Open your environments list in Anaconda Navigator](/images/get-started/Anaconda-Navigator-environment-1.png)\n\n6. At the bottom of your environments list, click \"**Create**.\"\n   ![Click \"Create\" to open the Create new environment dialog](/images/get-started/Anaconda-Navigator-environment-2-create.png)\n\n7. Enter \"streamlitenv\" for the name of your environment.\n\n8. Click \"**Create**.\"\n<div style={{ maxWidth: '50%', margin: 'auto' }}>\n    <Image alt=\"Finalize your new conda environment\" src=\"/images/get-started/Anaconda-Navigator-environment-3-name.png\" />\n</div>\n\n## Activate your environment\n\n9. Click the green play icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>play_circle</i>) next to your environment.\n\n10. Click \"**Open Terminal**.\"\n    ![Open a new terminal with your environment activated](/images/get-started/Anaconda-Navigator-environment-6-activate.png)\n\n11. A terminal will open with your environment activated. Your environment's name will appear in parentheses at the beginning of your terminal's prompt to show that it's activated.\n\n## Install Streamlit in your environment\n\n12. In your terminal, type:\n\n    ```bash\n    pip install streamlit\n    ```\n\n13. To validate your installation, enter:\n\n    ```bash\n    streamlit hello\n    ```\n\n    If this doesn't work, use the long-form command:\n\n    ```bash\n    python -m streamlit hello\n    ```\n\n14. The Streamlit Hello example app will automatically open in your browser. If it doesn't, open your browser and go to the localhost address indicated in your terminal, typically `http://localhost:8501`. Play around with the app!\n\n15. Close your terminal.\n\n## Create a `Hello World` app and run it\n\n17. Open VS Code with a new project.\n\n18. Create a Python file named `app.py` in your project folder.\n    ![Create a new file called app.py](/images/get-started/hello-world-1-new-file.png)\n\n19. Copy the following code into `app.py` and save it.\n\n    ```python\n    import streamlit as st\n\n    st.write(\"Hello World\")\n    ```\n\n20. Click your Python interpreter in the lower-right corner, then choose your `streamlitenv` environment from the drop-down.\n    ![Set your Python interpreter to your `streamlitenv` environment](/images/get-started/hello-world-3-change-interpreter.png)\n\n21. Right-click `app.py` in your file navigation and click \"**Open in integrated terminal**.\"\n    ![Open your terminal in your project folder](/images/get-started/hello-world-4-open-terminal.png)\n\n22. A terminal will open with your environment activated. Confirm this by looking for \"(streamlitenv)\" at the beginning of your next prompt.\n    If it is not there, manually activate your environment with the command:\n\n    ```bash\n    conda activate streamlitenv\n    ```\n\n23. In your terminal, type:\n\n    ```bash\n    streamlit run app.py\n    ```\n\n    If this doesn't work, use the long-form command:\n\n    ```bash\n    python -m streamlit run app.py\n    ```\n\n    ![Start your Streamlit app with `streamlit run app.py`](/images/get-started/hello-world-5-streamlit-run.png)\n\n24. Your app will automatically open in your browser. If it doesn't for any reason, open your browser and go to the localhost address indicated in your terminal, typically `http://localhost:8501`.\n\n25. Change `st.write` to `st.title` and save your file:\n\n    ```python\n    import streamlit as st\n\n    st.title(\"Hello World\")\n    ```\n\n26. In your browser, click \"**Always rerun**\" to instantly rerun your app whenever you save a change to your file.\n    ![Automatically rerun your app when your source file changes](/images/get-started/hello-world-6-always-rerun.png)\n\n27. Your app will update! Keep making changes and you will see your changes as soon as you save your file.\n    ![Your app updates when you resave your source file](/images/get-started/hello-world-7-updated-app.png)\n\n28. When you're done, you can stop your app with `Ctrl+C` in your terminal or just by closing your terminal.\n\n## What's next?\n\nRead about our [Basic concepts](/get-started/fundamentals/main-concepts) and try out more commands in your app."
  },
  {
    "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake",
    "content": "# Use Streamlit in Snowflake to code in a secure environment\n\nSnowflake is a single, global platform that powers the Data Cloud. If you want to use a secure platform with role-based access control, this is the option for you! This page walks you through creating a trial Snowflake account and building a \"Hello world\" app. Your trial account comes with an account credit so you can try out the service without entering any payment information.\n\n<Note>\n\nFor more information, see [Limitations and unsupported features](https://docs.snowflake.com/en/developer-guide/streamlit/limitations) in the Snowflake documentation.\n\n</Note>\n\n## Prerequisites\n\nAll you need is an email address! Everything else happens in your 30-day trial account.\n\n## Create an account\n\n1. Go to <SnowflakeTrial />. (This link will open in a new tab.)\n\n1. Fill in your information, and click \"**CONTINUE**.\"\n\n1. Select \"**Standard**\" for your Snowflake edition and \"**Amazon Web Services**\" for your cloud provider.\n\n1. Choose the region nearest you, accept the terms, and click \"**GET STARTED**.\"\n\n<div style={{ maxWidth: '50%', margin: 'auto' }}>\n    <Image alt=\"Choose your Snowflake edition, provider, and region\" src=\"/images/get-started/SiS-region.png\" />\n</div>\n\n1. Answer a few questions to let us know more about yourself, or skip them.\n\n1. A message will display: \"You're now signed up!\" Go to your email, and click on the activation link. (Within your link, note the subdomain. This is your Snowflake account identifier. `https://<account_identifier>.snowflakecomputing.com`)\n\n1. Set your username and password. This will be an admin user account within your Snowflake account. Your Snowflake account can have multiple users within it.\n\n1. If you are not signed in after setting your password, follow the instructions to enter your Snowflake account identifier, and then enter your username and password. If you've accidentally closed your browser, you can sign in at [app.snowflake.com](https://app.snowflake.com/).\n\nCongratulations! You have a trial Snowflake account.\n\nThe displayed interface is called Snowsight. Snowsight provides a web-based, graphical user interface for your Snowflake account. The default page is \"**Home**,\" which provides popular quick actions to get started. You can access your \"**Projects**\" in the left navigation or at the bottom of your \"**Home**\" page. \"**Projects**\" include worksheets, notebooks, Streamlit apps, and dashboards. Check out the Snowflake docs for a [quick tour](https://docs.snowflake.com/en/user-guide/ui-snowsight-quick-tour).)\n\n![Sample databases in your new trial Snowflake account](/images/get-started/SiS-1-landing-page.png)\n\n## Optional: Create a warehouse\n\nWarehouses provide compute resources for tasks and apps in your Snowflake account. Your trial account already has an XS warehouse which you can use. This is named \"COMPUTE_WH.\" However, if you want to use more compute resources, you can create another warehouse.\n\n1. In the lower-left corner under your name, confirm that your current role is \"ACCOUNTADMIN.\" If it isn't, click your name, hover over \"**Switch Role**,\" and select \"**ACCOUNTADMIN**.\"\n\n1. In the left navigation, select \"**Admin**\" → \"**Warehouses**.\"\n\n1. In the upper-right corner, click the blue \"<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>add</i> **Warehouse**\" button.\n\n1. Enter \"STREAMLIT_WH\" for the name and select a type and size. The default type and size are \"Standard\" and \"X-Small,\" respectively. Click \"**Create Warehouse**.\"\n\n## Create a database\n\nDatabases provide storage for data and apps in your Snowflake account. Your trial account comes with a shared database of sample data, but you must create a new database in your account to store your app files.\n\n1. In the left navigation, select \"**Data**\" → \"**Databases**.\"\n\n1. In the upper-right corner, click the blue \"<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>add</i> **Database**\" button.\n\n1. Enter \"STREAMLIT_DB\" for the name, and click \"**Create**.\"\n\nYay! You now have a new database to hold all your Streamlit apps.\n\n![New database in your new trial Snowflake account](/images/get-started/SiS-2-databases.png)\n\nThe databases in the above screenshot are as follows:\n\n- \"SNOWFLAKE:\" A built-in database that stores meta data for your account.\n- \"SNOWFLAKE_SAMPLE_DATA:\" A shared database with sample data.\n- \"STREAMLIT_DB:\" Your new database where you'll put your Streamlit files.\n\n## Create a \"Hello World\" Streamlit app\n\n1. In the left navigation, select \"**Projects**\" → \"**Streamlit**.\"\n\n1. In the upper-right corner, click the blue \"<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>add</i> **Streamlit App**\" button.\n\n1. Enter your app details as follows:\n\n   - App title: \"Hello World\"\n   - App location: \"STREAMLIT_DB\" and \"PUBLIC\"\n   - App warehouse: \"COMPUTE_WH\" (default) or \"STREAMLIT_WH\" (if you created a new warehouse)\n\n   If you can't select your database, refresh the page to ensure that the interface is displaying current information.\n\n1. Click \"**Create**.\" (Note that the app will run with the rights of \"ACCOUNTADMIN\" for simplicity. You can curate your roles and permissions to choose who can create and access apps.)\n\n   ![Create your first Streamlit in Snowflake app](/images/get-started/SiS-3-create-app.png)\n\n   Your new app is prefilled with example code and opens in editing mode. The left panel shows your code. The right panel shows the resulting app.\n\n1. Optional: Explore the example app.\n\n1. In the left code editor, delete everything, and replace it with the following:\n\n   ```python\n   import streamlit as st\n\n   st.write(\"Hello World\")\n   ```\n\n   If you want to return to the sample code later, you can always make another app to edit the same example again.\n\n1. In the upper-right corner, click the blue \"<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>play_arrow</i> **Run**\" button to make the running app reflect your changes.\n\n   Hooray! You just wrote a Streamlit app.\n\n   ![Hello World in Streamlit in Snowflake app](/images/get-started/SiS-4-hello-world.png)\n\n   <Tip>\n\n   In the lower-left corner of the editing interface, you can click the splitscreen icons to toggle the visibility of your file navigation, code editor, and app preview.\n\n   </Tip>\n\n1. Change `st.write` to `st.title`:\n\n   ```python\n   import streamlit as st\n\n   st.title(\"Hello World\")\n   ```\n\n1. In the upper-right corner, click the blue \"<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>play_arrow</i> **Run**\" button to make the running app reflect your changes.\n\n   Your app now displays the larger title text.\n\n1. Optional: Make more edits to your app. You must interact with your app or click the blue \"<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>play_arrow</i> **Run**\" button to display the changes. This is different from a local environment where you can save your changes to trigger a rerun.\n\n1. To return to Snowsight, in the upper-left corner, click \"<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>chevron_left</i> **Streamlit Apps**.\"\n\n## Return to your app\n\nWhen you want to view or edit your app again, you can return to it through Snowsight. If you are returning to the site, you can sign in at [app.snowflake.com](https://app.snowflake.com/).\n\n1. In the left navigation, select \"**Projects**\" → \"**Streamlit**.\"\n\n1. In your list of apps, click \"**Hello World**.\"\n\n   If you don't see your app, check that your role is set to \"ACCOUNTADMIN\" as described in [Optional: Create a warehouse](/get-started/installation/streamlit-in-snowflake#optional-create-a-warehouse).\n\n1. Your app will open in viewing mode. To edit your app, in the upper-right corner, click \"**Edit**.\"\n\n   ![Change to editing mode in Streamlit in Snowflake](/images/get-started/SiS-5-hello-world-edit.png)\n\n## What's next?\n\nRead about our [Basic concepts](/get-started/fundamentals/main-concepts) and try out more commands in your app. Or, create more apps in Snowflake! You can reuse your warehouse and database, so you don't need to repeat those steps.\n\nFor more information about creating and managing Streamlit in Snowflake apps, check out the [Snowflake docs](https://docs.snowflake.com/en/developer-guide/streamlit/about-streamlit)."
  },
  {
    "url": "https://docs.streamlit.io/get-started/installation/command-line",
    "content": "# Install Streamlit using command line\n\nThis page will walk you through creating an environment with `venv` and installing Streamlit with `pip`. These are our recommended tools, but if you are familiar with others you can use your favorite ones too. At the end, you'll build a simple \"Hello world\" app and run it. If you prefer to have a graphical interface to manage your Python environments, check out how to [Install Streamlit using Anaconda Distribution](/get-started/installation/anaconda-distribution).\n\n## Prerequisites\n\nAs with any programming tool, in order to install Streamlit you first need to make sure your\ncomputer is properly set up. More specifically, you’ll need:\n\n1. **Python**\n\n   We support [version 3.9 to 3.13](https://www.python.org/downloads/).\n\n1. **A Python environment manager** (recommended)\n\n   Environment managers create virtual environments to isolate Python package installations between\n   projects.\n\n   We recommend using virtual environments because installing or upgrading a Python package may\n   cause unintentional effects on another package. For a detailed introduction to Python\n   environments, check out\n   [Python Virtual Environments: A Primer](https://realpython.com/python-virtual-environments-a-primer/).\n\n   For this guide, we'll be using `venv`, which comes with Python.\n\n1. **A Python package manager**\n\n   Package managers handle installing each of your Python packages, including Streamlit.\n\n   For this guide, we'll be using `pip`, which comes with Python.\n\n1. **Only on MacOS: Xcode command line tools**\n\n   Download Xcode command line tools using [these instructions](https://mac.install.guide/commandlinetools/4.html)\n   in order to let the package manager install some of Streamlit's dependencies.\n\n1. **A code editor**\n\n   Our favorite editor is [VS Code](https://code.visualstudio.com/download), which is also what we use in\n   all our tutorials.\n\n## Create an environment using `venv`\n\n1. Open a terminal and navigate to your project folder.\n\n   ```bash\n   cd myproject\n   ```\n\n2. In your terminal, type:\n\n   ```bash\n   python -m venv .venv\n   ```\n\n3. A folder named \".venv\" will appear in your project. This directory is where your virtual environment and its dependencies are installed.\n\n## Activate your environment\n\n4. In your terminal, activate your environment with one of the following commands, depending on your operating system.\n\n   ```bash\n   # Windows command prompt\n   .venv\\Scripts\\activate.bat\n\n   # Windows PowerShell\n   .venv\\Scripts\\Activate.ps1\n\n   # macOS and Linux\n   source .venv/bin/activate\n   ```\n\n5. Once activated, you will see your environment name in parentheses before your prompt. \"(.venv)\"\n\n## Install Streamlit in your environment\n\n6. In the terminal with your environment activated, type:\n\n   ```bash\n   pip install streamlit\n   ```\n\n7. Test that the installation worked by launching the Streamlit Hello example app:\n\n   ```bash\n   streamlit hello\n   ```\n\n   If this doesn't work, use the long-form command:\n\n   ```bash\n   python -m streamlit hello\n   ```\n\n8. Streamlit's Hello app should appear in a new tab in your web browser!\n   <Cloud name=\"doc-mpa-hello\" height=\"700px\" />\n9. Close your terminal when you are done.\n\n## Create a \"Hello World\" app and run it\n\n10. Create a file named `app.py` in your project folder.\n\n```python\nimport streamlit as st\n\nst.write(\"Hello world\")\n```\n\n11. Any time you want to use your new environment, you first need to go to your project folder (where the `.venv` directory lives) and run the command to activate it:\n\n```bash\n# Windows command prompt\n.venv\\Scripts\\activate.bat\n\n# Windows PowerShell\n.venv\\Scripts\\Activate.ps1\n\n# macOS and Linux\nsource .venv/bin/activate\n```\n\n12. Once activated, you will see your environment's name in parentheses at the beginning of your terminal prompt. \"(.venv)\"\n\n13. Run your Streamlit app.\n\n```bash\nstreamlit run app.py\n```\n\nIf this doesn't work, use the long-form command:\n\n```bash\npython -m streamlit run app.py\n```\n\n14. To stop the Streamlit server, press `Ctrl+C` in the terminal.\n\n15. When you're done using this environment, return to your normal shell by typing:\n\n```bash\ndeactivate\n```\n\n## What's next?\n\nRead about our [Basic concepts](/get-started/fundamentals/main-concepts) to understand Streamlit's dataflow model."
  },
  {
    "url": "https://docs.streamlit.io/get-started/installation/community-cloud",
    "content": "# Use Community Cloud to develop with GitHub Codespaces\n\nTo use GitHub Codespaces for Streamlit development, you need a properly configured `devcontainer.json` file to set up the environment. Fortunately, Streamlit Community Cloud is here to help! Although Community Cloud is primarily used to deploy and share apps with the rest of the world, we've built in some handy features to make it easy to use GitHub Codespaces. This guide explains how to create a Community Cloud account and use an automated workflow to get you into a GitHub codespace and live-editing a Streamlit app. All this happens right in your browser, no installation required.\n\nIf you already created a Community Cloud account and connected GitHub, jump ahead to [Create a new app from a template](/get-started/installation/community-cloud#create-a-new-app-from-a-template).\n\n## Prerequisites\n\n- You must have a GitHub account.\n\n## Sign up for Streamlit Community Cloud\n\n1. Go to <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>.\n1. Click \"**Continue to sign-in**.\"\n1. Click \"**Continue with GitHub**.\"\n1. Enter your GitHub credentials and follow GitHub's authentication prompts.\n1. Fill in your account information, and click \"**I accept**\" at the bottom.\n\n## Add access to your public repositories\n\n1. In the upper-left corner, click on \"**Workspaces <i style={{ verticalAlign: \"-.25em\", color: \"#ff8700\" }} className={{ class: \"material-icons-sharp\" }}>warning</i>**.\"\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"Connect your GitHub account to a new Community Cloud account\" src=\"/images/streamlit-community-cloud/workspace-unconnected-setup.png\" />\n</div>\n\n1. From the drop down, click \"**Connect GitHub account**.\"\n1. Enter your GitHub credentials and follow GitHub's authentication prompts.\n1. Click \"**Authorize streamlit**.\"\n\n<div style={{ maxWidth: '40%', margin: 'auto' }}>\n<Image alt=\"Authorize Community Cloud to connect to your GitHub account\" src=\"/images/streamlit-community-cloud/GitHub-auth1-none.png\" />\n</div>\n\n## Optional: Add access to private repositories\n\n1. In the upper-left corner, click on your GitHub username.\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"Access your workspace settings\" src=\"/images/streamlit-community-cloud/workspace-empty-menu.png\" />\n</div>\n\n1. From the drop down, click \"**Settings**.\"\n1. On the left side of the dialog, select \"**Linked accounts**.\"\n1. Under \"Source control,\" click \"**Connect here <i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>arrow_forward</i>**.\"\n1. Click \"**Authorize streamlit**.\"\n\n<div style={{ maxWidth: '40%', margin: 'auto' }}>\n<Image alt=\"Authorize Community Cloud to connect to your private GitHub repositories\" src=\"/images/streamlit-community-cloud/GitHub-auth2-none.png\" />\n</div>\n\n## Create a new app from a template\n\n1. In the upper-right corner, click \"**Create app**.\"\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"Create a new app from your workspace in Streamlit Community Cloud\" src=\"/images/streamlit-community-cloud/deploy-empty-new-app.png\" />\n</div>\n\n1. When asked \"Do you already have an app?\" click \"**Nope, create one from a template**.\"\n1. From the list of templates on the left, select \"**Blank app**.\"\n1. At the bottom, select the option to \"**Open GitHub Codespaces...**\"\n1. At the bottom, click \"**Deploy**.\"\n\n## Edit your app in GitHub Codespaces\n\n1. Wait for GitHub to set up your codespace.\n\n   It can take several minutes to fully initialize your codespace. After you see the Visual Studio Code editor in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, you will see a split screen view with a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file.\n\n   <div style={{ maxWidth: '90%', margin: 'auto' }}>\n   <Image alt=\"Your new GitHub Codespace\" src=\"/images/streamlit-community-cloud/deploy-template-blank-codespace.png\" />\n   </div>\n\n1. Go to the app's entrypoint file (`streamlit_app.py`) in the left pane, and change line 3 by adding \"Streamlit\" inside `st.title`.\n\n   ```diff\n   -st.title(\"🎈 My new app\")\n   +st.title(\"🎈 My new Streamlit app\")\n   ```\n\n   Files are automatically saved in your codespace with each edit.\n\n1. A moment after typing a change, your app on the right side will display a rerun prompt. Click \"**Always rerun**.\"\n\n   <div style={{ maxWidth: '90%', margin: 'auto' }}>\n   <Image alt=\"Edit the title of your sample Streamlit app\" src=\"/images/streamlit-community-cloud/deploy-template-blank-codespace-edit.png\" />\n   </div>\n\n   If the rerun prompt disappears before you click it, you can hover over the overflow menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) to bring it back.\n\n1. Optional: Continue to make edits and observe the changes within seconds.\n\n## Publish your changes\n\n1. In the left navigation bar, click the source control icon.\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"See your deployed Streamlit app\" src=\"/images/streamlit-community-cloud/deploy-template-blank-codespace-edit-source-control.png\" />\n</div>\n\n1. In the source control sidebar on the left, enter a name for your commit.\n1. Click \"**<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>check</i> Commit**.\"\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"See your deployed Streamlit app\" src=\"/images/streamlit-community-cloud/deploy-template-blank-codespace-edit-commit.png\" />\n</div>\n\n1. In the confirmation dialog, click \"**Yes**\" to stage and commit all your changes. Your changes are committed locally in your codespace.\n1. In the source control sidebar on the left, click \"**<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>cached</i> 1 <i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>arrow_upward</i>**\" to push your commit to GitHub.\n1. In the confirmation dialog, click \"**OK**\" to push commits to \"origin/main.\"\n\n   Your changes are now saved to your GitHub repository. Community Cloud will immediately reflect the changes in your deployed app.\n\n1. Optional: To see your updated, published app, return to the \"**My apps**\" section of your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, and click on your app.\n\n## Learn Streamlit fundamentals\n\nIf you haven't learned Streamlit's basic concepts yet, this is a great time to go to [Fundamentals](/get-started/fundamentals). Use your codespace to walk through and try basic Streamlit commands. When finished, come back here to learn how to clean up your codespace.\n\n## Stop or delete your codespace\n\nWhen you stop interacting with your codespace, GitHub will generally stop your codespace for you. However, the surest way to avoid undesired use of your capacity is to stop or delete your codespace when you are done.\n\n1. Go to <a href=\"https://github.com/codespaces\" target=\"_blank\">github.com/codespaces</a>. At the bottom of the page, all your codespaces are listed. Click the overflow menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_horiz</i>) for your codespace.\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"Stop or delete your GitHub Codespace\" src=\"/images/streamlit-community-cloud/deploy-hello-codespace-manage.png\" />\n</div>\n\n2. If you want to return to your work later, click \"**Stop codespace**.\" Otherwise, click \"**Delete**.\"\n\n   <div style={{ maxWidth: '40%', margin: 'auto' }}>\n   <Image alt=\"Stop your GitHub codespace\" src=\"/images/streamlit-community-cloud/codespace-menu.png\" />\n   </div>\n\n3. Congratulations! You just deployed an app to Streamlit Community Cloud. 🎉 Return to your workspace at <a href=\"https://share.streamlit.io/\" target=\"_blank\">share.streamlit.io/</a> and [deploy another Streamlit app](/deploy/streamlit-community-cloud/deploy-your-app).\n\n   <div style={{ maxWidth: '90%', margin: 'auto' }}>\n   <Image alt=\"See your deployed Streamlit app\" src=\"/images/streamlit-community-cloud/deploy-template-blank-edited.png\" />\n   </div>"
  },
  {
    "url": "https://docs.streamlit.io/get-started/installation",
    "content": "# Install Streamlit\n\nThere are multiple ways to set up your development environment and install Streamlit. Read below to\nunderstand these options. Developing locally with Python installed on your own computer is the most\ncommon scenario.\n\n## Summary for experts\n\n1. Set up your Python development environment.\n2. Run:\n   ```bash\n   pip install streamlit\n   ```\n3. Validate the installation by running our Hello app:\n   ```bash\n   streamlit hello\n   ```\n4. Jump to our [Basic concepts](/get-started/fundamentals/main-concepts).\n\n## Installation steps for the rest of us\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/get-started/installation/command-line\" size=\"half\">\n\n<h5>Option 1: I'm comfortable with the command line</h5>\n\nInstall Streamlit on your own machine using tools like `venv` and `pip`.\n\n</RefCard>\n\n<RefCard href=\"/get-started/installation/anaconda-distribution\" size=\"half\">\n\n<h5>Option 2: I prefer a graphical interface</h5>\n\nInstall Streamlit using the Anaconda Distribution graphical user interface. This is also the best\napproach if you're on Windows or don't have Python set up.\n\n</RefCard>\n\n<RefCard href=\"/get-started/installation/community-cloud\" size=\"half\">\n\n<h5>Option 3: I'd rather use a cloud-based environment</h5>\n\nUse Streamlit Community Cloud with GitHub Codespaces so you don't have to go through the trouble\nof installing Python and setting up an environment.\n\n</RefCard>\n\n<RefCard href=\"/get-started/installation/streamlit-in-snowflake\" size=\"half\">\n\n<h5>Option 4: I need something secure, controlled, and in the cloud</h5>\n\nUse Streamlit in Snowflake to code your apps in the cloud, right alongside your\ndata with role-based access controls.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app",
    "content": "# Create an app\n\nIf you've made it this far, chances are you've [installed Streamlit](/get-started/installation) and run through the basics in [Basic concepts](/get-started/fundamentals/main-concepts) and [Advanced concepts](/get-started/fundamentals/advanced-concepts). If not, now is a good time to take a look.\n\nThe easiest way to learn how to use Streamlit is to try things out yourself. As you read through this guide, test each method. As long as your app is running, every time you add a new element to your script and save, Streamlit's UI will ask if you'd like to rerun the app and view the changes. This allows you to work in a fast interactive loop: you write some code, save it, review the output, write some more, and so on, until you're happy with the results. The goal is to use Streamlit to create an interactive app for your data or model and along the way to use Streamlit to review, debug, perfect, and share your code.\n\nIn this guide, you're going to use Streamlit's core features to\ncreate an interactive app; exploring a public Uber dataset for pickups and\ndrop-offs in New York City. When you're finished, you'll know how to fetch\nand cache data, draw charts, plot information on a map, and use interactive\nwidgets, like a slider, to filter results.\n\n<Tip>\n\nIf you'd like to skip ahead and see everything at once, the [complete script\nis available below](#lets-put-it-all-together).\n\n</Tip>\n\n## Create your first app\n\nStreamlit is more than just a way to make data apps, it’s also a community of creators that share their apps and ideas and help each other make their work better. Please come join us on the community forum. We love to hear your questions, ideas, and help you work through your bugs — stop by today!\n\n1. The first step is to create a new Python script. Let's call it\n   `uber_pickups.py`.\n\n2. Open `uber_pickups.py` in your favorite IDE or text editor, then add these\n   lines:\n\n   ```python\n   import streamlit as st\n   import pandas as pd\n   import numpy as np\n   ```\n\n3. Every good app has a title, so let's add one:\n\n   ```python\n   st.title('Uber pickups in NYC')\n   ```\n\n4. Now it's time to run Streamlit from the command line:\n\n   ```bash\n   streamlit run uber_pickups.py\n   ```\n\n   Running a Streamlit app is no different than any other Python script. Whenever you need to view the app, you can use this command.\n\n   <Tip>\n\n   Did you know you can also pass a URL to `streamlit run`? This is great when combined with GitHub Gists. For example:\n\n   ```bash\n   streamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py\n   ```\n\n   </Tip>\n\n5. As usual, the app should automatically open in a new tab in your\n   browser.\n\n## Fetch some data\n\nNow that you have an app, the next thing you'll need to do is fetch the Uber\ndataset for pickups and drop-offs in New York City.\n\n1. Let's start by writing a function to load the data. Add this code to your\n   script:\n\n   ```python\n   DATE_COLUMN = 'date/time'\n   DATA_URL = ('https://s3-us-west-2.amazonaws.com/'\n            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\n\n   def load_data(nrows):\n       data = pd.read_csv(DATA_URL, nrows=nrows)\n       lowercase = lambda x: str(x).lower()\n       data.rename(lowercase, axis='columns', inplace=True)\n       data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\n       return data\n   ```\n\n   You'll notice that `load_data` is a plain old function that downloads some\n   data, puts it in a Pandas dataframe, and converts the date column from text\n   to datetime. The function accepts a single parameter (`nrows`), which\n   specifies the number of rows that you want to load into the dataframe.\n\n2. Now let's test the function and review the output. Below your function, add\n   these lines:\n\n   ```python\n   # Create a text element and let the reader know the data is loading.\n   data_load_state = st.text('Loading data...')\n   # Load 10,000 rows of data into the dataframe.\n   data = load_data(10000)\n   # Notify the reader that the data was successfully loaded.\n   data_load_state.text('Loading data...done!')\n   ```\n\n   You'll see a few buttons in the upper-right corner of your app asking if\n   you'd like to rerun the app. Choose **Always rerun**, and you'll see your\n   changes automatically each time you save.\n\nOk, that's underwhelming...\n\nIt turns out that it takes a long time to download data, and load 10,000 lines\ninto a dataframe. Converting the date column into datetime isn’t a quick job\neither. You don’t want to reload the data each time the app is updated –\nluckily Streamlit allows you to cache the data.\n\n## Effortless caching\n\n1. Try adding `@st.cache_data` before the `load_data` declaration:\n\n   ```python\n   @st.cache_data\n   def load_data(nrows):\n   ```\n\n2. Then save the script, and Streamlit will automatically rerun your app. Since\n   this is the first time you’re running the script with `@st.cache_data`, you won't\n   see anything change. Let’s tweak your file a little bit more so that you can\n   see the power of caching.\n\n3. Replace the line `data_load_state.text('Loading data...done!')` with this:\n\n   ```python\n   data_load_state.text(\"Done! (using st.cache_data)\")\n   ```\n\n4. Now save. See how the line you added appeared immediately? If you take a\n   step back for a second, this is actually quite amazing. Something magical is\n   happening behind the scenes, and it only takes one line of code to activate\n   it.\n\n### How's it work?\n\nLet's take a few minutes to discuss how `@st.cache_data` actually works.\n\nWhen you mark a function with Streamlit’s cache annotation, it tells Streamlit\nthat whenever the function is called that it should check two things:\n\n1. The input parameters you used for the function call.\n2. The code inside the function.\n\nIf this is the first time Streamlit has seen both these items, with these exact\nvalues, and in this exact combination, it runs the function and stores the\nresult in a local cache. The next time the function is called, if the two\nvalues haven't changed, then Streamlit knows it can skip executing the function\naltogether. Instead, it reads the output from the local cache and passes it on\nto the caller -- like magic.\n\n\"But, wait a second,\" you’re saying to yourself, \"this sounds too good to be\ntrue. What are the limitations of all this awesomesauce?\"\n\nWell, there are a few:\n\n1. Streamlit will only check for changes within the current working directory.\n   If you upgrade a Python library, Streamlit's cache will only notice this if\n   that library is installed inside your working directory.\n2. If your function is not deterministic (that is, its output depends on random\n   numbers), or if it pulls data from an external time-varying source (for\n   example, a live stock market ticker service) the cached value will be\n   none-the-wiser.\n3. Lastly, you should avoid mutating the output of a function cached with `st.cache_data` since cached\n   values are stored by reference.\n\nWhile these limitations are important to keep in mind, they tend not to be an\nissue a surprising amount of the time. Those times, this cache is really\ntransformational.\n\n<Tip>\n\nWhenever you have a long-running computation in your code, consider\nrefactoring it so you can use `@st.cache_data`, if possible. Please read [Caching](/develop/concepts/architecture/caching) for more details.\n\n</Tip>\n\nNow that you know how caching with Streamlit works, let’s get back to the Uber\npickup data.\n\n## Inspect the raw data\n\nIt's always a good idea to take a look at the raw data you're working with\nbefore you start working with it. Let's add a subheader and a printout of the\nraw data to the app:\n\n```python\nst.subheader('Raw data')\nst.write(data)\n```\n\nIn the [Basic concepts](/get-started/fundamentals/main-concepts) guide you learned that\n[`st.write`](/develop/api-reference/write-magic/st.write) will render almost anything you pass\nto it. In this case, you're passing in a dataframe and it's rendering as an\ninteractive table.\n\n[`st.write`](/develop/api-reference/write-magic/st.write) tries to do the right thing based on\nthe data type of the input. If it isn't doing what you expect you can use a\nspecialized command like [`st.dataframe`](/develop/api-reference/data/st.dataframe)\ninstead. For a full list, see [API reference](/develop/api-reference).\n\n## Draw a histogram\n\nNow that you've had a chance to take a look at the dataset and observe what's\navailable, let's take things a step further and draw a histogram to see what\nUber's busiest hours are in New York City.\n\n1. To start, let's add a subheader just below the raw data section:\n\n   ```python\n   st.subheader('Number of pickups by hour')\n   ```\n\n2. Use NumPy to generate a histogram that breaks down pickup times binned by\n   hour:\n\n   ```python\n   hist_values = np.histogram(\n       data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\n   ```\n\n3. Now, let's use Streamlit's\n   [`st.bar_chart()`](/develop/api-reference/charts/st.bar_chart) method to draw this\n   histogram.\n\n   ```python\n   st.bar_chart(hist_values)\n   ```\n\n4. Save your script. This histogram should show up in your app right away.\n   After a quick review, it looks like the busiest time is 17:00 (5 P.M.).\n\nTo draw this diagram we used Streamlit's native `bar_chart()` method, but it's\nimportant to know that Streamlit supports more complex charting libraries like\nAltair, Bokeh, Plotly, Matplotlib and more. For a full list, see\n[supported charting libraries](/develop/api-reference/charts).\n\n## Plot data on a map\n\nUsing a histogram with Uber's dataset helped us determine what the busiest\ntimes are for pickups, but what if we wanted to figure out where pickups were\nconcentrated throughout the city. While you could use a bar chart to show this\ndata, it wouldn't be easy to interpret unless you were intimately familiar with\nlatitudinal and longitudinal coordinates in the city. To show pickup\nconcentration, let's use Streamlit [`st.map()`](/develop/api-reference/charts/st.map)\nfunction to overlay the data on a map of New York City.\n\n1. Add a subheader for the section:\n\n   ```python\n   st.subheader('Map of all pickups')\n   ```\n\n2. Use the `st.map()` function to plot the data:\n\n   ```python\n   st.map(data)\n   ```\n\n3. Save your script. The map is fully interactive. Give it a try by panning or\n   zooming in a bit.\n\nAfter drawing your histogram, you determined that the busiest hour for Uber\npickups was 17:00. Let's redraw the map to show the concentration of pickups\nat 17:00.\n\n1. Locate the following code snippet:\n\n   ```python\n   st.subheader('Map of all pickups')\n   st.map(data)\n   ```\n\n2. Replace it with:\n\n   ```python\n   hour_to_filter = 17\n   filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\n   st.subheader(f'Map of all pickups at {hour_to_filter}:00')\n   st.map(filtered_data)\n   ```\n\n3. You should see the data update instantly.\n\nTo draw this map we used the [`st.map`](/develop/api-reference/charts/st.map) function that's built into Streamlit, but\nif you'd like to visualize complex map data, we encourage you to take a look at\nthe [`st.pydeck_chart`](/develop/api-reference/charts/st.pydeck_chart).\n\n## Filter results with a slider\n\nIn the last section, when you drew the map, the time used to filter results was\nhardcoded into the script, but what if we wanted to let a reader dynamically\nfilter the data in real time? Using Streamlit's widgets you can. Let's add a\nslider to the app with the `st.slider()` method.\n\n1. Locate `hour_to_filter` and replace it with this code snippet:\n\n   ```python\n   hour_to_filter = st.slider('hour', 0, 23, 17)  # min: 0h, max: 23h, default: 17h\n   ```\n\n2. Use the slider and watch the map update in real time.\n\n## Use a button to toggle data\n\nSliders are just one way to dynamically change the composition of your app.\nLet's use the [`st.checkbox`](/develop/api-reference/widgets/st.checkbox) function to add a\ncheckbox to your app. We'll use this checkbox to show/hide the raw data\ntable at the top of your app.\n\n1. Locate these lines:\n\n   ```python\n   st.subheader('Raw data')\n   st.write(data)\n   ```\n\n2. Replace these lines with the following code:\n\n   ```python\n   if st.checkbox('Show raw data'):\n       st.subheader('Raw data')\n       st.write(data)\n   ```\n\nWe're sure you've got your own ideas. When you're done with this tutorial, check out all the widgets that Streamlit exposes in our [API Reference](/develop/api-reference).\n\n## Let's put it all together\n\nThat's it, you've made it to the end. Here's the complete script for our interactive app.\n\n<Tip>\n\nIf you've skipped ahead, after you've created your script, the command to run\nStreamlit is `streamlit run [app name]`.\n\n</Tip>\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nst.title('Uber pickups in NYC')\n\nDATE_COLUMN = 'date/time'\nDATA_URL = ('https://s3-us-west-2.amazonaws.com/'\n            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\n\n@st.cache_data\ndef load_data(nrows):\n    data = pd.read_csv(DATA_URL, nrows=nrows)\n    lowercase = lambda x: str(x).lower()\n    data.rename(lowercase, axis='columns', inplace=True)\n    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\n    return data\n\ndata_load_state = st.text('Loading data...')\ndata = load_data(10000)\ndata_load_state.text(\"Done! (using st.cache_data)\")\n\nif st.checkbox('Show raw data'):\n    st.subheader('Raw data')\n    st.write(data)\n\nst.subheader('Number of pickups by hour')\nhist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\nst.bar_chart(hist_values)\n\n# Some number in the range 0-23\nhour_to_filter = st.slider('hour', 0, 23, 17)\nfiltered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\n\nst.subheader('Map of all pickups at %s:00' % hour_to_filter)\nst.map(filtered_data)\n```\n\n## Share your app\n\nAfter you’ve built a Streamlit app, it's time to share it! To show it off to the world you can use **Streamlit Community Cloud** to deploy, manage, and share your app for free.\n\nIt works in 3 simple steps:\n\n1. Put your app in a public GitHub repo (and make sure it has a requirements.txt!)\n2. Sign into [share.streamlit.io](https://share.streamlit.io)\n3. Click 'Deploy an app' and then paste in your GitHub URL\n\nThat's it! 🎈 You now have a publicly deployed app that you can share with the world. Click to learn more about [how to use Streamlit Community Cloud](/deploy/streamlit-community-cloud).\n\n## Get help\n\nThat's it for getting started, now you can go and build your own apps! If you\nrun into difficulties here are a few things you can do.\n\n- Check out our [community forum](https://discuss.streamlit.io/) and post a question\n- Quick help from command line with `streamlit help`\n- Go through our [Knowledge Base](/knowledge-base) for tips, step-by-step tutorials, and articles that answer your questions about creating and deploying Streamlit apps.\n- Read more documentation! Check out:\n  - [Concepts](/develop/concepts) for things like caching, theming, and adding statefulness to apps.\n  - [API reference](/develop/api-reference/) for examples of every Streamlit command."
  },
  {
    "url": "https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app",
    "content": "# Create a multipage app\n\nIn [Additional features](/get-started/fundamentals/additional-features), we introduced multipage apps, including how to define pages, structure and run multipage apps, and navigate between pages in the user interface. You can read more details in our guide to [Multipage apps](/develop/concepts/multipage-apps)\n\nIn this guide, let’s put our understanding of multipage apps to use by converting the previous version of our `streamlit hello` app to a multipage app!\n\n## Motivation\n\nBefore Streamlit 1.10.0, the streamlit hello command was a large single-page app. As there was no support for multiple pages, we resorted to splitting the app's content using `st.selectbox` in the sidebar to choose what content to run. The content is comprised of three demos for plotting, mapping, and dataframes.\n\nHere's what the code and single-page app looked like:\n\n<details>\n<summary><b><code>hello.py</code></b>  (👈 Toggle to expand)</summary>\n<br />\n\n```python\nimport streamlit as st\n\ndef intro():\n    import streamlit as st\n\n    st.write(\"# Welcome to Streamlit! 👋\")\n    st.sidebar.success(\"Select a demo above.\")\n\n    st.markdown(\n        \"\"\"\n        Streamlit is an open-source app framework built specifically for\n        Machine Learning and Data Science projects.\n\n        **👈 Select a demo from the dropdown on the left** to see some examples\n        of what Streamlit can do!\n\n        ### Want to learn more?\n\n        - Check out [streamlit.io](https://streamlit.io)\n        - Jump into our [documentation](https://docs.streamlit.io)\n        - Ask a question in our [community\n          forums](https://discuss.streamlit.io)\n\n        ### See more complex demos\n\n        - Use a neural net to [analyze the Udacity Self-driving Car Image\n          Dataset](https://github.com/streamlit/demo-self-driving)\n        - Explore a [New York City rideshare dataset](https://github.com/streamlit/demo-uber-nyc-pickups)\n    \"\"\"\n    )\n\ndef mapping_demo():\n    import streamlit as st\n    import pandas as pd\n    import pydeck as pdk\n\n    from urllib.error import URLError\n\n    st.markdown(f\"# {list(page_names_to_funcs.keys())[2]}\")\n    st.write(\n        \"\"\"\n        This demo shows how to use\n[`st.pydeck_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart)\nto display geospatial data.\n\"\"\"\n    )\n\n    @st.cache_data\n    def from_data_file(filename):\n        url = (\n            \"http://raw.githubusercontent.com/streamlit/\"\n            \"example-data/master/hello/v1/%s\" % filename\n        )\n        return pd.read_json(url)\n\n    try:\n        ALL_LAYERS = {\n            \"Bike Rentals\": pdk.Layer(\n                \"HexagonLayer\",\n                data=from_data_file(\"bike_rental_stats.json\"),\n                get_position=[\"lon\", \"lat\"],\n                radius=200,\n                elevation_scale=4,\n                elevation_range=[0, 1000],\n                extruded=True,\n            ),\n            \"Bart Stop Exits\": pdk.Layer(\n                \"ScatterplotLayer\",\n                data=from_data_file(\"bart_stop_stats.json\"),\n                get_position=[\"lon\", \"lat\"],\n                get_color=[200, 30, 0, 160],\n                get_radius=\"[exits]\",\n                radius_scale=0.05,\n            ),\n            \"Bart Stop Names\": pdk.Layer(\n                \"TextLayer\",\n                data=from_data_file(\"bart_stop_stats.json\"),\n                get_position=[\"lon\", \"lat\"],\n                get_text=\"name\",\n                get_color=[0, 0, 0, 200],\n                get_size=15,\n                get_alignment_baseline=\"'bottom'\",\n            ),\n            \"Outbound Flow\": pdk.Layer(\n                \"ArcLayer\",\n                data=from_data_file(\"bart_path_stats.json\"),\n                get_source_position=[\"lon\", \"lat\"],\n                get_target_position=[\"lon2\", \"lat2\"],\n                get_source_color=[200, 30, 0, 160],\n                get_target_color=[200, 30, 0, 160],\n                auto_highlight=True,\n                width_scale=0.0001,\n                get_width=\"outbound\",\n                width_min_pixels=3,\n                width_max_pixels=30,\n            ),\n        }\n        st.sidebar.markdown(\"### Map Layers\")\n        selected_layers = [\n            layer\n            for layer_name, layer in ALL_LAYERS.items()\n            if st.sidebar.checkbox(layer_name, True)\n        ]\n        if selected_layers:\n            st.pydeck_chart(\n                pdk.Deck(\n                    map_style=\"mapbox://styles/mapbox/light-v9\",\n                    initial_view_state={\n                        \"latitude\": 37.76,\n                        \"longitude\": -122.4,\n                        \"zoom\": 11,\n                        \"pitch\": 50,\n                    },\n                    layers=selected_layers,\n                )\n            )\n        else:\n            st.error(\"Please choose at least one layer above.\")\n    except URLError as e:\n        st.error(\n            \"\"\"\n            **This demo requires internet access.**\n\n            Connection error: %s\n        \"\"\"\n            % e.reason\n        )\n\ndef plotting_demo():\n    import streamlit as st\n    import time\n    import numpy as np\n\n    st.markdown(f'# {list(page_names_to_funcs.keys())[1]}')\n    st.write(\n        \"\"\"\n        This demo illustrates a combination of plotting and animation with\nStreamlit. We're generating a bunch of random numbers in a loop for around\n5 seconds. Enjoy!\n\"\"\"\n    )\n\n    progress_bar = st.sidebar.progress(0)\n    status_text = st.sidebar.empty()\n    last_rows = np.random.randn(1, 1)\n    chart = st.line_chart(last_rows)\n\n    for i in range(1, 101):\n        new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)\n        status_text.text(\"%i%% Complete\" % i)\n        chart.add_rows(new_rows)\n        progress_bar.progress(i)\n        last_rows = new_rows\n        time.sleep(0.05)\n\n    progress_bar.empty()\n\n    # Streamlit widgets automatically run the script from top to bottom. Since\n    # this button is not connected to any other logic, it just causes a plain\n    # rerun.\n    st.button(\"Re-run\")\n\n\ndef data_frame_demo():\n    import streamlit as st\n    import pandas as pd\n    import altair as alt\n\n    from urllib.error import URLError\n\n    st.markdown(f\"# {list(page_names_to_funcs.keys())[3]}\")\n    st.write(\n        \"\"\"\n        This demo shows how to use `st.write` to visualize Pandas DataFrames.\n\n(Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).)\n\"\"\"\n    )\n\n    @st.cache_data\n    def get_UN_data():\n        AWS_BUCKET_URL = \"http://streamlit-demo-data.s3-us-west-2.amazonaws.com\"\n        df = pd.read_csv(AWS_BUCKET_URL + \"/agri.csv.gz\")\n        return df.set_index(\"Region\")\n\n    try:\n        df = get_UN_data()\n        countries = st.multiselect(\n            \"Choose countries\", list(df.index), [\"China\", \"United States of America\"]\n        )\n        if not countries:\n            st.error(\"Please select at least one country.\")\n        else:\n            data = df.loc[countries]\n            data /= 1000000.0\n            st.write(\"### Gross Agricultural Production ($B)\", data.sort_index())\n\n            data = data.T.reset_index()\n            data = pd.melt(data, id_vars=[\"index\"]).rename(\n                columns={\"index\": \"year\", \"value\": \"Gross Agricultural Product ($B)\"}\n            )\n            chart = (\n                alt.Chart(data)\n                .mark_area(opacity=0.3)\n                .encode(\n                    x=\"year:T\",\n                    y=alt.Y(\"Gross Agricultural Product ($B):Q\", stack=None),\n                    color=\"Region:N\",\n                )\n            )\n            st.altair_chart(chart, use_container_width=True)\n    except URLError as e:\n        st.error(\n            \"\"\"\n            **This demo requires internet access.**\n\n            Connection error: %s\n        \"\"\"\n            % e.reason\n        )\n\npage_names_to_funcs = {\n    \"—\": intro,\n    \"Plotting Demo\": plotting_demo,\n    \"Mapping Demo\": mapping_demo,\n    \"DataFrame Demo\": data_frame_demo\n}\n\ndemo_name = st.sidebar.selectbox(\"Choose a demo\", page_names_to_funcs.keys())\npage_names_to_funcs[demo_name]()\n```\n\n</details>\n\n<Cloud name=\"doc-hello\" height=\"700px\" />\n\nNotice how large the file is! Each app “page\" is written as a function, and the selectbox is used to pick which page to display. As our app grows, maintaining the code requires a lot of additional overhead. Moreover, we’re limited by the `st.selectbox` UI to choose which “page\" to run, we cannot customize individual page titles with `st.set_page_config`, and we’re unable to navigate between pages using URLs.\n\n## Convert an existing app into a multipage app\n\nNow that we've identified the limitations of a single-page app, what can we do about it? Armed with our knowledge from the previous section, we can convert the existing app to be a multipage app, of course! At a high level, we need to perform the following steps:\n\n1. Create a new `pages` folder in the same folder where the “entrypoint file\" (`hello.py`) lives\n2. Rename our entrypoint file to `Hello.py` , so that the title in the sidebar is capitalized\n3. Create three new files inside of `pages`:\n   - `pages/1_📈_Plotting_Demo.py`\n   - `pages/2_🌍_Mapping_Demo.py`\n   - `pages/3_📊_DataFrame_Demo.py`\n4. Move the contents of the `plotting_demo`, `mapping_demo`, and `data_frame_demo` functions into their corresponding new files from Step 3\n5. Run `streamlit run Hello.py` to view your newly converted multipage app!\n\nNow, let’s walk through each step of the process and view the corresponding changes in code.\n\n## Create the entrypoint file\n\n<details open>\n<summary><code>Hello.py</code></summary>\n\n```python\nimport streamlit as st\n\nst.set_page_config(\n    page_title=\"Hello\",\n    page_icon=\"👋\",\n)\n\nst.write(\"# Welcome to Streamlit! 👋\")\n\nst.sidebar.success(\"Select a demo above.\")\n\nst.markdown(\n    \"\"\"\n    Streamlit is an open-source app framework built specifically for\n    Machine Learning and Data Science projects.\n    **👈 Select a demo from the sidebar** to see some examples\n    of what Streamlit can do!\n    ### Want to learn more?\n    - Check out [streamlit.io](https://streamlit.io)\n    - Jump into our [documentation](https://docs.streamlit.io)\n    - Ask a question in our [community\n        forums](https://discuss.streamlit.io)\n    ### See more complex demos\n    - Use a neural net to [analyze the Udacity Self-driving Car Image\n        Dataset](https://github.com/streamlit/demo-self-driving)\n    - Explore a [New York City rideshare dataset](https://github.com/streamlit/demo-uber-nyc-pickups)\n\"\"\"\n)\n```\n\n</details>\n<br />\n\nWe rename our entrypoint file to `Hello.py` , so that the title in the sidebar is capitalized and only the code for the intro page is included. Additionally, we’re able to customize the page title and favicon — as it appears in the browser tab with `st.set_page_config`. We can do so for each of our pages too!\n\n<Image src=\"/images/mpa-hello.png\" />\n\nNotice how the sidebar does not contain page labels as we haven’t created any pages yet.\n\n## Create multiple pages\n\nA few things to remember here:\n\n1. We can change the ordering of pages in our MPA by adding numbers to the beginning of each Python file. If we add a 1 to the front of our file name, Streamlit will put that file first in the list.\n2. The name of each Streamlit app is determined by the file name, so to change the app name you need to change the file name!\n3. We can add some fun to our app by adding emojis to our file names that will render in our Streamlit app.\n4. Each page will have its own URL, defined by the name of the file.\n\nCheck out how we do all this below! For each new page, we create a new file inside the pages folder, and add the appropriate demo code into it.\n\n<br />\n\n<details>\n\n<summary><code>pages/1_📈_Plotting_Demo.py</code></summary>\n\n```python\nimport streamlit as st\nimport time\nimport numpy as np\n\nst.set_page_config(page_title=\"Plotting Demo\", page_icon=\"📈\")\n\nst.markdown(\"# Plotting Demo\")\nst.sidebar.header(\"Plotting Demo\")\nst.write(\n    \"\"\"This demo illustrates a combination of plotting and animation with\nStreamlit. We're generating a bunch of random numbers in a loop for around\n5 seconds. Enjoy!\"\"\"\n)\n\nprogress_bar = st.sidebar.progress(0)\nstatus_text = st.sidebar.empty()\nlast_rows = np.random.randn(1, 1)\nchart = st.line_chart(last_rows)\n\nfor i in range(1, 101):\n    new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)\n    status_text.text(\"%i%% Complete\" % i)\n    chart.add_rows(new_rows)\n    progress_bar.progress(i)\n    last_rows = new_rows\n    time.sleep(0.05)\n\nprogress_bar.empty()\n\n# Streamlit widgets automatically run the script from top to bottom. Since\n# this button is not connected to any other logic, it just causes a plain\n# rerun.\nst.button(\"Re-run\")\n```\n\n</details>\n\n<Image src=\"/images/mpa-plotting-demo.png\" />\n\n<details>\n<summary><code>pages/2_🌍_Mapping_Demo.py</code></summary>\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport pydeck as pdk\nfrom urllib.error import URLError\n\nst.set_page_config(page_title=\"Mapping Demo\", page_icon=\"🌍\")\n\nst.markdown(\"# Mapping Demo\")\nst.sidebar.header(\"Mapping Demo\")\nst.write(\n    \"\"\"This demo shows how to use\n[`st.pydeck_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart)\nto display geospatial data.\"\"\"\n)\n\n\n@st.cache_data\ndef from_data_file(filename):\n    url = (\n        \"http://raw.githubusercontent.com/streamlit/\"\n        \"example-data/master/hello/v1/%s\" % filename\n    )\n    return pd.read_json(url)\n\n\ntry:\n    ALL_LAYERS = {\n        \"Bike Rentals\": pdk.Layer(\n            \"HexagonLayer\",\n            data=from_data_file(\"bike_rental_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            radius=200,\n            elevation_scale=4,\n            elevation_range=[0, 1000],\n            extruded=True,\n        ),\n        \"Bart Stop Exits\": pdk.Layer(\n            \"ScatterplotLayer\",\n            data=from_data_file(\"bart_stop_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            get_color=[200, 30, 0, 160],\n            get_radius=\"[exits]\",\n            radius_scale=0.05,\n        ),\n        \"Bart Stop Names\": pdk.Layer(\n            \"TextLayer\",\n            data=from_data_file(\"bart_stop_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            get_text=\"name\",\n            get_color=[0, 0, 0, 200],\n            get_size=15,\n            get_alignment_baseline=\"'bottom'\",\n        ),\n        \"Outbound Flow\": pdk.Layer(\n            \"ArcLayer\",\n            data=from_data_file(\"bart_path_stats.json\"),\n            get_source_position=[\"lon\", \"lat\"],\n            get_target_position=[\"lon2\", \"lat2\"],\n            get_source_color=[200, 30, 0, 160],\n            get_target_color=[200, 30, 0, 160],\n            auto_highlight=True,\n            width_scale=0.0001,\n            get_width=\"outbound\",\n            width_min_pixels=3,\n            width_max_pixels=30,\n        ),\n    }\n    st.sidebar.markdown(\"### Map Layers\")\n    selected_layers = [\n        layer\n        for layer_name, layer in ALL_LAYERS.items()\n        if st.sidebar.checkbox(layer_name, True)\n    ]\n    if selected_layers:\n        st.pydeck_chart(\n            pdk.Deck(\n                map_style=\"mapbox://styles/mapbox/light-v9\",\n                initial_view_state={\n                    \"latitude\": 37.76,\n                    \"longitude\": -122.4,\n                    \"zoom\": 11,\n                    \"pitch\": 50,\n                },\n                layers=selected_layers,\n            )\n        )\n    else:\n        st.error(\"Please choose at least one layer above.\")\nexcept URLError as e:\n    st.error(\n        \"\"\"\n        **This demo requires internet access.**\n        Connection error: %s\n    \"\"\"\n        % e.reason\n    )\n```\n\n</details>\n\n<Image src=\"/images/mpa-mapping-demo.png\" />\n\n<details>\n<summary><code>pages/3_📊_DataFrame_Demo.py</code></summary>\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\nfrom urllib.error import URLError\n\nst.set_page_config(page_title=\"DataFrame Demo\", page_icon=\"📊\")\n\nst.markdown(\"# DataFrame Demo\")\nst.sidebar.header(\"DataFrame Demo\")\nst.write(\n    \"\"\"This demo shows how to use `st.write` to visualize Pandas DataFrames.\n(Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).)\"\"\"\n)\n\n\n@st.cache_data\ndef get_UN_data():\n    AWS_BUCKET_URL = \"http://streamlit-demo-data.s3-us-west-2.amazonaws.com\"\n    df = pd.read_csv(AWS_BUCKET_URL + \"/agri.csv.gz\")\n    return df.set_index(\"Region\")\n\n\ntry:\n    df = get_UN_data()\n    countries = st.multiselect(\n        \"Choose countries\", list(df.index), [\"China\", \"United States of America\"]\n    )\n    if not countries:\n        st.error(\"Please select at least one country.\")\n    else:\n        data = df.loc[countries]\n        data /= 1000000.0\n        st.write(\"### Gross Agricultural Production ($B)\", data.sort_index())\n\n        data = data.T.reset_index()\n        data = pd.melt(data, id_vars=[\"index\"]).rename(\n            columns={\"index\": \"year\", \"value\": \"Gross Agricultural Product ($B)\"}\n        )\n        chart = (\n            alt.Chart(data)\n            .mark_area(opacity=0.3)\n            .encode(\n                x=\"year:T\",\n                y=alt.Y(\"Gross Agricultural Product ($B):Q\", stack=None),\n                color=\"Region:N\",\n            )\n        )\n        st.altair_chart(chart, use_container_width=True)\nexcept URLError as e:\n    st.error(\n        \"\"\"\n        **This demo requires internet access.**\n        Connection error: %s\n    \"\"\"\n        % e.reason\n    )\n```\n\n</details>\n\n<Image src=\"/images/mpa-dataframe-demo.png\" />\n\nWith our additional pages created, we can now put it all together in the final step below.\n\n## Run the multipage app\n\nTo run your newly converted multipage app, run:\n\n```bash\nstreamlit run Hello.py\n```\n\nThat’s it! The `Hello.py` script now corresponds to the main page of your app, and other scripts that Streamlit finds in the pages folder will also be present in the new page selector that appears in the sidebar.\n\n<Cloud name=\"doc-mpa-hello\" height=\"700px\" />\n\n## Next steps\n\nCongratulations! 🎉 If you've read this far, chances are you've learned to create both single-page and multipage apps. Where you go from here is entirely up to your creativity! We’re excited to see what you’ll build now that adding additional pages to your apps is easier than ever. Try adding more pages to the app we've just built as an exercise. Also, stop by the forum to show off your multipage apps with the Streamlit community! 🎈\n\nHere are a few resources to help you get started:\n\n- Deploy your app for free on Streamlit's [Community Cloud](/deploy/streamlit-community-cloud).\n- Post a question or share your multipage app on our [community forum](https://discuss.streamlit.io/c/streamlit-examples/9).\n- Check out our documentation on [Multipage apps](/develop/concepts/multipage-apps).\n- Read through [Concepts](/develop/concepts) for things like caching, theming, and adding statefulness to apps.\n- Browse our [API reference](/develop/api-reference/) for examples of every Streamlit command."
  },
  {
    "url": "https://docs.streamlit.io/get-started/tutorials",
    "content": "# First steps building Streamlit apps\n\nIf you've just read through our [Basic concepts](/get-started/fundamentals/main-concepts) and want to get your hands on Streamlit. Check out these tutorials. Make sure you have [installed Streamlit](/get-started/installation) so you can execute the code yourself.\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"orange-70\"\n        icon=\"description\"\n        bold=\"Create an app\"\n        href=\"/get-started/tutorials/create-an-app\"\n    >uses the concepts learned in Fundamentals along with caching to walk through making your first app.</InlineCallout>\n    <InlineCallout\n        color=\"orange-70\"\n        icon=\"auto_stories\"\n        bold=\"Create a multipage app\"\n        href=\"/get-started/tutorials/create-a-multipage-app\"\n    >walks through the easy steps to add pages to your app.</InlineCallout>\n</InlineCalloutContainer>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status",
    "content": "# Status and limitations of Community Cloud\n\n## Community Cloud Status\n\nYou can view the current status of Community Cloud at [streamlitstatus.com](https://www.streamlitstatus.com/).\n\n## GitHub OAuth scope\n\nTo deploy your app, Streamlit requires access to your app's source code in GitHub and the ability to manage the public keys associated with your repositories. The default GitHub OAuth scopes are sufficient to work with apps in public GitHub repositories. However, to access your private repositories, we create a read-only [GitHub Deploy Key](https://docs.github.com/en/free-pro-team@latest/developers/overview/managing-deploy-keys#deploy-keys) and then access your repo using an SSH key. When we create this key, GitHub notifies repo admins of the creation as a security measure.\n\nStreamlit requires the additional `repo` OAuth scope from GitHub to work with your private repos and manage deploy keys. We recognize that the `repo` scope provides Streamlit with extra permissions that we do not really need and which, as people who prize security, we'd rather not even be granted. This was the permission model available from GitHub when Community Cloud was created. However, we are working on adopting the new GitHub permission model to reduce uneeded permissions.\n\n### Developer permissions\n\nBecause of the OAuth limitations noted above, a developer must have administrative permissions to a repository to deploy apps from it.\n\n## Repository file structure\n\nYou can deploy multiple apps from your repository, and your entrypoint file(s) may be anywhere in your directory structure. However, Community Cloud initializes all apps from the root of your repository, even if the entrypoint file is in a subdirectory. This has the following consequences:\n\n- Community Cloud only recognizes one `.streamlit/configuration.toml` file at the root (of each branch) of your repository.\n- You must declare image, video, and audio file paths for Streamlit commands relative to the root of your repository. For example, `st.image`, `st.logo`, and the `page_icon` parameter in `st.set_page_config` expect file locations relative to your working directory (i.e. where you execute `streamlit run`).\n\n## Linux environments\n\nCommunity Cloud is built on Debian Linux.\n\n- Community Cloud uses Debian 11 (\"bullseye\"). To browse available packages that can be installed, see the [package list](https://packages.debian.org/bullseye/).\n- All file paths must use forward-slash path separators.\n\n## Python environments\n\n- You cannot mix and match Python package managers for a single app. Community Cloud configures your app's Python environment based on the first environment configuration file it finds. For more information, see [Other Python package managers](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#other-python-package-managers).\n- We recommend that you use the latest version of Streamlit to ensure full Community Cloud functionality. Be sure to take note of Streamlit's [current requirements](https://github.com/streamlit/streamlit/blob/develop/lib/setup.py) for package compatibility when planning your environment, especially `protobuf>=3.20,<6`.\n- If you pin `streamlit< 1.20.0`, you must also pin `altair<5`. Earlier versions of Streamlit did not correctly restrict Altair's version. A workaround script running on Community Cloud will forcibly install `altair<5` if a newer version is detected. This could unintentionally upgrade Altair's dependencies in violation of your environment configuration. Newer versions of Streamlit support Altair version 5.\n- Community Cloud only supports released versions of Python that are still receiving security updates. You may not use end-of-life, prerelease, or feature versions of Python. For more information, see [Status of Python versions](https://devguide.python.org/versions/).\n\n## Configuration\n\nThe following configuration options are set within Community Cloud and will override any contrary setting in your `config.toml` file:\n\n```toml\n[client]\nshowErrorDetails = false\n\n[runner]\nfastReruns = true\n\n[server]\nrunOnSave = true\nenableXsrfProtection = true\n\n[browser]\ngatherUsageStats = true\n```\n\n## IP addresses\n\nIf you need to whitelist IP addresses for a connection, Community Cloud is currently served from the following IP addresses:\n\n<Warning>\n\n    These IP addresses may change at any time without notice.\n\n</Warning>\n\n<Flex wrap >\n    <div style={{ width: \"150px\" }}>35.230.127.150</div>\n    <div style={{ width: \"150px\" }}>35.203.151.101</div>\n    <div style={{ width: \"150px\" }}>34.19.100.134</div>\n    <div style={{ width: \"150px\" }}>34.83.176.217</div>\n    <div style={{ width: \"150px\" }}>35.230.58.211</div>\n    <div style={{ width: \"150px\" }}>35.203.187.165</div>\n    <div style={{ width: \"150px\" }}>35.185.209.55</div>\n    <div style={{ width: \"150px\" }}>34.127.88.74</div>\n    <div style={{ width: \"150px\" }}>34.127.0.121</div>\n    <div style={{ width: \"150px\" }}>35.230.78.192</div>\n    <div style={{ width: \"150px\" }}>35.247.110.67</div>\n    <div style={{ width: \"150px\" }}>35.197.92.111</div>\n    <div style={{ width: \"150px\" }}>34.168.247.159</div>\n    <div style={{ width: \"150px\" }}>35.230.56.30</div>\n    <div style={{ width: \"150px\" }}>34.127.33.101</div>\n    <div style={{ width: \"150px\" }}>35.227.190.87</div>\n    <div style={{ width: \"150px\" }}>35.199.156.97</div>\n    <div style={{ width: \"150px\" }}>34.82.135.155</div>\n</Flex>\n\n## Other limitations\n\n- When you print something to the Cloud logs, you may need to do a `sys.stdout.flush()` before it shows up.\n- Community Cloud hosts all apps in the United States. This is currently not configurable.\n- Community Cloud rate limits app updates from GitHub to no more than five per minute."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud",
    "content": "# Welcome to Streamlit Community Cloud\n\nWith Streamlit Community Cloud, you can create, deploy, and manage your Streamlit apps &mdash; all for free. Share your apps with the world and build a customized profile page to display your work. Your Community Cloud account connects directly to your GitHub repositories (public or private). Most apps will launch in only a few minutes. Community Cloud handles all of the containerization, so deploying is easy. Bring your own code, or start from one of our popular templates. Rapidly prototype, explore, and update apps by simply changing your code in GitHub. Most changes appear immediately!\n\nWant to avoid the work of setting up a local development environment? Community Cloud can help you quickly configure a codespace to develop in the cloud. Start coding or editing a Streamlit app with just a few clicks. See [Edit your app](/deploy/streamlit-community-cloud/manage-your-app/edit-your-app).\n\nGo to our [Community Cloud quickstart](/deploy/streamlit-community-cloud/get-started/quickstart) to speed-run through creating your account, deploying an example app, and editing it using GitHub Codespaces. If you haven't built your first Streamlit app yet, see [Get started with Streamlit](/get-started).\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"arrow_forward\"\n        bold=\"Get started.\"\n        href=\"/deploy/streamlit-community-cloud/get-started\"\n    >Learn about Streamlit Community Cloud accounts and how to create one.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"flight_takeoff\"\n        bold=\"Deploy your app.\"\n        href=\"/deploy/streamlit-community-cloud/deploy-your-app\"\n    >A step-by-step guide on how to get your app deployed.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"settings\"\n        bold=\"Manage your app.\"\n        href=\"/deploy/streamlit-community-cloud/manage-your-app\"\n    >Access logs, reboot apps, set favorites, and more. Jump into a GitHub codespace to edit your app in the cloud.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"share\"\n        bold=\"Share your app.\"\n        href=\"/deploy/streamlit-community-cloud/share-your-app\"\n    >Share or embed your app.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"manage_accounts\"\n        bold=\"Manage your account.\"\n        href=\"/deploy/streamlit-community-cloud/manage-your-account\"\n    >Update your email, manage connections, or delete your account.</InlineCallout>\n</InlineCalloutContainer>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/snowflake",
    "content": "# Deploy Streamlit apps in Snowflake\n\nHost your apps alongside your data in a single, global platform. Snowflake provides industry-leading features that ensure the highest levels of security for your account, users, data, and apps. If you're looking for an enterprise hosting solution, try Snowflake!\n\n<TileContainer>\n    <Tile\n        icon=\"rocket_launch\"\n        title=\"Streamlit in Snowflake Quickstart\"\n        text=\"Create a free trial account and deploy an app with Streamlit in Snowflake.\"\n        link=\"/get-started/installation/streamlit-in-snowflake\"\n        background=\"lightBlue-70\"\n    />\n    <Tile\n        icon=\"code\"\n        title=\"Examples\"\n        text=\"Explore a wide variety of example apps in Snowflake Labs' snowflake-demo-streamlit repository.\"\n        link=\"https://github.com/Snowflake-Labs/snowflake-demo-streamlit\"\n        background=\"lightBlue-70\"\n    />\n    <Tile\n        icon=\"book\"\n        title=\"Get started with Snowflake\"\n        text=\"Learn more in Snowflake's documentation.\"\n        link=\"https://docs.snowflake.com/user-guide-getting-started\"\n        background=\"lightBlue-70\"\n    />\n</TileContainer>\n\nThere are three ways to host Streamlit apps in Snowflake:\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"bolt\"\n        bold=\"Streamlit in Snowflake.\"\n        href=\"https://docs.snowflake.com/developer-guide/streamlit/about-streamlit\"\n    >Run your Streamlit app as a native object in Snowflake. Enjoy an in-browser editor and minimal work to configure your environment. Share your app with other users in your Snowflake account through role-based access control (RBAC). This is a great way to deploy apps internally for your business. Check out Snowflake docs!</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"ac_unit\"\n        bold=\"Snowflake Native Apps.\"\n        href=\"https://docs.snowflake.com/en/developer-guide/native-apps/adding-streamlit\"\n    >Package your app with data and share it with other Snowflake accounts. This is a great way to share apps and their underlying data with other organizations who use Snowflake. Check out Snowflake docs!</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"web_asset\"\n        bold=\"Snowpark Container Services.\"\n        href=\"https://docs.snowflake.com/en/developer-guide/snowpark-container-services/overview\"\n    >Deploy your app in a container that's optimized to run in Snowflake. This is the most flexible option, where you can use any library and assign a public URL to your app. Manage your allowed viewers through your Snowflake account. Check out Snowflake docs!</InlineCallout>\n</InlineCalloutContainer>\n\n<Note>\n\n    Using Snowpark Container Services to deploy a Streamlit app requires a compute pool, which is not available in a trial account at this time.\n\n</Note>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/concepts/secrets",
    "content": "# Managing secrets when deploying your app\n\nIf you are connecting to data sources or external services, you will likely be handling secret information like credentials or keys. Secret information should be stored and transmitted in a secure manner. When you deploy your app, ensure that you understand your platform's features and mechanisms for handling secrets so you can follow best practice.\n\nAvoid saving secrets directly in your code and keep `.gitignore` updated to prevent accidentally committing a local secret to your repository. For helpful reminders, see [Security reminders](/develop/concepts/connections/security-reminders).\n\nIf you are using Streamlit Community Cloud, [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management) allows you save environment variables and store secrets outside of your code. If you are using another platform designed for Streamlit, check if they have a built-in mechanism for working with secrets. In some cases, they may even support `st.secrets` or securely uploading your `secrets.toml` file.\n\nFor information about using `st.connection` with environment variables, see [Global secrets, managing multiple apps and multiple data stores](/develop/concepts/connections/connecting-to-data#global-secrets-managing-multiple-apps-and-multiple-data-stores)."
  },
  {
    "url": "https://docs.streamlit.io/deploy/concepts/dependencies",
    "content": "# Managing dependencies when deploying your app\n\nBefore you began developing your app, you set up and configured your development environment by installing Python and Streamlit. When you deploy your app, you need to set up and configure your deployment environment in the same way. When you deploy your app to a cloud service, your app's [Python server](/develop/concepts/architecture/architecture#python-backend-server) will be running on a remote machine. This remote machine will not have access all the files and programs on your personal computer.\n\nAll Streamlit apps have at least two dependencies: Python and Streamlit. Your app may have additional dependencies in the form of Python packages or software that must be installed to properly execute your script. If you are using a service like Streamlit Community Cloud which is designed for Streamlit apps, we'll take care of Python and Streamlit for you!\n\n## Install Python and other software\n\nIf you are using Streamlit Community Cloud, Python is already installed. You can just pick the version in the deployment dialog. If you need to install Python yourself or you have other non-Python software to install, follow your platform's instructions to install additional software. You will commonly use a package management tool to do this.\nFor example, Streamlit Community Cloud uses Advanced Package Tool (`apt`) for Debian-based Linux systems. For more information about installing non-Python depencies on Streamlit Community Cloud, see [`apt-get` dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#apt-get-dependencies).\n\n## Install Python packages\n\nOnce you have Python installed in your deployment environment, you'll need to install all the necessary Python packages, including Streamlit! With each `import` of an installed package, you add a Python dependency to your script. You need to install those dependencies in your deployment environment through a Python package manager.\n\nIf you are using Streamlit Community Cloud, you'll have the latest version of Streamlit and all of its dependencies installed by default. So, if you're making a simple app and don't need additional dependencies, you won't have to do anything at all!\n\n### `pip` and `requirements.txt`\n\nSince `pip` comes by default with Python, the most common way to configure your Python environment is with a `requirements.txt` file. Each line of a `requirements.txt` file is a package to `pip install`. You should _not_ include <a href=\"https://docs.python.org/3/py-modindex.html\" target=\"_blank\">built-in Python libraries</a> like `math`, `random`, or `distutils` in your `requirements.txt` file. These are a part of Python and aren't installed separately.\n\n<Tip>\n\nSince dependencies may rely on a specific version of Python, always be aware of the Python version used in your development environment, and select the same version for your deployment environment.\n\n</Tip>\n\nIf you have a script like the following, you would only need to install Streamlit. No extra dependencies would be needed since `pandas` and `numpy` are installed as direct dependencies of `streamlit`. Similarly, `math` and `random` are built into Python.\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport math\nimport random\n\nst.write('Hi!')\n```\n\nHowever, it's a best practice accurately record packages you use, so the recommended `requirements.txt` file would be:\n\n```none\nstreamlit\npandas\nnumpy\n```\n\nIf you needed to specify certain versions, another valid example would be:\n\n```none\nstreamlit==1.24.1\npandas>2.0\nnumpy<=1.25.1\n```\n\nA `requirements.txt` file is commonly saved in the root of your repository or file directory. If you are using Streamlit Community Cloud, see [Add Python dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies) for more information. Otherwise, check your platform's documentation."
  },
  {
    "url": "https://docs.streamlit.io/deploy/concepts",
    "content": "# Deployment concepts\n\nLearn the fundamental concepts of app deployment. There are three main processes involved in deploying apps.\n\n- Install Python, Streamlit, and other dependencies in your deployment environment.\n- Securely handle your secrets and private information.\n- Remote start your app (`streamlit run`).\n\nIf you're using Streamlit Community Cloud, we'll do most of the work for you!\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"build_circle\"\n        bold=\"Dependencies.\"\n        href=\"/deploy/concepts/dependencies\"\n    >Understand the basics of configuring your deployment environment.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"password\"\n        bold=\"Secrets.\"\n        href=\"/deploy/concepts/secrets\"\n    >Understand the basics of secret management.</InlineCallout>\n</InlineCalloutContainer>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes",
    "content": "# Deploy Streamlit using Kubernetes\n\n## Introduction\n\nSo you have an amazing app and you want to start sharing it with other people, what do you do? You have a few options. First, where do you want to run your Streamlit app, and how do you want to access it?\n\n- **On your corporate network** - Most corporate networks are closed to the outside world. You typically use a VPN to log onto your corporate network and access resources there. You could run your Streamlit app on a server in your corporate network for security reasons, to ensure that only folks internal to your company can access it.\n- **On the cloud** - If you'd like to access your Streamlit app from outside of a corporate network, or share your app with folks outside of your home network or laptop, you might choose this option. In this case, it'll depend on your hosting provider. We have [community-submitted guides](/knowledge-base/deploy/deploy-streamlit-heroku-aws-google-cloud) from Heroku, AWS, and other providers.\n\nWherever you decide to deploy your app, you will first need to containerize it. This guide walks you through using Kubernetes to deploy your app. If you prefer Docker see [Deploy Streamlit using Docker](/deploy/tutorials/docker).\n\n## Prerequisites\n\n1. [Install Docker Engine](#install-docker-engine)\n2. [Install the gcloud CLI](#install-the-gcloud-cli)\n\n### Install Docker Engine\n\nIf you haven't already done so, install [Docker](https://docs.docker.com/engine/install/#server) on your server. Docker provides `.deb` and `.rpm` packages from many Linux distributions, including:\n\n- [Debian](https://docs.docker.com/engine/install/debian/)\n- [Ubuntu](https://docs.docker.com/engine/install/ubuntu/)\n\nVerify that Docker Engine is installed correctly by running the `hello-world` Docker image:\n\n```bash\nsudo docker run hello-world\n```\n\n<Tip>\n\nFollow Docker's official [post-installation steps for Linux](https://docs.docker.com/engine/install/linux-postinstall/) to run Docker as a non-root user, so that you don't have to preface the `docker` command with `sudo`.\n\n</Tip>\n\n### Install the gcloud CLI\n\nIn this guide, we will orchestrate Docker containers with Kubernetes and host docker images on the Google Container Registry (GCR). As GCR is a Google-supported Docker registry, we need to register [`gcloud`](https://cloud.google.com/sdk/gcloud/reference) as the Docker credential helper.\n\nFollow the official documentation to [Install the gcloud CLI](https://cloud.google.com/sdk/docs/install) and initialize it.\n\n## Create a Docker container\n\nWe need to create a docker container which contains all the dependencies and the application code. Below you can see the entrypoint, i.e. the command run when the container starts, and the Dockerfile definition.\n\n### Create an entrypoint script\n\nCreate a `run.sh` script containing the following:\n\n```bash\n#!/bin/bash\n\nAPP_PID=\nstopRunningProcess() {\n    # Based on https://linuxconfig.org/how-to-propagate-a-signal-to-child-processes-from-a-bash-script\n    if test ! \"${APP_PID}\" = '' && ps -p ${APP_PID} > /dev/null ; then\n       > /proc/1/fd/1 echo \"Stopping ${COMMAND_PATH} which is running with process ID ${APP_PID}\"\n\n       kill -TERM ${APP_PID}\n       > /proc/1/fd/1 echo \"Waiting for ${COMMAND_PATH} to process SIGTERM signal\"\n\n        wait ${APP_PID}\n        > /proc/1/fd/1 echo \"All processes have stopped running\"\n    else\n        > /proc/1/fd/1 echo \"${COMMAND_PATH} was not started when the signal was sent or it has already been stopped\"\n    fi\n}\n\ntrap stopRunningProcess EXIT TERM\n\nsource ${VIRTUAL_ENV}/bin/activate\n\nstreamlit run ${HOME}/app/streamlit_app.py &\nAPP_ID=${!}\n\nwait ${APP_ID}\n```\n\n### Create a Dockerfile\n\nDocker builds images by reading the instructions from a `Dockerfile`. A `Dockerfile` is a text document that contains all the commands a user could call on the command line to assemble an image. Learn more in the [Dockerfile reference](https://docs.docker.com/engine/reference/builder/). The [docker build](https://docs.docker.com/engine/reference/commandline/build/) command builds an image from a `Dockerfile`. The [docker run](https://docs.docker.com/engine/reference/commandline/run/) command first creates a container over the specified image, and then starts it using the specified command.\n\nHere's an example `Dockerfile` that you can add to the root of your directory.\n\n```docker\nFROM python:3.9-slim\n\nRUN groupadd --gid 1000 appuser \\\n    && useradd --uid 1000 --gid 1000 -ms /bin/bash appuser\n\nRUN pip3 install --no-cache-dir --upgrade \\\n    pip \\\n    virtualenv\n\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    software-properties-common \\\n    git\n\nUSER appuser\nWORKDIR /home/appuser\n\nRUN git clone https://github.com/streamlit/streamlit-example.git app\n\nENV VIRTUAL_ENV=/home/appuser/venv\nRUN virtualenv ${VIRTUAL_ENV}\nRUN . ${VIRTUAL_ENV}/bin/activate && pip install -r app/requirements.txt\n\nEXPOSE 8501\n\nCOPY run.sh /home/appuser\nENTRYPOINT [\"./run.sh\"]\n```\n\n<Important>\n\nAs mentioned in [Development flow](/get-started/fundamentals/main-concepts#development-flow), for Streamlit version 1.10.0 and higher, Streamlit apps cannot be run from the root directory of Linux distributions. Your main script should live in a directory other than the root directory. If you try to run a Streamlit app from the root directory, Streamlit will throw a `FileNotFoundError: [Errno 2] No such file or directory` error. For more information, see GitHub issue [#5239](https://github.com/streamlit/streamlit/issues/5239).\n\nIf you are using Streamlit version 1.10.0 or higher, you must set the `WORKDIR` to a directory other than the root directory. For example, you can set the `WORKDIR` to `/home/appuser` as shown in the example `Dockerfile` above.\n</Important>\n\n### Build a Docker image\n\nPut the above files (`run.sh` and `Dockerfile`) in the same folder and build the docker image:\n\n```docker\ndocker build --platform linux/amd64 -t gcr.io/$GCP_PROJECT_ID/k8s-streamlit:test .\n```\n\n<Important>\n\nReplace `$GCP_PROJECT_ID` in the above command with the name of your Google Cloud project.\n\n</Important>\n\n### Upload the Docker image to a container registry\n\nThe next step is to upload the Docker image to a container registry. In this example, we will use the [Google Container Registry (GCR)](https://cloud.google.com/container-registry). Start by enabling the Container Registry API. Sign in to Google Cloud and navigate to your project’s **Container Registry** and click **Enable**.\n\nWe can now build the Docker image from the previous step and push it to our project’s GCR. Be sure to replace `$GCP_PROJECT_ID` in the docker push command with the name of your project:\n\n```bash\ngcloud auth configure-docker\ndocker push gcr.io/$GCP_PROJECT_ID/k8s-streamlit:test\n```\n\n## Create a Kubernetes deployment\n\nFor this step you will need a:\n\n- Running Kubernetes service\n- Custom domain for which you can generate a TLS certificate\n- DNS service where you can configure your custom domain to point to the application IP\n\nAs the image was uploaded to the container registry in the previous step, we can run it in Kubernetes using the below configurations.\n\n### Install and run Kubernetes\n\nMake sure your [Kubernetes client](https://kubernetes.io/docs/tasks/tools/#kubectl), `kubectl`, is installed and running on your machine.\n\n### Configure a Google OAuth Client and oauth2-proxy\n\nFor configuring the Google OAuth Client, please see [Google Auth Provider](https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/oauth_provider#google-auth-provider). Configure oauth2-proxy to use the desired [OAuth Provider Configuration](https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/oauth_provider) and update the oath2-proxy config in the config map.\n\nThe below configuration contains a ouath2-proxy sidecar container which handles the authentication with Google. You can learn more from the [oauth2-proxy repository](https://github.com/oauth2-proxy/oauth2-proxy).\n\n### Create a Kubernetes configuration file\n\nCreate a [YAML](https://yaml.org/) [configuration file](https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#organizing-resource-configurations) named `k8s-streamlit.yaml`:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: streamlit-configmap\ndata:\n  oauth2-proxy.cfg: |-\n    http_address = \"0.0.0.0:4180\"\n    upstreams = [\"http://127.0.0.1:8501/\"]\n    email_domains = [\"*\"]\n    client_id = \"<GOOGLE_CLIENT_ID>\"\n    client_secret = \"<GOOGLE_CLIENT_SECRET>\"\n    cookie_secret = \"<16, 24, or 32 bytes>\"\n    redirect_url = <REDIRECT_URL>\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: streamlit-deployment\n  labels:\n    app: streamlit\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: streamlit\n  template:\n    metadata:\n      labels:\n        app: streamlit\n    spec:\n      containers:\n        - name: oauth2-proxy\n          image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.0\n          args: [\"--config\", \"/etc/oauth2-proxy/oauth2-proxy.cfg\"]\n          ports:\n            - containerPort: 4180\n          livenessProbe:\n            httpGet:\n              path: /ping\n              port: 4180\n              scheme: HTTP\n          readinessProbe:\n            httpGet:\n              path: /ping\n              port: 4180\n              scheme: HTTP\n          volumeMounts:\n            - mountPath: \"/etc/oauth2-proxy\"\n              name: oauth2-config\n        - name: streamlit\n          image: gcr.io/GCP_PROJECT_ID/k8s-streamlit:test\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8501\n          livenessProbe:\n            httpGet:\n              path: /_stcore/health\n              port: 8501\n              scheme: HTTP\n            timeoutSeconds: 1\n          readinessProbe:\n            httpGet:\n              path: /_stcore/health\n              port: 8501\n              scheme: HTTP\n            timeoutSeconds: 1\n          resources:\n            limits:\n              cpu: 1\n              memory: 2Gi\n            requests:\n              cpu: 100m\n              memory: 745Mi\n      volumes:\n        - name: oauth2-config\n          configMap:\n            name: streamlit-configmap\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: streamlit-service\nspec:\n  type: LoadBalancer\n  selector:\n    app: streamlit\n  ports:\n    - name: streamlit-port\n      protocol: TCP\n      port: 80\n      targetPort: 4180\n```\n\n<Important>\n\nWhile the above configurations can be copied verbatim, you will have to configure the `oauth2-proxy` yourself and use the correct `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_ID`, `GCP_PROJECT_ID`, and `REDIRECT_URL`.\n\n</Important>\n\nNow create the configuration from the file in Kubernetes with the [`kubectl create`](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#create) command:\n\n```bash\nkubctl create -f k8s-streamlit.yaml\n```\n\n### Set up TLS support\n\nSince you are using the Google authentication, you will need to set up TLS support. Find out how in [TLS Configuration](https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/tls).\n\n### Verify the deployment\n\nOnce the deployment and the service are created, we need to wait a couple of minutes for the public IP address to become available. We can check when that is ready by running:\n\n```bash\nkubectl get service streamlit-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n```\n\nAfter the public IP is assigned, you will need to configure in your DNS service an `A record` pointing to the above IP address."
  },
  {
    "url": "https://docs.streamlit.io/deploy/tutorials/docker",
    "content": "# Deploy Streamlit using Docker\n\n## Introduction\n\nSo you have an amazing app and you want to start sharing it with other people, what do you do? You have a few options. First, where do you want to run your Streamlit app, and how do you want to access it?\n\n- **On your corporate network** - Most corporate networks are closed to the outside world. You typically use a VPN to log onto your corporate network and access resources there. You could run your Streamlit app on a server in your corporate network for security reasons, to ensure that only folks internal to your company can access it.\n- **On the cloud** - If you'd like to access your Streamlit app from outside of a corporate network, or share your app with folks outside of your home network or laptop, you might choose this option. In this case, it'll depend on your hosting provider. We have [community-submitted guides](/knowledge-base/deploy/deploy-streamlit-heroku-aws-google-cloud) from Heroku, AWS, and other providers.\n\nWherever you decide to deploy your app, you will first need to containerize it. This guide walks you through using Docker to deploy your app. If you prefer Kubernetes see [Deploy Streamlit using Kubernetes](/deploy/tutorials/kubernetes).\n\n## Prerequisites\n\n1. [Install Docker Engine](#install-docker-engine)\n2. [Check network port accessibility](#check-network-port-accessibility)\n\n### Install Docker Engine\n\nIf you haven't already done so, install [Docker](https://docs.docker.com/engine/install/#server) on your server. Docker provides `.deb` and `.rpm` packages from many Linux distributions, including:\n\n- [Debian](https://docs.docker.com/engine/install/debian/)\n- [Ubuntu](https://docs.docker.com/engine/install/ubuntu/)\n\nVerify that Docker Engine is installed correctly by running the `hello-world` Docker image:\n\n```bash\nsudo docker run hello-world\n```\n\n<Tip>\n\nFollow Docker's official [post-installation steps for Linux](https://docs.docker.com/engine/install/linux-postinstall/) to run Docker as a non-root user, so that you don't have to preface the `docker` command with `sudo`.\n\n</Tip>\n\n### Check network port accessibility\n\nAs you and your users are behind your corporate VPN, you need to make sure all of you can access a certain network port. Let's say port `8501`, as it is the default port used by Streamlit. Contact your IT team and request access to port `8501` for you and your users.\n\n## Create a Dockerfile\n\nDocker builds images by reading the instructions from a `Dockerfile`. A `Dockerfile` is a text document that contains all the commands a user could call on the command line to assemble an image. Learn more in the [Dockerfile reference](https://docs.docker.com/engine/reference/builder/). The [docker build](https://docs.docker.com/engine/reference/commandline/build/) command builds an image from a `Dockerfile`. The [docker run](https://docs.docker.com/engine/reference/commandline/run/) command first creates a container over the specified image, and then starts it using the specified command.\n\nHere's an example `Dockerfile` that you can add to the root of your directory. i.e. in `/app/`\n\n```docker\n# app/Dockerfile\n\nFROM python:3.9-slim\n\nWORKDIR /app\n\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    curl \\\n    software-properties-common \\\n    git \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN git clone https://github.com/streamlit/streamlit-example.git .\n\nRUN pip3 install -r requirements.txt\n\nEXPOSE 8501\n\nHEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health\n\nENTRYPOINT [\"streamlit\", \"run\", \"streamlit_app.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]\n```\n\n### Dockerfile walkthrough\n\nLet’s walk through each line of the Dockerfile :\n\n1. A `Dockerfile` must start with a [`FROM`](https://docs.docker.com/engine/reference/builder/#from) instruction. It sets the [Base Image](https://docs.docker.com/glossary/#base-image) (think OS) for the container:\n\n   ```docker\n   FROM python:3.9-slim\n   ```\n\n   Docker has a number of official Docker base images based on various Linux distributions. They also have base images that come with language-specific modules such as [Python](https://hub.docker.com/_/python). The `python` images come in many flavors, each designed for a specific use case. Here, we use the `python:3.9-slim` image which is a lightweight image that comes with the latest version of Python 3.9.\n\n   <Tip>\n\n   You can also use your own base image, provided the image you use contains a [supported version of Python](/knowledge-base/using-streamlit/sanity-checks#check-0-are-you-using-a-streamlit-supported-version-of-python) for Streamlit. There is no one-size-fits-all approach to using any specific base image, nor is there an official Streamlit-specific base image.\n\n   </Tip>\n\n2. The `WORKDIR` instruction sets the working directory for any `RUN`, `CMD`, `ENTRYPOINT`, `COPY` and `ADD` instructions that follow it in the `Dockerfile` . Let’s set it to `app/` :\n\n   ```docker\n   WORKDIR /app\n   ```\n\n   <Important>\n\n   As mentioned in [Development flow](/get-started/fundamentals/main-concepts#development-flow), for Streamlit version 1.10.0 and higher, Streamlit apps cannot be run from the root directory of Linux distributions. Your main script should live in a directory other than the root directory. If you try to run a Streamlit app from the root directory, Streamlit will throw a `FileNotFoundError: [Errno 2] No such file or directory` error. For more information, see GitHub issue [#5239](https://github.com/streamlit/streamlit/issues/5239).\n\n   If you are using Streamlit version 1.10.0 or higher, you must set the `WORKDIR` to a directory other than the root directory. For example, you can set the `WORKDIR` to `/app` as shown in the example `Dockerfile` above.\n   </Important>\n\n3. Install `git` so that we can clone the app code from a remote repo:\n\n   ```docker\n   RUN apt-get update && apt-get install -y \\\n       build-essential \\\n       curl \\\n       software-properties-common \\\n       git \\\n       && rm -rf /var/lib/apt/lists/*\n   ```\n\n4. Clone your code that lives in a remote repo to `WORKDIR`:\n\n   a. If your code is in a public repo:\n\n   ```docker\n   RUN git clone https://github.com/streamlit/streamlit-example.git .\n   ```\n\n   Once cloned, the directory of `WORKDIR` will look like the following:\n\n   ```bash\n   app/\n   - requirements.txt\n   - streamlit_app.py\n   ```\n\n   where `requirements.txt` file contains all your [Python dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies). E.g\n\n   ```\n   altair\n   pandas\n   streamlit\n   ```\n\n   and `streamlit_app.py` is your main script. E.g.\n\n   ```python\n   from collections import namedtuple\n   import altair as alt\n   import math\n   import pandas as pd\n   import streamlit as st\n\n   \"\"\"\n   # Welcome to Streamlit!\n\n   Edit `/streamlit_app.py` to customize this app to your heart's desire :heart:\n\n   If you have any questions, checkout our [documentation](https://docs.streamlit.io) and [community\n   forums](https://discuss.streamlit.io).\n\n   In the meantime, below is an example of what you can do with just a few lines of code:\n   \"\"\"\n\n   with st.echo(code_location='below'):\n      total_points = st.slider(\"Number of points in spiral\", 1, 5000, 2000)\n      num_turns = st.slider(\"Number of turns in spiral\", 1, 100, 9)\n\n      Point = namedtuple('Point', 'x y')\n      data = []\n\n      points_per_turn = total_points / num_turns\n\n      for curr_point_num in range(total_points):\n         curr_turn, i = divmod(curr_point_num, points_per_turn)\n         angle = (curr_turn + 1) * 2 * math.pi * i / points_per_turn\n         radius = curr_point_num / total_points\n         x = radius * math.cos(angle)\n         y = radius * math.sin(angle)\n         data.append(Point(x, y))\n\n      st.altair_chart(alt.Chart(pd.DataFrame(data), height=500, width=500)\n         .mark_circle(color='#0068c9', opacity=0.5)\n         .encode(x='x:Q', y='y:Q'))\n   ```\n\n   b. If your code is in a private repo, please read [Using SSH to access private data in builds](https://docs.docker.com/develop/develop-images/build_enhancements/#using-ssh-to-access-private-data-in-builds) and modify the Dockerfile accordingly -- to install an SSH client, download the public key for [github.com](https://github.com), and clone your private repo. If you use an alternative VCS such as GitLab or Bitbucket, please consult the documentation for that VCS on how to copy your code to the `WORKDIR` of the Dockerfile.\n\n   c. If your code lives in the same directory as the Dockerfile, copy all your app files from your server into the container, including `streamlit_app.py`, `requirements.txt`, etc, by replacing the `git clone` line with:\n\n   ```docker\n   COPY . .\n   ```\n\n   More generally, the idea is copy your app code from wherever it may live on your server into the container. If the code is not in the same directory as the Dockerfile, modify the above command to include the path to the code.\n\n5. Install your app’s [Python dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies) from the cloned `requirements.txt` in the container:\n\n   ```docker\n   RUN pip3 install -r requirements.txt\n   ```\n\n6. The [`EXPOSE`](https://docs.docker.com/engine/reference/builder/#expose) instruction informs Docker that the container listens on the specified network ports at runtime. Your container needs to listen to Streamlit’s (default) port 8501:\n\n   ```docker\n   EXPOSE 8501\n   ```\n\n7. The [`HEALTHCHECK`](https://docs.docker.com/engine/reference/builder/#expose) instruction tells Docker how to test a container to check that it is still working. Your container needs to listen to Streamlit’s (default) port 8501:\n\n   ```docker\n   HEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health\n   ```\n\n8. An [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#entrypoint) allows you to configure a container that will run as an executable. Here, it also contains the entire `streamlit run` command for your app, so you don’t have to call it from the command line:\n\n   ```docker\n   ENTRYPOINT [\"streamlit\", \"run\", \"streamlit_app.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]\n   ```\n\n## Build a Docker image\n\nThe [`docker build`](https://docs.docker.com/engine/reference/commandline/build/) command builds an image from a `Dockerfile` . Run the following command from the `app/` directory on your server to build the image:\n\n```docker\ndocker build -t streamlit .\n```\n\nThe `-t` flag is used to tag the image. Here, we have tagged the image `streamlit`. If you run:\n\n```docker\ndocker images\n```\n\nYou should see a `streamlit` image under the REPOSITORY column. For example:\n\n```\nREPOSITORY   TAG       IMAGE ID       CREATED              SIZE\nstreamlit    latest    70b0759a094d   About a minute ago   1.02GB\n```\n\n## Run the Docker container\n\nNow that you have built the image, you can run the container by executing:\n\n```docker\ndocker run -p 8501:8501 streamlit\n```\n\nThe `-p` flag publishes the container’s port 8501 to your server’s 8501 port.\n\nIf all went well, you should see an output similar to the following:\n\n```\ndocker run -p 8501:8501 streamlit\n\n  You can now view your Streamlit app in your browser.\n\n  URL: http://0.0.0.0:8501\n```\n\nTo view your app, users can browse to `http://0.0.0.0:8501` or `http://localhost:8501`\n\n<Note>\n\nBased on your server's network configuration, you could map to port 80/443 so that users can view your app using the server IP or hostname. For example: `http://your-server-ip:80` or `http://your-hostname:443`.\n\n</Note>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/tutorials",
    "content": "# Deployment tutorials\n\nThis sections contains step-by-step guides on how to deploy Streamlit apps to various cloud platforms and services. We have deployment guides for:\n\n<DataSourcesContainer>\n<DataSourcesCard href=\"/deploy/streamlit-community-cloud/get-started\">\n\n<Image pure alt=\"screenshot\" src=\"/images/deploy/streamlit-cloud.png\" />\n\n<h5 align=\"center\">Streamlit Community Cloud</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/deploy/tutorials/docker\">\n\n<Image pure alt=\"screenshot\" src=\"/images/deploy/docker.png\" />\n\n<h5 align=\"center\">Docker</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/deploy/tutorials/kubernetes\">\n\n<Image pure alt=\"screenshot\" src=\"/images/deploy/kubernetes.png\" />\n\n<h5 align=\"center\">Kubernetes</h5>\n\n</DataSourcesCard>\n</DataSourcesContainer>\n\nWhile we work on official Streamlit deployment guides for other hosting providers, here are some user-submitted tutorials for different cloud services:\n\n- [How to deploy Streamlit apps to **Google App Engine**](https://dev.to/whitphx/how-to-deploy-streamlit-apps-to-google-app-engine-407o), by [Yuichiro Tachibana (Tsuchiya)](https://discuss.streamlit.io/u/whitphx/summary).\n- [Host Streamlit on **Heroku**](https://towardsdatascience.com/quickly-build-and-deploy-an-application-with-streamlit-988ca08c7e83), by Maarten Grootendorst.\n- [Deploy Streamlit on **Ploomber Cloud**](https://docs.cloud.ploomber.io/en/latest/apps/streamlit.html), by Ido Michael.\n- [Host Streamlit on **21YunBox**](https://www.21yunbox.com/docs/#/deploy-streamlit), by Toby Lei.\n- [Deploy a Streamlit App on **Koyeb**](https://www.koyeb.com/docs/deploy/streamlit), by Justin Ellingwood.\n- [Community-supported deployment wiki](https://discuss.streamlit.io/t/streamlit-deployment-guide-wiki/5099)."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/upgrade-python",
    "content": "# Upgrade your app's Python version on Community Cloud\n\nDependencies within Python can be upgraded in place by simply changing your environment configuration file (typically `requirements.txt`). However, Python itself can't be changed after deployment.\n\nWhen you deploy an app, you can select the version of Python through the \"**Advanced settings**\" dialog. After you have deployed an app, you must delete it and redeploy it to change the version of Python it uses.\n\n1. Take note of your app's settings:\n\n   - Current, custom subdomain.\n   - GitHub coordinates (repository, branch, and entrypoint file path).\n   - Secrets.\n\n   When you delete an app, its custom subdomain is immediately available for reuse.\n\n1. [Delete your app](/deploy/streamlit-community-cloud/manage-your-app/delete-your-app).\n1. [Deploy your app](/deploy/streamlit-community-cloud/deploy-your-app).\n   1. On the deployment page, select your app's GitHub coordinates.\n   1. Set your custom domain to match your deleted instance.\n   1. Click \"**Advanced settings**.\"\n   1. Choose your desired version of Python.\n   1. Optional: If your app had secrets, re-enter them.\n   1. Click \"**Save**.\"\n   1. Click \"**Deploy**.\"\n\nIn a few minutes, Community Cloud will redirect you to your redployed app."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/edit-your-app",
    "content": "# Edit your app\n\nYou can edit your app from any development environment of your choice. Streamlit Community Cloud will monitor your repository and automatically copy any file changes you commit. You will immediately see commits reflected in your deployed app for most changes (such as edits to your app's Python files).\n\nCommunity Cloud also makes it easy to skip the work of setting up a development environment. With a few simple clicks, you can configure a development environment using GitHub Codespaces.\n\n## Edit your app with GitHub Codespaces\n\nSpin up a cloud-based development environment for your deployed app in minutes. You can run your app within your codespace to enjoy experimenting in a safe, sandboxed environment. When you are done editing your code, you can commit your changes to your repo or just leave them in your codespace to return to later.\n\n### Create a codespace for your deployed app\n\n1. From your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, click the overflow icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) next to your app. Click \"**Edit with Codespaces**.\"\n\n   ![Edit your app with GitHub Codespaces](/images/streamlit-community-cloud/workspace-app-edit.png)\n\n   Community Cloud will add a `.devcontainer/devcontainer.json` file to your repository. If you already have a file of the same name in your repository, it will not be changed. If you want your repository to receive the instance created by Community Cloud, delete or rename your existing devcontainer configuration.\n\n1. Wait for GitHub to set up your codespace.\n\n   It can take several minutes to fully initialize your codespace. After the Visual Studio Code editor appears in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, a split screen view displays a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file.\n\n   ![Your new GitHub Codespace](/images/streamlit-community-cloud/deploy-template-blank-codespace.png)\n\n1. Optional: For more room to work, open the app preview in another tab.\n\n   If you have multiple monitors and want a little more room to work, open your app preview in another tab instead of using the Simple Browser within Visual Studio Code. Just copy the URL from the Simple Browser into another tab, and then close the Simple Browser. Now you have more room to edit your code. The remaining steps on this page will continue to display the split-screen view in Visual Studio Code.\n\n1. Make a change to your app.\n\n   When you make changes to your app, the file is automatically saved within your codespace. Your edits do not affect your repository or deployed app until you commit those changes, which is explained in a later step. The app preview shown on the right is local to your codespace.\n\n1. In order to see updates automatically reflected on the right, click \"**Always rerun**\" when prompted after your first edit.\n\n   ![Select \"Always rerun\" to automatically see edits in your running app](/images/streamlit-community-cloud/deploy-template-blank-codespace-edit.png)\n\n   Alternatively, you can click \"**Rerun**\" to avoid unnecessary reruns while writing code. Because your code is continually saved, automatically rerunning the app will raises errors when you pause partway through a line of code. Regardless of which you choose, you can change the setting through the app chrome. Just click the overflow icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) in the upper-right corner of your preview app, click \"**Settings**,\" and then toggle \"**Run on save**.\"\n\n1. Continue to edit your app. Your codespace will continue to automatically save your files as you work with them, and the preview will continue to update as the app reruns.\n\n### Optional: Publish your changes\n\nAfter making edits to your app, you can choose to commit your edits to your repository to update your deployed app instantly. If you just want to keep your edits in your codespace to return to later, skip to [Stop or delete your codespace](#stop-or-delete-your-codespace).\n\n1. In the left navigation bar, click the source control icon.\n\n   ![Click on the source control icon](/images/streamlit-community-cloud/deploy-template-blank-codespace-edit-source-control.png)\n\n1. In the source control sidebar on the left, enter a name for your commit.\n1. Click \"**<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>check</i> Commit**.\"\n\n   ![See your deployed Streamlit app](/images/streamlit-community-cloud/deploy-template-blank-codespace-edit-commit.png)\n\n1. To stage and commit all your changes, in the confirmation dialog, click \"**Yes**.\" Your changes are committed locally in your codespace.\n1. To push your commit to GitHub, in the source control sidebar on the left, click \"**<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>cached</i> 1 <i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>arrow_upward</i>**.\"\n1. To push commits to \"origin/main,\" in the confirmation dialog, click \"**OK**.\"\n\n   Your changes are now saved to your GitHub repository. Community Cloud will immediately reflect the changes in your deployed app.\n\n1. Optional: To see your updated, published app, return to the \"**My apps**\" section of your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, and click on your app.\n\n### Stop or delete your codespace\n\nWhen you stop interacting with your codespace, GitHub will generally stop your codespace for you. However, the surest way to avoid undesired use of your capacity is to stop or delete your codespace when you are done.\n\n1. Go to <a href=\"https://github.com/codespaces\" target=\"_blank\">github.com/codespaces</a>. At the bottom of the page, all your codespaces are listed. Click the overflow menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_horiz</i>) for your codespace.\n\n   ![Stop or delete your GitHub Codespace](/images/streamlit-community-cloud/deploy-hello-codespace-manage.png)\n\n2. Click \"**Stop codespace**\" if you'd like to return to your work later. Otherwise, click \"**Delete**.\"\n\n   <div style={{ maxWidth: '40%', margin: 'auto' }}>\n   <Image alt=\"Stop your GitHub codespace\" src=\"/images/streamlit-community-cloud/codespace-menu.png\" />\n   </div>\n\n3. Congratulations! You just deployed an app to Community Cloud. 🎉 Head back to your workspace at <a href=\"https://share.streamlit.io/\" target=\"_blank\">share.streamlit.io/</a> and [deploy another Streamlit app](/deploy/streamlit-community-cloud/deploy-your-app).\n\n   ![See your deployed Streamlit app](/images/streamlit-community-cloud/deploy-template-blank-edited.png)"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/reboot-your-app",
    "content": "# Reboot your app\n\nIf you need to clear your app's memory or force a fresh build after modifying a file that Streamlit Community Cloud doesn't monitor, you may need to reboot your app. This will interrupt any user who may currently be using your app and may take a few minutes for your app to redeploy. Anyone visiting your app will see \"Your app is in the oven\" during a reboot.\n\nRebooting your app on Community Cloud is easy! You can reboot your app:\n\n- [From your workspace](#reboot-your-app-from-your-workspace).\n- [From your Cloud logs](#reboot-your-app-from-your-cloud-logs).\n\n### Reboot your app from your workspace\n\n1. From your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, click the overflow icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) next to your app. Click \"**Reboot**.\"\n\n   ![Reboot your app from your workspace](/images/streamlit-community-cloud/workspace-app-reboot.png)\n\n2. A confirmation will display. Click \"**Reboot**.\"\n\n<div style={{ maxWidth: '50%', margin: 'auto' }}>\n<Image alt=\"Confirm rebooting your app in Streamlit Community Cloud\" src=\"/images/streamlit-community-cloud/workspace-app-reboot-confirm.png\" clean />\n</div>\n\n### Reboot your app from your Cloud logs\n\n1. From your app at `<your-custom-subdomain>.streamlit.app`, click \"**Manage app**\" in the lower-right corner.\n\n   ![Access Streamlit Community Cloud logs from your app](/images/streamlit-community-cloud/cloud-logs-open.png)\n\n2. Click the overflow menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) and click \"**Reboot app**.\"\n\n   ![Reboot your app from your Cloud logs](/images/streamlit-community-cloud/cloud-logs-menu-reboot.png)\n\n3. A confirmation will display. Click \"**Reboot**.\"\n\n<div style={{ maxWidth: '50%', margin: 'auto' }}>\n<Image alt=\"Confirm rebooting your app in Streamlit Community Cloud\" src=\"/images/streamlit-community-cloud/workspace-app-reboot-confirm.png\" clean />\n</div>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-settings",
    "content": "# App settings\n\nThis page is about your app settings on Streamlit Community Cloud. From your app settings you can [view or change your app's URL](/deploy/streamlit-community-cloud/manage-your-app/app-settings#view-or-change-your-apps-url), manage [public or private access to your app](/deploy/streamlit-community-cloud/share-your-app), and update your saved [secrets for your apps](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\nIf you access \"**Settings**\" from your [app chrome](/develop/concepts/architecture/app-chrome) in the upper-right corner of your running app, you can access features to control the appearance of your app while it's running.\n\n## Access your app settings\n\nYou can get to your app's settings:\n\n- [From your workspace](#access-app-settings-from-your-workspace).\n- [From your Cloud logs](#access-app-settings-from-your-cloud-logs).\n\n### Access app settings from your workspace\n\nFrom your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, click the overflow icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) next to your app. Click \"**Settings**.\"\n\n![Access app settings from your workspace](/images/streamlit-community-cloud/workspace-app-settings.png)\n\n### Access app settings from your Cloud logs\n\nFrom your app at `<your-custom-subdomain>.streamlit.app`, click \"**Manage app**\" in the lower-right corner.\n\n![Access Streamlit Community Cloud logs from your app](/images/streamlit-community-cloud/cloud-logs-open.png)\n\nClick the overflow menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) and click \"**Settings**.\"\n\n![Access app settings from your Cloud logs](/images/streamlit-community-cloud/cloud-logs-menu-settings.png)\n\n## Change your app settings\n\n### View or change your app's URL\n\nTo view or customize your app subdomain from the dashboard:\n\n1. Access your app's settings as described above.\n1. On the \"**General**\" tab in the \"App settings\" dialog, see your app's unique subdomain in the \"App URL\" field.\n\n   ![General app settings on Streamlit Community Cloud: Custom subdomain](/images/streamlit-community-cloud/workspace-app-settings-general.png)\n\n1. Optional: Enter a new, custom subdomain between 6 and 63 characters in length, and then click \"**Save**.\"\n\n   ![New custom subdomain for your app](/images/streamlit-community-cloud/workspace-app-settings-general-valid-domain.png)\n\n   If a custom subdomain is not available (e.g. because it's already taken or contains restricted words), you'll see an error message. Change your subdomain as indicated.\n\n   ![Invalid custom subdomain for your app](/images/streamlit-community-cloud/workspace-app-settings-general-invalid-domain.png)\n\n### Update your app's share settings\n\nLearn how to [Share your app](/deploy/streamlit-community-cloud/share-your-app).\n\n![Share settings on Streamlit Community Cloud](/images/streamlit-community-cloud/workspace-app-settings-sharing.png)\n\n### View or update your secrets\n\n1. Access your app's settings as described above.\n1. On the \"**Secrets**\" tab in the \"App settings\" dialog, see your app's secrets in the \"Secrets\" field.\n\n   ![Secrets app settings on Streamlit Community Cloud](/images/streamlit-community-cloud/workspace-app-settings-secrets.png)\n\n1. Optional: Add, edit, or delete your secrets, and then click \"**Save**.\"\n\nLearn more about [Secrets management for your Community Cloud app](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management)."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/rename-your-app",
    "content": "# Rename or change your app's GitHub coordinates\n\nStreamlit Community Cloud identifies apps by their GitHub coordinates (owner, repository, branch, entrypoint file path). If you move or rename one of these coordinates without preparation, you will lose access to administer any associated app.\n\n## Delete, rename, redeploy\n\nIf you need to rename your repository, move your entrypoint file, or otherwise change a deployed app's GitHub coordinates, do the following:\n\n1. Delete your app.\n1. Make your desired changes in GitHub.\n1. Redeploy your app.\n\n## Regain access when you've already made changes to your app's GitHub coordinates\n\nIf you have changed a repository so that Community Cloud can no longer find your app on GitHub, your app will be missing or shown as view-only. View-only means that you can't edit, reboot, delete, or view settings for your app. You can only access analytics.\n\nYou may be able to regain control as follows:\n\n1. Revert the change you made to your app so that Community Cloud can see the owner, repository, branch, and entrypoint file it expects.\n1. Sign out of Community Cloud and GitHub.\n1. Sign back in to Community Cloud and GitHub.\n1. If you have regained access, delete your app. Proceed with your original change, and redeploy your app.\n\n   If this does not restore access to your app, please [contact Snowflake support](/knowledge-base/deploy/how-to-submit-a-support-case-for-streamlit-community-cloud) for assistance. They can delete your disconnected apps so you can redeploy them. For the quickest help, please provide a complete list of your affected apps by URL."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/upgrade-streamlit",
    "content": "# Upgrade your app's Streamlit version on Streamlit Community Cloud\n\nWant to use a cool new Streamlit feature but your app on Streamlit Community Cloud is running an old version of the Streamlit library? If that's you, don't worry! Here's how to upgrade your app's Streamlit version, based on how you manage your [app dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies):\n\n## No dependency file\n\nWhen there is no dependencies file in your repository, your app will use the lastest Streamlit version that existed when it was last rebooted. In this case, simply [reboot your app](/deploy/streamlit-community-cloud/manage-your-app/reboot-your-app) and Community Cloud will install the latest version.\n\nYou may want to avoid getting into this situation if your app depends on a specific version of Streamlit. That is why we encourage you to use a dependency file and pin your desired version of Streamlit.\n\n## With a dependency file\n\nWhen your app includes a dependency file, reboot your app or change your dependency file as follows:\n\n- If Streamlit is not included in your dependency file, reboot the app as described above.\n\n  Note that we don't recommend having an incomplete dependency file since `pip` won't be able to include `streamlit` when resolving compatible versions of your dependencies.\n\n- If Streamlit is included in your dependency file, but the version is not pinned or capped, reboot the app as described above.\n\n  When Community Cloud reboots your app, it will re-resolve your dependency file. Your app will then have the latest version of all dependencies that are consistent with your dependency file.\n\n- If Streamlit is included in your dependency file, and the version is pinned (e.g., `streamlit==1.37.0`), update your dependency file.\n\n  When you commit a change to your dependency file in your repository, Community Cloud will detect the change and automatically resolve the new dependencies. This is how you add, remove, or change all Python dependencies in general. You don't need to manually reboot your app, but you can if you want to."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/delete-your-app",
    "content": "# Delete your app\n\nIf you need to delete your app, it's simple and easy. There are several cases where you may need to delete your app:\n\n- You have finished playing around with an example app.\n- You want to deploy from a private repository but already have a private app.\n- You want to [change the Python version](/deploy/streamlit-community-cloud/manage-your-app/upgrade-python) for your app.\n- You want to [rename your repository](/deploy/streamlit-community-cloud/manage-your-app/rename-your-app) or move your entrypoint file.\n\nIf you delete your app and intend to immediately redploy it, your custom subdomain should be immediately available for reuse. Read more about data deletion in [Streamlit trust and security](/deploy/streamlit-community-cloud/get-started/trust-and-security#data-deletion).\n\nYou can delete your app:\n\n- [From your workspace](#delete-your-app-from-your-workspace).\n- [From your Cloud logs](#delete-your-app-from-your-cloud-logs).\n\n### Delete your app from your workspace\n\n1. From your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, click the overflow icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) next to your app. Click \"**Delete**.\"\n\n   ![Delete your app from your workspace](/images/streamlit-community-cloud/workspace-app-delete.png)\n\n2. A confirmation will display. Enter the required confirmation string and click \"**Delete**.\"\n\n   <div style={{ maxWidth: '50%', margin: 'auto' }}>\n   <Image alt=\"Confirm deleting your app from Streamlit Community Cloud\" src=\"/images/streamlit-community-cloud/workspace-app-delete-confirm.png\" clean />\n   </div>\n\n### Delete your app from your Cloud logs\n\n1. From your app at `<your-custom-subdomain>.streamlit.app`, click \"**Manage app**\" in the lower-right corner.\n\n   ![Access Streamlit Community Cloud logs from your app](/images/streamlit-community-cloud/cloud-logs-open.png)\n\n2. Click the overflow menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) and click \"**Delete app**.\"\n\n   ![Delete your app from your Cloud logs](/images/streamlit-community-cloud/cloud-logs-menu-delete.png)\n\n3. A confirmation will display. Enter the required confirmation string and click \"**Delete**.\"\n\n<div style={{ maxWidth: '50%', margin: 'auto' }}>\n<Image alt=\"Confirm deleting your app from Streamlit Community Cloud\" src=\"/images/streamlit-community-cloud/workspace-app-delete-confirm.png\" clean />\n</div>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-analytics",
    "content": "# App analytics\n\nStreamlit Community Cloud allows you to see the viewership of each of your apps. Specifically, you can see:\n\n- The total viewers count of your app (counted from April 2022).\n- The most recent unique viewers (capped at the last 20 viewers).\n- A relative timestamp of each unique viewer's last visit.\n\n![App analytics on Streamlit Community Cloud](/images/streamlit-community-cloud/workspace-app-analytics-viewers.png)\n\n## Access your app analytics\n\nYou can get to your app's analytics:\n\n- [From your workspace](#access-app-analytics-from-your-workspace).\n- [From your Cloud logs](#access-app-analytics-from-your-cloud-logs).\n\n### Access app analytics from your workspace\n\nFrom your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, click the overflow icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) next to your app. Click \"**Analytics**.\"\n\n![Access app analytics from your workspace through your app overflow menu](/images/streamlit-community-cloud/workspace-app-analytics.png)\n\n### Access app analytics from your Cloud logs\n\nFrom your app at `<your-custom-subdomain>.streamlit.app`, click \"**Manage app**\" in the lower-right corner.\n\n![Access Streamlit Community Cloud logs from your app](/images/streamlit-community-cloud/cloud-logs-open.png)\n\nClick the overflow menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) and click \"**Analytics**.\"\n\n![Access app analytics from your Cloud logs](/images/streamlit-community-cloud/cloud-logs-menu-analytics.png)\n\n## App viewers\n\nFor public apps, we anonymize all viewers outside your workspace to protect their privacy and display anonymous viewers as random pseudonyms. You'll still be able to see the identities of fellow members in your workspace, including any viewers you've invited (once they've accepted).\n\n<Important>\n\nWhen you invite a viewer to an app, they gain access to analytics as well. Additionally, if someone is invited as a viewer to _any_ app in your workspace, they can see analytics for all public apps in your workspace and invite additional viewers themselves. A viewer in your workspace may see the emails of developers and other viewers in your workspace through analytics.\n\n</Important>\n\nMeanwhile, for private apps where you control who has access, you will be able to see the specific users who recently viewed your apps.\n\nAdditionally, you may occasionally see anonymous users in a private app. Rest assured, these anonymous users _do_ have authorized view access granted by you or your workspace members.\n\nCommon reasons why users show up anonymously are:\n\n- The app was previously public.\n- The given viewer viewed the app in April 2022, when the Streamlit team was honing user identification for this feature.\n\nSee Streamlit's general <a href=\"https://streamlit.io/privacy-policy\" target=\"_blank\">Privacy Notice</a>."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/favorite-your-app",
    "content": "# Favorite your app\n\nStreamlit Community Cloud supports a \"favorite\" feature that lets you quickly access your apps from your workspace. Favorited apps appear at the top of their workspace with a yellow star (<i style={{ verticalAlign: \"-.25em\", color: \"#faca2b\" }} className={{ class: \"material-icons-sharp\" }}>star</i>) beside them. You can favorite and unfavorite apps in any workspace to which you have access as a developer or invited viewer.\n\n![Favorite apps appear on top in Streamlit Community Cloud](/images/streamlit-community-cloud/workspace-two-apps.png)\n\n<Note>\n\nFavorites are specific to your account. Other members of your workspace cannot see which apps you have favorited.\n\n</Note>\n\n## Favoriting and unfavoriting your app\n\nYou can favorite your app:\n\n- [From your workspace](#favorite-your-app-from-your-workspace).\n- [From your app](#favorite-your-app-from-your-app-toolbar)!\n\n### Favorite your app from your workspace\n\n1. From your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, hover over your app.\n\n   If your app is not yet favorited, a star outline (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>star_border</i>) will appear on hover.\n\n1. Click on the star (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>star_border</i>/<i style={{ verticalAlign: \"-.25em\", color: \"#faca2b\" }} className={{ class: \"material-icons-sharp\" }}>star</i>) next to your app name to toggle its favorited status.\n\n### Favorite your app from your app toolbar\n\nFrom your app at `<your-custom-subdomain>.streamlit.app`, click the star (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>star_border</i>/<i style={{ verticalAlign: \"-.25em\", color: \"#faca2b\" }} className={{ class: \"material-icons-sharp\" }}>star</i>) in the upper-right corner to toggle your app's favorited status.\n\n![Favorite your app directly from your live app](/images/streamlit-community-cloud/favorite-select.png)"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app",
    "content": "# Manage your app\n\nYou can manage your deployed app from your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a> or directly from `<your-custom-subdomain>.streamlit.app`. You can view, deploy, delete, reboot, or favorite an app.\n\n## Manage your app from your workspace\n\nStreamlit Community Cloud is organized into workspaces, which automatically group your apps according to their repository's owner in GitHub. Your workspace is indicated in the upper-left corner. For more information, see [Switching workspaces](/deploy/streamlit-community-cloud/get-started/explore-your-workspace#switching-workspaces).\n\nTo deploy or manage any app, always switch to the workspace matching the repository's owner first.\n\n### Sort your apps\n\nIf you have many apps in your workspace, you can pin apps to the top by marking them as favorite (<i style={{ verticalAlign: \"-.25em\", color: \"#faca2b\" }} className={{ class: \"material-icons-sharp\" }}>star</i>). For more information, see [Favorite your app](/deploy/streamlit-community-cloud/manage-your-app/favorite-your-app).\n\n### App overflow menus\n\nEach app has a menu accessible from the overflow icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) to the right.\n\n- **Edit with Codespaces** &mdash; See [Edit your app with GitHub Codespaces](/deploy/streamlit-community-cloud/manage-your-app/edit-your-app#edit-your-app-with-github-codespaces)\n- **Reboot** &mdash; See [Reboot your app](/deploy/streamlit-community-cloud/manage-your-app/reboot-your-app)\n- **Delete** &mdash; See [Delete your app](/deploy/streamlit-community-cloud/manage-your-app/delete-your-app)\n- **Analytics** &mdash; See [App analytics](/deploy/streamlit-community-cloud/manage-your-app/app-analytics)\n- **Settings** &mdash; See [App settings](/deploy/streamlit-community-cloud/manage-your-app/app-settings)\n\n![App overflow menu in your workspace](/images/streamlit-community-cloud/workspace-app-overflow.png)\n\nIf you have view-only access to an app, all options in the app's menu will be disabled except analytics.\n\n![View-only app overflow menu in your workspace](/images/streamlit-community-cloud/workspace-view-only.png)\n\n## Manage your app directly from your app\n\nYou can manage your deployed app directly from the app itself! Just make sure you are signed in to Community Cloud, and then visit your app.\n\n### Cloud logs\n\n1. From your app at `<your-custom-subdomain>.streamlit.app`, click \"**Manage app**\" in the lower-right corner.\n\n   ![Access Cloud logs from Manage app in the lower-right corner of your app](/images/streamlit-community-cloud/cloud-logs-open.png)\n\n2. Once you've clicked on \"**Manage app**\", you will be able to view your app's logs. This is your primary place to troubleshoot any issues with your app.\n\n   ![Streamlit Community Cloud logs](/images/streamlit-community-cloud/cloud-logs.png)\n\n3. You can access more developer options by clicking the overflow icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) at the bottom of your Cloud logs. To conveniently download your logs, click \"**Download log**.\"\n\n   ![Download your Streamlit Community Cloud logs](/images/streamlit-community-cloud/cloud-logs-menu-download.png)\n\n<Flex>\n\n<div>\n\nOther options accessible from Cloud logs are:\n\n- **Analytics** &mdash; See [App analytics](/deploy/streamlit-community-cloud/manage-your-app/app-analytics).\n- **Reboot app** &mdash; See [Reboot your app](/deploy/streamlit-community-cloud/manage-your-app/reboot-your-app).\n- **Delete app** &mdash; See [Delete your app](/deploy/streamlit-community-cloud/manage-your-app/delete-your-app).\n- **Settings** &mdash; See [App settings](/deploy/streamlit-community-cloud/manage-your-app/app-settings).\n- **Your apps** &mdash; Takes you to your [app workspace](#manage-your-app-from-your-workspace).\n- **Documentation** &mdash; Takes you to our documentation.\n- **Support** &mdash; Takes you to <a href=\"https://discuss.streamlit.io/\" target=\"_blank\">our forums</a>!\n\n</div>\n\n<div style={{ maxWidth: '30%', margin: \"auto\" }}>\n    <Image src=\"/images/streamlit-community-cloud/cloud-logs-menu-XL.png\" clean />\n</div>\n\n</Flex>\n\n### App chrome\n\nFrom your app at `<your-custom-subdomain>.streamlit.app`, you can always access the [app chrome](/develop/concepts/architecture/app-chrome) just like you can when developing locally. The option to deploy your app is removed, but you can still clear your cache from here.\n\n![App menus in Streamlit Community Cloud](/images/streamlit-community-cloud/app-menu.png)\n\n## Manage your app in GitHub\n\n### Update your app\n\nYour GitHub repository is the source for your app, so that means that any time you push an update to your repository you'll see it reflected in the app in almost real time. Try it out!\n\nStreamlit also smartly detects whether you touched your dependencies, in which case it will automatically do a full redeploy for you—which will take a little more time. But since most updates don't involve dependency changes, you should usually see your app update in real time.\n\n### Add or remove dependencies\n\nTo add or remove dependencies at any point, just update `requirements.txt` (Python dependenciess) or `packages.txt` (Linux dependencies), and commit the changes to your repository on GitHub. Community Cloud detects the change in your dependencies and automatically triggers (re)installation.\n\nIt is best practice to pin your Streamlit version in `requirements.txt`. Otherwise, the version may be auto-upgraded at any point without your knowledge, which could lead to undesired results (e.g. when we deprecate a feature in Streamlit).\n\n## App resources and limits\n\n### Resource limits\n\nAll Community Cloud users have access to the same resources and are subject to the same limits. These limits may change at any time without notice. If your app meets or exceeds its limits, it may slow down from throttling or become nonfunctional. The limits as of February 2024 are approximately as follows:\n\n- CPU: 0.078 cores minimum, 2 cores maximum\n- Memory: 690MB minimum, 2.7GBs maximum\n- Storage: No minimum, 50GB maximum\n\nSymptoms that your app is running out of resources include the following:\n\n- Your app is running slowly.\n- Your app displays \"🤯 This app has gone over its resource limits.\"\n- Your app displays \"😦 Oh no.\"\n\n### Good for the world\n\nStreamlit offers increased resources for apps with good-for-the-world use cases. Generally, these apps are used by an educational institution or nonprofit organization, are part of an open-source project, or benefit the world in some way. If your app is **not** primarily used by a for-profit company you can [apply for increased resources](https://info.snowflake.com/streamlit-resource-increase-request.html).\n\n### Optimizing your app\n\nIf your app is running slow or showing the error pages mentioned above, we first highly recommend going through and implementing the suggestions in the following blog posts to prevent your app from hitting the resource limits and to detect if your Streamlit app leaks memory:\n\n- <a href=\"https://blog.streamlit.io/common-app-problems-resource-limits/\" target=\"_blank\">Common app problems: Resource limits</a>\n- <a href=\"https://blog.streamlit.io/3-steps-to-fix-app-memory-leaks/\" target=\"_blank\">3 steps to fix app memory leaks</a>\n\nIf your app exceeds its resource limits, developers and viewers alike will see \"😦 Oh no.\"\n\n<div style={{ maxWidth: '70%', margin: 'auto' }}>\n<Image alt=\"App state: Oh no. Error running your app.\" src=\"/images/streamlit-community-cloud/app-state-oh-no.png\" />\n</div>\n\nIf see \"😦 Oh no.\" when viewing your app, first check your Cloud logs for any specific errors. If there are no errors in your Cloud logs you are likely dealing with a resource issue.\n\n#### Developer view\n\nIf you are signed in to a developer account for an app over its limits, you can access \"**Manage app**\" from the lower-right corner of the app to reboot it and clear its memory. \"**Manage app**\" will be red and have a warning icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>error</i>).\n\n![Developer view: Oh no. Error running your app.](/images/streamlit-community-cloud/app-state-oh-no-developer.png)\n\n### App hibernation\n\nAll apps without traffic for 12 hours go to sleep. Community Cloud hibernates apps to conserve resources and allow the best communal use of the platform. To keep your app awake, simply visit your app.\n\nWhen someone visits a sleeping app, they will see the sleeping page:\n\n<div style={{ maxWidth: '80%', margin: 'auto' }}>\n<Image alt=\"App state: Zzzz. This app has gone to sleep due to inactivity.\" src=\"/images/streamlit-community-cloud/app-state-zzzz.png\" />\n</div>\n\nTo wake the app up, click \"**Yes, get this app back up!**\" This can be done by *anyone* who has access to view the app, not just the app developer!\n\nYou can see which of your apps are asleep from your workspace. Sleeping apps have a moon icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>bedtime</i>) to the right.\n\n![App state: Zzzz. This app has gone to sleep due to inactivity](/images/streamlit-community-cloud/workspace-sleeping-app.png)"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/deploy",
    "content": "# Deploy your app on Community Cloud\n\nAfter you've [organized your files](/deploy/streamlit-community-cloud/deploy-your-app/file-organization) and [added your dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies) as described on the previous pages, you're ready to deploy your app to Community Cloud!\n\n## Select your repository and entrypoint file\n\n1. From your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, in the upper-right corner, click \"**Create app**.\"\n\n   ![Deploy a new app from your workspace](/images/streamlit-community-cloud/deploy-empty-new-app.png)\n\n1. When asked \"Do you already have an app?\" click \"**Yup, I have an app**.\"\n1. Fill in your repository, branch, and file path. Alternatively, to paste a link directly to `your_app.py` on GitHub, click \"**Paste GitHub URL**.\"\n1. Optional: In the \"App URL\" field, choose a subdomain for your new app.\n\n   Every Community Cloud app is deployed to a subdomain on `streamlit.app`, but you can change your app's subdomain at any time. For more information, see [App settings](/deploy/streamlit-community-cloud/manage-your-app/app-settings). In the following example, Community Cloud will deploy an app to `https://red-balloon.streamlit.app/`.\n\n   ![Fill in your app's information to deploy your app](/images/streamlit-community-cloud/deploy-an-app.png)\n\n   Although Community Cloud attempts to suggest available repositories and files, these suggestions are not always complete. If the desired information is not listed for any field, enter it manually.\n\n## Optional: Configure secrets and Python version\n\n<Note>\n\nStreamlit Community Cloud supports all released [versions of Python that are still receiving security updates](https://devguide.python.org/versions/). Streamlit Community Cloud defaults to version 3.12. You can select a version of your choice from the \"Python version\" dropdown in the \"Advanced settings\" modal. If an app is running a version of Python that becomes unsupported, it will be forcibly upgraded to the oldest supported version of Python and may break.\n\n</Note>\n\n1. Click \"**Advanced settings**.\"\n1. Select your desired version of Python.\n1. To define environment variables and secrets, in the \"Secrets\" field, paste the contents of your `secrets.toml` file.\n\n   For more information, see [Community Cloud secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n1. Click \"**Save**.\"\n\n<div style={{ maxWidth: '70%', margin: 'auto' }}>\n<Image alt=\"Advanced settings for deploying your app\" src=\"/images/streamlit-community-cloud/deploy-an-app-advanced.png\" />\n</div>\n\n## Watch your app launch\n\nYour app is now being deployed, and you can watch while it launches. Most apps are deployed within a few minutes, but if your app has a lot of dependencies, it may take longer. After the initial deployment, changes to your code should be reflected immediately in your app. Changes to your dependencies will be processed immediately, but may take a few minutes to install.\n\n![Watch your app launch](/images/streamlit-community-cloud/deploy-an-app-provisioning.png)\n\n<Note>\n\nThe Streamlit Community Cloud logs on the right-hand side of your app are only viewable to users with write access to your repository. These logs help you debug any issues with the app. Learn more about [Streamlit Community Cloud logs](/deploy/streamlit-community-cloud/manage-your-app#cloud-logs).\n\n</Note>\n\n<a name=\"your-app-url\"></a>\n\n## View your app\n\nThat's it&mdash;you're done! Your app now has a unique URL that you can share with others. Read more about how to [Share your app](/deploy/streamlit-community-cloud/share-your-app) with viewers.\n\n### Unique subdomains\n\nIf the \"**Custom subdomain (optional)**\" field is blank when you deploy your app, a URL is assigned following a structure based on your GitHub repo. The subdomain of the URL is a dash-separated list of the following:\n\n- Repository owner (GitHub user or organization)\n- Repository name\n- Entrypoint file path\n- Branch name, if other than `main` or `master`\n- A random hash\n\n```bash\nhttps://[GitHub username or organization]-[repo name]-[app path]-[branch name]-[short hash].streamlit.app\n```\n\nFor example, the following app is deployed from the `streamlit` organization. The repo is `demo-self-driving` and the app name is `streamlit_app.py` in the root directory. The branch name is `master` and therefore not included.\n\n```bash\nhttps://streamlit-demo-self-driving-streamlit-app-8jya0g.streamlit.app\n```\n\n### Custom subdomains\n\nSetting a custom subdomain makes it much easier to share your app because you can choose something memorable. To learn how to change the subdomain of a deployed app, see [View or change your app's URL](/deploy/streamlit-community-cloud/manage-your-app/app-settings#view-or-change-your-apps-url)."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/file-organization",
    "content": "# File organization for your Community Cloud app\n\nStreamlit Community Cloud copies all the files in your repository and executes `streamlit run` from its root directory. Because Community Cloud is creating a new Python environment to run your app, you need to include a declaration of any [App dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies) in addition to any [Configuration](/develop/concepts/configuration) options.\n\nYou can have multiple apps in your repository, and their entrypoint files can be anywhere in your repository. However, you can only have one configuration file. This page explains how to correctly organize your app, configuration, and dependency files. The following examples assume you are using `requirements.txt` to declare your dependencies because it is the most common. As explained on the next page, Community Cloud supports other formats for configuring your Python environment.\n\n## Basic example\n\nIn the following example, the entrypoint file (`your_app.py`) is in the root of the project directory alongside a `requirements.txt` file to declare the app's dependencies.\n\n```\nyour_repository/\n├── requirements.txt\n└── your_app.py\n```\n\nIf you are including custom configuration, your config file must be located at `.streamlit/config.toml` within your repository.\n\n```\nyour_repository/\n├── .streamlit/\n│   └── config.toml\n├── requirements.txt\n└── your_app.py\n```\n\nAdditionally, any files that need to be locally available to your app should be included in your repository.\n\n<Tip>\n\nIf you have really big or binary data that you change frequently, and git is running slowly, you might want to check out [Git Large File Store (LFS)](https://git-lfs.github.com/) as a better way to store large files in GitHub. You don't need to make any changes to your app to start using it. If your GitHub repository uses LFS, it will _just work_ with Streamlit Community Cloud.\n\n</Tip>\n\n## Use an entrypoint file in a subdirectory\n\nWhen your entrypoint file is in a subdirectory, the configuration file must stay at the root. However, your dependency file may be either at the root or next to your entrypoint file.\n\nYour dependency file can be at the root of your repository while your entrypoint file is in a subdirectory.\n\n```\nyour_repository/\n├── .streamlit/\n│   └── config.toml\n├── requirements.txt\n└── subdirectory\n    └── your_app.py\n```\n\nAlternatively, your dependency file can be in the same subdirectory as your entrypoint file.\n\n```\nyour_repository/\n├── .streamlit/\n│   └── config.toml\n└── subdirectory\n    ├── requirements.txt\n    └── your_app.py\n```\n\nAlthough most Streamlit commands interpret paths relative to the entrypoint file, some commands interpret paths relative to the working directory. On Community Cloud, the working directory is always the root of your repository. Therefore, when developing and testing your app locally, execute `streamlit run` from the root of your repository. This ensures that paths are interpreted consistently between your local environment and Community Cloud.\n\nIn the previous example, this would look something like this:\n\n```bash\ncd your_repository\nstreamlit run subdirectory/your_app.py\n```\n\n<Tip>\n    Remember to always use forward-slash path separators in your paths. Community Cloud can't work with backslash-separated paths.\n</Tip>\n\n## Multiple apps in one repository\n\nWhen you have multiple apps in one repository, they share the same configuration file (`.streamlit/config.toml`) at the root of your repository. A dependency file may be shared or configured separately for these multiple apps. To define separate dependency files for your apps, place each entrypoint file in its own subdirectory along with its own dependency file. To learn more about how Community Cloud prioritizes and parses dependency files, see [App dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies)."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies",
    "content": "# App dependencies for your Community Cloud app\n\nThe main reason that apps fail to build properly is because Streamlit Community Cloud can't find your dependencies! There are two kinds of dependencies your app might have: Python dependencies and external dependencies. Python dependencies are other Python packages (just like Streamlit!) that you `import` into your script. External dependencies are less common, but they include any other software your script needs to function properly. Because Community Cloud runs on Linux, these will be Linux dependencies installed with `apt-get` outside the Python environment.\n\nFor your dependencies to be installed correctly, make sure you:\n\n1. Add a [requirements file](#add-python-dependencies) for Python dependencies.\n2. Optional: To manage any external dependencies, add a `packages.txt` file.\n\n<Note>\n\nPython requirements files should be placed either in the root of your repository or in the same\ndirectory as your app's entrypoint file.\n\n</Note>\n\n## Add Python dependencies\n\nWith each `import` statement in your script, you are bringing in a Python dependency. You need to tell Community Cloud how to install those dependencies through a Python package manager. We recommend using a `requirements.txt` file, which is based on `pip`.\n\nYou should _not_ include <a href=\"https://docs.python.org/3/py-modindex.html\" target=\"_blank\">built-in Python libraries</a> like `math`, `random`, or `distutils` in your `requirements.txt` file. These are a part of Python and aren't installed separately. Also, Community Cloud has `streamlit` installed by default. You don't strictly need to include `streamlit` unless you want to pin or restrict the version. If you deploy an app without a `requirements.txt` file, your app will run in an environment with just `streamlit` (and its dependencies) installed.\n\n<Important>\n\nThe version of Python you use is important! Built-in libraries change between versions of Python and other libraries may have specific version requirements, too. Whenever Streamlit supports a new version of Python, Community Cloud quickly follows to default to that new version of Python. Always develop your app in the same version of Python you will use to deploy it. For more information about setting the version of Python when you deploy your app, see [Optional: Configure secrets and Python version](/deploy/streamlit-community-cloud/deploy-your-app/deploy#optional-configure-secrets-and-python-version).\n\n</Important>\n\nIf you have a script like the following, no extra dependencies would be needed since `pandas` and `numpy` are installed as direct dependencies of `streamlit`. Similarly, `math` and `random` are built into Python.\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport math\nimport random\n\nst.write(\"Hi!\")\n```\n\nHowever, a valid `requirements.txt` file would be:\n\n```none\nstreamlit\npandas\nnumpy\n```\n\nAlternatively, if you needed to specify certain versions, another valid example would be:\n\n```none\nstreamlit==1.24.1\npandas>2.0\nnumpy<=1.25.1\n```\n\nIn the above example, `streamlit` is pinned to version `1.24.1`, `pandas` must be strictly greater than version 2.0, and `numpy` must be at-or-below version 1.25.1. Each line in your `requirements.txt` file is effectively what you would like to `pip install` into your cloud environment.\n\n<Tip>\n    To learn about limitations of Community Cloud's Python environments, see [Community Cloud status and limitations](/deploy/streamlit-community-cloud/status#python-environments).\n</Tip>\n\n### Other Python package managers\n\nThere are other Python package managers in addition to `pip`. If you want to consider alternatives to using a `requirements.txt` file, Community Cloud will use the first dependency file it finds. Community Cloud will search the directory where your entrypoint file is, then it will search the root of your repository. In each location, dependency files are prioritized in the following order:\n\n<table style={{ textAlign: 'center' }}>\n    <tr>\n        <th style={{ fontSize: '1.2em' }}> Recognized Filename</th>\n        <th style={{ fontSize: '1.2em' }}>Python Package Manager</th>\n    </tr>\n    <tr>\n        <td style={{ fontSize: '1em' }}><code>uv.lock</code></td>\n        <td style={{ fontSize: '1em' }}><a href=\"https://docs.astral.sh/uv/concepts/projects/sync/\" target=\"_blank\">uv</a></td>\n    </tr>\n    <tr>\n        <td style={{ fontSize: '1em' }}><code>Pipfile</code></td>\n        <td style={{ fontSize: '1em' }}><a href=\"https://pipenv-fork.readthedocs.io/en/latest/basics.html\" target=\"_blank\">pipenv</a></td>\n    </tr>\n    <tr>\n        <td style={{ fontSize: '1em' }}><code>environment.yml</code></td>\n        <td style={{ fontSize: '1em' }}><a href=\"https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-file-manually\" target=\"_blank\">conda</a></td>\n    </tr>\n    <tr>\n        <td style={{ fontSize: '1em' }}><code>requirements.txt</code></td>\n        <td style={{ fontSize: '1em' }}><a href=\"https://pip.pypa.io/en/stable/user_guide/#requirements-files\" target=\"_blank\">pip</a><sup>&dagger;</sup></td>\n    </tr>\n    <tr>\n        <td style={{ fontSize: '1em' }}><code>pyproject.toml</code></td>\n        <td style={{ fontSize: '1em' }}><a href=\"https://python-poetry.org/docs/basic-usage/\" target=\"_blank\">poetry</a></td>\n    </tr>\n</table>\n\n&dagger; For efficiency, Community Cloud will attempt to process `requirements.txt` with `uv`, but will fall back to `pip` if needed. `uv` is generally faster and more efficient than `pip`.\n\n<Warning>\n\nYou should only use one dependency file for your app. If you include more than one (e.g. `requirements.txt` and `environment.yaml`), only the first file encountered will be used as described above, with any dependency file in your entrypoint file's directory taking precedence over any dependency file in the root of your repository.\n\n</Warning>\n\n## apt-get dependencies\n\nFor many apps, a `packages.txt` file is not required. However, if your script requires any software to be installed that is not a Python package, you need a `packages.txt` file. Community Cloud is built on Debian Linux. Anything you want to `apt-get install` must go in your `packages.txt` file. To browse available packages that can be installed, see the Debian 11 (\"bullseye\") [package list](https://packages.debian.org/bullseye/).\n\nIf `packages.txt` exists in the root directory of your repository we automatically detect it, parse it, and install the listed packages. You can read more about apt-get in <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\">Linux documentation</a>.\n\nAdd **apt-get** dependencies to `packages.txt` &mdash; one package name per line. For example, <a href=\"https://github.com/PyMySQL/mysqlclient\" target=\"_blank\"><code>mysqlclient</code></a> is a Python package which requires additional software be installed to function. A valid `packages.txt` file to enable `mysqlclient` would be:\n\n```bash\n    build-essential\n    pkg-config\n    default-libmysqlclient-dev\n```"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app",
    "content": "# Prep and deploy your app on Community Cloud\n\nStreamlit Community Cloud lets you deploy your apps in just one click, and most apps will be deployed in only a few minutes. If you don't have an app ready to deploy, you can fork or clone one from our <a href=\"https://streamlit.io/gallery\" target=\"_blank\">App gallery</a>&mdash;you can find apps for machine learning, data visualization, data exploration, A/B testing, and more. You can also [Deploy an app from a template](/deploy/streamlit-community-cloud/get-started/deploy-from-a-template). After you've deployed your app, check out how you can [Edit your app with GitHub Codespaces](/deploy/streamlit-community-cloud/manage-your-app/edit-your-app#edit-your-app-with-github-codespaces).\n\n<Note>\n\nIf you want to deploy your app on a different cloud service, see our [Deployment tutorials](/deploy/tutorials).\n\n</Note>\n\n## Summary\n\nThe pages that follow explain how to organize your app and provide complete information for Community Cloud to run it correctly.\n\nWhen your app has everything it needs, deploying is easy. Just go to your workspace and click \"**Create app**\" in the upper-right corner. Follow the prompts to fill in your app's information, and then click \"**Deploy**.\"\n\n![Deploy a new app from your workspace](/images/streamlit-community-cloud/deploy-empty-new-app.png)\n\n## Ready, set, go!\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"description\"\n        bold=\"File organization.\"\n        href=\"/deploy/streamlit-community-cloud/deploy-your-app/file-organization\"\n    >Learn how Community Cloud initializes your app and interprets paths. Learn where to put your configuration files.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"build_circle\"\n        bold=\"App dependencies.\"\n        href=\"/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies\"\n    >Learn how to install dependencies and other Python libraries into your deployment environment.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"password\"\n        bold=\"Secrets management.\"\n        href=\"/deploy/streamlit-community-cloud/deploy-your-app/secrets-management\"\n    >Learn about the interface Community Cloud provides to securely upload your <code>secrets.toml</code> data.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"flight_takeoff\"\n        bold=\"Deploy your app\"\n        href=\"/deploy/streamlit-community-cloud/deploy-your-app/deploy\"\n    >Put it all together to deploy your app for the whole world to see.</InlineCallout>\n</InlineCalloutContainer>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/secrets-management",
    "content": "# Secrets management for your Community Cloud app\n\n## Introduction\n\nIf you are [connecting to data sources](/develop/tutorials/databases), you will likely need to handle credentials or secrets. Storing unencrypted secrets in a git repository is a bad practice. If your application needs access to sensitive credentials, the recommended solution is to store those credentials in a file that is not committed to the repository and to pass them as environment variables.\n\n## How to use secrets management\n\nCommunity Cloud lets you save your secrets within your app's settings. When developing locally, you can use `st.secrets` in your code to read secrets from a `.streamlit/secrets.toml` file. However, this `secrets.toml` file should never be committed to your repository. Instead, when you deploy your app, you can paste the contents of your `secrets.toml` file into the \"**Advanced settings**\" dialog. You can update your secrets at any time through your app's settings in your workspace.\n\n### Prerequisites\n\n- You should understand how to use `st.secrets` and `secrets.toml`. See [Secrets management](/develop/concepts/connections/secrets-management).\n\n### Advanced settings\n\nWhile deploying your app, you can access \"**Advanced settings**\" to set your secrets. After your app is deployed, you can view or update your secrets through the app's settings. The deployment workflow is fully described on the next page, but the \"**Advanced settings**\" dialog looks like this:\n\n<div style={{ maxWidth: '70%', margin: 'auto' }}>\n<Image alt=\"Advanced settings for deploying your app\" src=\"/images/streamlit-community-cloud/deploy-an-app-advanced.png\" />\n</div>\n\nSimply copy and paste the contents of your local `secrets.toml` file into the \"Secrets\" field within the dialog. After you click \"**Save**\" to commit the changes, that's it!\n\n### Edit your app's secrets\n\nIf you need to add or edit your secrets for an app that is already deployed, you can access secrets through your [App settings](/deploy/streamlit-community-cloud/manage-your-app/app-settings). See [View or update your secrets](/deploy/streamlit-community-cloud/manage-your-app/app-settings#view-or-update-your-secrets)."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/indexability",
    "content": "# SEO and search indexability\n\nWhen you deploy a public app to Streamlit Community Cloud, it is automatically indexed by search engines like Google and Bing on a weekly basis. 🎈 This means that anyone can find your app by <a href=\"https://www.google.com/search?q=traingenerator.streamlit.app\" target=\"_blank\">searching for its custom subdomain</a> (e.g. \"traingenerator.streamlit.app\") or by searching for the app's title.\n\n## Get the most out of app indexability\n\nHere are some tips to help you get the most out of app indexability:\n\n1. [Make sure your app is public](#make-sure-your-app-is-public)\n2. [Choose a custom subdomain early](#choose-a-custom-subdomain-early)\n3. [Choose a descriptive app title](#choose-a-descriptive-app-title)\n4. [Customize your app's meta description](#customize-your-apps-meta-description)\n\n### Make sure your app is public\n\nAll public apps hosted on Community Cloud are indexed by search engines. If your app is private, it will not be indexed by search engines. To make your private app public, read [Share your app](/deploy/streamlit-community-cloud/share-your-app).\n\n### Choose a custom subdomain early\n\nCommunity Cloud automatically generates a subdomain for your app if you do not choose one. However, you can change your subdomain at any time! Custom subdomains modify your app URLs to reflect your app content, personal branding, or whatever you’d like. To learn how to change your app's subdomain, see [View or change your app's URL](/deploy/streamlit-community-cloud/manage-your-app/app-settings#view-or-change-your-apps-url).\n\nBy choosing a custom subdomain, you can use it to help people find your app. For example, if you're deploying an app that generates training data, you might choose a subdomain like `traingenerator.streamlit.app`. This makes it easy for people to find your app by searching for \"training generator\" or \"train generator streamlit app.\"\n\nWe recommend choosing a custom subdomain when you deploy your app. This ensures that your app is indexed by search engines using your custom subdomain, rather than the automatically generated one. If you choose a custom subdomain later, your app may be indexed multiple times&mdash;once using the default subdomain and once using your custom subdomain. In this case, your old URL will result in a 404 error which can confuse users who are searching for your app.\n\n### Choose a descriptive app title\n\nThe meta title of your app is the text that appears in search engine results. It is also the text that appears in the browser tab when your app is open. By default, the meta title of your app is the same as the title of your app. However, you can customize the meta title of your app by setting the [`st.set_page_config`](/develop/api-reference/configuration/st.set_page_config) parameter `page_title` to a custom string. For example:\n\n```python\nst.set_page_config(page_title=\"Traingenerator\")\n```\n\nThis will change the meta title of your app to \"Traingenerator.\" This makes it easier for people to find your app by searching for \"Traingenerator\" or \"train generator streamlit app\":\n\n<Image src=\"/images/streamlit-community-cloud/indexability-app-title.png\" caption='Google search results for \"train generator streamlit app\"' />\n\n### Customize your app's meta description\n\nMeta descriptions are the short descriptions that appear in search engine results. Search engines use the meta description to help users understand what your app is about.\n\nFrom our observations, search engines seem to favor the content in both `st.header` and `st.text` over `st.title`. If you put a description at the top of your app under `st.header` or `st.text`, there’s a good chance search engines will use this for the meta description.\n\n## What does my indexed app look like?\n\nIf you're curious about what your app looks like in search engine results, you can type the following into Google Search:\n\n```\nsite:<your-custom-subdomain>.streamlit.app\n```\n\nExample: `site:traingenerator.streamlit.app`\n\n<Image src=\"/images/streamlit-community-cloud/indexability-search-result.png\" caption='Google search results for \"site:traingenerator.streamlit.app\"' />\n\n## What if I don't want my app to be indexed?\n\nIf you don't want your app to be indexed by search engines, you can make it private. Read [Share your app](/deploy/streamlit-community-cloud/share-your-app) to learn more about making your app private. Note: each workspace can only have one private app. If you want to make your app private, you must first delete any other private app in your workspace or make it public.\n\nThat said, Community Cloud is an open and free platform for the community to deploy, discover, and share Streamlit apps and code with each other. As such, we encourage you to make your app public so that it can be indexed by search engines and discovered by other Streamlit users and community members."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/share-previews",
    "content": "# Share previews\n\nSocial media sites generate a card with a title, preview image, and description when you share a link. This feature is called a \"share preview.\" In the same way, when you share a link to a public Streamlit app on social media, a share preview is also generated. Here's an example of a share preview for a public Streamlit app posted on Twitter:\n\n<div style={{ marginLeft: '3em' }}>\n    <Flex>\n    <Image caption=\"Share preview for a public Streamlit app\" src=\"/images/streamlit-community-cloud/share-preview-twitter-annotated.png\" />\n    </Flex>\n</div>\n\n<Note>\n\nShare previews are generated only for public apps deployed on Streamlit Community Cloud.\n\n</Note>\n\n## Titles\n\nThe title is the text that appears at the top of the share preview. The text also appears in the browser tab when you visit the app. You should set the title to something that will make sense to your app's audience and describe what the app does. It is best practice to keep the title concise, ideally under 60 characters.\n\nThere are two ways to set the title of a share preview:\n\n1. Set the `page_title` parameter in [`st.set_page_config()`](/develop/api-reference/configuration/st.set_page_config) to your desired title. E.g.:\n\n   ```python\n   import streamlit as st\n\n   st.set_page_config(page_title=\"My App\")\n\n   # ... rest of your app\n   ```\n\n2. If you don't set the `page_title` parameter, the title of the share preview will be the name of your app's GitHub repository. For example, the default title for an app hosted on GitHub at <a href=\"https://github.com/jrieke/traingenerator\" target=\"_blank\">github.com/jrieke/traingenerator</a> will be \"traingenerator\".\n\n## Descriptions\n\nThe description is the text that appears below the title in the share preview. The description should summarize what the app does and ideally should be under 100 characters.\n\nStreamlit pulls the description from the README in the app's GitHub repository. If there is no README, the description will default to:\n\n_This app was built in Streamlit! Check it out and visit https://streamlit.io for more awesome community apps. 🎈_\n\n<div style={{ marginLeft: '6em' }}>\n    <Flex>\n    <Image caption=\"Default share preview when a description is missing\" src=\"/images/streamlit-community-cloud/share-preview-private-app.png\" />\n    </Flex>\n</div>\n\nIf you want your share previews to look great and want users to share your app and click on your links, you should write a good description in the README of your app’s GitHub repository.\n\n## Preview images\n\nStreamlit Community Cloud takes a screenshot of your app once a day and uses it as the preview image, unlike titles and descriptions which are pulled directly from your app's code or GitHub repository. This screenshot may take up to 24 hours to update.\n\n### Switching your app from public to private\n\nIf you initially made your app public and later decided to make it private, we will stop generating share previews for the app. However, it may take up to 24 hours for the share previews to stop appearing."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/embed-your-app",
    "content": "# Embed your app\n\nEmbedding Streamlit Community Cloud apps enriches your content by integrating interactive, data-driven applications directly within your pages. Whether you're writing a blog post, a technical document, or sharing resources on platforms like Medium, Notion, or even StackOverflow, embedding Streamlit apps adds a dynamic component to your content. This allows your audience to interact with your ideas, rather than merely reading about them or looking at screenshots.\n\nStreamlit Community Cloud supports both [iframe](#embedding-with-iframes) and [oEmbed](#embedding-with-oembed) methods for embedding **public** apps. This flexibility enables you to share your apps across a wide array of platforms, broadening your app's visibility and impact. In this guide, we'll cover how to use both methods effectively to share your Streamlit apps with the world.\n\n## Embedding with iframes\n\nStreamlit Community Cloud supports embedding **public** apps using the subdomain scheme. To embed a public app, add the query parameter `/?embed=true` to the end of the `*.streamlit.app` URL.\n\nFor example, say you want to embed the <a href=\"https://30days.streamlit.app/\" target=\"_blank\">30DaysOfStreamlit app</a>. The URL to include in your iframe is: `https://30days.streamlit.app/?embed=true`:\n\n```javascript\n<iframe\n  src=\"https://30days.streamlit.app?embed=true\"\n  style=\"height: 450px; width: 100%;\"\n></iframe>\n```\n\n<Cloud name=\"30days\" height=\"450px\" />\n\n<Important>\n\nThere will be no official support for embedding private apps.\n\n</Important>\n\nIn addition to allowing you to embed apps via iframes, the `?embed=true` query parameter also does the following:\n\n- Removes the toolbar with the app menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>).\n- Removes the padding at the top and bottom of the app.\n- Removes the footer.\n- Removes the colored line from the top of the app.\n\nFor granular control over the embedding behavior, Streamlit allows you to specify one or more instances of the `?embed_options` query parameter (e.g. to show the toolbar, open the app in dark theme, etc). [Click here for a full list of Embed options.](#embed-options)\n\n## Embedding with oEmbed\n\nStreamlit's oEmbed support allows for a simpler embedding experience. You can directly drop a Streamlit app's URL into a Medium, Ghost, or Notion page (or any of more than 700 content providers that supports oEmbed or <a href=\"https://embed.ly/\" target=\"_blank\">embed.ly</a>). The embedded app will automatically appear! This helps Streamlit Community Cloud apps seamlessly integrate into these platforms, improving the visibility and accessibility of your apps.\n\n### Example\n\nWhen creating content in a Notion page, Medium article, or Ghost blog, you only need to paste the app's URL and hit \"**Enter**.\" The app will then render automatically at that spot in your content. You can use your undecorated app URL without the `?embed=true` query parameter.\n\n```\nhttps://30days.streamlit.app/\n```\n\nHere's an example of <a href=\"https://github.com/chrieke\" target=\"_blank\">@chrieke</a>'s <a href=\"https://chrieke-prettymapp-streamlit-prettymappapp-1k0qxh.streamlit.app/\" target=\"_blank\">Prettymapp app</a> embedded in a Medium article:\n\n<Image src=\"/images/streamlit-community-cloud/oembed.gif\" alt=\"Example: Embed an app in a Medium article with oEmbed\" clean />\n\n<Tip>\n\nEnsure the platform hosting the embedded Streamlit app supports oEmbed or <a href=\"https://embed.ly/\" target=\"_blank\">embed.ly</a>.\n\n</Tip>\n\n### Key Sites for oEmbed\n\noEmbed should work out of the box for several platforms including but not limited to:\n\n- <a target=\"_blank\" href=\"https://medium.com/\">Medium</a>\n- <a target=\"_blank\" href=\"https://notion.so/\">Notion</a>\n- <a target=\"_blank\" href=\"https://www.looker.com/\">Looker</a>\n- <a target=\"_blank\" href=\"https://www.tableau.com/\">Tableau</a>\n- <a target=\"_blank\" href=\"https://ghost.org/\">Ghost</a>\n- <a target=\"_blank\" href=\"https://www.discourse.org/\">Discourse</a>\n- <a target=\"_blank\" href=\"https://stackoverflow.com/\">StackOverflow</a>\n- <a target=\"_blank\" href=\"https://www.w3schools.com/\">W3</a>\n- <a target=\"_blank\" href=\"https://www.reddit.com/\">Reddit</a>\n\nPlease check the specific platform's documentation to verify support for oEmbed.\n\n### iframe versus oEmbed\n\nThe only noteworthy differences between the methods is that iframing allows you to customize the app's embedding behavior (e.g. showing the toolbar, opening the app in dark theme, etc) using the various `?embed_options` described in the next section.\n\n## Embed options\n\nWhen [Embedding with iframes](#embedding-with-iframes), Streamlit allows you to specify one or more instances of the `?embed_options` query parameter for granular control over the embedding behavior.\n\nBoth `?embed` and `?embed_options` are invisible to [`st.query_params`](/develop/api-reference/caching-and-state/st.query_params) and its precursors, [`st.experimental_get_query_params`](/develop/api-reference/caching-and-state/st.experimental_get_query_params) and [`st.experimental_set_query_params`](/develop/api-reference/caching-and-state/st.experimental_set_query_params). You can't get or set their values.\n\nThe supported values for `?embed_options` are listed below:\n\n1. Show the toolbar at the top right of the app which includes the app menu (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>), running man, and link to GitHub.\n\n   ```javascript\n   /?embed=true&embed_options=show_toolbar\n   ```\n\n2. Show padding at the top and bottom of the app.\n\n   ```javascript\n   /?embed=true&embed_options=show_padding\n   ```\n\n3. Show the footer reading \"Made with Streamlit.\" (This doesn't apply to Streamlit versions 1.29.0 and later since the footer was removed from the library.)\n\n   ```javascript\n   /?embed=true&embed_options=show_footer\n   ```\n\n4. Show the colored line at the top of the app.\n\n   ```javascript\n   /?embed=true&embed_options=show_colored_line\n   ```\n\n5. Hide the \"skeleton\" that appears while an app is loading.\n\n   ```javascript\n   /?embed=true&embed_options=hide_loading_screen\n   ```\n\n6. Disable scrolling for the main body of the app. (The sidebar will still be scrollable.)\n\n   ```javascript\n   /?embed=true&embed_options=disable_scrolling\n   ```\n\n7. Open the app with light theme.\n\n   ```javascript\n   /?embed=true&embed_options=light_theme\n   ```\n\n8. Open the app with dark theme.\n\n   ```javascript\n   /?embed=true&embed_options=dark_theme\n   ```\n\nYou can also combine the params:\n\n```javascript\n/?embed=true&embed_options=show_toolbar&embed_options=show_padding&embed_options=show_footer&embed_options=show_colored_line&embed_options=disable_scrolling\n```\n\n### Build an embed link\n\nYou can conveniently build an embed link for your app &mdash; right from your app!\n\n1. From your app at `<your-custom-subdomain>.streamlit.app`, click \"**Share**\" in the upper-right corner.\n2. Click \"**Embed**\" to access a list of selectable embed options.\n\n   ![Access embed options from the share button](/images/streamlit-community-cloud/share-menu-embed.png)\n\n3. Select your embed options and click \"**Get embed link**\" to copy the embed link to your clipboard.\n\n   ![Build a customized embed link for your app from the share button](/images/streamlit-community-cloud/share-menu-embed-url.png)"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app",
    "content": "# Share your app\n\nNow that your app is deployed you can easily share it and collaborate on it. But first, let's take a moment and do a little joy dance for getting that app deployed! 🕺💃\n\nYour app is now live at a fixed URL, so go wild and share it with whomever you want. Your app will inherit permissions from your GitHub repo, meaning that if your repo is private your app will be private and if your repo is public your app will be public. If you want to change that you can simply do so from the app settings menu.\n\nYou are only allowed one private app at a time. If you've deployed from a private repository, you will have to make that app public or delete it before you can deploy another app from a private repository. Only developers can change your app between public and private.\n\n- [Make your app public or private](#make-your-app-public-or-private)\n- [Share your public app](#share-your-public-app)\n- [Share your private app](#share-your-private-app)\n\n## Make your app public or private\n\nIf you deployed your app from a public repository, your app will be public by default. If you deployed your app from a private repository, you will need to make the app public if you want to freely share it with the community at large.\n\n### Set privacy from your app settings\n\n1. Access your [App settings](/deploy/streamlit-community-cloud/manage-your-app/app-settings) and go to the \"**Sharing**\" section.\n\n   ![Share settings on Streamlit Community Cloud](/images/streamlit-community-cloud/workspace-app-settings-sharing.png)\n\n2. Set your app's privacy under \"Who can view this app.\" Select \"**This app is public and searchable**\" to make your app public. Select \"**Only specific people can view this app**\" to make your app private.\n\n   ![Set your app's privacy in share settings](/images/streamlit-community-cloud/workspace-app-settings-sharing-change.png)\n\n### Set privacy from the share button\n\n1. From your app at `<your-custom-subdomain>.streamlit.app`, click \"**Share**\" in the upper-right corner.\n\n   ![Access the share button from your app](/images/streamlit-community-cloud/share-open.png)\n\n2. Toggle your app between public and private by clicking \"**Make this app public**.\"\n\n   ![Toggle your app between public and private from the share button](/images/streamlit-community-cloud/share-menu-public-toggle.png)\n\n## Share your public app\n\nOnce your app is public, just give anyone your app's URL and they view it! Streamlit Community Cloud has several convenient shortcuts for sharing your app.\n\n### Share your app on social media\n\n1. From your app at `<your-custom-subdomain>.streamlit.app`, click \"**Share**\" in the upper-right corner.\n2. Click \"**Social**\" to access convenient social media share buttons.\n\n   ![Social media sharing links from the share button](/images/streamlit-community-cloud/share-menu-social.png)\n\n<Tip>\n\nUse the social media sharing buttons to post your app on our forum! We'd love to see what you make and perhaps feature your app as our app of the month. 💖\n\n</Tip>\n\n### Invite viewers by email\n\nWhether your app is public or private, you can send an email invite to your app directly from Streamlit Community Cloud. This grants the viewer access to analytics for all your public apps and the ability to invite other viewers to your workspace. Developers and invited viewers are identified by their email in analytics instead of appearing anonymously (if they view any of your apps while signed in). Read more about viewers in [App analytics](/deploy/streamlit-community-cloud/manage-your-app/app-analytics).\n\n1. From your app at `<your-custom-subdomain>.streamlit.app`, click \"**Share**\" in the upper-right corner.\n2. Enter an email address and click \"**Invite**.\"\n\n   ![Invite viewers from the share button](/images/streamlit-community-cloud/share-invite-public.png)\n\n3. Invited users will get a direct link to your app in their inbox.\n\n   ![Invitation email sent to viewers](/images/streamlit-community-cloud/share-invite-email.png)\n\n### Copy your app's URL\n\nFrom your app click \"**Share**\" in the upper-right corner then click \"**Copy link**.\"\n\n![Copy your app's URL from the share button](/images/streamlit-community-cloud/share-copy.png)\n\n### Add a badge to your GitHub repository\n\nTo help others find and play with your Streamlit app, you can add Streamlit's GitHub badge to your repo. Below is an enlarged example of what the badge looks like. Clicking on the badge takes you to&mdash;in this case&mdash;Streamlit's Roadmap.\n\n<div style={{ marginBottom: '2em' }}>\n<div style={{ width: 'fit-content', margin: 'auto' }}>\n    <a href=\"https://roadmap.streamlit.app/\" target=\"_blank\">\n    <Image alt=\"Open in Streamlit badge for GitHub\" src=\"/images/streamlit-community-cloud/github-badge.svg\" pure />\n    </a>\n</div>\n</div>\n\nOnce you deploy your app, you can embed this badge right into your GitHub README.md by adding the following Markdown:\n\n```markdown\n[![Streamlit App](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](https://<your-custom-subdomain>.streamlit.app)\n```\n\n<Note>\n\nBe sure to replace `https://<your-custom-subdomain>.streamlit.app` with the URL of your deployed app!\n\n</Note>\n\n## Share your private app\n\nBy default an app deployed from a private repository will be private to the developers in the workspace. A private app will not be visible to anyone else unless you grant them explicit permission. You can grant permission by adding them as a developer on GitHub or by adding them as a viewer on Streamlit Community Cloud.\n\nOnce you have added someone's email address to your app's viewer list, that person will be able to sign in and view your private app. If their email is associated with a Google account, they will be able to sign in with Google OAuth. Otherwise, they will be able to sign in with single-use, emailed links. Streamlit sends an email invitation with a link to your app every time you invite someone.\n\n<Important>\n\nWhen you add a viewer to any app in your workspace, they are granted access to analytics for that app as well as analytics for all your public apps. They can also pass these permissions to others by inviting more viewers. All viewers and developers in your workspace are identified by their email in analytics. Furthermore, their emails show in analytics for every app in your workspace and not just apps they are explicitly invited to. Read more about viewers in [App analytics](/deploy/streamlit-community-cloud/manage-your-app/app-analytics)\n\n</Important>\n\n### Invite viewers from the share button\n\n1. From your app at `<your-custom-subdomain>.streamlit.app`, click \"**Share**\" in the upper-right corner.\n\n   ![Access the share button from your app](/images/streamlit-community-cloud/share-open.png)\n\n2. Enter the email to send an invitation to and click \"**Invite**.\"\n\n   ![Invite viewers from the share button](/images/streamlit-community-cloud/share-invite.png)\n\n3. Invited users appear in the list below.\n\n   ![View invited users from the share button](/images/streamlit-community-cloud/share-invited.png)\n\n4. Invited users will get a direct link to your app in their inbox.\n\n   ![Invitation email sent to viewers](/images/streamlit-community-cloud/share-invite-email.png)\n\n- To remove a viewer, simply access the share menu as above and click the <i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>close</i> next to their name.\n\n  ![Remove viewers from the share button](/images/streamlit-community-cloud/share-remove.png)\n\n### Invite viewers from your app settings\n\n1. Access your [App settings](/deploy/streamlit-community-cloud/manage-your-app/app-settings) and go to the \"**Sharing**\" section.\n\n   ![Access sharing settings from your app settings](/images/streamlit-community-cloud/workspace-app-settings-sharing.png)\n\n2. Add or remove users from the list of viewers. Click \"**Save**.\"\n\n   ![Invite and remove viewers from your app settings](/images/streamlit-community-cloud/workspace-app-settings-sharing-invite.png)"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out",
    "content": "# Sign in & sign out\n\nAfter you've created your account, you can sign in to <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a> as described by the following options.\n\n![Sign in to Streamlit Community Cloud](/images/streamlit-community-cloud/account-sign-in.png)\n\n## Sign in with Google\n\n1. Click \"**Continue to sign-in**.\"\n1. Click \"**Continue with Google**.\"\n1. Enter your Google account credentials and follow the prompts.\n\nIf your account is already linked to GitHub, you may be immediately prompted to sign in with GitHub.\n\n## Sign in with GitHub\n\n1. Click \"**Continue to sign-in**.\"\n1. Click \"**Continue with GitHub**.\"\n1. Enter your GitHub credentials and follow the prompts.\n\n<Important>\n    When you sign in with GitHub, Community Cloud will look for an account that uses the same email you have on your GitHub account. If such an account doesn't exist, Community Cloud will look for an account that uses your GitHub account for source control. In this latter instance, Community Cloud will update the email on your Community Cloud account to match the email on your GitHub account.\n</Important>\n\n## Sign in with Email\n\n1. Click \"**Continue to sign-in**.\"\n1. In the \"Email\" field, enter your email address.\n1. Click \"**Continue**.\" (If prompted, verify you are human.)\n1. Go to your email inbox, and copy your one-time, six-digit code. The code is valid for ten minutes.\n1. Return to the authentication page, and enter your code. (If prompted, verify you are human.)\n\nIf your account is already linked to GitHub, you may be immediately prompted to sign in with GitHub.\n\n## Sign out of your account\n\nFrom your workspace, click on your workspace name in the upper-left corner. Click \"**Sign out**.\"\n\n<div style={{ maxWidth: '80%', margin: 'auto' }}>\n<Image alt=\"Sign out of Streamlit Community Cloud\" src=\"/images/streamlit-community-cloud/account-sign-out.png\" />\n</div>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/manage-your-github-connection",
    "content": "# Manage your GitHub connection\n\nIf you have created an account but not yet connected GitHub, see [Connect your GitHub account](/deploy/streamlit-community-cloud/get-started/connect-your-github-account).\n\nIf you have already connected your GitHub account but still need to allow Streamlit Community Cloud to access private repositories, see [Optional: Add access to private repositories](/deploy/streamlit-community-cloud/get-started/connect-your-github-account#optional-add-access-to-private-repositories).\n\n## Add access to an organization\n\nIf you are in an organization, you can grant or request access to that organization when you connect your GitHub account. For more information, see [Organization access](/deploy/streamlit-community-cloud/get-started/connect-your-github-account#organization-access).\n\nIf your GitHub account is already connected, you can remove permissions in your GitHub settings and force Streamlit to reprompt for GitHub authorization the next time you sign in to Community Cloud.\n\n### Revoke and reauthorize\n\n1. From your workspace, click on your workspace name in the upper-right corner. To sign out of Community Cloud, click \"**Sign out**.\" \n\n   ![Sign out of Streamlit Community Cloud](/images/streamlit-community-cloud/account-sign-out.png)\n\n1. Go to your GitHub application settings at <a href=\"https://github.com/settings/applications\" target=\"_blank\">github.com/settings/applications</a>.\n1. Find the \"Streamlit\" application, and click on the three dots (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_horiz</i>) to open the overflow menu.\n\n   If you have ever signed in to Community Cloud using GitHub, you will also see the \"Streamlit Community Cloud\" application in your GitHub account. The \"Streamlit\" application manages repository access. The \"Streamlit Community Cloud\" application is only for managing your identity (email) on Community Cloud. You only need to revoke access to the \"Streamlit\" application.\n\n1. Click \"**Revoke**.\"\n\n   <div style={{ maxWidth: '75%', margin: 'auto' }}>\n   <Image alt=\"Revoke access for Streamlit to access your GitHub account\" src=\"/images/streamlit-community-cloud/GitHub-revoke.png\" />\n   </div>\n\n1. Click \"**I understand, revoke access**.\"\n\n  <div style={{ maxWidth: '50%', margin: 'auto' }}>\n  <Image alt=\"Confirm to revoke access for Streamlit to your GitHub account\" src=\"/images/streamlit-community-cloud/GitHub-revoke-confirm.png\" />\n  </div>\n\n1. Return to <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a> and sign in. You will be prompted to authorize GitHub as explained in [Connect GitHub](/deploy/streamlit-community-cloud/get-started/connect-your-github-account#organization-access).\n\n### Granting previously denied access\n\nIf an organization owner has restricted Streamlit's access or restricted all OAuth applications, they may need to directly modify their permissions in GitHub. If an organization has restricted Streamlit's access, a red X (<i style={{ verticalAlign: \"-.25em\", color: \"#d1242f\" }} className={{ class: \"material-icons-sharp\" }}>close</i>) will appear next to the organization when you are prompted to authorize with your GitHub account.\n\n<div style={{ maxWidth: '60%', margin: 'auto' }}>\n<Image alt=\"Denied authorization for Streamlit to access your GitHub account\" src=\"/images/streamlit-community-cloud/GitHub-auth-denied-XL.png\" />\n</div>\n\nSee GitHub's documentation on <a href=\"https://docs.github.com/en/apps/oauth-apps/using-oauth-apps/authorizing-oauth-apps#oauth-apps-and-organizations\" target=\"_blank\">OAuth apps and organizations</a>.\n\n## Rename your GitHub account or repositories\n\nCommunity Cloud identifies apps by their GitHub coordinates (owner, repository, branch, entrypoint file path). If you rename your account or repository from which you've deployed an app, you will lose access to administer the app. To learn more, see [Rename your app in GitHub](/deploy/streamlit-community-cloud/manage-your-app/rename-your-app)."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/delete-your-account",
    "content": "# Delete your account\n\nDeleting your Streamlit Community Cloud account is just as easy as creating it. When you delete your account, your information, account, and all your hosted apps are deleted as well. Read more about data deletion in [Streamlit trust and security](/deploy/streamlit-community-cloud/get-started/trust-and-security#data-deletion).\n\n<Warning>\n\nDeleting your account is permanent and cannot be undone. Make sure you really want to delete your account and all hosted apps before proceeding. Any app you've deployed will be deleted, regardless of the workspace it was deployed from.\n\n</Warning>\n\n## How to delete your account\n\nFollow these steps to delete your account:\n\n1. Sign in to Streamlit Community Cloud at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a> and access your [Workspace settings](/deploy/streamlit-community-cloud/manage-your-account/workspace-settings).\n\n   ![Delete your Streamlit Community Cloud account from your workspace settings](/images/streamlit-community-cloud/workspace-settings-linked-accounts.png)\n\n1. From the \"**Linked accounts**\" section, click \"**Delete account**.\"\n1. In the confirmation dialog, follow the prompt and click \"**Delete account forever**.\"\n\n   All your information and apps will be permanently deleted.\n\n   ![Your Streamlit Community Cloud account has been deleted.](/images/streamlit-community-cloud/account-deleted.png)\n\nIt's that simple! If you have any questions or run into issues deleting your account, please reach out to us on <a href=\"https://discuss.streamlit.io/c/community-cloud/13\" target=\"_blank\">our forum</a>. We're happy to help! 🎈"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/update-your-email",
    "content": "# Update your email\n\nTo update your email on Streamlit Community Cloud, you have two options: You can create a new account and merge your existing account into it, or you can use your GitHub account to update your email.\n\n## Option 1: Create a new account and merge it\n\nTwo Community Cloud accounts can't have the same GitHub account for source control. When you connect a GitHub account to a new Community Cloud account for source control, Community Cloud will automatically merge any existing account with the same source control.\n\nTherefore, you can create a new account with the desired email and connect the same GitHub account to merge them together.\n\n1. Create a new account with your new email.\n1. Connect your GitHub account.\n\nYour old and new accounts are now merged, and you have effectively changed your email address.\n\n## Option 2: Use your GitHub account\n\nAlternatively, you can change the email on your GitHub account and then sign in to Community Cloud with GitHub.\n\n1. Go to GitHub, and set your primary email address to your new email.\n1. If you are currently signed in to Community Cloud, sign out.\n1. Sign in to Community Cloud _using GitHub_.\n\n   If you are redirected to your workspace and you see your existing apps, you're done! Your email has been changed. To confirm your current email and GitHub account, click on your workspace name in the upper-left corner, and look at the bottom of the drop-down menu.\n\n   If you are redirected to an empty workspace and you see \"**Workspaces <i style={{ verticalAlign: \"-.25em\", color: \"#ff8700\" }} className={{ class: \"material-icons-sharp\" }}>warning</i>**\" in the upper-left corner, proceed to [Connect your GitHub account](/deploy/streamlit-community-cloud/get-started/connect-your-github-account). This can happen if you previously created an account with your new email but didn't connect a GitHub account to it.\n\n<Important>\n   If you have multiple GitHub accounts, be careful. To avoid unexpected behavior, either use unique emails on each GitHub account or avoid signing in to Community Cloud using GitHub.\n</Important>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account",
    "content": "# Manage your account\n\nYou can [Update your email](/deploy/streamlit-community-cloud/manage-your-account/update-your-email) or completely [Delete your account](/deploy/streamlit-community-cloud/manage-your-account/delete-your-account) through [Workspace settings](/deploy/streamlit-community-cloud/manage-your-account/workspace-settings).\n\nYour Streamlit Community Cloud account is identified by your email. When you sign in to Community Cloud, regardless of which method you use, you are providing Community Cloud with your email address. In particular, when you sign in to Community Cloud using GitHub, you are using the primary email on your GitHub account. You can view your email identity and source-control identity from your workspace settings, under \"[**Linked accounts**](/deploy/streamlit-community-cloud/manage-your-account/workspace-settings#linked-accounts).\"\n\n## Access your workspace settings\n\n1. Sign in to <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>.\n1. In the upper-left corner, click on your workspace name.\n1. In the drop-down menu, click \"**Settings**.\"\n\n<div style={{ maxWidth: '75%', marginLeft: '3em' }}>\n    <Image src=\"/images/streamlit-community-cloud/account-settings-header.png\" alt=\"Access your workspace settings from your workspace\" />\n</div>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/workspace-settings",
    "content": "# Workspace settings\n\nFrom your workspace settings you can [Manage your account](/deploy/streamlit-community-cloud/manage-your-account), see your [App resources and limits](/deploy/streamlit-community-cloud/manage-your-app#app-resources-and-limits) and access support resources.\n\n## Access your workspace settings\n\n1. Sign in to <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>.\n1. In the upper-left corner, click on your workspace name.\n1. In the drop-down menu, click \"**Settings**.\"\n\n   ![Access your workspace settings from your workspace](/images/streamlit-community-cloud/account-settings-header.png)\n\n## Linked accounts\n\nThe \"**Linked accounts**\" section shows your current email identity and source control account. To learn more, see [Manage your account](/deploy/streamlit-community-cloud/manage-your-account).\n\n![Manage your linked accounts in workspace settings](/images/streamlit-community-cloud/workspace-settings-linked-accounts.png)\n\n## Limits\n\nThe \"**Limits**\" section shows your current resources and limits. To learn more, see [App resources and limits](/deploy/streamlit-community-cloud/manage-your-app#app-resources-and-limits).\n\n![Resource limits displayed in workspace settings](/images/streamlit-community-cloud/workspace-settings-limits.png)\n\n## Support\n\nThe \"**Support**\" section provides a convenient list of useful resources so you know where to go for help.\n\n![Support options available through workspace settings](/images/streamlit-community-cloud/workspace-settings-support.png)"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/explore-your-workspace",
    "content": "# Explore your workspace\n\nIf you just [created your account](/deploy/streamlit-community-cloud/get-started/create-your-account) and [connected your GitHub account](/deploy/streamlit-community-cloud/get-started/connect-your-github-account), congrats! You are now signed in and ready to go. If you are joining someone else's workspace you may already see some apps.\n\n## Workspaces\n\nEach GitHub account and organization is associated with a workspace in Community Cloud. When you sign in to Community Cloud for the first time, you will land in your personal workspace associated with your GitHub user account. The upper-left corner of Community Cloud shows your current workspace.\n\n![A new, empty workspace in Streamlit Community Cloud. The workspace owner is displayed in the upper-left corner.](/images/streamlit-community-cloud/workspace-empty-SM.png)\n\n### Switching workspaces\n\nTo switch between workspaces, click the workspace name in the upper-left corner and select a new workspace.\n\nOther workspaces are available to you as follows:\n\n- When you have write permissions to a repository and the repository owner has joined Community Cloud, you can select the associated workspace. An owner can be a GitHub user or organization.\n- If someone has shared an app with you through Community Cloud, you will see the app's associated workspace. This is view-only access.\n\n![This workspace is for the user `sammy-streamlit`, who has access to their personal workspace and another workspace for the organization `we-love-streamlit`.](/images/streamlit-community-cloud/workspace-empty-switch.png)\n\n### Invite other developers to your workspace\n\nInviting other developers is simple: Just give them write access to your GitHub repository so that you can code together. When they sign in to <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, they'll have access to your workspace.\n\nStreamlit Community Cloud inherits developer permissions from GitHub. When others sign in to Community Cloud, they will automatically see the workspaces they share with you. From there you can all deploy, manage, and share apps together.\n\n<Note>\n\nWhen a user is added to a repository on GitHub, it will take at most 15 minutes before they can deploy or manage the app on Community Cloud. If a user is removed from a repository on GitHub, it will take at most 15 minutes before their permission to manage the app from that repository is revoked.\n\n</Note>\n\nAnd remember, whenever anyone on the team updates the code on GitHub, the app will automatically update for you!\n\n## My apps\n\nThe \"**My apps**\" section of your workspace is your base of operations to deploy and manage your apps. When you deploy an app, it is added to this section of your workspace.\n\n### Deploying apps\n\nIf you already have an app saved to a GitHub repo, you can deploy it directly. Otherwise, Community Cloud provides templates you can use. When you deploy from a template, Community Cloud will fork a project into your GitHub account and deploy from the new fork. This is a convenient way to get started if you haven't already created a Streamlit app.\n\nTo get started, just click \"**Create app**\" in the upper-right corner. To learn more, see [Deploy your app](/deploy/streamlit-community-cloud/deploy-your-app) and [Deploy from a template](/deploy/streamlit-community-cloud/get-started/deploy-from-a-template).\n\n## My profile\n\nThe \"**My profile**\" section of your workspace lets you customize a personal portfolio of Streamlit apps to share with the world. Curate and feature your Streamlit apps to show off your work.\n\n## Explore\n\nFor inspiration, check out the \"**Explore**\" section. This is a gallery of Streamlit apps created by the Streamlit community. Check out popular and trending apps, or search for apps in an area that interests you."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart",
    "content": "# Quickstart\n\nThis is a concise set of steps to create your Streamlit Community Cloud account, deploy a sample app, and start editing it with GitHub Codespaces. For other options and complete explanations, start with [Create your account](/deploy/streamlit-community-cloud/get-started/create-your-account).\n\nYou will sign in to your GitHub account during this process. Community Cloud will use the email from your GitHub account to create your Community Cloud account. For other sign-in options, see [Create your account](/deploy/streamlit-community-cloud/get-started/create-your-account).\n\n## Prerequisites\n\n- You must have a GitHub account.\n\n## Sign up for Streamlit Community Cloud\n\n1. Go to <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>.\n1. Click \"**Continue to sign-in**.\"\n1. Click \"**Continue with GitHub**.\"\n1. Enter your GitHub credentials and follow GitHub's authentication prompts.\n1. Fill in your account information, and click \"**I accept**\" at the bottom.\n\n## Add access to your public repositories\n\n1. In the upper-left corner, click \"**Workspaces <i style={{ verticalAlign: \"-.25em\", color: \"#ff8700\" }} className={{ class: \"material-icons-sharp\" }}>warning</i>**.\"\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"Connect your GitHub account to a new Community Cloud account\" src=\"/images/streamlit-community-cloud/workspace-unconnected-setup.png\" />\n</div>\n\n1. From the drop down, click \"**Connect GitHub account**.\"\n1. Enter your GitHub credentials and follow GitHub's authentication prompts.\n1. Click \"**Authorize streamlit**.\"\n\n<div style={{ maxWidth: '40%', margin: 'auto' }}>\n<Image alt=\"Authorize Community Cloud to connect to your GitHub account\" src=\"/images/streamlit-community-cloud/GitHub-auth1-none.png\" />\n</div>\n\n## Optional: Add access to private repositories\n\n1. In the upper-left corner, click on your GitHub username.\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"Access your workspace settings\" src=\"/images/streamlit-community-cloud/workspace-empty-menu.png\" />\n</div>\n\n1. From the drop down, click \"**Settings**.\"\n1. On the left side of the dialog, select \"**Linked accounts**.\"\n1. Under \"Source control,\" click \"**Connect here <i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>arrow_forward</i>**.\"\n1. Click \"**Authorize streamlit**.\"\n\n<div style={{ maxWidth: '40%', margin: 'auto' }}>\n<Image alt=\"Authorize Community Cloud to connect to your private GitHub repositories\" src=\"/images/streamlit-community-cloud/GitHub-auth2-none.png\" />\n</div>\n\n## Create a new app from a template\n\n1. In the upper-right corner, click \"**Create app**.\"\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"Create a new app from your workspace in Streamlit Community Cloud\" src=\"/images/streamlit-community-cloud/deploy-empty-new-app.png\" />\n</div>\n\n1. When asked \"Do you already have an app?\" click \"**Nope, create one from a template**.\"\n1. From the list of templates on the left, select \"**Blank app**.\"\n1. At the bottom, select the option to \"**Open GitHub Codespaces...**\"\n1. At the bottom, click \"**Deploy**.\"\n\n## Edit your app in GitHub Codespaces\n\n1. Wait for GitHub to set up your codespace.\n\n   It can take several minutes to fully initialize your codespace. After the Visual Studio Code editor appears in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, a split screen view displays a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file.\n\n   <div style={{ maxWidth: '90%', margin: 'auto' }}>\n   <Image alt=\"Your new GitHub Codespace\" src=\"/images/streamlit-community-cloud/deploy-template-blank-codespace.png\" />\n   </div>\n\n1. Go to the app's entrypoint file (`streamlit_app.py`) in the left pane, and change line 3 by adding \"Streamlit\" inside `st.title`.\n\n   ```diff\n   -st.title(\"🎈 My new app\")\n   +st.title(\"🎈 My new Streamlit app\")\n   ```\n\n   Files are automatically saved in your codespace with each edit.\n\n1. A moment after typing a change, your app on the right side will display a rerun prompt. Click \"**Always rerun**.\"\n\n   <div style={{ maxWidth: '90%', margin: 'auto' }}>\n   <Image alt=\"Edit the title of your sample Streamlit app\" src=\"/images/streamlit-community-cloud/deploy-template-blank-codespace-edit.png\" />\n   </div>\n\n   If the rerun prompt disappears before you click it, you can hover over the overflow menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>) to bring it back.\n\n1. Optional: Continue to make edits and observe the changes within seconds.\n\n## Publish your changes\n\n1. In the left navigation bar, click the source control icon.\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"See your deployed Streamlit app\" src=\"/images/streamlit-community-cloud/deploy-template-blank-codespace-edit-source-control.png\" />\n</div>\n\n1. In the source control sidebar on the left, enter a name for your commit.\n1. Click \"**<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>check</i> Commit**.\"\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"See your deployed Streamlit app\" src=\"/images/streamlit-community-cloud/deploy-template-blank-codespace-edit-commit.png\" />\n</div>\n\n1. To stage and commit all your changes, in the confirmation dialog, click \"**Yes**.\"  Your changes are committed locally in your codespace.\n1. To push your commit to GitHub, in the source control sidebar on the left, click \"**<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>cached</i> 1 <i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>arrow_upward</i>**.\"\n1. To push commits to \"origin/main,\" in the confirmation dialog, click \"**OK**.\" \n\n   Your changes are now saved to your GitHub repository. Community Cloud will immediately reflect the changes in your deployed app.\n\n1. Optional: To see your updated, published app, return to the \"**My apps**\" section of your workspace at <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>, and click on your app.\n\n## Stop or delete your codespace\n\nWhen you stop interacting with your codespace, GitHub will generally stop your codespace for you. However, the surest way to avoid undesired use of your capacity is to stop or delete your codespace when you are done.\n\n1. Go to <a href=\"https://github.com/codespaces\" target=\"_blank\">github.com/codespaces</a>. At the bottom of the page, all your codespaces are listed. Click the overflow menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_horiz</i>) for your codespace.\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"Stop or delete your GitHub Codespace\" src=\"/images/streamlit-community-cloud/deploy-hello-codespace-manage.png\" />\n</div>\n\n2. If you want to return to your work later, click \"**Stop codespace**.\" Otherwise, click \"**Delete**.\"\n\n   <div style={{ maxWidth: '40%', margin: 'auto' }}>\n   <Image alt=\"Stop your GitHub codespace\" src=\"/images/streamlit-community-cloud/codespace-menu.png\" />\n   </div>\n\n3. Congratulations! You just deployed an app to Streamlit Community Cloud. 🎉 Return to your workspace at <a href=\"https://share.streamlit.io/\" target=\"_blank\">share.streamlit.io/</a> and [deploy another Streamlit app](/deploy/streamlit-community-cloud/deploy-your-app).\n\n   <div style={{ maxWidth: '90%', margin: 'auto' }}>\n   <Image alt=\"See your deployed Streamlit app\" src=\"/images/streamlit-community-cloud/deploy-template-blank-edited.png\" />\n   </div>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/deploy-from-a-template",
    "content": "# Deploy an app from a template\n\nStreamlit Community Cloud makes it easy to get started with several convenient templates. Just pick a template, and Community Cloud will fork it to your account and deploy it. Any edits you push to your new fork will immediately show up in your deployed app. Additionally, if you don't want to use a local development environment, Community Cloud makes it easy to create a GitHub codespace that's fully configured for Streamlit app development.\n\n## Access the template picker\n\nThere are two ways to begin deploying a template: the \"**Create app**\" button and the template gallery at the bottom of your workspace.\n\n- If you click the \"**Create app**\" button, Community Cloud will ask you \"Do you already have an app?\" Select \"**Nope, create one from a template**.\"\n- If you scroll to the bottom of your workspace in the \"**My apps**\" section, you can see the most popular templates. Click on one directly, or select \"**View all templates**.\"\n\nThe template picker shows a list of available templates on the left. A preview for the current, selected template shows on the right.\n\n![\"Deploy from a template\" page on Community Cloud](/images/streamlit-community-cloud/deploy-template-picker.png)\n\n## Select a template\n\n1. From the list of templates on the left, select \"**GDP dashboard**.\"\n1. Optional: For \"Name of new GitHub repository,\" enter a name for your new, forked repository.\n\n   When you deploy a template, Community Cloud forks the template repository into your GitHub account. Community Cloud chooses a default name for this repository based on the selected template. If you have previously deployed the same template with its default name, Community Cloud will append an auto-incrementing number to the name.\n\n   <Note>\n       Even if you have another user's or organization's workspace selected, Community Cloud will always deploy a template app from your personal workspace. That is, Community Cloud will always fork a template into your GitHub user account. If you want to deploy a template app from an organization, manually fork the template in GitHub, and deploy it from your fork in the associated workspace.\n   </Note>\n\n1. Optional: In the \"App URL\" field, choose a subdomain for your new app.\n\n   Every Community Cloud app is deployed to a subdomain on `streamlit.app`, but you can change your app's subdomain at any time. For more information, see [App settings](/deploy/streamlit-community-cloud/manage-your-app/app-settings).\n\n1. Optional: To edit the template in a GitHub codespace immediately, select the option to \"**Open GitHub Codespaces...**\"\n\n   You can create a codespace for your app at any time. To learn how to create a codespace after you've deployed an app, see [Edit your app](/deploy/streamlit-community-cloud/manage-your-app/edit-your-app).\n\n1. Optional: To change the version of Python, at the bottom of the screen, click \"**Advanced settings**,\" select a Python version, and then click \"**Save**.\"\n\n   <Important>\n       After an app is deployed, you can't change the version of Python without deleting and redeploying the app. \n   </Important>\n\n1. At the bottom, click \"**Deploy**.\"\n\n## View your app\n\n- If you didn't select the option to open GitHub Codespaces, you are redirected to your new app.\n\n  ![GDP dashboard template app](/images/streamlit-community-cloud/deploy-template-GDP.png)\n\n- If you selected the option to open GitHub Codespaces, you are redirected to your new codespace, which can take several minutes to be fully initialized. After the Visual Studio Code editor appears in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, a split screen view displays a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file.\n\n  ![GDP dashboard template app in a codespace](/images/streamlit-community-cloud/deploy-template-GDP-codespace.png)\n\n<Important>\n    The app displayed in your codespace is not the same instance you deployed on Community Cloud. Your codespace is a self-contained development environment. When you make edits inside a codespace, those edits don't leave the codespace until you commit them to your repository. When you commit your changes to your repository, Community Cloud detects the changes and updates your deployed app. To learn more, see [Edit your app](/deploy/streamlit-community-cloud/manage-your-app/edit-your-app).\n</Important>"
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account",
    "content": "# Connect your GitHub account\n\nConnecting GitHub to your Streamlit Community Cloud account allows you to deploy apps directly from the files you store in your repositories. It also lets the system check for updates to those files and automatically update your apps. When you first connect your GitHub account to your Community Cloud account, you'll be able to deploy apps from your public repositories to Community Cloud. If you want to deploy from private repositories, you can give Community Cloud additional permissions to do so. For more information about these permissions, see [GitHub OAuth scope](/deploy/streamlit-community-cloud/status#github-oauth-scope).\n\n<Important>\n    In order to deploy an app, you must have **admin** permissions to its repository. If you don't have admin access, contact the repository's owner or fork the repository to create your own copy. For more help, see our <a href=\"https://discuss.streamlit.io/\" target=\"_blank\">community forum</a>.\n</Important>\n\nIf you are a member of a GitHub organization, that organization is displayed at the bottom of each GitHub OAuth prompt. In this case, we recommend reading about [Organization access](#organization-access) at the end of this page before performing the steps to connect your GitHub account. You must be an organization's owner in GitHub to grant access to that organization.\n\n## Prerequisites\n\n- You must have a Community Cloud account. See [Create your account](/deploy/streamlit-community-cloud/get-started/create-your-account).\n- You must have a GitHub account.\n\n## Add access to public repositories\n\n1. In the upper-left corner, click \"**Workspaces <i style={{ verticalAlign: \"-.25em\", color: \"#ff8700\" }} className={{ class: \"material-icons-sharp\" }}>warning</i>**.\"\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"Connect your GitHub account to a new Community Cloud account\" src=\"/images/streamlit-community-cloud/workspace-unconnected-setup.png\" />\n</div>\n\n1. From the drop down, click \"**Connect GitHub account**.\"\n1. Enter your GitHub credentials and follow GitHub's authentication prompts.\n1. Click \"**Authorize streamlit**.\"\n\n   <div style={{ maxWidth: '40%', margin: 'auto' }}>\n   <Image alt=\"Authorize Community Cloud to connect to your GitHub account\" src=\"/images/streamlit-community-cloud/GitHub-auth1-none.png\" />\n   </div>\n\n   This adds the \"Streamlit\" OAuth application to your GitHub account. This allows Community Cloud to work with your public repositories and create codespaces for you. In the next section, you can allow Community Cloud to access your private repositories, too. For more information about using and reviewing the OAuth applications on your account, see [Using OAuth apps](https://docs.github.com/en/apps/oauth-apps/using-oauth-apps) in GitHub's docs.\n\n## Optional: Add access to private repositories\n\nAfter your Community Cloud account has access to deploy from your public repositories, you can follow these additional steps to grant access to your private repositories.\n\n1. In the upper-left corner, click on your GitHub username.\n\n<div style={{ maxWidth: '90%', margin: 'auto' }}>\n<Image alt=\"Access your workspace settings\" src=\"/images/streamlit-community-cloud/workspace-empty-menu.png\" />\n</div>\n\n1. From the drop down, click \"**Settings**.\"\n1. On the left side of the dialog, select \"**Linked accounts**.\"\n1. Under \"Source control,\" click \"**Connect here <i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>arrow_forward</i>**.\"\n1. Click \"**Authorize streamlit**.\"\n\n<div style={{ maxWidth: '40%', margin: 'auto' }}>\n<Image alt=\"Authorize Community Cloud to connect to your private GitHub repositories\" src=\"/images/streamlit-community-cloud/GitHub-auth2-none.png\" />\n</div>\n\n## Organization access\n\nTo deploy apps from repositories owned by a GitHub organization, Community Cloud must have permission to access the organization's repositories. If you are a member of a GitHub organization when you connect your GitHub account, your OAuth prompts will include a section labeled \"Organization access.\"\n\n<div style={{ maxWidth: '40%', margin: 'auto' }}>\n<Image alt=\"GitHub Oauth prompt including organization access\" src=\"/images/streamlit-community-cloud/GitHub-auth1-organizations.png\" />\n</div>\n\nIf you have already connected your GitHub account and need to add access to an organization, follow the steps in [Manage your GitHub connection](/deploy/streamlit-community-cloud/manage-your-account/manage-your-github-connection) to disconnect your GitHub account and start over. Alternatively, if you are not the owner of an organization, you can ask the owner to create a Community Cloud account for themselves and add permission directly.\n\n### Organizations you own\n\nFor any organization you own, if authorization has not been previously granted or denied, you can click \"**Grant**\" before you click \"**Authorize streamlit**.\"\n\n<div style={{ maxWidth: '80%', margin: 'auto' }}>\n<Image alt=\"Authorize your Streamlit on a GitHub organization you own\" src=\"/images/streamlit-community-cloud/GitHub-auth-grant-XL.png\" />\n</div>\n\n### Organizations owned by others\n\nFor an organization you don't own, if authorization has not been previously granted or denied, you can click \"**Request**\" before you click \"**Authorize streamlit**.\"\n\n<div style={{ maxWidth: '80%', margin: 'auto' }}>\n<Image alt=\"Authorize your Streamlit on a GitHub organization owned by others\" src=\"/images/streamlit-community-cloud/GitHub-auth-request-XL.png\" />\n</div>\n\n### Previous or pending authorization\n\nIf someone has already started the process of authorizing Streamlit for your organization, the OAuth prompt will show the current status.\n\n#### Approved access\n\nIf an organization has already granted Streamlit access, the OAuth prompt shows a green check (<i style={{ verticalAlign: \"-.25em\", color: \"#1a7f37\" }} className={{ class: \"material-icons-sharp\" }}>check</i>).\n\n<div style={{ maxWidth: '60%', margin: 'auto' }}>\n<Image alt=\"Approved authorization for Streamlit on an organization\" src=\"/images/streamlit-community-cloud/GitHub-auth-granted-XL.png\" />\n</div>\n\n#### Pending access\n\nIf a request has been previously sent but not yet approved, the OAuth prompt show \"Access request pending.\" Follow up with the organization's owner to accept the request in GitHub.\n\n<div style={{ maxWidth: '60%', margin: 'auto' }}>\n<Image alt=\"Pending authorization for Streamlit on an organization\" src=\"/images/streamlit-community-cloud/GitHub-auth-pending-XL.png\" />\n</div>\n\n#### Denied access\n\nIf a request has been previously sent and denied, the OAuth prompt shows a red X (<i style={{ verticalAlign: \"-.25em\", color: \"#d1242f\" }} className={{ class: \"material-icons-sharp\" }}>close</i>). In this case, the organization owner will need to authorize Streamlit from GitHub. See GitHub's documentation on <a href=\"https://docs.github.com/en/apps/oauth-apps/using-oauth-apps/authorizing-oauth-apps#oauth-apps-and-organizations\" target=\"_blank\">OAuth apps and organizations</a>.\n\n<div style={{ maxWidth: '60%', margin: 'auto' }}>\n<Image alt=\"Denied authorization for Streamlit on an organization\" src=\"/images/streamlit-community-cloud/GitHub-auth-denied-XL.png\" />\n</div>\n\n## What's next?\n\nNow that you have your account you can [Explore your workspace](/deploy/streamlit-community-cloud/get-started/explore-your-workspace). Or if you're ready to go, jump right in and [Deploy your app](/deploy/streamlit-community-cloud/deploy-your-app)."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/create-your-account",
    "content": "# Create your account\n\nBefore you can start deploying apps for the world to see, you need to sign up for your Streamlit Community Cloud account.\n\nEach Community Cloud account is associated with an email. Two accounts can't have the same email. When sharing a private app, you will assign viewing privileges by email. Additionally, two accounts can't have the same source control (GitHub account). If you try to create a second Community Cloud account with the same source control, Community Cloud will merge the accounts.\n\n## Sign up\n\nCommunity Cloud allows you to sign in using one of the three following methods:\n\n- Emailed, one-use codes\n- Google\n- GitHub\n\n<Important>\n    Even when you sign in through GitHub, the authentication flow returns your email address to Community Cloud. Changing the email on your GitHub account can affect your Community Cloud account if you sign in through GitHub.\n</Important>\n\n1. Go to <a href=\"https://share.streamlit.io\" target=\"_blank\">share.streamlit.io</a>.\n1. Click \"**Continue to sign-in**.\"\n1. Continue with one of the three options listed below.\n\n   ### Option 1: Sign in using emailed codes\n\n   1. In the \"Email\" field, enter your email address.\n   1. Click \"**Continue**.\" (If prompted, verify you are human.)\n   1. Go to your email inbox, and copy your one-time, six-digit code. The code is valid for ten minutes.\n   1. Return to the authentication page, and enter your code. (If prompted, verify you are human.)\n\n   ### Option 2: Sign in using Google\n\n   1. Click \"**Continue with Google**.\"\n   1. Enter your Google credentials, and follow Google's authentication prompts.\n\n   ### Option 3: Sign in using GitHub\n\n   1. Click \"**Continue with GitHub**.\"\n   1. Enter your GitHub credentials, and follow GitHub's authentication prompts.\n\n      This adds the \"Streamlit Community Cloud\" OAuth application to your GitHub account. This application is only used to pass your email when you sign in to Community Cloud. On the next page, you'll perform additional steps to allow Community Cloud to access your repositories. For more information about using and reviewing the OAuth applications on your account, see [Using OAuth apps](https://docs.github.com/en/apps/oauth-apps/using-oauth-apps) in GitHub's docs.\n\n1. Fill in your information, and click \"**Continue**\" at the bottom.\n\n   The \"Primary email\" field is prefilled with the email you used to sign in. If you change this email in the account setup form, it will only impact marketing emails; it will not reflect on your new account. To change the email associated with your account after it's created, see [Update your email address](/deploy/streamlit-community-cloud/manage-your-account/update-your-email).\n\n## Finish up\n\nCongratulations on creating your Streamlit Community Cloud account! A warning icon (<i style={{ verticalAlign: \"-.25em\", color: \"#ff8700\" }} className={{ class: \"material-icons-sharp\" }}>warning</i>) next to \"**Workspaces**\" in the upper-left corner is expected; this indicates that your account is not yet connected to GitHub. Even if you created your account by signing in through GitHub, your account does not yet have permission to access your repositories. Continue to the next page to connect your GitHub account."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/fork-and-edit-a-public-app",
    "content": "# Fork and edit a public app\n\nCommunity Cloud is all about learning, sharing, and exploring the world of Streamlit. For apps with public repositories, you can quickly fork copies to your GitHub account, deploy your own version, and jump into a codespace on GitHub to start editing and exploring Streamlit code.\n\n1. From a forkable app, in the upper-right corner, click \"**Fork**.\"\n\n   ![Click Fork in the upper-right corner of a public app](/images/streamlit-community-cloud/fork-public-hello.png)\n\n1. Optional: In the \"App URL\" field, choose a custom subdomain for your app.\n\n   Every Community Cloud app is deployed to a subdomain on `streamlit.app`, but you can change your app's subdomain at any time. For more information, see [App settings](/deploy/streamlit-community-cloud/manage-your-app/app-settings).\n\n1. Click \"**Fork!**\"\n\n   The repository will be forked to your GitHub account. If you have already forked the repository, Community Cloud will use the existing fork. If your existing fork already has an associated codespace, the codespace will be reused.\n\n   <Warning>\n      Do not use this method in the following situations:\n      - You have an existing repository that matches the fork name (but isn't a fork of this app).\n      - You have an existing fork of this app, but you've changed the name of the repository.\n\n   If you have an existing fork of this app and kept the original repository name, Community Cloud will use your existing fork. If you've previously deployed the app and opened a codespace, Community Cloud will open your existing codespace.\n   </Warning>\n\n   ![Click Fork to confirm and deploy your app](/images/streamlit-community-cloud/fork-public-hello-deploy.png)\n\n1. Wait for GitHub to set up your codespace.\n\n   It can take several minutes to fully initialize your codespace. After the Visual Studio Code editor appears in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, a split screen view displays a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file.\n\n   ![Click Fork to confirm and deploy your app](/images/streamlit-community-cloud/fork-public-hello-codespace.png)\n\n   <Important>\n      The app displayed in your codespace is not the same instance you deployed on Community Cloud. Your codespace is a self-contained development environment. When you make edits inside a codespace, those edits don't leave the codespace until you commit them to your repository. When you commit your changes to your repository, Community Cloud detects the changes and updates your deployed app. To learn more, see [Edit your app](/deploy/streamlit-community-cloud/manage-your-app/edit-your-app).\n   </Important>\n\n1. Edit your newly forked app as desired. For more instructions on working with GitHub Codespaces, see [Edit your app](/deploy/streamlit-community-cloud/manage-your-app/edit-your-app)."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security",
    "content": "# Streamlit trust and security\n\nStreamlit is a framework that turns Python scripts into interactive apps, giving data scientists the ability to quickly create data and model-based apps for the entire company.\n\nA simple Streamlit app is:\n\n```python\nimport streamlit as st\nnumber = st.slider(\"Pick a number: \", min_value=1, max_value=10)\nst.text(\"Your number is \" + str(number))\n```\n\nWhen you `streamlit run my_app.py`, you start a web server that runs the interactive application on your local computer at `http://localhost:8501`. This is great for local development. When you want to share with your colleagues, Streamlit Community Cloud enables you to deploy and run these applications in the cloud. Streamlit Community Cloud handles the details of containerization and provides you an interface for easily managing your deployed apps.\n\nThis document provides an overview of the security safeguards we've implemented to protect you and your data. Security, however, is a shared responsibility and you are ultimately responsible for making appropriate use of Streamlit and the Streamlit Community Cloud, including implementation of appropriate user-configurable security safeguards and best practices.\n\n## Product security\n\n### Authentication\n\nYou must authenticate through GitHub to deploy or administer an app. Authentication through Google or single-use emailed links are required to view a private app when you don't have push or admin permissions on the associated GitHub repository. The single-use emailed links are valid for 15 minutes once requested.\n\n### Permissions\n\nStreamlit Community Cloud inherits the permissions you have assigned in GitHub. Users with write access to a GitHub repository for a given app will be able to make changes in the Streamlit administrative console. However, only users with _admin access_ to a repository are able to **deploy and delete apps**.\n\n## Network and application security\n\n### Data hosting\n\nOur physical infrastructure is hosted and managed within secure data centers maintained by infrastructure-as-a-service cloud providers. Streamlit leverages many of these platforms' built-in security, privacy, and redundancy features. Our cloud providers continually monitor their data centers for risk and undergo assessments to ensure compliance with industry standards.\n\n### Data deletion\n\nCommunity Cloud users have the option to delete any apps they’ve deployed as well as their entire account.\n\nWhen a user deletes their application from the admin console, we delete their source code, including any files copied from their GitHub repository or created within our system from the running app. However, we keep a record representing the application in our database. This record contains the coordinates of the application: the GitHub organization or user, the GitHub repository, the branch, and the path of the main module file.\n\nWhen a user deletes their account, we perform a hard deletion of their data and a hard deletion of all the apps that belong to the GitHub identity associated with their account. In this case, we do not maintain the records of application coordinates described above. When an account is deleted, we also delete any HubSpot contact associated with the Community Cloud account.\n\n### Virtual private cloud\n\nAll of our servers are within a virtual private cloud (VPC) with firewalls and network access control lists (ACLs) to allow external access to a select few API endpoints; all other internal services are only accessible within the VPC.\n\n### Encryption\n\nStreamlit apps are served entirely over HTTPS. We use only strong cipher suites and HTTP Strict Transport Security (HSTS) to ensure browsers interact with Streamlit apps over HTTPS.\n\nAll data sent to or from Streamlit over the public internet is encrypted in transit using 256-bit encryption. Our API and application endpoints use Transport Layer Security (TLS) 1.2 (or better). We also encrypt data at rest on disk using AES-256.\n\n### Permissions and authentication\n\nAccess to Community Cloud user account data is limited to authorized personnel. We run a zero-trust corporate network, utilize single sign-on and multi-factor authentication (MFA), and enforce strong password policies to ensure access to cloud-related services is protected.\n\n### Incident response\n\nOur internal protocol for handling security events includes detection, analysis, response, escalation, and mitigation. Security advisories are made available at [https://streamlit.io/advisories](https://streamlit.io/advisories).\n\n### Penetration testing\n\nStreamlit uses third-party security tools to scan for vulnerabilities on a regular basis. Our security teams conduct periodic, intensive penetration tests on the Streamlit platform. Our product development team responds to any identified issues or potential vulnerabilities to ensure the quality, security, and availability of Streamlit applications.\n\n### Vulnerability management\n\nWe keep our systems up-to-date with the latest security patches and continuously monitor for new vulnerabilities. This includes automated scanning of our code repositories for vulnerable dependencies.\n\nIf you discover a vulnerability in one of our products or websites, please report the issue to [HackerOne](https://hackerone.com/snowflake?type=team)."
  },
  {
    "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started",
    "content": "# Get started with Streamlit Community Cloud\n\nWelcome to Streamlit Community Cloud, where you can share your Streamlit apps with the world! Whether you've already created your first Streamlit app or you're just getting started, you're in the right place.\n\nFirst things first, you need to create your Streamlit Community Cloud account to start deploying apps.\n\n<TileContainer>\n    <Tile\n        icon=\"rocket_launch\"\n        title=\"Quickstart\"\n        text=\"Create your account and deploy an example app as fast as possible. Jump right into coding with GitHub Codespaces.\"\n        link=\"/deploy/streamlit-community-cloud/get-started/quickstart\"\n        background=\"lightBlue-70\"\n    />\n    <Tile\n        icon=\"security\"\n        title=\"Trust and Security\"\n        text=\"Security first! If you want to read up on how we handle your data before you get started, we've got you covered.\"\n        link=\"/deploy/streamlit-community-cloud/get-started/trust-and-security\"\n        background=\"lightBlue-70\"\n    />\n</TileContainer>\n\nIf you're looking for help to build your first Streamlit app, read our [Get started](/get-started) docs for the Streamlit library. If you want to fork an app and start with an example, check out our <a href=\"https://streamlit.io/gallery\" target=\"_blank\">App gallery</a>. Either way, it only takes a few minutes to create your first app.\n\nIf you're looking for more detailed instructions than the quickstart, try the following:\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"person\"\n        bold=\"Create your account.\"\n        href=\"/deploy/streamlit-community-cloud/get-started/create-your-account\"\n    >See all the options and get complete explanations as you create your Streamlit Community Cloud account.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"code\"\n        bold=\"Connect your GitHub account.\"\n        href=\"/deploy/streamlit-community-cloud/get-started/connect-your-github-account\"\n    >After your create your Community Cloud account, connect GitHub for source control.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"computer\"\n        bold=\"Explore your workspace.\"\n        href=\"/deploy/streamlit-community-cloud/get-started/explore-your-workspace\"\n    >Take a quick tour of your Community Cloud workspace. See where all the magic happens.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"auto_fix_high\"\n        bold=\"Deploy an app from a template.\"\n        href=\"/deploy/streamlit-community-cloud/get-started/deploy-from-a-template\"\n    >Use a template to get your own app up and running in minutes.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"fork_right\"\n        bold=\"Fork and edit a public app.\"\n        href=\"/deploy/streamlit-community-cloud/get-started/fork-and-edit-a-public-app\"\n    >Start with a bang! Fork a public app and jump right into the code.</InlineCallout>\n</InlineCalloutContainer>"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/supported-browsers",
    "content": "# What browsers does Streamlit support?\n\nThe latest version of Streamlit is compatible with the two most recent versions of the following browsers:\n\n- [Google Chrome](https://www.google.com/chrome/browser)\n- [Firefox](https://www.mozilla.org/en-US/firefox/new/)\n- [Microsoft Edge](https://www.microsoft.com/windows/microsoft-edge)\n- [Safari](https://www.apple.com/safari/)\n\n<Note>\n\nYou may not be able to use all the latest features of Streamlit with unsupported browsers or older versions of the above browsers. Streamlit will not provide bug fixes for unsupported browsers.\n\n</Note>"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/pydeck-chart-custom-mapbox-styles",
    "content": "# How can I make st.pydeck_chart use custom Mapbox styles?\n\nIf you are supplying a Mapbox token, but the resulting `pydeck_chart` doesn't show your custom Mapbox styles, please check that you are adding the Mapbox token to the Streamlit `config.toml` configuration file. Streamlit DOES NOT read Mapbox tokens from inside of a PyDeck specification (i.e. from inside of the Streamlit app). Please see this [forum thread](https://discuss.streamlit.io/t/deprecation-warning-deckgl-pydeck-maps-to-require-mapbox-token-for-production-usage/2982/10) for more information."
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks",
    "content": "# Sanity checks\n\nIf you're having problems running your Streamlit app, here are a few things to try out.\n\n## Check #0: Are you using a Streamlit-supported version of Python?\n\nStreamlit will maintain backwards-compatibility with earlier Python versions as practical,\nguaranteeing compatibility with _at least_ the last three minor versions of Python 3.\n\nAs new versions of Python are released, we will try to be compatible with the new version as soon\nas possible, though frequently we are at the mercy of other Python packages to support these new versions as well.\n\nStreamlit currently supports versions 3.9, 3.10, 3.11, 3.12, and 3.13 of Python.\n\n## Check #1: Is Streamlit running?\n\nOn a Mac or Linux machine, type this on the terminal:\n\n```bash\nps -Al | grep streamlit\n```\n\nIf you don't see `streamlit run` in the output (or `streamlit hello`, if that's\nthe command you ran) then the Streamlit server is not running. So re-run your command and see if the bug goes away.\n\n## Check #2: Is this an already-fixed Streamlit bug?\n\nWe try to fix bugs quickly, so many times a problem will go away when you\nupgrade Streamlit. So the first thing to try when having an issue is upgrading\nto the latest version of Streamlit:\n\n```bash\npip install --upgrade streamlit\nstreamlit version\n```\n\n...and then verify that the version number printed corresponds to the version number displayed on [PyPI](https://pypi.org/project/streamlit/).\n\n**Try reproducing the issue now.** If not fixed, keep reading on.\n\n## Check #3: Are you running the correct Streamlit binary?\n\nLet's check whether your Python environment is set up correctly. Edit the\nStreamlit script where you're experiencing your issue, **comment everything\nout, and add these lines instead:**\n\n```python\nimport streamlit as st\nst.write(st.__version__)\n```\n\n...then call `streamlit run` on your script and make sure it says the same\nversion as above. If not the same version, check out [these\ninstructions](/get-started/installation) for some sure-fire ways to set up your\nenvironment.\n\n## Check #4: Is your browser caching your app too aggressively?\n\nThere are two easy ways to check this:\n\n1. Load your app in a browser then press `Ctrl-Shift-R` or `⌘-Shift-R` to do a\n   hard refresh (Chrome/Firefox).\n\n2. As a test, run Streamlit on another port. This way the browser starts the\n   page with a brand new cache. For that, pass the `--server.port`\n   argument to Streamlit on the command line:\n\n   ```bash\n   streamlit run my_app.py --server.port=9876\n   ```\n\n## Check #5: Is this a Streamlit regression?\n\nIf you've upgraded to the latest version of Streamlit and things aren't\nworking, you can downgrade at any time using this command:\n\n```bash\npip install --upgrade streamlit==1.0.0\n```\n\n...where `1.0.0` is the version you'd like to downgrade to. See\n[Release notes](/develop/quick-reference/release-notes) for a complete list of Streamlit versions.\n\n## Check #6 [Windows]: Is Python added to your PATH?\n\nWhen installed by downloading from [python.org](https://www.python.org/downloads/), Python is\nnot automatically added to the [Windows system PATH](https://www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access). Because of this, you may get error messages\nlike the following:\n\nCommand Prompt:\n\n```bash\nC:\\Users\\streamlit> streamlit hello\n'streamlit' is not recognized as an internal or external command,\noperable program or batch file.\n```\n\nPowerShell:\n\n```bash\nPS C:\\Users\\streamlit> streamlit hello\nstreamlit : The term 'streamlit' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that\nthe path is correct and try again.\nAt line:1 char:1\n+ streamlit hello\n+ ~~~~~~~~~\n    + CategoryInfo          : ObjectNotFound: (streamlit:String) [], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException\n```\n\nTo resolve this issue, add [Python to the Windows system PATH](https://datatofish.com/add-python-to-windows-path/).\n\nAfter adding Python to your Windows PATH, you should then be able to follow the instructions in our [Get Started](/get-started) section.\n\n## Check #7 [Windows]: Do you need Build Tools for Visual Studio installed?\n\nStreamlit includes [pyarrow](https://arrow.apache.org/docs/python/) as an install dependency. Occasionally, when trying to install Streamlit from PyPI, you may see errors such as the following:\n\n```bash\nUsing cached pyarrow-1.0.1.tar.gz (1.3 MB)\n  Installing build dependencies ... error\n  ERROR: Command errored out with exit status 1:\n   command: 'c:\\users\\streamlit\\appdata\\local\\programs\\python\\python38-32\\python.exe' 'c:\\users\\streamlit\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\pip' install --ignore-installed --no-user --prefix 'C:\\Users\\streamlit\\AppData\\Local\\Temp\\pip-build-env-s7owjrle\\overlay' --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- 'cython >= 0.29' 'numpy==1.14.5; python_version<'\"'\"'3.9'\"'\"'' 'numpy==1.16.0; python_version>='\"'\"'3.9'\"'\"'' setuptools setuptools_scm wheel\n       cwd: None\n\n  Complete output (319 lines):\n\n      Running setup.py install for numpy: finished with status 'error'\n      ERROR: Command errored out with exit status 1:\n\n      # <truncated for brevity> #\n\n      building library \"npymath\" sources\n      No module named 'numpy.distutils._msvccompiler' in numpy.distutils; trying from distutils\n      error: Microsoft Visual C++ 14.0 is required. Get it with \"Build Tools for Visual Studio\": https://visualstudio.microsoft.com/downloads/\n      ----------------------------------------\n  ERROR: Command errored out with exit status 1: 'c:\\users\\streamlit\\appdata\\local\\programs\\python\\python38-32\\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'C:\\\\Users\\\\streamlit\\\\AppData\\\\Local\\\\Temp\\\\pip-install-0jwfwx_u\\\\numpy\\\\setup.py'\"'\"'; __file__='\"'\"'C:\\\\Users\\\\streamlit\\\\AppData\\\\Local\\\\Temp\\\\pip-install-0jwfwx_u\\\\numpy\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record 'C:\\Users\\streamlit\\AppData\\Local\\Temp\\pip-record-eys4l2gc\\install-record.txt' --single-version-externally-managed --prefix 'C:\\Users\\streamlit\\AppData\\Local\\Temp\\pip-build-env-s7owjrle\\overlay' --compile --install-headers 'C:\\Users\\streamlit\\AppData\\Local\\Temp\\pip-build-env-s7owjrle\\overlay\\Include\\numpy' Check the logs for full command output.\n  ----------------------------------------\n```\n\nThis error indicates that Python is trying to compile certain libraries during install, but it cannot find the proper compilers on your system,\nas reflected by the line `error: Microsoft Visual C++ 14.0 is required. Get it with \"Build Tools for Visual Studio\"`.\n\nInstalling [Build Tools for Visual Studio](https://visualstudio.microsoft.com/downloads/) should resolve this issue."
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/create-anchor-link",
    "content": "# How do I create an anchor link?\n\n## Overview\n\nHave you wanted to create anchors so that users of your app can directly navigate to specific sections by specifying `#anchor` in the URL? If so, let's find out how.\n\n## Solution\n\nAnchors are automatically added to header text.\n\nFor example, if you define a header text via the [st.header()](/develop/api-reference/text/st.header) command as follows:\n\n```python\nst.header(\"Section 1\")\n```\n\nThen you can create a link to this header using:\n\n```python\nst.markdown(\"[Section 1](#section-1)\")\n```\n\n## Examples\n\n- Demo app: [https://dataprofessor-streamlit-anchor-app-80kk8w.streamlit.app/](https://dataprofessor-streamlit-anchor-app-80kk8w.streamlit.app/)\n- GitHub repo: [https://github.com/dataprofessor/streamlit/blob/main/anchor_app.py](https://github.com/dataprofessor/streamlit/blob/main/anchor_app.py)"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/retrieve-filename-uploaded",
    "content": "# How do you retrieve the filename of a file uploaded with st.file_uploader?\n\nIf you upload a single file (i.e. `accept_multiple_files=False`), the filename can be retrieved by using the `.name` attribute on the returned UploadedFile object:\n\n```python\nimport streamlit as st\n\nuploaded_file = st.file_uploader(\"Upload a file\")\n\nif uploaded_file:\n   st.write(\"Filename: \", uploaded_file.name)\n```\n\nIf you upload multiple files (i.e. `accept_multiple_files=True`), the individual filenames can be retrieved by using the `.name` attribute on each UploadedFile object in the returned list:\n\n```python\nimport streamlit as st\n\nuploaded_files = st.file_uploader(\"Upload multiple files\", accept_multiple_files=True)\n\nif uploaded_files:\n   for uploaded_file in uploaded_files:\n       st.write(\"Filename: \", uploaded_file.name)\n```\n\nRelated forum posts:\n\n- https://discuss.streamlit.io/t/is-it-possible-to-get-uploaded-file-file-name/7586"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-download-file-streamlit",
    "content": "# How to download a file in Streamlit?\n\nUse the [`st.download_button`](/develop/api-reference/widgets/st.download_button) widget that is natively built into Streamlit. Check out a [sample app](https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/) demonstrating how you can use `st.download_button` to download common file formats.\n\n## Example usage\n\n```python\nimport streamlit as st\n\n# Text files\n\ntext_contents = '''\nFoo, Bar\n123, 456\n789, 000\n'''\n\n# Different ways to use the API\n\nst.download_button('Download CSV', text_contents, 'text/csv')\nst.download_button('Download CSV', text_contents)  # Defaults to 'text/plain'\n\nwith open('myfile.csv') as f:\n   st.download_button('Download CSV', f)  # Defaults to 'text/plain'\n\n# ---\n# Binary files\n\nbinary_contents = b'whatever'\n\n# Different ways to use the API\n\nst.download_button('Download file', binary_contents)  # Defaults to 'application/octet-stream'\n\nwith open('myfile.zip', 'rb') as f:\n   st.download_button('Download Zip', f, file_name='archive.zip')  # Defaults to 'application/octet-stream'\n\n# You can also grab the return value of the button,\n# just like with any other button.\n\nif st.download_button(...):\n   st.write('Thanks for downloading!')\n```\n\nAdditional resources:\n\n- [https://blog.streamlit.io/0-88-0-release-notes/](https://blog.streamlit.io/0-88-0-release-notes/)\n- [https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/](https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/)\n- [https://docs.streamlit.io/develop/api-reference/widgets/st.download_button](/develop/api-reference/widgets/st.download_button)"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/why-streamlit-restrict-nested-columns",
    "content": "# Why does Streamlit restrict nested `st.columns`?\n\nStarting in version 1.46.0, Streamlit removed explicit limits on nesting columns, expanders, popovers, and chat message containers. To follow best design practices and maintain a good appearance on all screen sizes, don't overuse nested layouts.\n\nFrom version 1.18.0 to 1.45.0, Streamlit allows nesting [`st.columns`](/develop/api-reference/layout/st.columns) inside other\n`st.columns` with the following restrictions:\n\n- In the main area of the app, columns can be nested up to one level of nesting.\n- In the sidebar, columns cannot be nested.\n\nThese restrictions were in place to make Streamlit apps look good on all device sizes. Nesting columns multiple times often leads to a bad UI.\nYou might be able to make it look good on one screen size but as soon as a user on a different screen views the app,\nthey will have a bad experience. Some columns will be tiny, others will be way too long, and complex layouts will look out of place.\nStreamlit tries its best to automatically resize elements to look good across devices, without any help from the developer.\nBut for complex layouts with multiple levels of nesting, this is not possible."
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/serializable-session-state",
    "content": "# What is serializable session state?\n\n## Serializable Session State\n\nSerialization refers to the process of converting an object or data structure into a format that can be persisted and shared, and allowing you to recover the data’s original structure. Python’s built-in [pickle](https://docs.python.org/3/library/pickle.html) module serializes Python objects to a byte stream (\"pickling\") and deserializes the stream into an object (\"unpickling\").\n\nBy default, Streamlit’s [Session State](/develop/concepts/architecture/session-state) allows you to persist any Python object for the duration of the session, irrespective of the object’s pickle-serializability. This property lets you store Python primitives such as integers, floating-point numbers, complex numbers and booleans, dataframes, and even [lambdas](https://docs.python.org/3/reference/expressions.html#lambda) returned by functions. However, some execution environments may require serializing all data in Session State, so it may be useful to detect incompatibility during development, or when the execution environment will stop supporting it in the future.\n\nTo that end, Streamlit provides a `runner.enforceSerializableSessionState` [configuration option](/develop/concepts/configuration) that, when set to `true`, only allows pickle-serializable objects in Session State. To enable the option, either create a global or project config file with the following or use it as a command-line flag:\n\n```toml\n# .streamlit/config.toml\n[runner]\nenforceSerializableSessionState = true\n```\n\nBy \"_pickle-serializable_\", we mean calling `pickle.dumps(obj)` should not raise a [`PicklingError`](https://docs.python.org/3/library/pickle.html#pickle.PicklingError) exception. When the config option is enabled, adding unserializable data to session state should result in an exception. E.g.,\n\n```python\nimport streamlit as st\n\ndef unserializable_data():\n\t\treturn lambda x: x\n\n#👇 results in an exception when enforceSerializableSessionState is on\nst.session_state.unserializable = unserializable_data()\n```\n\n<Image alt=\"UnserializableSessionStateError\" src=\"/images/unserializable-session-state-error.png\" clean />"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/where-file-uploader-store-when-deleted",
    "content": "# Where does st.file_uploader store uploaded files and when do they get deleted?\n\nWhen you upload a file using [`st.file_uploader`](/develop/api-reference/widgets/st.file_uploader), the data are copied to the Streamlit backend via the browser, and contained in a BytesIO buffer in Python memory (i.e. RAM, not disk). The data will persist in RAM until the Streamlit app re-runs from top-to-bottom, which is on each widget interaction. If you need to save the data that was uploaded between runs, then you can [cache](/develop/concepts/architecture/caching) it so that Streamlit persists it across re-runs.\n\nAs files are stored in memory, they get deleted immediately as soon as they’re not needed anymore.\n\nThis means Streamlit removes a file from memory when:\n\n- The user uploads another file, replacing the original one\n- The user clears the file uploader\n- The user closes the browser tab where they uploaded the file\n\nRelated forum posts:\n\n- https://discuss.streamlit.io/t/streamlit-sharing-fileupload-where-does-it-go/9267\n- https://discuss.streamlit.io/t/how-to-update-the-uploaded-file-using-file-uploader/13512/"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-upgrade-latest-version-streamlit",
    "content": "# How do I upgrade to the latest version of Streamlit?\n\nWe recommend upgrading to the latest official release of Streamlit so you have access to the newest, cutting-edge features. If you haven't installed Streamlit yet, please read our [Installation guide](/get-started/installation). It helps you set up your virtual environment and walks you through installing Streamlit on Windows, macOS, and Linux. Regardless of which package management tool and OS you're using, we recommend running the commands on this page in a virtual environment.\n\nIf you've previously installed Streamlit and want to upgrade to the latest version, here's how to do it based on your dependency manager.\n\n## Pipenv\n\nStreamlit's officially-supported environment manager for macOS and Linux is [Pipenv](https://pypi.org/project/pipenv/).\n\n1. Navigate to the project folder containing your Pipenv environment:\n\n```bash\ncd myproject\n```\n\n2. Activate that environment, upgrade Streamlit, and verify you have the latest version:\n\n```bash\npipenv shell\npip install --upgrade streamlit\nstreamlit version\n```\n\nOr if you want to use an easily-reproducible environment, replace `pip` with `pipenv`every time you install or update a package:\n\n```bash\npipenv update streamlit\npipenv run streamlit version\n```\n\n## Conda\n\n1. Activate the conda environment where Streamlit is installed:\n\n```bash\nconda activate $ENVIRONMENT_NAME\n```\n\nBe sure to replace`$ENVIRONMENT_NAME` ☝️ with the name your conda environment!\n\n2. Update Streamlit within the active conda environment and verify you have the latest version:\n\n```bash\nconda update -c conda-forge streamlit -y\nstreamlit version\n```\n\n## Poetry\n\nIn order to get the latest version of Streamlit with [Poetry](https://python-poetry.org/) and verify you have the latest version, run:\n\n```bash\npoetry update streamlit\nstreamlit version\n```"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/enable-camera",
    "content": "# Enabling camera or microphone access in your browser\n\nStreamlit apps may include a widget to upload images from your camera or record sound with your microphone. To\nsafeguard the users' privacy and security, browsers require users to explicitly allow access to their\ncamera or microphone before those devices can be used.\n\nTo learn how to enable camera access, please check the documentation for your browser:\n\n- [Chrome](https://support.google.com/chrome/answer/2693767)\n- [Safari](https://support.apple.com/guide/safari/websites-ibrwe2159f50/mac)\n- [Firefox](https://support.mozilla.org/en-US/kb/how-manage-your-camera-and-microphone-permissions)"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/widget-updating-session-state",
    "content": "# Widget updating for every second input when using session state\n\n## Overview\n\nYou are using [session state](/develop/api-reference/caching-and-state/st.session_state) to store page interactions in your app. When users interact with a widget in your app (e.g., click a button), you expect your app to update its widget states and reflect the new values. However, you notice that it doesn't. Instead, users have to interact with the widget twice (e.g., click a button twice) for the app to show the correct values. What do you do now? 🤔 Let's walk through the solution in the section below.\n\n## Solution\n\nWhen using session state to update widgets or values in your script, you need to use the unique key you assigned to the widget, **not** the variable that you assigned your widget to. In the example code block below, the unique _key_ assigned to the slider widget is `slider`, and the _variable_ the widget is assigned to is `slide_val`.\n\nLet's see this in an example. Say you want a user to click a button that resets a slider.\n\nTo have the slider's value update on the button click, you need to use a [callback function](/develop/api-reference/caching-and-state/st.session_state#use-callbacks-to-update-session-state) with the `on_click` parameter of [`st.button`](/develop/api-reference/widgets/st.button):\n\n```python\n# the callback function for the button will add 1 to the\n# slider value up to 10\ndef plus_one():\n    if st.session_state[\"slider\"] < 10:\n        st.session_state.slider += 1\n    else:\n        pass\n    return\n\n# when creating the button, assign the name of your callback\n# function to the on_click parameter\nadd_one = st.button(\"Add one to the slider\", on_click=plus_one, key=\"add_one\")\n\n# create the slider\nslide_val = st.slider(\"Pick a number\", 0, 10, key=\"slider\")\n```\n\n## Relevant resources\n\n- [Caching Sqlite DB connection resulting in glitchy rendering of the page](https://discuss.streamlit.io/t/caching-sqlite-db-connection-resulting-in-glitchy-rendering-of-the-page/19017)\n- [Select all checkbox that is linked to selectbox of options](https://discuss.streamlit.io/t/select-all-checkbox-that-is-linked-to-selectbox-of-options/18521)"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/insert-elements-out-of-order",
    "content": "# How to insert elements out of order?\n\nYou can use the [`st.empty`](/develop/api-reference/layout/st.empty) method as a placeholder,\nto \"save\" a slot in your app that you can use later.\n\n```python\nst.text('This will appear first')\n# Appends some text to the app.\n\nmy_slot1 = st.empty()\n# Appends an empty slot to the app. We'll use this later.\n\nmy_slot2 = st.empty()\n# Appends another empty slot.\n\nst.text('This will appear last')\n# Appends some more text to the app.\n\nmy_slot1.text('This will appear second')\n# Replaces the first empty slot with a text string.\n\nmy_slot2.line_chart(np.random.randn(20, 2))\n# Replaces the second empty slot with a chart.\n```"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-download-pandas-dataframe-csv",
    "content": "# How to download a Pandas DataFrame as a CSV?\n\nUse the [`st.download_button`](/develop/api-reference/widgets/st.download_button) widget that is natively built into Streamlit. Check out a [sample app](https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/) demonstrating how you can use `st.download_button` to download common file formats.\n\n## Example usage\n\n```python\nimport streamlit as st\nimport pandas as pd\n\ndf = pd.read_csv(\"dir/file.csv\")\n\n@st.cache_data\ndef convert_df(df):\n   return df.to_csv(index=False).encode('utf-8')\n\n\ncsv = convert_df(df)\n\nst.download_button(\n   \"Press to Download\",\n   csv,\n   \"file.csv\",\n   \"text/csv\",\n   key='download-csv'\n)\n```\n\nAdditional resources:\n\n- [https://blog.streamlit.io/0-88-0-release-notes/](https://blog.streamlit.io/0-88-0-release-notes/)\n- [https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/](https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/)\n- [https://docs.streamlit.io/develop/api-reference/widgets/st.download_button](/develop/api-reference/widgets/st.download_button)"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/remove-streamlit-app-title",
    "content": "# How to remove \"· Streamlit\" from the app title?\n\nUsing [`st.set_page_config`](/develop/api-reference/configuration/st.set_page_config) to assign the page title will not append \"· Streamlit\" to that title. E.g.:\n\n```python\nimport streamlit as st\n\nst.set_page_config(\n   page_title=\"Ex-stream-ly Cool App\",\n   page_icon=\"🧊\",\n   layout=\"wide\",\n   initial_sidebar_state=\"expanded\",\n)\n```"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit",
    "content": "# FAQ\n\nHere are some frequently asked questions about using Streamlit. If you feel something important is missing that everyone needs to know, please [open an issue](https://github.com/streamlit/docs/issues) or [submit a pull request](https://github.com/streamlit/docs/pulls) and we'll be happy to review it!\n\n- [Sanity checks](/knowledge-base/using-streamlit/sanity-checks)\n- [How can I make Streamlit watch for changes in other modules I'm importing in my app?](/knowledge-base/using-streamlit/streamlit-watch-changes-other-modules-importing-app)\n- [What browsers does Streamlit support?](/knowledge-base/using-streamlit/supported-browsers)\n- [Where does st.file_uploader store uploaded files and when do they get deleted?](/knowledge-base/using-streamlit/where-file-uploader-store-when-deleted)\n- [How do you retrieve the filename of a file uploaded with st.file_uploader?](/knowledge-base/using-streamlit/retrieve-filename-uploaded)\n- [How to remove \"· Streamlit\" from the app title?](/knowledge-base/using-streamlit/remove-streamlit-app-title)\n- [How to download a file in Streamlit?](/knowledge-base/using-streamlit/how-download-file-streamlit)\n- [How to download a Pandas DataFrame as a CSV?](/knowledge-base/using-streamlit/how-download-pandas-dataframe-csv)\n- [How can I make `st.pydeck_chart` use custom Mapbox styles?](/knowledge-base/using-streamlit/pydeck-chart-custom-mapbox-styles)\n- [How to insert elements out of order?](/knowledge-base/using-streamlit/insert-elements-out-of-order)\n- [How do I upgrade to the latest version of Streamlit?](/knowledge-base/using-streamlit/how-upgrade-latest-version-streamlit)\n- [Widget updating for every second input when using session state](/knowledge-base/using-streamlit/widget-updating-session-state)\n- [How do I create an anchor link?](/knowledge-base/using-streamlit/create-anchor-link)\n- [How do I enable camera access?](/knowledge-base/using-streamlit/enable-camera)\n- [Why does Streamlit restrict nested `st.columns`?](/knowledge-base/using-streamlit/why-streamlit-restrict-nested-columns)\n- [What is serializable session state?](/knowledge-base/using-streamlit/serializable-session-state)"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/streamlit-watch-changes-other-modules-importing-app",
    "content": "# How can I make Streamlit watch for changes in other modules I'm importing in my app?\n\nBy default, Streamlit only watches modules contained in the current directory of the main app module. You can track other modules by adding the parent directory of each module to the `PYTHONPATH`.\n\n```bash\nexport PYTHONPATH=$PYTHONPATH:/path/to/module\nstreamlit run your_script.py\n```"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/dependencies/install-package-not-pypi-conda-available-github",
    "content": "# How to install a package not on PyPI/Conda but available on GitHub\n\n## Overview\n\nAre you trying to deploy your app to [Streamlit Community Cloud](/deploy/streamlit-community-cloud), but don't know how to specify a [Python dependency](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies) in your requirements file that is available on a public GitHub repo but not any package index like PyPI or Conda? If so, continue reading to find out how!\n\nLet's suppose you want to install `SomePackage` and its Python dependencies from GitHub, a hosting service for the popular version control system (VCS) Git. And suppose `SomePackage` is found at the the following URL: `https://github.com/SomePackage.git`.\n\npip (via `requirements.txt`) [supports](https://pip.pypa.io/en/stable/topics/vcs-support/) installing from GitHub. This support requires a working executable to be available (for Git). It is used through a URL prefix: `git+`.\n\n## Specify the GitHub web URL\n\nTo install `SomePackage`, innclude the following in your `requirements.txt` file:\n\n```bash\ngit+https://github.com/SomePackage#egg=SomePackage\n```\n\nYou can even specify a \"git ref\" such as branch name, a commit hash or a tag name, as shown in the examples below.\n\n## Specify a Git branch name\n\nInstall `SomePackage` by specifying a branch name such as `main`, `master`, `develop`, etc, in `requirements.txt`:\n\n```bash\ngit+https://github.com/SomePackage.git@main#egg=SomePackage\n```\n\n## Specify a commit hash\n\nInstall `SomePackage` by specifying a commit hash in `requirements.txt`:\n\n```bash\ngit+https://github.com/SomePackage.git@eb40b4ff6f7c5c1e4366cgfg0671291bge918#egg=SomePackage\n```\n\n## Specify a tag\n\nInstall `SomePackage` by specifying a tag in `requirements.txt`:\n\n```bash\ngit+https://github.com/SomePackage.git@v1.1.0#egg=SomePackage\n```\n\n## Limitations\n\nIt is currently **not possible** to install private packages from private GitHub repos using the URI form:\n\n```bash\ngit+https://{token}@github.com/user/project.git@{version}\n```\n\nwhere `version` is a tag, a branch, or a commit. And `token` is a personal access token with read only permissions. Streamlit Community Cloud only supports installing public packages from public GitHub repos."
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/dependencies/module-not-found-error",
    "content": "# ModuleNotFoundError: No module named\n\n## Problem\n\nYou receive the error `ModuleNotFoundError: No module named` when you deploy an app on [Streamlit Community Cloud](https://streamlit.io/cloud).\n\n## Solution\n\nThis error occurs when you import a module on Streamlit Community Cloud that isn’t included in your requirements file. Any external [Python dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies) that are not distributed with a [standard Python installation](https://docs.python.org/3/py-modindex.html) should be included in your requirements file.\n\nE.g. You will see `ModuleNotFoundError: No module named 'sklearn'` if you don’t include `scikit-learn` in your requirements file and `import sklearn` in your app.\n\nRelated forum posts:\n\n- https://discuss.streamlit.io/t/getting-error-modulenotfounderror-no-module-named-beautifulsoup/9126\n- https://discuss.streamlit.io/t/modulenotfounderror-no-module-named-vega-datasets/16354"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/dependencies/no-matching-distribution",
    "content": "# ERROR: No matching distribution found for\n\n## Problem\n\nYou receive the error `ERROR: No matching distribution found for` when you deploy an app on [Streamlit Community Cloud](https://streamlit.io/cloud).\n\n## Solution\n\nThis error occurs when you deploy an app on Streamlit Community Cloud and have one or more of the following issues with your [Python dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies) in your requirements file:\n\n1. The package is part of the [Python Standard Library](https://docs.python.org/3/py-modindex.html). E.g. You will see **`ERROR: No matching distribution found for base64`** if you include [`base64`](https://docs.python.org/3/library/base64.html) in your requirements file, as it is part of the Python Standard Library. The solution is to not include the package in your requirements file. Only include packages in your requirements file that are not distributed with a standard Python installation.\n2. The package name in your requirements file is misspelled. Double-check the package name before including it in your requirements file.\n3. The package does not support the operating system on which your Streamlit app is running. E.g. You see **`ERROR: No matching distribution found for pywin32`** while deploying to Streamlit Community Cloud. The `pywin32` module provides access to many of the Windows APIs from Python. Apps deployed to Streamlit Community Cloud are executed in a Linux environment. As such, `pywin32` fails to install on non-Windows systems, including on Streamlit Community Cloud. The solution is to either exclude `pywin32` from your requirements file, or deploy your app on a cloud service offering Windows machines.\n\nRelated forum posts:\n\n- https://discuss.streamlit.io/t/error-no-matching-distribution-found-for-base64/15758\n- https://discuss.streamlit.io/t/error-could-not-find-a-version-that-satisfies-the-requirement-pywin32-301-from-versions-none/15343/2"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/dependencies/libgl",
    "content": "# ImportError libGL.so.1 cannot open shared object file No such file or directory\n\n## Problem\n\nYou receive the error `ImportError libGL.so.1 cannot open shared object file No such file or directory` when using OpenCV in your app deployed on [Streamlit Community Cloud](https://streamlit.io/cloud).\n\n## Solution\n\nIf you use OpenCV in your app, include `opencv-python-headless` in your requirements file on Streamlit Community Cloud in place of `opencv_contrib_python` and `opencv-python`.\n\nIf `opencv-python` is a _required_ (non-optional) dependency of your app or a dependency of a library used in your app, the above solution is not applicable. Instead, you can use the following solution:\n\nCreate a `packages.txt` file in your repo with the following line to install the [apt-get dependency](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#apt-get-dependencies) `libgl`:\n\n```\nlibgl1\n```"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/dependencies",
    "content": "# Installing dependencies\n\n- [ModuleNotFoundError: No module named](/knowledge-base/dependencies/module-not-found-error)\n- [ImportError: libGL.so.1: cannot open shared object file: No such file or directory](/knowledge-base/dependencies/libgl)\n- [ERROR: No matching distribution found for](/knowledge-base/dependencies/no-matching-distribution)\n- [How to install a package not on PyPI/Conda but available on GitHub](/knowledge-base/dependencies/install-package-not-pypi-conda-available-github)"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy/login-attempt-to-streamlit-community-cloud-fails-with-error-403",
    "content": "# Login attempt to Streamlit Community Cloud fails with error 403\n\n## Problem\n\nStreamlit Community Cloud has monitoring jobs to detect malicious users using the platform for crypto mining. These jobs sometimes result in false positives and a normal user starts getting error 403 against a login attempt.\n\n## Solution\n\nPlease contact [Support](mailto:support@streamlit.io) by providing your **GitHub username** for help referring to this article."
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy/does-streamlit-support-wsgi-protocol",
    "content": "# Does Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?)\n\n## Problem\n\nYou're not sure whether your Streamlit app can be deployed with gunicorn.\n\n## Solution\n\nStreamlit does not support the WSGI protocol at this time, so deploying Streamlit with (for example) gunicorn is not currently possible. Check out this [forum thread regarding deploying Streamlit in a gunicorn-like manner](https://discuss.streamlit.io/t/how-do-i-set-the-server-to-0-0-0-0-for-deployment-using-docker/216) to see how other users have accomplished this."
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy/invoking-python-subprocess-deployed-streamlit-app",
    "content": "# Invoking a Python subprocess in a deployed Streamlit app\n\n## Problem\n\nLet's suppose you want to invoke a subprocess to run a Python script `script.py` in your deployed Streamlit app `streamlit_app.py`. For example, the machine learning library [Ludwig](https://ludwig-ai.github.io/ludwig-docs/) is run using a command-line interface, or maybe you want to run a bash script or similar type of process from Python.\n\nYou have tried the following, but run into dependency issues for `script.py`, even though you have specified your Python dependencies in a requirements file:\n\n```python\n# streamlit_app.py\nimport streamlit as st\nimport subprocess\n\nsubprocess.run([\"python\", \"script.py\"])\n```\n\n## Solution\n\nWhen you run the above code block, you will get the version of Python that is on the system path—not necessarily the Python executable installed in the virtual environment that the Streamlit code is running under.\n\nThe solution is to detect the Python executable directly with [`sys.executable`](https://docs.python.org/3/library/sys.html#sys.executable):\n\n```python\n# streamlit_app.py\nimport streamlit as st\nimport subprocess\nimport sys\n\nsubprocess.run([f\"{sys.executable}\", \"script.py\"])\n```\n\nThis ensures that `script.py` is running under the same Python executable as your Streamlit code—where your [Python dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies) are installed.\n\n### Relevant links\n\n- https://stackoverflow.com/questions/69947867/run-portion-of-python-code-in-parallel-from-a-streamlit-app/69948545#69948545\n- https://discuss.streamlit.io/t/modulenotfounderror-no-module-named-cv2-streamlit/18319/3?u=snehankekre\n- https://docs.python.org/3/library/sys.html#sys.executable"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy/deploy-multiple-streamlit-apps-different-subdomains",
    "content": "# How can I deploy multiple Streamlit apps on different subdomains?\n\n## Problem\n\nYou want to deploy multiple Streamlit apps on different subdomains.\n\n## Solution\n\nLike running your Streamlit app on more common ports such as 80, subdomains are handled by a web server like Apache or Nginx:\n\n- Set up a web server on a machine with a public IP address, then use a DNS server to point all desired subdomains to your webserver's IP address\n\n- Configure your web server to route requests for each subdomain to the different ports that your Streamlit apps are running on\n\nFor example, let’s say you had two Streamlit apps called `Calvin` and `Hobbes`. App `Calvin` is running on port **8501**. You set up app `Hobbes` to run on port **8502**. Your webserver would then be set up to \"listen\" for requests on subdomains `calvin.somedomain.com` and `hobbes.subdomain.com`, and route requests to port **8501** and **8502**, respectively.\n\nCheck out these two tutorials for Apache2 and Nginx that deal with setting up a webserver to redirect subdomains to different ports:\n\n- [Apache2 subdomains](https://stackoverflow.com/questions/8541182/apache-redirect-to-another-port)\n- [NGinx subdomains](https://gist.github.com/soheilhy/8b94347ff8336d971ad0)"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy/resource-limits",
    "content": "# Argh. This app has gone over its resource limits\n\nSorry! It means you've hit the [resource limits](/deploy/streamlit-community-cloud/manage-your-app#app-resources-and-limits) of your [Streamlit Community Cloud](https://streamlit.io/cloud) account.\n\nThere are a few things you can change in your app to make it less resource-hungry:\n\n- Reboot your app (temporary fix)\n- Use `st.cache_data` or `st.cache_resource` to load models or data only once\n- Restrict the cache size with `ttl` or `max_entries`\n- Move big datasets to a database\n- Profile your app's memory usage\n\nCheck out our [blog post](https://blog.streamlit.io/common-app-problems-resource-limits/) on [\"Common app problems: Resource limits\"](https://blog.streamlit.io/common-app-problems-resource-limits/) for more in-depth tips prevent your app from hitting the [resource limits](/deploy/streamlit-community-cloud/manage-your-app#app-resources-and-limits) of the Streamlit Community Cloud.\n\nRelated forum posts:\n\n- [https://discuss.streamlit.io/t/common-app-problems-resource-limits/16969](https://discuss.streamlit.io/t/common-app-problems-resource-limits/16969)\n- [https://blog.streamlit.io/common-app-problems-resource-limits/](https://blog.streamlit.io/common-app-problems-resource-limits/)\n\nWe offer free resource increases only to support nonprofits or educational organizations on a case-by-case basis. If you are a nonprofit or educational organization, please complete [this form](https://info.snowflake.com/streamlit-resource-increase-request.html) and we will review your submission as soon as possible.\n\nOnce the increase is completed, you will receive an email from the Streamlit marketing team with a confirmation that the increase has been applied."
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy/increase-file-uploader-limit-streamlit-cloud",
    "content": "# How do I increase the upload limit of st.file_uploader on Streamlit Community Cloud?\n\n## Overview\n\nBy default, files uploaded using [`st.file_uploader()`](/develop/api-reference/widgets/st.file_uploader) are limited to 200MB. You can configure this using the `server.maxUploadSize` config option.\n\nStreamlit provides [four different ways to set configuration options](/develop/concepts/configuration):\n\n1. In a **global config file** at `~/.streamlit/config.toml` for macOS/Linux or `%userprofile%/.streamlit/config.toml` for Windows:\n   ```toml\n   [server]\n   maxUploadSize = 200\n   ```\n2. In a **per-project config file** at `$CWD/.streamlit/config.toml`, where `$CWD` is the folder you're running Streamlit from.\n3. Through `STREAMLIT_*` **environment variables**, such as:\n   ```bash\n   export STREAMLIT_SERVER_MAX_UPLOAD_SIZE=200\n   ```\n4. As **flags on the command line** when running `streamlit run`:\n   ```bash\n   streamlit run your_script.py --server.maxUploadSize 200\n   ```\n\nWhich of the four options should you choose for an app deployed to [Streamlit Community Cloud](/deploy/streamlit-community-cloud)? 🤔\n\n## Solution\n\nWhen deploying your app to Streamlit Community Cloud, you should **use option 1**. Namely, set the `maxUploadSize` config option in a global config file (`.streamlit/config.toml`) uploaded to your app's GitHub repo. 🎈\n\nFor example, to increase the upload limit to 400MB, upload a `.streamlit/config.toml` file containing the following lines to your app's GitHub repo:\n\n```toml\n[server]\nmaxUploadSize = 400\n```\n\n## Relevant resources\n\n- [Streamlit drag and drop capping at 200MB, need workaround](https://discuss.streamlit.io/t/streamlit-drag-and-drop-capping-at-200mb-need-workaround/19803/2)\n- [File uploader widget API](/develop/api-reference/widgets/st.file_uploader)\n- [How to set Streamlit configuration options](/develop/concepts/configuration)"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy/remote-start",
    "content": "# App is not loading when running remotely\n\nBelow are a few common errors that occur when users spin up their own solution\nto host a Streamlit app remotely.\n\nTo learn about a deceptively simple way to host Streamlit apps that avoids all\nthe issues below, check out [Streamlit Community Cloud](https://streamlit.io/cloud).\n\n### Symptom #1: The app never loads\n\nWhen you enter the app's URL in a browser and all you see is a **blank page, a\n\"Page not found\" error, a \"Connection refused\" error**, or anything like that,\nfirst check that Streamlit is actually running on the remote server. On a Linux\nserver you can SSH into it and then run:\n\n```bash\nps -Al | grep streamlit\n```\n\nIf you see Streamlit running, the most likely culprit is the Streamlit port not\nbeing exposed. The fix depends on your exact setup. Below are three example\nfixes:\n\n- **Try port 80:** Some hosts expose port 80 by default. To\n  set Streamlit to use that port, start Streamlit with the `--server.port`\n  option:\n\n  ```bash\n  streamlit run my_app.py --server.port=80\n  ```\n\n- **AWS EC2 server**: First, click on your instance in the [AWS Console](https://us-west-2.console.aws.amazon.com/ec2/v2/home).\n  Then scroll down and click on _Security Groups_ → _Inbound_ → _Edit_. Next, add\n  a _Custom TCP_ rule that allows the _Port Range_ `8501` with _Source_\n  `0.0.0.0/0`.\n\n- **Other types of server**: Check the firewall settings.\n\nIf that still doesn't solve the problem, try running a simple HTTP server\ninstead of Streamlit, and seeing if _that_ works correctly. If it does, then\nyou know the problem lies somewhere in your Streamlit app or configuration (in\nwhich case you should ask for help in our\n[forums](https://discuss.streamlit.io)!) If not, then it's definitely unrelated\nto Streamlit.\n\nHow to start a simple HTTP server:\n\n```bash\npython -m http.server [port]\n```\n\n### Symptom #2: The app says \"Please wait...\" or shows skeleton elements forever\n\nThis symptom appears differently starting from version 1.29.0. For earlier\nversions of Streamlit, a loading app shows a blue box in the center of the page\nwith a \"Please wait...\" message. Starting from version 1.29.0, a loading app\nshows skeleton elements. If this loading screen does not go away, the\nunderlying cause is likely one of the following:\n\n- Using port 3000 which is reserved for internal development.\n- Misconfigured [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n  protection.\n- Server is stripping headers from the Websocket connection, thereby breaking\n  compression.\n\nTo diagnose the issue, first make sure you are not using port 3000. If in doubt,\ntry port 80 as described above.\n\nNext, try temporarily disabling CORS protection by running Streamlit with the\n`--server.enableCORS` flag set to `false`:\n\n```bash\nstreamlit run my_app.py --server.enableCORS=false\n```\n\nIf this fixes your issue, **you should re-enable CORS protection** and then set\n`browser.serverAddress` to the URL of your Streamlit app.\n\nIf the issue persists, try disabling websocket compression by running Streamlit with the\n`--server.enableWebsocketCompression` flag set to `false`\n\n```bash\nstreamlit run my_app.py --server.enableWebsocketCompression=false\n```\n\nIf this fixes your issue, your server setup is likely stripping the\n`Sec-WebSocket-Extensions` HTTP header that is used to negotiate Websocket compression.\n\nCompression is not required for Streamlit to work, but it's strongly recommended as it\nimproves performance. If you'd like to turn it back on, you'll need to find which part\nof your infrastructure is stripping the `Sec-WebSocket-Extensions` HTTP header and\nchange that behavior.\n\n### Symptom #3: Unable to upload files when running in multiple replicas\n\nIf the file uploader widget returns an error with status code 403, this is probably\ndue to a misconfiguration in your app's\n[XSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) protection logic.\n\nTo diagnose the issue, try temporarily disabling XSRF protection by running Streamlit\nwith the `--server.enableXsrfProtection` flag set to `false`:\n\n```bash\nstreamlit run my_app.py --server.enableXsrfProtection=false\n```\n\nIf this fixes your issue, **you should re-enable XSRF protection** and try one\nor both of the following:\n\n- Set `browser.serverAddress` and `browser.serverPort` to the URL and port of\n  your Streamlit app.\n- Configure your app to use the same secret across every replica by setting the\n  `server.cookieSecret` config option to the same hard-to-guess string everywhere."
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy/huh-this-isnt-supposed-to-happen-message-after-trying-to-log-in",
    "content": "# Huh. This is isn't supposed to happen message after trying to log in\n\nThis article helps to resolve the login issue caused by email mismatching between the GitHub and the Streamlit Community Cloud.\n\n## Problem\n\nYou see the following message after signing in to your Streamlit Community Cloud account:\n\n![Huh. This is isn't supposed to happen message](/images/knowledge-base/huh-this-isnt-supposed-to-happen.png)\n\nThis message usually indicates that our system has linked your GitHub username with an email address other than the email address you're currently logged in with.\n\n## Solution\n\nNo worries – all you have to do is:\n\n1. Log out of Streamlit Community Cloud completely (via both your email and GitHub accounts).\n2. Log in first with your email account (you can do so via either [\"Continue with Google\"](/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out#sign-in-with-google) or [\"Continue with email\"](/knowledge-base/deploy/sign-in-without-sso)).\n3. Log in with your [GitHub account](/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out#sign-in-with-email)."
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy",
    "content": "# Deployment-related questions and errors\n\n- [How do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)?](/knowledge-base/deploy/deploy-streamlit-domain-port-80)\n- [How can I deploy multiple Streamlit apps on different subdomains?](/knowledge-base/deploy/deploy-multiple-streamlit-apps-different-subdomains)\n- [Invoking a Python subprocess in a deployed Streamlit app](/knowledge-base/deploy/invoking-python-subprocess-deployed-streamlit-app)\n- [Does Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?)](/knowledge-base/deploy/does-streamlit-support-wsgi-protocol)\n- [Argh. This app has gone over its resource limits.](/knowledge-base/deploy/resource-limits)\n- [App is not loading when running remotely](/knowledge-base/deploy/remote-start)\n- [Authentication without SSO](/knowledge-base/deploy/authentication-without-sso)\n- [How do I increase the upload limit of `st.file_uploader` on Streamlit Community Cloud?](/knowledge-base/deploy/increase-file-uploader-limit-streamlit-cloud)\n- [Huh. This is isn't supposed to happen message after trying to log in](/knowledge-base/deploy/huh-this-isnt-supposed-to-happen-message-after-trying-to-log-in)\n- [Login attempt to Streamlit Community Cloud fails with error 403](/knowledge-base/deploy/login-attempt-to-streamlit-community-cloud-fails-with-error-403)\n- [How to submit a support case for Streamlit Community Cloud](/knowledge-base/deploy/how-to-submit-a-support-case-for-streamlit-community-cloud)"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy/deploy-streamlit-domain-port-80",
    "content": "# How do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)?\n\n## Problem\n\nYou want to deploy a Streamlit app on a domain so it appears to run on port 80.\n\n## Solution\n\n- You should use a **reverse proxy** to forward requests from a webserver like [Apache](https://httpd.apache.org/) or [Nginx](https://www.nginx.com/) to the port where your Streamlit app is running. You can accomplish this in several different ways. The simplest way is to [forward all requests sent to your domain](https://discuss.streamlit.io/t/permission-denied-in-ec2-port-80/798/3) so that your Streamlit app appears as the content of your website.\n\n- Another approach is to configure your webserver to forward requests to designated subfolders (e.g. _http://awesomestuff.net/streamlitapp_) to different Streamlit apps on the same domain, as in this [example config for Nginx](https://discuss.streamlit.io/t/how-to-use-streamlit-with-nginx/378/7) submitted by a Streamlit community member.\n\nRelated forum posts:\n\n- https://discuss.streamlit.io/t/permission-denied-in-ec2-port-80/798/3\n- https://discuss.streamlit.io/t/how-to-use-streamlit-with-nginx/378/7"
  },
  {
    "url": "https://docs.streamlit.io/knowledge-base/deploy/how-to-submit-a-support-case-for-streamlit-community-cloud",
    "content": "# How to submit a support case for Streamlit Community Cloud\n\nThis article describes the steps to submit a support request to Snowflake for Streamlit Community Cloud.\n\n<Note>\n\nFor Snowflake customers, a support case can be submitted via [the support portal on Snowsight](https://community.snowflake.com/s/article/How-To-Submit-a-Support-Case-in-Snowflake-Lodge#Option1).\n\n</Note>\n\n1. Navigate to [https://community.snowflake.com/s/](https://community.snowflake.com/s/) in your browser.\n1. If you already have a Snowflake Community account, sign in. Otherwise, click \"**CREATE ACCOUNT**,\" and follow the prompts.\n1. At the top of the page, click \"**SUPPORT**.\"\n1. From the drop-down menu, select \"**Submit A Case**.\"\n1. Select the option \"**I am a Streamlit Community Cloud user**.\"\n1. Click \"**Next**\" to open the case description page.\n1. Fill out your request and submit the support case.\n\nYou should receive a confirmation email with the case number. A Snowflake Support engineer will follow up directly with the next steps to resolve your case. All communication will be through email."
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference",
    "content": "# API reference\n\nStreamlit makes it easy for you to visualize, mutate, and share data. The API\nreference is organized by activity type, like displaying data or optimizing\nperformance. Each section includes methods associated with the activity type,\nincluding examples.\n\nBrowse our API below and click to learn more about any of our available commands! 🎈\n\n## Display almost anything\n\n### Write and magic\n\n<br />\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/write-magic/st.write\">\n\n<h4>st.write</h4>\n\nWrite arguments to the app.\n\n```python\nst.write(\"Hello **world**!\")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/write-magic/st.write_stream\">\n\n<h4>st.write_stream</h4>\n\nWrite generators or streams to the app with a typewriter effect.\n\n```python\nst.write_stream(my_generator)\nst.write_stream(my_llm_stream)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/write-magic/magic\">\n\n<h4>Magic</h4>\n\nAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using `st.write`\n\n```python\n\"Hello **world**!\"\nmy_data_frame\nmy_mpl_figure\n```\n\n</RefCard>\n</TileContainer>\n\n### Text elements\n\n<br />\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/text/st.markdown\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/markdown.jpg\" />\n\n<h4>Markdown</h4>\n\nDisplay string formatted as Markdown.\n\n```python\nst.markdown(\"Hello **world**!\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.title\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/title.jpg\" />\n\n<h4>Title</h4>\n\nDisplay text in title formatting.\n\n```python\nst.title(\"The app title\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.header\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/header.jpg\" />\n\n<h4>Header</h4>\n\nDisplay text in header formatting.\n\n```python\nst.header(\"This is a header\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.subheader\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/subheader.jpg\" />\n\n<h4>Subheader</h4>\n\nDisplay text in subheader formatting.\n\n```python\nst.subheader(\"This is a subheader\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.badge\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/badge.jpg\" />\n\n<h4>Badge</h4>\n\nDisplay a small, colored badge.\n\n```python\nst.badge(\"New\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.caption\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/caption.jpg\" />\n\n<h4>Caption</h4>\n\nDisplay text in small font.\n\n```python\nst.caption(\"This is written small caption text\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.code\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/code.jpg\" />\n\n<h4>Code block</h4>\n\nDisplay a code block with optional syntax highlighting.\n\n```python\nst.code(\"a = 1234\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.echo\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/code.jpg\" />\n\n<h4>Echo</h4>\n\nDisplay some code in the app, then execute it. Useful for tutorials.\n\n```python\nwith st.echo():\n  st.write('This code will be printed')\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.latex\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/latex.jpg\" />\n\n<h4>LaTeX</h4>\n\nDisplay mathematical expressions formatted as LaTeX.\n\n```python\nst.latex(\"\\int a x^2 \\,dx\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.text\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/text.jpg\" />\n\n<h4>Preformatted text</h4>\n\nWrite fixed-width and preformatted text.\n\n```python\nst.text(\"Hello world\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.divider\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/divider.jpg\" />\n\n<h4>Divider</h4>\n\nDisplay a horizontal rule.\n\n```python\nst.divider()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.help\">\n\n<h4>Get help</h4>\n\nDisplay object’s doc string, nicely formatted.\n\n```python\nst.help(st.write)\nst.help(pd.DataFrame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.html\">\n\n<h4>Render HTML</h4>\n\nRenders HTML strings to your app.\n\n```python\nst.html(\"<p>Foo bar.</p>\")\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n<ComponentCard href=\"https://github.com/tvst/st-annotated-text\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/annotated-text.jpg\" />\n\n<h4>Annotated text</h4>\n\nDisplay annotated text in Streamlit apps. Created by [@tvst](https://github.com/tvst).\n\n```python\nannotated_text(\"This \", (\"is\", \"verb\"), \" some \", (\"annotated\", \"adj\"), (\"text\", \"noun\"), \" for those of \", (\"you\", \"pronoun\"), \" who \", (\"like\", \"verb\"), \" this sort of \", (\"thing\", \"noun\"), \".\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/andfanilo/streamlit-drawable-canvas\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/drawable-canvas.jpg\" />\n\n<h4>Drawable Canvas</h4>\n\nProvides a sketching canvas using [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n```python\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/gagan3012/streamlit-tags\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/tags.jpg\" />\n\n<h4>Tags</h4>\n\nAdd tags to your Streamlit apps. Created by [@gagan3012](https://github.com/gagan3012).\n\n```python\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'], suggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/JohnSnowLabs/nlu\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/nlu.jpg\" />\n\n<h4>NLU</h4>\n\nApply text mining on a dataframe. Created by [@JohnSnowLabs](https://github.com/JohnSnowLabs/).\n\n```python\nnlu.load('sentiment').predict('I love NLU! <3')\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://extras.streamlit.app/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/extras-mentions.jpg\" />\n\n<h4>Streamlit Extras</h4>\n\nA library with useful Streamlit extras. Created by [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n```python\nmention(label=\"An awesome Streamlit App\", icon=\"streamlit\",  url=\"https://extras.streamlit.app\",)\n```\n\n</ComponentCard>\n</ComponentSlider>\n\n### Data elements\n\n<br />\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/data/st.dataframe\">\n<Image pure alt=\"screenshot\" src=\"/images/api/dataframe.jpg\" />\n\n<h4>Dataframes</h4>\n\nDisplay a dataframe as an interactive table.\n\n```python\nst.dataframe(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.data_editor\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/data_editor.jpg\" />\n\n<h4>Data editor</h4>\n\nDisplay a data editor widget.\n\n```python\nedited = st.data_editor(df, num_rows=\"dynamic\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.column_config\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.jpg\" />\n\n<h4>Column configuration</h4>\n\nConfigure the display and editing behavior of dataframes and data editors.\n\n```python\nst.column_config.NumberColumn(\"Price (in USD)\", min_value=0, format=\"$%d\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.table\">\n<Image pure alt=\"screenshot\" src=\"/images/api/table.jpg\" />\n\n<h4>Static tables</h4>\n\nDisplay a static table.\n\n```python\nst.table(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.metric\">\n<Image pure alt=\"screenshot\" src=\"/images/api/metric.jpg\" />\n\n<h4>Metrics</h4>\n\nDisplay a metric in big bold font, with an optional indicator of how the metric changed.\n\n```python\nst.metric(\"My metric\", 42, 2)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.json\">\n<Image pure alt=\"screenshot\" src=\"/images/api/json.jpg\" />\n\n<h4>Dicts and JSON</h4>\n\nDisplay object or string as a pretty-printed JSON string.\n\n```python\nst.json(my_dict)\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/PablocFonseca/streamlit-aggrid\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/aggrid.jpg\" />\n\n<h4>Streamlit Aggrid</h4>\n\nImplementation of Ag-Grid component for Streamlit. Created by [@PablocFonseca](https://github.com/PablocFonseca).\n\n```python\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ngrid_return = AgGrid(df, editable=True)\n\nnew_df = grid_return['data']\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/randyzwitch/streamlit-folium\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/folium.jpg\" />\n\n<h4>Streamlit Folium</h4>\n\nStreamlit Component for rendering Folium maps. Created by [@randyzwitch](https://github.com/randyzwitch).\n\n```python\nm = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nfolium.Marker([39.949610, -75.150282], popup=\"Liberty Bell\", tooltip=\"Liberty Bell\").add_to(m)\n\nst_data = st_folium(m, width=725)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/okld/streamlit-pandas-profiling\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pandas-profiling.jpg\" />\n\n<h4>Pandas Profiling</h4>\n\nPandas profiling component for Streamlit. Created by [@okld](https://github.com/okld/).\n\n```python\ndf = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\n\nst_profile_report(pr)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/blackary/streamlit-image-coordinates\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/image-coordinates.jpg\" />\n\n<h4>Image Coordinates</h4>\n\nGet the coordinates of clicks on an image. Created by [@blackary](https://github.com/blackary/).\n\n```python\nfrom streamlit_image_coordinates import streamlit_image_coordinates\nvalue = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\n\nst.write(value)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/null-jones/streamlit-plotly-events\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/plotly-events.jpg\" />\n\n<h4>Plotly Events</h4>\n\nMake Plotly charts interactive!. Created by [@null-jones](https://github.com/null-jones/).\n\n```python\nfrom streamlit_plotly_events import plotly_events\nfig = px.line(x=[1], y=[1])\n\nselected_points = plotly_events(fig)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://extras.streamlit.app/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/extras-metric-cards.jpg\" />\n\n<h4>Streamlit Extras</h4>\n\nA library with useful Streamlit extras. Created by [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n```python\nfrom streamlit_extras.metric_cards import style_metric_cards\ncol3.metric(label=\"No Change\", value=5000, delta=0)\n\nstyle_metric_cards()\n```\n\n</ComponentCard>\n\n</ComponentSlider>\n\n### Chart elements\n\n<br />\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/charts/st.area_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/area_chart.jpg\" />\n\n<h4>Simple area charts</h4>\n\nDisplay an area chart.\n\n```python\nst.area_chart(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.bar_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/bar_chart.jpg\" />\n\n<h4>Simple bar charts</h4>\n\nDisplay a bar chart.\n\n```python\nst.bar_chart(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.line_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/line_chart.jpg\" />\n\n<h4>Simple line charts</h4>\n\nDisplay a line chart.\n\n```python\nst.line_chart(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.scatter_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/scatter_chart.svg\" />\n\n<h4>Simple scatter charts</h4>\n\nDisplay a line chart.\n\n```python\nst.scatter_chart(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.map\">\n<Image pure alt=\"screenshot\" src=\"/images/api/map.jpg\" />\n\n<h4>Scatterplots on maps</h4>\n\nDisplay a map with points on it.\n\n```python\nst.map(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.pyplot\">\n<Image pure alt=\"screenshot\" src=\"/images/api/pyplot.jpg\" />\n\n<h4>Matplotlib</h4>\n\nDisplay a matplotlib.pyplot figure.\n\n```python\nst.pyplot(my_mpl_figure)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.altair_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/vega_lite_chart.jpg\" />\n\n<h4>Altair</h4>\n\nDisplay a chart using the Altair library.\n\n```python\nst.altair_chart(my_altair_chart)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.vega_lite_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/vega_lite_chart.jpg\" />\n\n<h4>Vega-Lite</h4>\n\nDisplay a chart using the Vega-Lite library.\n\n```python\nst.vega_lite_chart(my_vega_lite_chart)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.plotly_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/plotly_chart.jpg\" />\n\n<h4>Plotly</h4>\n\nDisplay an interactive Plotly chart.\n\n```python\nst.plotly_chart(my_plotly_chart)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.bokeh_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/bokeh_chart.jpg\" />\n\n<h4>Bokeh</h4>\n\nDisplay an interactive Bokeh chart.\n\n```python\nst.bokeh_chart(my_bokeh_chart)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.pydeck_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/pydeck_chart.jpg\" />\n\n<h4>PyDeck</h4>\n\nDisplay a chart using the PyDeck library.\n\n```python\nst.pydeck_chart(my_pydeck_chart)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.graphviz_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/graphviz_chart.jpg\" />\n\n<h4>GraphViz</h4>\n\nDisplay a graph using the dagre-d3 library.\n\n```python\nst.graphviz_chart(my_graphviz_spec)\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/tvst/plost\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/plost.jpg\" />\n\n<h4>Plost</h4>\n\nA deceptively simple plotting library for Streamlit. Created by [@tvst](https://github.com/tvst).\n\n```python\nimport plost\nplost.line_chart(my_dataframe, x='time', y='stock_value', color='stock_name',)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/facebookresearch/hiplot\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/hiplot.jpg\" />\n\n<h4>HiPlot</h4>\n\nHigh dimensional Interactive Plotting. Created by [@facebookresearch](https://github.com/facebookresearch).\n\n```python\ndata = [{'dropout':0.1, 'lr': 0.001, 'loss': 10.0, 'optimizer': 'SGD'}, {'dropout':0.15, 'lr': 0.01, 'loss': 3.5, 'optimizer': 'Adam'}, {'dropout':0.3, 'lr': 0.1, 'loss': 4.5, 'optimizer': 'Adam'}]\nhip.Experiment.from_iterable(data).display()\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/andfanilo/streamlit-echarts\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/echarts.jpg\" />\n\n<h4>ECharts</h4>\n\nHigh dimensional Interactive Plotting. Created by [@andfanilo](https://github.com/andfanilo).\n\n```python\nfrom streamlit_echarts import st_echarts\nst_echarts(options=options)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/randyzwitch/streamlit-folium\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/folium.jpg\" />\n\n<h4>Streamlit Folium</h4>\n\nStreamlit Component for rendering Folium maps. Created by [@randyzwitch](https://github.com/randyzwitch).\n\n```python\nm = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/explosion/spacy-streamlit\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/spacy.jpg\" />\n\n<h4>Spacy-Streamlit</h4>\n\nspaCy building blocks and visualizers for Streamlit apps. Created by [@explosion](https://github.com/explosion).\n\n```python\nmodels = [\"en_core_web_sm\", \"en_core_web_md\"]\nspacy_streamlit.visualize(models, \"Sundar Pichai is the CEO of Google.\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/ChrisDelClea/streamlit-agraph\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/agraph.jpg\" />\n\n<h4>Streamlit Agraph</h4>\n\nA Streamlit Graph Vis, based on [react-grah-vis](https://github.com/crubier/react-graph-vis). Created by [@ChrisDelClea](https://github.com/ChrisDelClea).\n\n```python\nfrom streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/andfanilo/streamlit-lottie\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/lottie.jpg\" />\n\n<h4>Streamlit Lottie</h4>\n\nIntegrate [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n```python\nlottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/null-jones/streamlit-plotly-events\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/plotly-events.jpg\" />\n\n<h4>Plotly Events</h4>\n\nMake Plotly charts interactive!. Created by [@null-jones](https://github.com/null-jones/).\n\n```python\nfig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://extras.streamlit.app/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/extras-chart-annotations.jpg\" />\n\n<h4>Streamlit Extras</h4>\n\nA library with useful Streamlit extras. Created by [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n```python\nchart += get_annotations_chart(annotations=[(\"Mar 01, 2008\", \"Pretty good day for GOOG\"), (\"Dec 01, 2007\", \"Something's going wrong for GOOG & AAPL\"), (\"Nov 01, 2008\", \"Market starts again thanks to...\"), (\"Dec 01, 2009\", \"Small crash for GOOG after...\"),],)\nst.altair_chart(chart, use_container_width=True)\n```\n\n</ComponentCard>\n\n</ComponentSlider>\n\n### Input widgets\n\n<br />\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/widgets/st.button\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/button.svg\" />\n\n<h4>Button</h4>\n\nDisplay a button widget.\n\n```python\nclicked = st.button(\"Click me\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.download_button\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/download_button.svg\" />\n\n<h4>Download button</h4>\n\nDisplay a download button widget.\n\n```python\nst.download_button(\"Download file\", file)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/execution-flow/st.form_submit_button\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/form_submit_button.svg\" />\n\n<h4>Form button</h4>\n\nDisplay a form submit button. For use with `st.form`.\n\n```python\nst.form_submit_button(\"Sign up\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.link_button\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/link_button.svg\" />\n\n<h4>Link button</h4>\n\nDisplay a link button.\n\n```python\nst.link_button(\"Go to gallery\", url)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.page_link\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/page_link.jpg\" />\n\n<h4>Page link</h4>\n\nDisplay a link to another page in a multipage app.\n\n```python\nst.page_link(\"app.py\", label=\"Home\", icon=\"🏠\")\nst.page_link(\"pages/profile.py\", label=\"My profile\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.checkbox\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/checkbox.jpg\" />\n\n<h4>Checkbox</h4>\n\nDisplay a checkbox widget.\n\n```python\nselected = st.checkbox(\"I agree\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.color_picker\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/color_picker.jpg\" />\n\n<h4>Color picker</h4>\n\nDisplay a color picker widget.\n\n```python\ncolor = st.color_picker(\"Pick a color\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.feedback\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/feedback.jpg\" />\n\n<h4>Feedback</h4>\n\nDisplay a rating or sentiment button group.\n\n```python\nst.feedback(\"stars\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.multiselect\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/multiselect.jpg\" />\n\n<h4>Multiselect</h4>\n\nDisplay a multiselect widget. The multiselect widget starts as empty.\n\n```python\nchoices = st.multiselect(\"Buy\", [\"milk\", \"apples\", \"potatoes\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.pills\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/pills.jpg\" />\n\n<h4>Pills</h4>\n\nDisplay a pill-button selection widget.\n\n```python\nst.pills(\"Tags\", [\"Sports\", \"AI\", \"Politics\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.radio\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/radio.jpg\" />\n\n<h4>Radio</h4>\n\nDisplay a radio button widget.\n\n```python\nchoice = st.radio(\"Pick one\", [\"cats\", \"dogs\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.segmented_control\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/segmented_control.jpg\" />\n\n<h4>Segmented control</h4>\n\nDisplay a segmented-button selection widget.\n\n```python\nst.segmented_control(\"Filter\", [\"Open\", \"Closed\", \"All\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.selectbox\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/selectbox.jpg\" />\n\n<h4>Selectbox</h4>\n\nDisplay a select widget.\n\n```python\nchoice = st.selectbox(\"Pick one\", [\"cats\", \"dogs\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.select_slider\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/select_slider.jpg\" />\n\n<h4>Select-slider</h4>\n\nDisplay a slider widget to select items from a list.\n\n```python\nsize = st.select_slider(\"Pick a size\", [\"S\", \"M\", \"L\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.toggle\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/toggle.jpg\" />\n\n<h4>Toggle</h4>\n\nDisplay a toggle widget.\n\n```python\nactivated = st.toggle(\"Activate\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.number_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/number_input.jpg\" />\n\n<h4>Number input</h4>\n\nDisplay a numeric input widget.\n\n```python\nchoice = st.number_input(\"Pick a number\", 0, 10)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.slider\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/slider.jpg\" />\n\n<h4>Slider</h4>\n\nDisplay a slider widget.\n\n```python\nnumber = st.slider(\"Pick a number\", 0, 100)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.date_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/date_input.jpg\" />\n\n<h4>Date input</h4>\n\nDisplay a date input widget.\n\n```python\ndate = st.date_input(\"Your birthday\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.time_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/time_input.jpg\" />\n\n<h4>Time input</h4>\n\nDisplay a time input widget.\n\n```python\ntime = st.time_input(\"Meeting time\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/chat/st.chat_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/chat_input.jpg\" />\n\n<h4>Chat input</h4>\n\nDisplay a chat input widget.\n\n```python\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    st.write(f\"The user has sent: {prompt}\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.text_area\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/text_area.jpg\" />\n\n<h4>Text-area</h4>\n\nDisplay a multi-line text input widget.\n\n```python\ntext = st.text_area(\"Text to translate\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.text_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/text_input.jpg\" />\n\n<h4>Text input</h4>\n\nDisplay a single-line text input widget.\n\n```python\nname = st.text_input(\"First name\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.audio_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/audio_input.jpg\" />\n\n<h4>Audio input</h4>\n\nDisplay a widget that allows users to record with their microphone.\n\n```python\nspeech = st.audio_input(\"Record a voice message\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.data_editor\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/data_editor.jpg\" />\n\n<h4>Data editor</h4>\n\nDisplay a data editor widget.\n\n```python\nedited = st.data_editor(df, num_rows=\"dynamic\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.file_uploader\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/file_uploader.jpg\" />\n\n<h4>File uploader</h4>\n\nDisplay a file uploader widget.\n\n```python\ndata = st.file_uploader(\"Upload a CSV\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.camera_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/camera_input.jpg\" />\n\n<h4>Camera input</h4>\n\nDisplay a widget that allows users to upload images directly from a camera.\n\n```python\nimage = st.camera_input(\"Take a picture\")\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/okld/streamlit-elements\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/elements.jpg\" />\n\n<h4>Streamlit Elements</h4>\n\nCreate a draggable and resizable dashboard in Streamlit. Created by [@okls](https://github.com/okls).\n\n```python\nfrom streamlit_elements import elements, mui, html\n\nwith elements(\"new_element\"):\n  mui.Typography(\"Hello world\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/gagan3012/streamlit-tags\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/tags.jpg\" />\n\n<h4>Tags</h4>\n\nAdd tags to your Streamlit apps. Created by [@gagan3012](https://github.com/gagan3012).\n\n```python\nfrom streamlit_tags import st_tags\n\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'],\nsuggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/Wirg/stqdm\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/stqdm.jpg\" />\n\n<h4>Stqdm</h4>\n\nThe simplest way to handle a progress bar in streamlit app. Created by [@Wirg](https://github.com/Wirg).\n\n```python\nfrom stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/innerdoc/streamlit-timeline\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/timeline.jpg\" />\n\n<h4>Timeline</h4>\n\nDisplay a Timeline in Streamlit apps using [TimelineJS](https://timeline.knightlab.com/). Created by [@innerdoc](https://github.com/innerdoc).\n\n```python\nfrom streamlit_timeline import timeline\n\nwith open('example.json', \"r\") as f:\n  timeline(f.read(), height=800)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/blackary/streamlit-camera-input-live\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/camera-live.jpg\" />\n\n<h4>Camera input live</h4>\n\nAlternative for st.camera_input which returns the webcam images live. Created by [@blackary](https://github.com/blackary).\n\n```python\nfrom camera_input_live import camera_input_live\n\nimage = camera_input_live()\nst.image(value)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/okld/streamlit-ace\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/ace.jpg\" />\n\n<h4>Streamlit Ace</h4>\n\nAce editor component for Streamlit. Created by [@okld](https://github.com/okld).\n\n```python\nfrom streamlit_ace import st_ace\n\ncontent = st_ace()\ncontent\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/AI-Yash/st-chat\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/chat.jpg\" />\n\n<h4>Streamlit Chat</h4>\n\nStreamlit Component for a Chatbot UI. Created by [@AI-Yash](https://github.com/AI-Yash).\n\n```python\nfrom streamlit_chat import message\n\nmessage(\"My message\")\nmessage(\"Hello bot!\", is_user=True)  # align's the message to the right\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/victoryhb/streamlit-option-menu\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/option-menu.jpg\" />\n\n<h4>Streamlit Option Menu</h4>\n\nSelect a single item from a list of options in a menu. Created by [@victoryhb](https://github.com/victoryhb).\n\n```python\nfrom streamlit_option_menu import option_menu\n\noption_menu(\"Main Menu\", [\"Home\", 'Settings'],\n  icons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://extras.streamlit.app/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/extras-toggle.jpg\" />\n\n<h4>Streamlit Extras</h4>\n\nA library with useful Streamlit extras. Created by [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n```python\nfrom streamlit_extras.stoggle import stoggle\n\nstoggle(\n    \"Click me!\", \"\"\"🥷 Surprise! Here's some additional content\"\"\",)\n```\n\n</ComponentCard>\n\n</ComponentSlider>\n\n### Media elements\n\n<br />\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/media/st.image\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/image.jpg\" />\n\n<h4>Image</h4>\n\nDisplay an image or list of images.\n\n```python\nst.image(numpy_array)\nst.image(image_bytes)\nst.image(file)\nst.image(\"https://example.com/myimage.jpg\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/media/st.logo\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/logo.jpg\" />\n\n<h4>Logo</h4>\n\nDisplay a logo in the upper-left corner of your app and its sidebar.\n\n```python\nst.logo(\"logo.jpg\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/media/st.audio\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/audio.jpg\" />\n\n<h4>Audio</h4>\n\nDisplay an audio player.\n\n```python\nst.audio(numpy_array)\nst.audio(audio_bytes)\nst.audio(file)\nst.audio(\"https://example.com/myaudio.mp3\", format=\"audio/mp3\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/media/st.video\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/video.jpg\" />\n\n<h4>Video</h4>\n\nDisplay a video player.\n\n```python\nst.video(numpy_array)\nst.video(video_bytes)\nst.video(file)\nst.video(\"https://example.com/myvideo.mp4\", format=\"video/mp4\")\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/whitphx/streamlit-webrtc\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/webrtc.jpg\" />\n\n<h4>Streamlit Webrtc</h4>\n\nHandling and transmitting real-time video/audio streams with Streamlit. Created by [@whitphx](https://github.com/whitphx).\n\n```python\nfrom streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=\"sample\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/andfanilo/streamlit-drawable-canvas\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/drawable-canvas.jpg\" />\n\n<h4>Drawable Canvas</h4>\n\nProvides a sketching canvas using [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n```python\nfrom streamlit_drawable_canvas import st_canvas\n\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/fcakyon/streamlit-image-comparison\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/image-comparison.jpg\" />\n\n<h4>Image Comparison</h4>\n\nCompare images with a slider using [JuxtaposeJS](https://juxtapose.knightlab.com/). Created by [@fcakyon](https://github.com/fcakyon).\n\n```python\nfrom streamlit_image_comparison import image_comparison\n\nimage_comparison(img1=\"image1.jpg\", img2=\"image2.jpg\",)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/turner-anderson/streamlit-cropper\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/cropper.jpg\" />\n\n<h4>Streamlit Cropper</h4>\n\nA simple image cropper for Streamlit. Created by [@turner-anderson](https://github.com/turner-anderson).\n\n```python\nfrom streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/blackary/streamlit-image-coordinates\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/image-coordinates.jpg\" />\n\n<h4>Image Coordinates</h4>\n\nGet the coordinates of clicks on an image. Created by [@blackary](https://github.com/blackary/).\n\n```python\nfrom streamlit_image_coordinates import streamlit_image_coordinates\n\nstreamlit_image_coordinates(\"https://placekitten.com/200/300\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/andfanilo/streamlit-lottie\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/lottie.jpg\" />\n\n<h4>Streamlit Lottie</h4>\n\nIntegrate [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n```python\nlottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\n\nst_lottie(lottie_hello, key=\"hello\")\n```\n\n</ComponentCard>\n\n</ComponentSlider>\n\n### Layouts and containers\n\n<br />\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/layout/st.columns\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/columns.jpg\" />\n\n<h4>Columns</h4>\n\nInsert containers laid out as side-by-side columns.\n\n```python\ncol1, col2 = st.columns(2)\ncol1.write(\"this is column 1\")\ncol2.write(\"this is column 2\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.container\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/container.jpg\" />\n\n<h4>Container</h4>\n\nInsert a multi-element container.\n\n```python\nc = st.container()\nst.write(\"This will show last\")\nc.write(\"This will show first\")\nc.write(\"This will show second\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/execution-flow/st.dialog\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/dialog.jpg\" />\n\n<h4>Modal dialog</h4>\n\nInsert a modal dialog that can rerun independently from the rest of the script.\n\n```python\n@st.dialog(\"Sign up\")\ndef email_form():\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.empty\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/empty.jpg\" />\n\n<h4>Empty</h4>\n\nInsert a single-element container.\n\n```python\nc = st.empty()\nst.write(\"This will show last\")\nc.write(\"This will be replaced\")\nc.write(\"This will show first\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.expander\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/expander.jpg\" />\n\n<h4>Expander</h4>\n\nInsert a multi-element container that can be expanded/collapsed.\n\n```python\nwith st.expander(\"Open to see more\"):\n  st.write(\"This is more content\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.popover\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/popover.svg\" />\n\n<h4>Popover</h4>\n\nInsert a multi-element popover container that can be opened/closed.\n\n```python\nwith st.popover(\"Settings\"):\n  st.checkbox(\"Show completed\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.sidebar\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/sidebar.jpg\" />\n\n<h4>Sidebar</h4>\n\nDisplay items in a sidebar.\n\n```python\nst.sidebar.write(\"This lives in the sidebar\")\nst.sidebar.button(\"Click me!\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.tabs\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/tabs.jpg\" />\n\n<h4>Tabs</h4>\n\nInsert containers separated into tabs.\n\n```python\ntab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\ntab1.write(\"this is tab 1\")\ntab2.write(\"this is tab 2\")\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/okld/streamlit-elements\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/elements.jpg\" />\n\n<h4>Streamlit Elements</h4>\n\nCreate a draggable and resizable dashboard in Streamlit. Created by [@okls](https://github.com/okls).\n\n```python\nfrom streamlit_elements import elements, mui, html\n\nwith elements(\"new_element\"):\n  mui.Typography(\"Hello world\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/lukasmasuch/streamlit-pydantic\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pydantic.jpg\" />\n\n<h4>Pydantic</h4>\n\nAuto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by [@lukasmasuch](https://github.com/lukasmasuch).\n\n```python\nimport streamlit_pydantic as sp\n\nsp.pydantic_form(key=\"my_form\",\n  model=ExampleModel)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/blackary/st_pages\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pages.jpg\" />\n\n<h4>Streamlit Pages</h4>\n\nAn experimental version of Streamlit Multi-Page Apps. Created by [@blackary](https://github.com/blackary).\n\n```python\nfrom st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"🏠\"),\n  Page(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n```\n\n</ComponentCard>\n\n</ComponentSlider>\n\n### Chat elements\n\n<br />\n\nStreamlit provides a few commands to help you build conversational apps. These chat elements are designed to be used in conjunction with each other, but you can also use them separately.\n\n`st.chat_message` lets you insert a chat message container into the app so you can display messages from the user or the app. Chat containers can contain other Streamlit elements, including charts, tables, text, and more. `st.chat_input` lets you display a chat input widget so the user can type in a message.\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/chat/st.chat_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/chat_input.jpg\" />\n\n<h4>Chat input</h4>\n\nDisplay a chat input widget.\n\n```python\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    st.write(f\"The user has sent: {prompt}\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/chat/st.chat_message\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/chat_message.jpg\" />\n\n<h4>Chat message</h4>\n\nInsert a chat message container.\n\n```python\nimport numpy as np\nwith st.chat_message(\"user\"):\n    st.write(\"Hello 👋\")\n    st.line_chart(np.random.randn(30, 3))\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.status\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/status.jpg\" />\n\n<h4>Status container</h4>\n\nDisplay output of long-running tasks in a container.\n\n```python\nwith st.status('Running'):\n  do_something_slow()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/write-magic/st.write_stream\">\n\n<h4>st.write_stream</h4>\n\nWrite generators or streams to the app with a typewriter effect.\n\n```python\nst.write_stream(my_generator)\nst.write_stream(my_llm_stream)\n```\n\n</RefCard>\n</TileContainer>\n\n### Status elements\n\n<br />\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/status/st.progress\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/progress.jpg\" />\n\n<h4>Progress bar</h4>\n\nDisplay a progress bar.\n\n```python\nfor i in range(101):\n  st.progress(i)\n  do_something_slow()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.spinner\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/spinner.jpg\" />\n\n<h4>Spinner</h4>\n\nTemporarily displays a message while executing a block of code.\n\n```python\nwith st.spinner(\"Please wait...\"):\n  do_something_slow()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.status\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/status.jpg\" />\n\n<h4>Status container</h4>\n\nDisplay output of long-running tasks in a container.\n\n```python\nwith st.status('Running'):\n  do_something_slow()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.toast\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/toast.jpg\" />\n\n<h4>Toast</h4>\n\nBriefly displays a toast message in the bottom-right corner.\n\n```python\nst.toast('Butter!', icon='🧈')\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.balloons\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/balloons.jpg\" />\n\n<h4>Balloons</h4>\n\nDisplay celebratory balloons!\n\n```python\ndo_something()\n\n# Celebrate when all done!\nst.balloons()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.snow\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/snow.jpg\" />\n\n<h4>Snowflakes</h4>\n\nDisplay celebratory snowflakes!\n\n```python\ndo_something()\n\n# Celebrate when all done!\nst.snow()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.success\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/success.jpg\" />\n\n<h4>Success box</h4>\n\nDisplay a success message.\n\n```python\nst.success(\"Match found!\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.info\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/info.jpg\" />\n\n<h4>Info box</h4>\n\nDisplay an informational message.\n\n```python\nst.info(\"Dataset is updated every day at midnight.\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.warning\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/warning.jpg\" />\n\n<h4>Warning box</h4>\n\nDisplay warning message.\n\n```python\nst.warning(\"Unable to fetch image. Skipping...\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.error\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/error.jpg\" />\n\n<h4>Error box</h4>\n\nDisplay error message.\n\n```python\nst.error(\"We encountered an error\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.exception\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/exception.jpg\" />\n\n<h4>Exception output</h4>\n\nDisplay an exception.\n\n```python\ne = RuntimeError(\"This is an exception of type RuntimeError\")\nst.exception(e)\n```\n\n</RefCard>\n\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/Wirg/stqdm\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/stqdm.jpg\" />\n\n<h4>Stqdm</h4>\n\nThe simplest way to handle a progress bar in streamlit app. Created by [@Wirg](https://github.com/Wirg).\n\n```python\nfrom stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/Socvest/streamlit-custom-notification-box\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/custom-notification-box.jpg\" />\n\n<h4>Custom notification box</h4>\n\nA custom notification box with the ability to close it out. Created by [@Socvest](https://github.com/Socvest).\n\n```python\nfrom streamlit_custom_notification_box import custom_notification_box\n\nstyles = {'material-icons':{'color': 'red'}, 'text-icon-link-close-container': {'box-shadow': '#3896de 0px 4px'}, 'notification-text': {'':''}, 'close-button':{'':''}, 'link':{'':''}}\ncustom_notification_box(icon='info', textDisplay='We are almost done with your registration...', externalLink='more info', url='#', styles=styles, key=\"foo\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://extras.streamlit.app/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/extras-emojis.jpg\" />\n\n<h4>Streamlit Extras</h4>\n\nA library with useful Streamlit extras. Created by [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n```python\nfrom streamlit_extras.let_it_rain import rain\n\nrain(emoji=\"🎈\", font_size=54,\n  falling_speed=5, animation_length=\"infinite\",)\n```\n\n</ComponentCard>\n\n</ComponentSlider>\n\n## App logic and configuration\n\n### Authentication and user info\n\n<br />\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/user/st.login\">\n\n<h4>Log in a user</h4>\n\n`st.login()` starts an authentication flow with an identity provider.\n\n```python\nst.login()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/user/st.logout\">\n\n<h4>Log out a user</h4>\n\n`st.logout()` removes a user's identity information.\n\n```python\nst.logout()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/user/st.user\">\n\n<h4>User info</h4>\n\n`st.user` returns information about a logged-in user.\n\n```python\nif st.user.is_logged_in:\n  st.write(f\"Welcome back, {st.user.name}!\")\n```\n\n</RefCard>\n</TileContainer>\n\n### Navigation and pages\n\n<br />\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/navigation/st.navigation\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/navigation.jpg\" />\n\n<h4>Navigation</h4>\n\nConfigure the available pages in a multipage app.\n\n```python\nst.navigation({\n    \"Your account\" : [log_out, settings],\n    \"Reports\" : [overview, usage],\n    \"Tools\" : [search]\n})\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/navigation/st.page\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/page.jpg\" />\n\n<h4>Page</h4>\n\nDefine a page in a multipage app.\n\n```python\nhome = st.Page(\n    \"home.py\",\n    title=\"Home\",\n    icon=\":material/home:\"\n)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/widgets/st.page_link\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/page_link.jpg\" />\n\n<h4>Page link</h4>\n\nDisplay a link to another page in a multipage app.\n\n```python\nst.page_link(\"app.py\", label=\"Home\", icon=\"🏠\")\nst.page_link(\"pages/profile.py\", label=\"My profile\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/navigation/st.switch_page\">\n\n<h4>Switch page</h4>\n\nProgrammatically navigates to a specified page.\n\n```python\nst.switch_page(\"pages/my_page.py\")\n```\n\n</RefCard>\n\n</TileContainer>\n\n### Execution flow\n\n<br />\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/execution-flow/st.dialog\" size=\"full\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/dialog.jpg\" />\n\n<h4>Modal dialog</h4>\n\nInsert a modal dialog that can rerun independently from the rest of the script.\n\n```python\n@st.dialog(\"Sign up\")\ndef email_form():\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/execution-flow/st.form\" size=\"half\">\n\n<h4>Forms</h4>\n\nCreate a form that batches elements together with a “Submit\" button.\n\n```python\nwith st.form(key='my_form'):\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n    st.form_submit_button(\"Sign up\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/execution-flow/st.fragment\" size=\"half\">\n\n<h4>Fragments</h4>\n\nDefine a fragment to rerun independently from the rest of the script.\n\n```python\n@st.fragment(run_every=\"10s\")\ndef fragment():\n    df = get_data()\n    st.line_chart(df)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/execution-flow/st.rerun\">\n\n<h4>Rerun script</h4>\n\nRerun the script immediately.\n\n```python\nst.rerun()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/execution-flow/st.stop\">\n\n<h4>Stop execution</h4>\n\nStops execution immediately.\n\n```python\nst.stop()\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/kmcgrady/streamlit-autorefresh\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/autorefresh.jpg\" />\n\n<h4>Autorefresh</h4>\n\nForce a refresh without tying up a script. Created by [@kmcgrady](https://github.com/kmcgrady).\n\n```python\nfrom streamlit_autorefresh import st_autorefresh\n\nst_autorefresh(interval=2000, limit=100,\n  key=\"fizzbuzzcounter\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/lukasmasuch/streamlit-pydantic\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pydantic.jpg\" />\n\n<h4>Pydantic</h4>\n\nAuto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by [@lukasmasuch](https://github.com/lukasmasuch).\n\n```python\nimport streamlit_pydantic as sp\n\nsp.pydantic_form(key=\"my_form\",\n  model=ExampleModel)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/blackary/st_pages\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pages.jpg\" />\n\n<h4>Streamlit Pages</h4>\n\nAn experimental version of Streamlit Multi-Page Apps. Created by [@blackary](https://github.com/blackary).\n\n```python\nfrom st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"🏠\"),\n  Page(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n```\n\n</ComponentCard>\n\n</ComponentSlider>\n\n### Caching and state\n\n<br />\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/caching-and-state/st.cache_data\" size=\"half\">\n\n<h4>Cache data</h4>\n\nFunction decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).\n\n```python\n@st.cache_data\ndef long_function(param1, param2):\n  # Perform expensive computation here or\n  # fetch data from the web here\n  return data\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/caching-and-state/st.cache_resource\" size=\"half\">\n\n<h4>Cache resource</h4>\n\nFunction decorator to cache functions that return global resources (e.g. database connections, ML models).\n\n```python\n@st.cache_resource\ndef init_model():\n  # Return a global resource here\n  return pipeline(\n    \"sentiment-analysis\",\n    model=\"distilbert-base-uncased-finetuned-sst-2-english\"\n  )\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/caching-and-state/st.session_state\">\n\n<h4>Session state</h4>\n\nSession state is a way to share variables between reruns, for each user session.\n\n```python\nst.session_state['key'] = value\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/caching-and-state/st.query_params\">\n\n<h4>Query parameters</h4>\n\nGet, set, or clear the query parameters that are shown in the browser's URL bar.\n\n```python\nst.query_params[key] = value\nst.query_params.clear()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/caching-and-state/st.context\">\n\n<h4>Context</h4>\n\n`st.context` provides a read-only interface to access cookies, headers, locale, and other browser-session information.\n\n```python\nst.context.cookies\nst.context.headers\n```\n\n</RefCard>\n\n</TileContainer>\n\n### Connections and databases\n\n#### Setup your connection\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/connections/st.connection\" size=\"half\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/connection.svg\" />\n\n<h4>Create a connection</h4>\n\nConnect to a data source or API\n\n```python\nconn = st.connection('pets_db', type='sql')\npet_owners = conn.query('select * from pet_owners')\nst.dataframe(pet_owners)\n```\n\n</RefCard>\n</TileContainer>\n\n#### Built-in connections\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/connections/st.connections.snowflakeconnection\" size=\"half\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/connections.SnowflakeConnection.svg\" />\n\n<h4>SnowflakeConnection</h4>\n\nA connection to Snowflake.\n\n```python\nconn = st.connection('snowflake')\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/connections/st.connections.sqlconnection\" size=\"half\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/connections.SQLConnection.svg\" />\n\n<h4>SQLConnection</h4>\n\nA connection to a SQL database using SQLAlchemy.\n\n```python\nconn = st.connection('sql')\n```\n\n</RefCard>\n</TileContainer>\n\n#### Build your own connections\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/connections/st.connections.baseconnection\" size=\"half\">\n\n<h4>Connection base class</h4>\n\nBuild your own connection with `BaseConnection`.\n\n```python\nclass MyConnection(BaseConnection[myconn.MyConnection]):\n    def _connect(self, **kwargs) -> MyConnection:\n        return myconn.connect(**self._secrets, **kwargs)\n    def query(self, query):\n        return self._instance.query(query)\n```\n\n</RefCard>\n\n</TileContainer>\n\n#### Secrets management\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/connections/st.secrets\" size=\"half\">\n\n<h4>Secrets singleton</h4>\n\nAccess secrets from a local TOML file.\n\n```python\nkey = st.secrets[\"OpenAI_key\"]\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/connections/secrets.toml\" size=\"half\">\n\n<h4>Secrets file</h4>\n\nSave your secrets in a per-project or per-profile TOML file.\n\n```python\nOpenAI_key = \"<YOUR_SECRET_KEY>\"\n```\n\n</RefCard>\n\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/mkhorasani/Streamlit-Authenticator\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/authenticator.jpg\" />\n\n<h4>Authenticator</h4>\n\nA secure authentication module to validate user credentials. Created by [@mkhorasani](https://github.com/mkhorasani).\n\n```python\nimport streamlit_authenticator as stauth\n\nauthenticator = stauth.Authenticate( config['credentials'], config['cookie']['name'],\nconfig['cookie']['key'], config['cookie']['expiry_days'], config['preauthorized'])\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/gagangoku/streamlit-ws-localstorage\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/localstorage.jpg\" />\n\n<h4>WS localStorage</h4>\n\nA simple synchronous way of accessing localStorage from your app. Created by [@gagangoku](https://github.com/gagangoku).\n\n```python\nfrom streamlit_ws_localstorage import injectWebsocketCode\n\nret = conn.setLocalStorageVal(key='k1', val='v1')\nst.write('ret: ' + ret)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/conradbez/streamlit-auth0\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/auth0.jpg\" />\n\n<h4>Streamlit Auth0</h4>\n\nThe fastest way to provide comprehensive login inside Streamlit. Created by [@conradbez](https://github.com/conradbez).\n\n```python\nfrom auth0_component import login_button\n\nuser_info = login_button(clientId, domain = domain)\nst.write(user_info)\n```\n\n</ComponentCard>\n\n</ComponentSlider>\n\n### Custom Components\n\n<br />\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/custom-components/st.components.v1.declare_component\">\n\n<h4>Declare a component</h4>\n\nCreate and register a custom component.\n\n```python\nfrom st.components.v1 import declare_component\ndeclare_component(\n    \"custom_slider\",\n    \"/frontend\",\n)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/custom-components/st.components.v1.html\">\n\n<h4>HTML</h4>\n\nDisplay an HTML string in an iframe.\n\n```python\nfrom st.components.v1 import html\nhtml(\n    \"<p>Foo bar.</p>\"\n)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/custom-components/st.components.v1.iframe\">\n\n<h4>iframe</h4>\n\nLoad a remote URL in an iframe.\n\n```python\nfrom st.components.v1 import iframe\niframe(\n    \"docs.streamlit.io\"\n)\n```\n\n</RefCard>\n\n</TileContainer>\n\n### Configuration\n\n<br />\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/configuration/config.toml\">\n\n<h4>Configuration file</h4>\n\nConfigures the default settings for your app.\n\n```\nyour-project/\n├── .streamlit/\n│   └── config.toml\n└── your_app.py\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/configuration/st.get_option\">\n\n<h4>Get config option</h4>\n\nRetrieve a single configuration option.\n\n```python\nst.get_option(\"theme.primaryColor\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/configuration/st.set_option\">\n\n<h4>Set config option</h4>\n\nSet a single configuration option. (This is very limited.)\n\n```python\nst.set_option(\"deprecation.showPyplotGlobalUse\", False)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/configuration/st.set_page_config\">\n\n<h4>Set page title, favicon, and more</h4>\n\nConfigures the default settings of the page.\n\n```python\nst.set_page_config(\n  page_title=\"My app\",\n  page_icon=\":shark:\",\n)\n```\n\n</RefCard>\n</TileContainer>\n\n## Developer tools\n\n### App testing\n\n<br />\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/app-testing/st.testing.v1.apptest\" size=\"full\">\n\n<h4>st.testing.v1.AppTest</h4>\n\n`st.testing.v1.AppTest` simulates a running Streamlit app for testing.\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"streamlit_app.py\")\nat.secrets[\"WORD\"] = \"Foobar\"\nat.run()\nassert not at.exception\n\nat.text_input(\"word\").input(\"Bazbat\").run()\nassert at.warning[0].value == \"Try again.\"\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_file\" size=\"full\">\n\n<h4>AppTest.from_file</h4>\n\n`st.testing.v1.AppTest.from_file` initializes a simulated app from a file.\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"streamlit_app.py\")\nat.run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_string\" size=\"full\">\n\n<h4>AppTest.from_string</h4>\n\n`st.testing.v1.AppTest.from_string` initializes a simulated app from a string.\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_string(app_script_as_string)\nat.run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_function\" size=\"full\">\n\n<h4>AppTest.from_function</h4>\n\n`st.testing.v1.AppTest.from_function` initializes a simulated app from a function.\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_function(app_script_as_callable)\nat.run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeblock\" size=\"half\">\n\n<h4>Block</h4>\n\nA representation of container elements, including:\n\n- `st.chat_message`\n- `st.columns`\n- `st.sidebar`\n- `st.tabs`\n- The main body of the app.\n\n```python\n# at.sidebar returns a Block\nat.sidebar.button[0].click().run()\nassert not at.exception\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeelement\" size=\"half\">\n\n<h4>Element</h4>\n\nThe base class for representation of all elements, including:\n\n- `st.title`\n- `st.header`\n- `st.markdown`\n- `st.dataframe`\n\n```python\n# at.title returns a sequence of Title\n# Title inherits from Element\nassert at.title[0].value == \"My awesome app\"\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treebutton\" size=\"third\">\n\n<h4>Button</h4>\n\nA representation of `st.button` and `st.form_submit_button`.\n\n```python\nat.button[0].click().run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treechatinput\" size=\"third\">\n\n<h4>ChatInput</h4>\n\nA representation of `st.chat_input`.\n\n```python\nat.chat_input[0].set_value(\"What is Streamlit?\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treecheckbox\" size=\"third\">\n\n<h4>Checkbox</h4>\n\nA representation of `st.checkbox`.\n\n```python\nat.checkbox[0].check().run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treecolorpicker\" size=\"third\">\n\n<h4>ColorPicker</h4>\n\nA representation of `st.color_picker`.\n\n```python\nat.color_picker[0].pick(\"#FF4B4B\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treedateinput\" size=\"third\">\n\n<h4>DateInput</h4>\n\nA representation of `st.date_input`.\n\n```python\nrelease_date = datetime.date(2023, 10, 26)\nat.date_input[0].set_value(release_date).run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treemultiselect\" size=\"third\">\n\n<h4>Multiselect</h4>\n\nA representation of `st.multiselect`.\n\n```python\nat.multiselect[0].select(\"New York\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treenumberinput\" size=\"third\">\n\n<h4>NumberInput</h4>\n\nA representation of `st.number_input`.\n\n```python\nat.number_input[0].increment().run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeradio\" size=\"third\">\n\n<h4>Radio</h4>\n\nA representation of `st.radio`.\n\n```python\nat.radio[0].set_value(\"New York\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeselectslider\" size=\"third\">\n\n<h4>SelectSlider</h4>\n\nA representation of `st.select_slider`.\n\n```python\nat.select_slider[0].set_range(\"A\",\"C\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeselectbox\" size=\"third\">\n\n<h4>Selectbox</h4>\n\nA representation of `st.selectbox`.\n\n```python\nat.selectbox[0].select(\"New York\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeslider\" size=\"third\">\n\n<h4>Slider</h4>\n\nA representation of `st.slider`.\n\n```python\nat.slider[0].set_range(2,5).run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetextarea\" size=\"third\">\n\n<h4>TextArea</h4>\n\nA representation of `st.text_area`.\n\n```python\nat.text_area[0].input(\"Streamlit is awesome!\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetextinput\" size=\"third\">\n\n<h4>TextInput</h4>\n\nA representation of `st.text_input`.\n\n```python\nat.text_input[0].input(\"Streamlit\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetimeinput\" size=\"third\">\n\n<h4>TimeInput</h4>\n\nA representation of `st.time_input`.\n\n```python\nat.time_input[0].increment().run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetoggle\" size=\"third\">\n\n<h4>Toggle</h4>\n\nA representation of `st.toggle`.\n\n```python\nat.toggle[0].set_value(\"True\").run()\n```\n\n</RefCard>\n\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/okld/streamlit-pandas-profiling\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pandas-profiling.jpg\" />\n\n<h4>Pandas Profiling</h4>\n\nPandas profiling component for Streamlit. Created by [@okld](https://github.com/okld/).\n\n```python\ndf = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\n\nst_profile_report(pr)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/okld/streamlit-ace\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/ace.jpg\" />\n\n<h4>Streamlit Ace</h4>\n\nAce editor component for Streamlit. Created by [@okld](https://github.com/okld).\n\n```python\nfrom streamlit_ace import st_ace\n\ncontent = st_ace()\ncontent\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/jrieke/streamlit-analytics\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/analytics.jpg\" />\n\n<h4>Streamlit Analytics</h4>\n\nTrack & visualize user interactions with your streamlit app. Created by [@jrieke](https://github.com/jrieke).\n\n```python\nimport streamlit_analytics\n\nwith streamlit_analytics.track():\n    st.text_input(\"Write something\")\n```\n\n</ComponentCard>\n\n</ComponentSlider>"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts",
    "content": "# Development concepts\n\nThis section gives you background on how different parts of Streamlit work.\n\n<TileContainer>\n\n<RefCard href=\"/develop/concepts/architecture\" size=\"half\">\n\n<h5>Streamlit's architecture and execution model</h5>\n\nStreamlit's execution model makes it easy to turn your scripts into beautiful, interactive web apps.\n\n- Understand how to run your app.\n- Understand Streamlit's execution and client-server model.\n- Understand the primary tools to work with Streamlit reruns.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/multipage-apps\" size=\"half\">\n\n<h5>Multipage apps</h5>\n\nStreamlit provides an automated way to build multipage apps through directory structure.\n\n- Learn how to structure and configure your multipage app.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design\" size=\"half\">\n\n<h5>App design considerations</h5>\n\nBring together Streamlit's architecture and execution model to design your app. Work with Streamlit commands to render dynamic and\ninteractic content for your users.\n\n- Learn how to make your apps performant and easy-to-manage.\n- Learn how to structure and design your project.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/connections\" size=\"half\">\n\n<h5>Connections and secrets</h5>\n\n- Learn how to manage connections and secrets with Streamlit's convenient, built-in features.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/custom-components\" size=\"half\">\n\n<h5>Creating custom components</h5>\n\nCustom components extend Streamlit's functionality.\n\n- Learn how to build your own custom component.\n- Learn how install a third-party component.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/configuration\" size=\"half\">\n\n<h5>Configuration and theming</h5>\n\nStreamlit provides a variety options to customize and configure your app.\n\n- Learn how to work with configuration options, including server settings, client settings, and theming.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/app-testing\" size=\"half\">\n\n<h5>App testing</h5>\n\nStreamlit app testing enables developers to build and run automated tests. Bring your favorite test automation software and enjoy simple syntax to simulate user input and inspect rendered output.\n\n</RefCard>\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials",
    "content": "# Tutorials\n\nOur tutorials include step-by-step examples of building different types of apps in Streamlit.\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/tutorials/authentication\">\n\n<h5>Add user authentication</h5>\n\nAdd user authentication with Streamlit's built-in support for OpenID Connect.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/chat-and-llm-apps\">\n\n<h5>Chat apps and LLMs</h5>\n\nWork with LLMs and create chat apps.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/configuration-and-theming\">\n\n<h5>Configuration and theming</h5>\n\nCustomize the appearance of your app.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/databases\">\n\n<h5>Connect to data sources</h5>\n\nConnect to popular datasources.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/elements\">\n\n<h5>Work with Streamlit's core elements</h5>\n\nWork with core elements like dataframes and charts.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/execution-flow\">\n\n<h5>Use core features to work with Streamlit's execution model</h5>\n\nBuild simple apps and walk through examples to learn about Streamlit's core features and execution model.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/multipage\">\n\n<h5>Create multipage apps</h5>\n\nCreate multipage apps, navigation, and flows.\n\n</RefCard>\n\n</TileContainer>\n\nWhen you're done developing your app, see our [deployment tutorials](/deploy/tutorials), too!"
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference/prerelease",
    "content": "# Pre-release features\n\nAt Streamlit, we like to move quick while keeping things stable. In our latest effort to move even faster without sacrificing stability, we're offering our bold and fearless users two ways to try out Streamlit's bleeding-edge features:\n\n1. [Experimental features](#experimental-features)\n2. [Nightly releases](#nightly-releases)\n\n## Experimental Features\n\nLess stable Streamlit features have one naming convention: `st.experimental_`. This distinction is a prefix we attach to our command names to make sure their status is clear to everyone.\n\nHere's a quick rundown of what you get from each naming convention:\n\n- **st**: this is where our core features like `st.write` and `st.dataframe` live. If we ever make backward-incompatible changes to these, they will take place gradually and with months of announcements and warnings.\n- **experimental**: this is where we'll put all new features that may or may not ever make it into Streamlit core. This gives you a chance to try the next big thing we're cooking up weeks or months before we're ready to stabilize its API. We don't know whether these features have a future, but we want you to have access to everything we're trying, and work with us to figure them out.\n\nFeatures with the `experimental_` naming convention are things that we're still working on or trying\nto understand. If these features are successful, at some point they'll become part of Streamlit\ncore. If unsuccessful, these features are removed without much notice. While in experimental, a feature's API and behaviors may not be stable, and it's possible they could change in ways that aren't backward-compatible.\n\n<Warning>\n\nExperimental features and their APIs may change or be removed at any time.\n\n</Warning>\n\n### The lifecycle of an experimental feature\n\n1. A feature is added with the `experimental_` prefix.\n2. The feature is potentially tweaked over time, with possible API/behavior breakages.\n3. If successful, we promote the feature to Streamlit core and remove it from `experimental_`:\n   - a\\. The feature's API stabilizes and the feature is _cloned_ without the `experimental_` prefix, so it exists as both `st` and `experimental_`. At this point, users will see a warning when using the version of the feature with the `experimental_` prefix -- but the feature will still work.\n   - b\\. At some point, the code of the `experimental_`-prefixed feature is _removed_, but there will still be a stub of the function prefixed with `experimental_` that shows an error with appropriate instructions.\n   - c\\. Finally, at a later date the `experimental_` version is removed.\n4. If unsuccessful, the feature is removed without much notice and we leave a stub in `experimental_` that shows an error with instructions.\n\n## Nightly releases\n\nIn addition to experimental features, we offer another way to try out Streamlit's newest features: nightly releases.\n\nAt the end of each day (at night 🌛), our bots run automated tests against the latest Streamlit code and, if everything looks good, it publishes them as the `streamlit-nightly` package. This means the nightly build includes all our latest features, bug fixes, and other enhancements on the same day they land on our codebase.\n\n**How does this differ from official releases?**\n\nOfficial Streamlit releases go not only through both automated tests but also rigorous manual testing, while nightly releases only have automated tests. It's important to keep in mind that new features introduced in nightly releases often lack polish. In our official releases, we always make double-sure all new features are ready for prime time.\n\n**How do I use the nightly release?**\n\nAll you need to do is install the `streamlit-nightly` package:\n\n```bash\npip uninstall streamlit\npip install streamlit-nightly --upgrade\n```\n\n<Warning>\n\nYou should never have both `streamlit` and `streamlit-nightly` installed in the same environment!\n\n</Warning>\n\n**Why should I use the nightly release?**\n\nBecause you can't wait for official releases, and you want to help us find bugs early!\n\n**Why shouldn't I use the nightly release?**\n\nWhile our automated tests have high coverage, there's still a significant likelihood that there will be some bugs in the nightly code.\n\n**Can I choose which nightly release I want to install?**\n\nIf you'd like to use a specific version, you can find the version number in our [Release history](https://pypi.org/project/streamlit-nightly/#history). Specify the desired version using `pip` as usual: `pip install streamlit-nightly==x.yy.zz-123456`.\n\n**Can I compare changes between releases?**\n\nIf you'd like to review the changes for a nightly release, you can use the [comparison tool on GitHub](https://github.com/streamlit/streamlit/compare/0.57.3...0.57.4.dev20200412)."
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference",
    "content": "# Quick reference\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/quick-reference/cheat-sheet\">\n\n<h5>Cheatsheet</h5>\n\nA dense list of Streamlit commands with example syntax.\n\n</RefCard>\n\n<RefCard href=\"/develop/quick-reference/release-notes\">\n\n<h5>Release notes</h5>\n\nSee how Streamlit has changed with each new version.\n\n</RefCard>\n\n<RefCard href=\"/develop/quick-reference/prerelease\">\n\n<h5>Pre-release features</h5>\n\nUnderstand how we introduce new features and how you can get your hands on them sooner!\n\n</RefCard>\n\n<RefCard href=\"https://roadmap.streamlit.app/\">\n\n<h5>Roadmap</h5>\n\nGet a sneak peek at what we have scheduled for the next year.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference/cheat-sheet",
    "content": "# Streamlit API cheat sheet\n\nThis is a summary of the docs for the latest version of Streamlit, [v1.46.0](https://pypi.org/project/streamlit/1.46.0/).\n\n<Masonry>\n\n<CodeTile featured>\n\n#### Install & Import\n\n```python\npip install streamlit\n\nstreamlit run first_app.py\n\n# Import convention\n>>> import streamlit as st\n```\n\n</CodeTile>\n\n<CodeTile featured>\n\n#### Pre-release features\n\n```python\npip uninstall streamlit\npip install streamlit-nightly --upgrade\n```\n\nLearn more about [experimental features](advanced-features/prerelease#experimental-features)\n\n</CodeTile>\n\n<CodeTile featured>\n\n#### Command line\n\n```python\nstreamlit cache clear\nstreamlit config show\nstreamlit docs\nstreamlit hello\nstreamlit help\nstreamlit init\nstreamlit run streamlit_app.py\nstreamlit version\n```\n\n</CodeTile>\n\n</Masonry>\n\n<Masonry>\n\n<CodeTile>\n\n#### Magic commands\n\n```python\n# Magic commands implicitly\n# call st.write().\n\"_This_ is some **Markdown**\"\nmy_variable\n\"dataframe:\", my_data_frame\n\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Display text\n\n```python\nst.write(\"Most objects\") # df, err, func, keras!\nst.write([\"st\", \"is <\", 3])\nst.write_stream(my_generator)\nst.write_stream(my_llm_stream)\n\nst.text(\"Fixed width text\")\nst.markdown(\"_Markdown_\")\nst.latex(r\"\"\" e^{i\\pi} + 1 = 0 \"\"\")\nst.title(\"My title\")\nst.header(\"My header\")\nst.subheader(\"My sub\")\nst.code(\"for i in range(8): foo()\")\nst.badge(\"New\")\nst.html(\"<p>Hi!</p>\")\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Display data\n\n```python\nst.dataframe(my_dataframe)\nst.table(data.iloc[0:10])\nst.json({\"foo\":\"bar\",\"fu\":\"ba\"})\nst.metric(\"My metric\", 42, 2)\n\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Display media\n\n```python\nst.image(\"./header.png\")\nst.audio(data)\nst.video(data)\nst.video(data, subtitles=\"./subs.vtt\")\nst.logo(\"logo.jpg\")\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Display charts\n\n```python\nst.area_chart(df)\nst.bar_chart(df)\nst.bar_chart(df, horizontal=True)\nst.line_chart(df)\nst.map(df)\nst.scatter_chart(df)\n\nst.altair_chart(chart)\nst.bokeh_chart(fig)\nst.graphviz_chart(fig)\nst.plotly_chart(fig)\nst.pydeck_chart(chart)\nst.pyplot(fig)\nst.vega_lite_chart(df, spec)\n\n# Work with user selections\nevent = st.plotly_chart(\n    df,\n    on_select=\"rerun\"\n)\nevent = st.altair_chart(\n    chart,\n    on_select=\"rerun\"\n)\nevent = st.vega_lite_chart(\n    df,\n    spec,\n    on_select=\"rerun\"\n)\n```\n\nTo use newer versions of Bokeh, see our custom component [`streamlit-bokeh`](https://github.com/streamlit/streamlit-bokeh).\n\n</CodeTile>\n\n<CodeTile>\n\n#### Add elements to sidebar\n\n```python\n# Just add it after st.sidebar:\na = st.sidebar.radio(\"Select one:\", [1, 2])\n\n# Or use \"with\" notation:\nwith st.sidebar:\n    st.radio(\"Select one:\", [1, 2])\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Columns\n\n```python\n# Two equal columns:\ncol1, col2 = st.columns(2)\ncol1.write(\"This is column 1\")\ncol2.write(\"This is column 2\")\n\n# Three different columns:\ncol1, col2, col3 = st.columns([3, 1, 1])\n# col1 is larger.\n\n# Bottom-aligned columns\ncol1, col2 = st.columns(2, vertical_alignment=\"bottom\")\n\n# You can also use \"with\" notation:\nwith col1:\n    st.radio(\"Select one:\", [1, 2])\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Tabs\n\n```python\n# Insert containers separated into tabs:\ntab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\ntab1.write(\"this is tab 1\")\ntab2.write(\"this is tab 2\")\n\n# You can also use \"with\" notation:\nwith tab1:\n    st.radio(\"Select one:\", [1, 2])\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Expandable containers\n\n```python\nexpand = st.expander(\"My label\", icon=\":material/info:\")\nexpand.write(\"Inside the expander.\")\npop = st.popover(\"Button label\")\npop.checkbox(\"Show all\")\n\n# You can also use \"with\" notation:\nwith expand:\n    st.radio(\"Select one:\", [1, 2])\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Control flow\n\n```python\n# Stop execution immediately:\nst.stop()\n# Rerun script immediately:\nst.rerun()\n# Navigate to another page:\nst.switch_page(\"pages/my_page.py\")\n\n# Define a navigation widget in your entrypoint file\npg = st.navigation(\n    st.Page(\"page1.py\", title=\"Home\", url_path=\"home\", default=True)\n    st.Page(\"page2.py\", title=\"Preferences\", url_path=\"settings\")\n)\npg.run()\n\n# Group multiple widgets:\nwith st.form(key=\"my_form\"):\n    username = st.text_input(\"Username\")\n    password = st.text_input(\"Password\")\n    st.form_submit_button(\"Login\")\n\n# Define a dialog function\n@st.dialog(\"Welcome!\")\ndef modal_dialog():\n    st.write(\"Hello\")\n\nmodal_dialog()\n\n# Define a fragment\n@st.fragment\ndef fragment_function():\n    df = get_data()\n    st.line_chart(df)\n    st.button(\"Update\")\n\nfragment_function()\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Display interactive widgets\n\n```python\nst.button(\"Click me\")\nst.download_button(\"Download file\", data)\nst.link_button(\"Go to gallery\", url)\nst.page_link(\"app.py\", label=\"Home\")\nst.data_editor(\"Edit data\", data)\nst.checkbox(\"I agree\")\nst.feedback(\"thumbs\")\nst.pills(\"Tags\", [\"Sports\", \"Politics\"])\nst.radio(\"Pick one\", [\"cats\", \"dogs\"])\nst.segmented_control(\"Filter\", [\"Open\", \"Closed\"])\nst.toggle(\"Enable\")\nst.selectbox(\"Pick one\", [\"cats\", \"dogs\"])\nst.multiselect(\"Buy\", [\"milk\", \"apples\", \"potatoes\"])\nst.slider(\"Pick a number\", 0, 100)\nst.select_slider(\"Pick a size\", [\"S\", \"M\", \"L\"])\nst.text_input(\"First name\")\nst.number_input(\"Pick a number\", 0, 10)\nst.text_area(\"Text to translate\")\nst.date_input(\"Your birthday\")\nst.time_input(\"Meeting time\")\nst.file_uploader(\"Upload a CSV\")\nst.audio_input(\"Record a voice message\")\nst.camera_input(\"Take a picture\")\nst.color_picker(\"Pick a color\")\n\n# Use widgets' returned values in variables:\nfor i in range(int(st.number_input(\"Num:\"))):\n    foo()\nif st.sidebar.selectbox(\"I:\",[\"f\"]) == \"f\":\n    b()\nmy_slider_val = st.slider(\"Quinn Mallory\", 1, 88)\nst.write(slider_val)\n\n# Disable widgets to remove interactivity:\nst.slider(\"Pick a number\", 0, 100, disabled=True)\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Build chat-based apps\n\n```python\n# Insert a chat message container.\nwith st.chat_message(\"user\"):\n    st.write(\"Hello 👋\")\n    st.line_chart(np.random.randn(30, 3))\n\n# Display a chat input widget at the bottom of the app.\nst.chat_input(\"Say something\")\n\n# Display a chat input widget inline.\nwith st.container():\n    st.chat_input(\"Say something\")\n```\n\nLearn how to [Build a basic LLM chat app](/develop/tutorials/llms/build-conversational-apps)\n\n</CodeTile>\n\n<CodeTile>\n\n#### Mutate data\n\n```python\n# Add rows to a dataframe after\n# showing it.\nelement = st.dataframe(df1)\nelement.add_rows(df2)\n\n# Add rows to a chart after\n# showing it.\nelement = st.line_chart(df1)\nelement.add_rows(df2)\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Display code\n\n```python\nwith st.echo():\n    st.write(\"Code will be executed and printed\")\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Placeholders, help, and options\n\n```python\n# Replace any single element.\nelement = st.empty()\nelement.line_chart(...)\nelement.text_input(...)  # Replaces previous.\n\n# Insert out of order.\nelements = st.container()\nelements.line_chart(...)\nst.write(\"Hello\")\nelements.text_input(...)  # Appears above \"Hello\".\n\nst.help(pandas.DataFrame)\nst.get_option(key)\nst.set_option(key, value)\nst.set_page_config(layout=\"wide\")\nst.query_params[key]\nst.query_params.from_dict(params_dict)\nst.query_params.get_all(key)\nst.query_params.clear()\nst.html(\"<p>Hi!</p>\")\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Connect to data sources\n\n```python\nst.connection(\"pets_db\", type=\"sql\")\nconn = st.connection(\"sql\")\nconn = st.connection(\"snowflake\")\n\nclass MyConnection(BaseConnection[myconn.MyConnection]):\n    def _connect(self, **kwargs) -> MyConnection:\n        return myconn.connect(**self._secrets, **kwargs)\n    def query(self, query):\n        return self._instance.query(query)\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Optimize performance\n\n###### Cache data objects\n\n```python\n# E.g. Dataframe computation, storing downloaded data, etc.\n@st.cache_data\ndef foo(bar):\n    # Do something expensive and return data\n    return data\n# Executes foo\nd1 = foo(ref1)\n# Does not execute foo\n# Returns cached item by value, d1 == d2\nd2 = foo(ref1)\n# Different arg, so function foo executes\nd3 = foo(ref2)\n# Clear the cached value for foo(ref1)\nfoo.clear(ref1)\n# Clear all cached entries for this function\nfoo.clear()\n# Clear values from *all* in-memory or on-disk cached functions\nst.cache_data.clear()\n```\n\n###### Cache global resources\n\n```python\n# E.g. TensorFlow session, database connection, etc.\n@st.cache_resource\ndef foo(bar):\n    # Create and return a non-data object\n    return session\n# Executes foo\ns1 = foo(ref1)\n# Does not execute foo\n# Returns cached item by reference, s1 == s2\ns2 = foo(ref1)\n# Different arg, so function foo executes\ns3 = foo(ref2)\n# Clear the cached value for foo(ref1)\nfoo.clear(ref1)\n# Clear all cached entries for this function\nfoo.clear()\n# Clear all global resources from cache\nst.cache_resource.clear()\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Display progress and status\n\n```python\n# Show a spinner during a process\nwith st.spinner(text=\"In progress\"):\n    time.sleep(3)\n    st.success(\"Done\")\n\n# Show and update progress bar\nbar = st.progress(50)\ntime.sleep(3)\nbar.progress(100)\n\nwith st.status(\"Authenticating...\") as s:\n    time.sleep(2)\n    st.write(\"Some long response.\")\n    s.update(label=\"Response\")\n\nst.balloons()\nst.snow()\nst.toast(\"Warming up...\")\nst.error(\"Error message\")\nst.warning(\"Warning message\")\nst.info(\"Info message\")\nst.success(\"Success message\")\nst.exception(e)\n```\n\n</CodeTile>\n\n<CodeTile>\n\n#### Personalize apps for users\n\n```python\n# Authenticate users\nif not st.user.is_logged_in:\n    st.login(\"my_provider\")\nf\"Hi, {st.user.name}\"\nst.logout()\n\n# Get dictionaries of cookies, headers, locale, and browser data\nst.context.cookies\nst.context.headers\nst.context.ip_address\nst.context.is_embedded\nst.context.locale\nst.context.theme.type\nst.context.timezone\nst.context.timezone_offset\nst.context.url\n```\n\n</CodeTile>\n</Masonry>"
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025",
    "content": "# 2025 release notes\n\nThis page contains release notes for Streamlit versions released in 2025. For the latest version of Streamlit, see [Release notes](/develop/quick-reference/release-notes).\n\n## **Version 1.46.0**\n\n_Release date: June 18, 2025_\n\n**Highlights**\n\n- 🧭 Introducing top navigation! Use [`st.navigation`](https://docs.streamlit.io/develop/api-reference/navigation/st.navigation) with `position=\"top\"` to create a navigation menu across the top of your app.\n- 🔆 You can detect if the viewer is in light mode or dark mode at runtime with [`st.context.theme`](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.context#contexttheme).\n\n**Notable Changes**\n\n- 🪺 Streamlit no longer restricts the nesting of columns, expanders, popovers, and chat message containers, but beware of bad design! Always be mindful of different screen sizes and orientations, and don't overuse nested layouts.\n- ↔️ You can set the width of most Streamlit elements.\n- ⬆️ [`st.form`](https://docs.streamlit.io/develop/api-reference/execution-flow/st.form) has a new parameter to configure its `height`.\n- 🛠️ [`st.columns`](https://docs.streamlit.io/develop/api-reference/layout/st.columns) supports `gap=None` for no gap between columns.\n- 🏋️ Font face declarations in [`config.toml`](https://docs.streamlit.io/develop/api-reference/configuration/config.toml#theme) support weight and unicode ranges ([#11248](https://github.com/streamlit/streamlit/pull/11248), [#11163](https://github.com/streamlit/streamlit/issues/11163), [#11247](https://github.com/streamlit/streamlit/issues/11247)).\n- 😃 Font face declarations are supported in the window variable ([#11628](https://github.com/streamlit/streamlit/pull/11628), [#11568](https://github.com/streamlit/streamlit/issues/11568)).\n- 🔎 Streamlit searches for secrets and configuration options relative to the entrypoint file in addition to the working directory and user root ([#10173](https://github.com/streamlit/streamlit/pull/10173), [#8195](https://github.com/streamlit/streamlit/issues/8195)).\n- 🎨 A new configuration option, `theme.dataframeBorderColor`, lets you set the border color for dataframes and tables separately from other border colors ([#11475](https://github.com/streamlit/streamlit/pull/11475)).\n- 🌯 A new configuration option, `theme.buttonRadius`, lets you set the radius of buttons separately from other elements ([#11464](https://github.com/streamlit/streamlit/pull/11464)).\n- 🖥️ A new configuration option, `theme.codeFontSize`, lets you set the size of code in `st.code`, `st.json`, and `st.help` ([#11508](https://github.com/streamlit/streamlit/pull/11508)).\n- 🔒 You can configure a list of allowed origins when CORS protection is enabled ([#11377](https://github.com/streamlit/streamlit/pull/11377)).\n- 📄 `st.set_page_config` can be called multiple times in a single script run ([#11286](https://github.com/streamlit/streamlit/pull/11286), [#4483](https://github.com/streamlit/streamlit/issues/4483), [#2216](https://github.com/streamlit/streamlit/issues/2216), [#9797](https://github.com/streamlit/streamlit/issues/9797), [#9038](https://github.com/streamlit/streamlit/issues/9038)).\n- 🗺️ `st.pydeck_chart` and [`st.map`](http://st.map) now use Carto by default to provide map tiles ([#11231](https://github.com/streamlit/streamlit/pull/11231)).\n- 👀 You can configure Streamlit to watch additional directories for changes with the new configuration option, `server.folderWatchList` ([#9656](https://github.com/streamlit/streamlit/pull/9656), [#9655](https://github.com/streamlit/streamlit/issues/9655)). Thanks, [akramsystems](https://github.com/akramsystems)!\n\n**Other Changes**\n\n- 🔘 Exception messages include a copy button to conveniently copy the message to your clipboard ([#11250](https://github.com/streamlit/streamlit/pull/11250), [#11083](https://github.com/streamlit/streamlit/issues/11083)). Thanks, [snakeM](https://github.com/snakeM)!\n- ⚓ Streamlit apps can be served from port 3000 ([#11525](https://github.com/streamlit/streamlit/pull/11525), [#8149](https://github.com/streamlit/streamlit/issues/8149)).\n- 👟 Markdown dependencies were upgraded for improved performance ([#11553](https://github.com/streamlit/streamlit/pull/11553), [#11550](https://github.com/streamlit/streamlit/issues/11550)).\n- ↔️ The sidebar is narrower by default and consistently handles the scrollbar spacing ([#11412](https://github.com/streamlit/streamlit/pull/11412)).\n- 👋 We gave Streamlit hello a couple small tweaks ([#11442](https://github.com/streamlit/streamlit/pull/11442)).\n- 🧑‍💻 Base URL window variables are consistently namespaced in `__streamlit` ([#11481](https://github.com/streamlit/streamlit/pull/11481)).\n- 🌐 Streamlit apps now serve a `manifest.json` file ([#11462](https://github.com/streamlit/streamlit/pull/11462)).\n- 🖌️ `st.dataframe` shows row selection boxes always instead of just on hover ([#11411](https://github.com/streamlit/streamlit/pull/11411), [#11410](https://github.com/streamlit/streamlit/issues/11410)).\n- 🦋 `ListColumn` and `LinkColumn` can inherit coloring from `pandas` `Styler` ([#11612](https://github.com/streamlit/streamlit/pull/11612), [#8254](https://github.com/streamlit/streamlit/issues/8254)).\n- 💹 `NumberColumn` and `ProgressColumn` support a Japanese yen number format ([#11588](https://github.com/streamlit/streamlit/pull/11588)). Thanks, [alexmalins](https://github.com/alexmalins)!\n- 🔗 `st.page_link` can inherit an icon when passed a `StreamlitPage` ([#10694](https://github.com/streamlit/streamlit/pull/10694), [#9743](https://github.com/streamlit/streamlit/issues/9743)). Thanks, [abokey1](https://github.com/abokey1)!\n- 🎫 A button's placement in the sidebar or main body of an app is included in its widget identity ([#10881](https://github.com/streamlit/streamlit/pull/10881), [#10598](https://github.com/streamlit/streamlit/issues/10598)). Thanks, [joaooliveira-11](https://github.com/joaooliveira-11)!\n- 🕷️ Built-in Streamlit fonts now use variable font files ([#11646](https://github.com/streamlit/streamlit/pull/11646), [#11600](https://github.com/streamlit/streamlit/pull/11600), [#11534](https://github.com/streamlit/streamlit/pull/11534)).\n- 🤹 Bug fix: Streamlit Markdown correctly formats task lists and block quotes (#11237).\n- 🐞 Bug fix: Horizontal scroll bars are sized correctly in Safari ([#11625](https://github.com/streamlit/streamlit/pull/11625)).\n- 🐝 Bug fix: Unnecessary media caching was reduced to improve efficiency and avoid video player crashes ([#11635](https://github.com/streamlit/streamlit/pull/11635), [#9688](https://github.com/streamlit/streamlit/issues/9688)).\n- 🐜 Bug fix: `st.text` uses the `break-word` CSS property to wrap long lines without whitespace ([#10969](https://github.com/streamlit/streamlit/pull/10969), [#10824](https://github.com/streamlit/streamlit/issues/10824)). Thanks, [matilde2004](https://github.com/matilde2004)!\n- 🪲 Bug fix: Material icons display correctly in `st.markdown` when `unsafe_allow_html=True` ([#11633](https://github.com/streamlit/streamlit/pull/11633), [#9945](https://github.com/streamlit/streamlit/issues/9945)).\n- 🐛 Bug fix: Multi-index column names preserve brackets ([#11617](https://github.com/streamlit/streamlit/pull/11617), [#10415](https://github.com/streamlit/streamlit/issues/10415)).\n- 💅 Bug fix: Various CSS tweaks ([#11631](https://github.com/streamlit/streamlit/pull/11631), [#11632](https://github.com/streamlit/streamlit/pull/11632), [#11630](https://github.com/streamlit/streamlit/pull/11630), [#11611](https://github.com/streamlit/streamlit/issues/11611), [#11577](https://github.com/streamlit/streamlit/pull/11577), [#9085](https://github.com/streamlit/streamlit/issues/9085), [#8671](https://github.com/streamlit/streamlit/issues/8671), [#11576](https://github.com/streamlit/streamlit/pull/11576), [#11569](https://github.com/streamlit/streamlit/issues/11569)).\n- ⛏️ Bug fix: `st.dataframe` clears filter options when applying sort to prevent incorrect highlights ([#11587](https://github.com/streamlit/streamlit/pull/11587), [#11575](https://github.com/streamlit/streamlit/issues/11575)).\n- 📊 Bug fix: Altair charts have the correct width and don't overflow with long titles ([#11585](https://github.com/streamlit/streamlit/pull/11585), [#9984](https://github.com/streamlit/streamlit/issues/9984)).\n- 🍞 Bug fix: `st.toast` messages appear above `st.dialog` containers ([#11578](https://github.com/streamlit/streamlit/pull/11578), [#10383](https://github.com/streamlit/streamlit/issues/10383)).\n- 🪱 Bug fix: Streamlit apps correctly scroll to anchor links ([#11552](https://github.com/streamlit/streamlit/pull/11552), [#11551](https://github.com/streamlit/streamlit/issues/11551)).\n- ✍️ Bug fix: `st.context` does not lose state in an app being edited ([#11506](https://github.com/streamlit/streamlit/pull/11506), [#11330](https://github.com/streamlit/streamlit/issues/11330)).\n- ⬜ Bug fix: `st.code` preserves leading white space ([#10065](https://github.com/streamlit/streamlit/pull/10065), [#6302](https://github.com/streamlit/streamlit/issues/6302)). Thanks, [XuehaiPan](https://github.com/XuehaiPan)!\n- 📅 Bug fix: `st.date_input` shows the correct hover effect when using date ranges ([#11223](https://github.com/streamlit/streamlit/pull/11223), [#10929](https://github.com/streamlit/streamlit/issues/10929)). Thanks, [Bernardo1008](https://github.com/Bernardo1008)!\n- 💩 Bug fix: Dataframes using `pandas` `Styler` correctly display `Enum` values ([#11049](https://github.com/streamlit/streamlit/pull/11049), [#10637](https://github.com/streamlit/streamlit/issues/10637)). Thanks, [BigBird404](https://github.com/BigBird404)!\n- ☠️ Bug fix: `st.context` does not lose state when `st.switch_page` is called ([#11521](https://github.com/streamlit/streamlit/pull/11521), [#11507](https://github.com/streamlit/streamlit/issues/11507)).\n- 👽 Bug fix: File watcher correctly handles custom metaclasses ([#10388](https://github.com/streamlit/streamlit/pull/10388), [#10992](https://github.com/streamlit/streamlit/issues/10992)). Thanks, [HomenShum](https://github.com/HomenShum)!\n- 👻 Bug fix: [`st.map`](http://st.map) uses a private Mapbox token when configured ([#11511](https://github.com/streamlit/streamlit/pull/11511), [#11399](https://github.com/streamlit/streamlit/issues/11399)).\n- 🦀 Bug fix: `vega-interpreter` was updated to prevent unintentional blank axes ([#11514](https://github.com/streamlit/streamlit/pull/11514), [#5733](https://github.com/streamlit/streamlit/issues/5733)).\n- 🦎 Bug fix: Truncated values in `NumberColumn` are rounded correctly ([#11520](https://github.com/streamlit/streamlit/pull/11520), [#11519](https://github.com/streamlit/streamlit/issues/11519)).\n- 🐌 Bug fix: Highlighted in text in Markdown has the correct padding on wrapped lines ([#11530](https://github.com/streamlit/streamlit/pull/11530)).\n- 🕸️ Bug fix: For a Plotly chart, reset axes works correctly after using fullscreen ([#11498](https://github.com/streamlit/streamlit/pull/11498), [#11327](https://github.com/streamlit/streamlit/issues/11327)).\n- 🦗 Bug fix: Altair chart are not cropped on the left on first load ([#10939](https://github.com/streamlit/streamlit/pull/10939), [#9339](https://github.com/streamlit/streamlit/issues/9339)). Thanks, [goncalossmartins](https://github.com/goncalossmartins)!\n- 📈 Bug fix: Chart columns correctly show negative values ([#11048](https://github.com/streamlit/streamlit/pull/11048), [#10411](https://github.com/streamlit/streamlit/issues/10411)). Thanks, [tiagorb1](https://github.com/tiagorb1)!\n- 🦂 Bug fix: Streamlit doesn't crash when editing indices in `st.data_editor` ([#11448](https://github.com/streamlit/streamlit/pull/11448), [#11434](https://github.com/streamlit/streamlit/issues/11434)).\n- 🦟 Bug fix: Color and style is preserved in charts when using `.add_rows()` ([#11414](https://github.com/streamlit/streamlit/pull/11414), [#11312](https://github.com/streamlit/streamlit/issues/11312)).\n- 🌪️ Bug fix: Tornado 6.5.0 is excluded to prevent file uploading errors related to unicode filenames ([#11440](https://github.com/streamlit/streamlit/pull/11440), [#11396](https://github.com/streamlit/streamlit/issues/11396), [#11436](https://github.com/streamlit/streamlit/issues/11436)).\n- 🦠 Bug fix: Selected rows are cleared when a column in `st.dataframe` is sorted ([#11363](https://github.com/streamlit/streamlit/pull/11363), [#11345](https://github.com/streamlit/streamlit/issues/11345)).\n- 📶 Bug fix: Streamlit shows a clearer message when it can't connect to the server and automatically dismisses the message if a connection is successful ([#11366](https://github.com/streamlit/streamlit/pull/11366)).\n- 🪰 Bug fix: Localized number and date formats correctly interpret locales with commas ([#11297](https://github.com/streamlit/streamlit/pull/11297), [#11291](https://github.com/streamlit/streamlit/issues/11291)).\n- 🧹 Bug fix: Streamlit cleans up the forward message cache to prevent WebSocket message errors ([#11302](https://github.com/streamlit/streamlit/pull/11302), [#11299](https://github.com/streamlit/streamlit/issues/11299), [#11300](https://github.com/streamlit/streamlit/issues/11300)).\n- 📜 Bug fix: `st.latex` scrolls horizontally when its content is wider than the app ([#10071](https://github.com/streamlit/streamlit/pull/10071), [#4304](https://github.com/streamlit/streamlit/issues/4304)).\n- 🪳 Bug fix: `st.multiselect` has a more stable sort when filtering options ([#11309](https://github.com/streamlit/streamlit/pull/11309), [#11218](https://github.com/streamlit/streamlit/issues/11218)).\n- 🕷️ Bug fix: `st.multiselect` options are case sensitive and don't overlap in the drop down menu ([#11307](https://github.com/streamlit/streamlit/pull/11307), [#11217](https://github.com/streamlit/streamlit/issues/11217), [#11306](https://github.com/streamlit/streamlit/pull/11306), [#11215](https://github.com/streamlit/streamlit/issues/11215)).\n- 🍪 Bug fix: Streamlit logs an error if the cookie returned by `st.login` is too large ([#11290](https://github.com/streamlit/streamlit/pull/11290), [#11168](https://github.com/streamlit/streamlit/issues/11168)).\n- 🪲 Bug fix: Displaying elements within a fragment's callback logs a clear warning that it's not supported ([#10942](https://github.com/streamlit/streamlit/pull/10942), [#10475](https://github.com/streamlit/streamlit/issues/10475)). Thanks, [Zane-dev16](https://github.com/Zane-dev16)!\n- 🐞 Bug fix: `st.file_uploader` is case insensitive when validating allowed file extensions ([#11261](https://github.com/streamlit/streamlit/pull/11261), [#11259](https://github.com/streamlit/streamlit/issues/11259)).\n- 🐝 Bug fix: Page runs end correctly to prevent invalid widget states ([#11258](https://github.com/streamlit/streamlit/pull/11258), [#11202](https://github.com/streamlit/streamlit/issues/11202)).\n- 👤 Bug fix: Error messages correctly refer to `st.user` instead of `st.experimental_user` ([#11198](https://github.com/streamlit/streamlit/pull/11198)).\n- 🏷️ Bug fix: The missing label warning for widgets includes a stack trace ([#11187](https://github.com/streamlit/streamlit/pull/11187), [#8908](https://github.com/streamlit/streamlit/issues/8908)).\n- 🐛 Bug fix: `st.data_editor` returns the correct result when some rows are deleted and others are added ([#11183](https://github.com/streamlit/streamlit/pull/11183), [#11180](https://github.com/streamlit/streamlit/issues/11180)).\n\n## **Version 1.45.0**\n\n_Release date: April 29, 2025_\n\n**Highlights**\n\n- 🧑 Announcing the general availability of [`st.user`](https://docs.streamlit.io/develop/api-reference/user/st.user), a dict-like object to access information about the current user.\n\n**Notable Changes**\n\n- ➕ [`st.multiselect`](https://docs.streamlit.io/develop/api-reference/widgets/st.multiselect) and [`st.selectbox`](https://docs.streamlit.io/develop/api-reference/widgets/st.selectbox) have a new parameter to let users add new options.\n- 🥸 [`st.context`](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.context) has new attributes: `url`, `ip_address`, and `is_embedded`.\n- ⚠️ Text [alerts](https://docs.streamlit.io/develop/api-reference/status/st.success) and [exceptions](https://docs.streamlit.io/develop/api-reference/status/st.exception) have a new `width` parameter ([#11142](https://github.com/streamlit/streamlit/pull/11142)).\n- ⌨️ You can set the tab index for [`st.components.v1.html`](https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.html) and [`st.components.v1.iframe`](https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.iframe) ([#11065](https://github.com/streamlit/streamlit/pull/11065), [#7969](https://github.com/streamlit/streamlit/issues/7969)).\n- 🌐 When you pass a CSS file's path to [`st.html`](https://docs.streamlit.io/develop/api-reference/text/st.html), Streamlit will automatically insert `<style>` tags and avoid creating extra space in the app ([#10979](https://github.com/streamlit/streamlit/pull/10979), [#9388](https://github.com/streamlit/streamlit/issues/9388), [#10027](https://github.com/streamlit/streamlit/issues/10027)).\n- 😃 You can add an icon to the left of the value in [`st.text_input`](https://docs.streamlit.io/develop/api-reference/widgets/st.text_input) and [`st.number_input`](https://docs.streamlit.io/develop/api-reference/widgets/st.number_input).\n\n**Other Changes**\n\n- 🗑️ Per the scheduled deprecation, `st.experimental_audio_input` has been removed. Use `st.audio_input` instead.\n- 💅 Various elements received styling tweaks for consistency and compatibility with advanced theming ([#10916](https://github.com/streamlit/streamlit/pull/10916), [#10930](https://github.com/streamlit/streamlit/pull/10930), [#10915](https://github.com/streamlit/streamlit/pull/10915), [#10944](https://github.com/streamlit/streamlit/pull/10944), [#10990](https://github.com/streamlit/streamlit/pull/10990), [#11033](https://github.com/streamlit/streamlit/pull/11033), [#11034](https://github.com/streamlit/streamlit/pull/11034)).\n- ⚒️ The element toolbar sizing and spacing was adjusted for improved UX ([#11135](https://github.com/streamlit/streamlit/pull/11135), [#11155](https://github.com/streamlit/streamlit/pull/11155)).\n- 🫥 Bug fix: Streamlit does not display a frontend error when displaying an empty dataframe ([#11100](https://github.com/streamlit/streamlit/pull/11100), [#11064](https://github.com/streamlit/streamlit/issues/11064)).\n- 🔁 Bug fix: `st.context` retains its information when calling `st.rerun` ([#11113](https://github.com/streamlit/streamlit/pull/11113), [#11111](https://github.com/streamlit/streamlit/issues/11111)).\n- 💩 Bug fix: `st.camera_input` has the correct color and hover effect when disabled ([#11116](https://github.com/streamlit/streamlit/pull/11116)).\n- 🎤 Bug fix: `st.audio_input` has consistent color and hover effects with other widgets ([#11118](https://github.com/streamlit/streamlit/pull/11118)).\n- ↔️ Bug fix: `st.logo` displays correctly when the sidebar is resized ([#11063](https://github.com/streamlit/streamlit/pull/11063), [#11062](https://github.com/streamlit/streamlit/issues/11062)).\n- 📂 Bug fix: `st.file_uploader` can handle multi-part file extensions in its `type` parameter ([#11043](https://github.com/streamlit/streamlit/pull/11043), [#11041](https://github.com/streamlit/streamlit/issues/11041)). Thanks, [moutayam](https://github.com/moutayam)!\n- 💈 Bug fix: `theme.fontFaces` correctly supports font style ([#11098](https://github.com/streamlit/streamlit/pull/11098), [#11097](https://github.com/streamlit/streamlit/issues/11097)).\n- 🧹 Bug fix: `streamlit init` specifies file encoding to avoid errors in systems where UTF-8 is not the default ([#11090](https://github.com/streamlit/streamlit/pull/11090), [#11086](https://github.com/streamlit/streamlit/issues/11086)). Thanks, [ashm-dev](https://github.com/ashm-dev)!\n- 📜 Bug fix: In the sidebar, space is reserved for the scrollbar to prevent flickering from resizing ([#10733](https://github.com/streamlit/streamlit/pull/10733), [#10310](https://github.com/streamlit/streamlit/issues/10310)).\n- 🪱 Bug fix: `st.logo` supports SVGs defined with a `viewBox` ([#11038](https://github.com/streamlit/streamlit/pull/11038), [#10904](https://github.com/streamlit/streamlit/issues/10904)).\n- ☠️ Bug fix: `st.date_input` raises an error in the UI if a user enters a date outside of the specified allowed range ([#10764](https://github.com/streamlit/streamlit/pull/10764), [#8475](https://github.com/streamlit/streamlit/issues/8475)).\n- 👽 Bug fix: `st.snow` and `st.balloons` don't incorrectly rerun during a fragment rerun ([#11015](https://github.com/streamlit/streamlit/pull/11015), [#10961](https://github.com/streamlit/streamlit/issues/10961)).\n- 👻 Bug fix: When updating `config.toml`during development, Streamlit will elegantly handle invalid TOML formatting and reload the configuration file on the next save ([#10857](https://github.com/streamlit/streamlit/pull/10857), [#1256](https://github.com/streamlit/streamlit/issues/1256), [#8320](https://github.com/streamlit/streamlit/issues/8320)).\n- 🦋 Bug fix: Streamlit applies the correct hover effect when colored text is used in button labels ([#10996](https://github.com/streamlit/streamlit/pull/10996), [#8767](https://github.com/streamlit/streamlit/issues/8767)).\n- 🦀 Bug fix: Streamlit ignores `__init__.py` and dotfiles in the `/pages` directory when automatically declaring pages in a multipage app ([#11009](https://github.com/streamlit/streamlit/pull/11009), [#11006](https://github.com/streamlit/streamlit/issues/11006)).\n- ⏩ `st.write` received an optimization tweak for rendering strings ([#10985](https://github.com/streamlit/streamlit/pull/10985)).\n- 🦎 Bug fix: `st.html` renders at 100% width for correct sizing ([#10976](https://github.com/streamlit/streamlit/pull/10976), [#10964](https://github.com/streamlit/streamlit/issues/10964)).\n- 🐌 Bug fix: Page links become disabled if a client disconnects from the Streamlit server ([#10946](https://github.com/streamlit/streamlit/pull/10946), [#9198](https://github.com/streamlit/streamlit/issues/9198)).\n- 🕸️ Bug fix: Streamlit supports newer emojis in page icons ([#10912](https://github.com/streamlit/streamlit/pull/10912), [#11154](https://github.com/streamlit/streamlit/pull/11154)).\n- 🦗 Bug fix: `st.exception` only shows links to Google and ChatGPT when the app is being accessed through [`localhost`](http://localhost) ([#10971](https://github.com/streamlit/streamlit/pull/10971), [#10924](https://github.com/streamlit/streamlit/issues/10924)).\n- 🦂 Bug fix: `st.chat_input` will expand to show multi-line placeholder text in most browsers. Firefox does not support this fix ([#10931](https://github.com/streamlit/streamlit/pull/10931), [#10611](https://github.com/streamlit/streamlit/issues/10611)).\n- 🦟 Bug fix: Streamlit elegantly catches a `TypeError` when concurrent changes to rows and columns cause a failure in serialization ([#10954](https://github.com/streamlit/streamlit/pull/10954), [#10937](https://github.com/streamlit/streamlit/issues/10937)).\n- 🦠 Bug fix: Streamlit cleanly handles non-ASCII characters in anchor links, which may change some anchors in existing apps ([#10929](https://github.com/streamlit/streamlit/pull/10925), [#8114](https://github.com/streamlit/streamlit/issues/8114)).\n- 🪰 Bug fix: To prevent a race condition, session information is not immediately cleared unless a new session message is received ([#9886](https://github.com/streamlit/streamlit/pull/9886), [#9767](https://github.com/streamlit/streamlit/issues/9767)).\n- 🪳 Bug fix: `streamlit config show` correctly displays `client.showErrorDetails` as a string instead of a list ([#10921](https://github.com/streamlit/streamlit/pull/10921), [#10913](https://github.com/streamlit/streamlit/issues/10913)).\n- 🕷️ Bug fix: `st.selectbox` does not lose its value if a partial edit is abandoned ([#10891](https://github.com/streamlit/streamlit/pull/10891)).\n- 🐞 Bug fix: `st.badge` doesn't falsely show `rainbow` as a color option ([#10896](https://github.com/streamlit/streamlit/pull/10896)).\n- 🐝 Bug fix: To avoid a file lock conflict the occurs with some IDEs, Streamlit's file watcher utilities retries reading files when blocked ([#10868](https://github.com/streamlit/streamlit/pull/10868), [#4486](https://github.com/streamlit/streamlit/issues/4486)). Thanks, [Morridin](https://github.com/Morridin)!\n- 🐜 Bug fix: `st.selectbox` and `st.multiselect` have consistent color and spacing for placeholder text ([#10865](https://github.com/streamlit/streamlit/pull/10865)).\n- 🪲 Bug fix: Context managers correctly handle form elements ([#10752](https://github.com/streamlit/streamlit/pull/10752), [#8761](https://github.com/streamlit/streamlit/issues/8761)). Thanks, [SrGesus](https://github.com/SrGesus)!\n- 🐛 Bug fix: `st.link_button` and `st.tabs` remain active when a client disconnects from a Streamlit server ([#10861](https://github.com/streamlit/streamlit/pull/10861)).\n\n## **Version 1.44.0**\n\n_Release date: March 25, 2025_\n\n**Highlights**\n\n- 💈 Introducing [advanced theming options](/develop/api-reference/configuration/config.toml#theme)! Use an assortment of configuration options to customize the appearance of your app. Change the fonts, colors, and roundness of your app without CSS.\n- 👮 Introducing [`st.badge`](/develop/api-reference/text/st.badge) to insert a colored badge element. You can also include badges in Markdown using a new directive.\n- 🏗️ Use [`streamlit init`](/develop/api-reference/cli/init) in your terminal to create all the local files you need for a new Streamlit app.\n\n**Notable Changes**\n\n- 🤖 [`st.exception`](/develop/api-reference/status/st.exception) includes links to open Google or ChatGPT with the contents of the exception. This includes uncaught exceptions displayed in the app.\n- 🗺️ You can access the user's locale through [`st.context`](/develop/api-reference/caching-and-state/st.context#contextlocale) ([#10563](https://github.com/streamlit/streamlit/pull/10563)).\n\n**Other Changes**\n\n- 📄 When using a `pages/` directory to automatically generate a multipage app, no pages (including the entrypoint file) can have the same inferred URL pathname ([#10276](https://github.com/streamlit/streamlit/pull/10276)).\n- 🏎️ To improve performance, Streamlit uses the React 18 `createRoot` API for its frontend ([#10453](https://github.com/streamlit/streamlit/pull/10453)).\n- 📝 To improve compatibility with AI tools, script compilation errors are logged when `logger.level=\"error\"` and not just when `logger.level=\"debug\"` ([#10826](https://github.com/streamlit/streamlit/pull/10826)).\n- 🪵 Streamlit automatically enables more detailed logging if `rich` is installed ([#10650](https://github.com/streamlit/streamlit/pull/10650)).\n- 🔢 `st.slider` and `st.number_input` raise an error when assigned a value in excess of a declared minimum or maximum ([#9964](https://github.com/streamlit/streamlit/pull/9964), [#9342](https://github.com/streamlit/streamlit/issues/9342)).\n- 🛠️ `st.table` support pandas `Styler.set_tooltips()` ([#10561](https://github.com/streamlit/streamlit/pull/10561), [#10553](https://github.com/streamlit/streamlit/issues/10553)).\n- ℹ️ Material symbols have been updated to the latest icon set ([#10813](https://github.com/streamlit/streamlit/pull/10813), [#10717](https://github.com/streamlit/streamlit/pull/10717)).\n- 🦋 Visual tweaks to headers ([#10599](https://github.com/streamlit/streamlit/pull/10599)).\n- 🦀 Bug fix: `st.html` displays correctly when used inside `st.tabs` ([#10825](https://github.com/streamlit/streamlit/pull/10825), [#10815](https://github.com/streamlit/streamlit/issues/10815)).\n- 🦎 Bug fix: For backwards compatibility, `theme.font=\"sans serfi\"` is internally converted to the new `theme.font=\"sans-serif\"` ([#10789](https://github.com/streamlit/streamlit/pull/10789), [#10786](https://github.com/streamlit/streamlit/issues/10786)).\n- 🐌 Bug fix: When using `st.secrets`, if Streamlit can't find the `secrets.toml` file, it will raise a `FileNotFoundError` ([#10508](https://github.com/streamlit/streamlit/pull/10508), [#8559](https://github.com/streamlit/streamlit/issues/8559)).\n- 🕸️ Bug fix: `st.secrets` raises a clear `TypeError` if you try to assign a value to an attribute ([#10698](https://github.com/streamlit/streamlit/pull/10698), [#10107](https://github.com/streamlit/streamlit/issues/10107)).\n- 🦗 Bug fix: In single-page apps, `st.page_link` does not highlight external links as if they are the current page ([#10690](https://github.com/streamlit/streamlit/pull/10690), [#10689](https://github.com/streamlit/streamlit/issues/10689)).\n- 🦂 Bug fix: `st.poppover` displays at the correct width when using the `help` parameter ([#10709](https://github.com/streamlit/streamlit/pull/10709), [#10693](https://github.com/streamlit/streamlit/issues/10693)).\n- 🦟 Bug fix: All components (and custom components) that read their width from the DOM initially load with a width of -1 px to prevent flickering ([#10712](https://github.com/streamlit/streamlit/pull/10712), [#10672](https://github.com/streamlit/streamlit/pull/10672), [#10663](https://github.com/streamlit/streamlit/pull/10663), [#10644](https://github.com/streamlit/streamlit/issues/10644)).\n- 🦠 Bug fix: When `st.number_input` is configured to use integers, the default minimum and maximum values will prevent integer overflow ([#10655](https://github.com/streamlit/streamlit/pull/10655), [#6740](https://github.com/streamlit/streamlit/issues/6740)).\n- 🪰 Bug fix: `st.navigation` uses immutable types to prevent mypy errors ([#10670](https://github.com/streamlit/streamlit/pull/10670)).\n- 🪳 Bug fix: Custom components correctly inherit font from theme configuration ([#10661](https://github.com/streamlit/streamlit/pull/10661), [#10660](https://github.com/streamlit/streamlit/issues/10660)).\n- 🕷️ Bug fix: Dataframes correctly support Dask data objects ([#10662](https://github.com/streamlit/streamlit/pull/10662)).\n- 🐞 Bug fix: Button widths are correct when using the `help` parameter ([#10658](https://github.com/streamlit/streamlit/pull/10658), [#10648](https://github.com/streamlit/streamlit/issues/10648), [#10656](https://github.com/streamlit/streamlit/issues/10656)).\n- 🐝 Bug fix: Scrolling is disabled when hovering over `st.number_input` to prevent accidental value changes ([#10642](https://github.com/streamlit/streamlit/pull/10642), [#8867](https://github.com/streamlit/streamlit/issues/8867)).\n- 🐜 Bug fix: `st.chat_input` gives a clear error in the UI when the file size limit is exceeded ([#10530](https://github.com/streamlit/streamlit/pull/10530)).\n- 🪲 Bug fix: The favicon and Markdown emojis use the same SVG emoji source for consistency ([#10539](https://github.com/streamlit/streamlit/pull/10539), [#6822](https://github.com/streamlit/streamlit/issues/6822)).\n- 🐛 Bug fix: The dataframe search bar is more responsive to width ([#10534](https://github.com/streamlit/streamlit/pull/10534), [#10532](https://github.com/streamlit/streamlit/issues/10532)).\n\n## **Version 1.43.0**\n\n_Release date: March 4, 2025_\n\n**Highlights**\n\n- 📁 Announcing the option to accept files with [`st.chat_input`](/develop/api-reference/chat/st.chat_input)!\n- 📒 Introducing a new column type for column configuration! Use [`JsonColumn`](/develop/api-reference/data/st.column_config/st.column_config.jsoncolumn) to show JSON-compatible objects.\n\n**Notable Changes**\n\n- 🏃 You can prevent [`st.download_button`](/develop/api-reference/widgets/st.download_button) from triggering a rerun by setting `on_click=\"ignore\"` ([#10296](https://github.com/streamlit/streamlit/pull/10296), [#4382](https://github.com/streamlit/streamlit/issues/4382)).\n- 🕑 You can access a user's timezone and timezone offset through [`st.context`](/develop/api-reference/caching-and-state/st.context) ([#10336](https://github.com/streamlit/streamlit/pull/10336)).\n- ↕️ You can configure the row height in [`st.dataframe`](/develop/api-reference/data/st.dataframe) and [`st.data_editor`](/develop/api-reference/data/st.data_editor) with a new parameter ([#9549](https://github.com/streamlit/streamlit/pull/9549), [#7266](https://github.com/streamlit/streamlit/issues/7266), [#8632](https://github.com/streamlit/streamlit/issues/8632), [#5386](https://github.com/streamlit/streamlit/issues/5386)).\n- 💅 `st.dataframe` and `st.data_editor` use `use_container_width=True` by default ([#10434](https://github.com/streamlit/streamlit/pull/10434)).\n- 🤏 [Markdown](/develop/api-reference/text/st.markdown) has a small text directive ([#10487](https://github.com/streamlit/streamlit/pull/10487), [#10486](https://github.com/streamlit/streamlit/issues/10486)).\n- 🧵 You can pass strings, paths, and callables to [`st.navigation`](/develop/api-reference/navigation/st.navigation) in place of `StreamlitPage` objects for convenience ([#10358](https://github.com/streamlit/streamlit/pull/10358), [#10069](https://github.com/streamlit/streamlit/issues/10069)). Thanks, [ashm-dev](https://github.com/ashm-dev)!\n- 📈 Streamlit has a new custom component, [`streamlit-bokeh`](https://github.com/streamlit/streamlit-bokeh), to support the latest version of Bokeh ([#10374](https://github.com/streamlit/streamlit/pull/10374), [#5858](https://github.com/streamlit/streamlit/issues/5858)).\n- 🔣 [`NumberColumn`](/develop/api-reference/data/st.column_config/st.column_config.numbercolumn), [`ProgressColumn`](/develop/api-reference/data/st.column_config/st.column_config.progresscolumn), [`DatetimeColumn`](/develop/api-reference/data/st.column_config/st.column_config.datetimecolumn), [`DateColumn`](/develop/api-reference/data/st.column_config/st.column_config.datecolumn), and [`TimeColumn`](/develop/api-reference/data/st.column_config/st.column_config.timecolumn) have preconfigured format options for ease of use ([#10179](https://github.com/streamlit/streamlit/pull/10179), [#8788](https://github.com/streamlit/streamlit/issues/8788), [#7702](https://github.com/streamlit/streamlit/issues/7702)).\n- 🛎️ [Static file serving](/develop/concepts/configuration/serving-static-files) supports files with JSON, XML, and common font file extensions. ([#10417](https://github.com/streamlit/streamlit/pull/10417), [#10335](https://github.com/streamlit/streamlit/pull/10335), [#10337](https://github.com/streamlit/streamlit/pull/10337), [#10302](https://github.com/streamlit/streamlit/issues/10302)).\n\n**Other Changes**\n\n- 🥷 Users can hide dataframe columns ([#10264](https://github.com/streamlit/streamlit/pull/10264), [#6870](https://github.com/streamlit/streamlit/issues/6870)).\n- 📅 Users can change the format of numbers, dates, and times in dataframes ([#10420](https://github.com/streamlit/streamlit/pull/10420)).\n- ↔️ Users can auto-size column widths ([#10476](https://github.com/streamlit/streamlit/pull/10476)).\n- 🐻‍❄️ Streamlit supports Polars dataframe and series hashing ([#10408](https://github.com/streamlit/streamlit/pull/10408), [#10347](https://github.com/streamlit/streamlit/issues/10347)).\n- ☠️ `rich` is no longer a required dependency for Streamlit ([#10320](https://github.com/streamlit/streamlit/pull/10320)).\n- 🦋 `st.file_uploader` has a better display format in narrow containers ([#10272](https://github.com/streamlit/streamlit/pull/10272)).\n- 🦎 Bug fix: Tabs are prevented from having a width of zero to prevent flickering ([#10533](https://github.com/streamlit/streamlit/pull/10533)).\n- 🐌 Bug fix: Column order is correctly displayed when set in column configuration ([#10445](https://github.com/streamlit/streamlit/pull/10445), [#10442](https://github.com/streamlit/streamlit/issues/10442)).\n- 🕸️ Bug fix: We updated dataframe null handling to prevent deprecation warnings ([#10484](https://github.com/streamlit/streamlit/pull/10484)).\n- 🦗 Bug fix: Elapsed time doesn't overflow for `st.audio_input` ([#10410](https://github.com/streamlit/streamlit/pull/10410), [#10373](https://github.com/streamlit/streamlit/issues/10373)). Thanks, [ashm-dev](https://github.com/ashm-dev)!\n- 🦂 Bug fix: `st.altair_chart` does not show an incorrect \"true\" tooltip when the user makes a selection ([#10456](https://github.com/streamlit/streamlit/pull/10456), [#10448](https://github.com/streamlit/streamlit/issues/10448)).\n- 🦟 Bug fix: Streamlit does not raise a RuntimeError when an `asyncio` event loop is not already running ([#10455](https://github.com/streamlit/streamlit/pull/10455), [#10452](https://github.com/streamlit/streamlit/issues/10452)).\n- 🦠 Bug fix: The key for an internal MIME type is set correctly to avoid a browser warning ([#10404](https://github.com/streamlit/streamlit/pull/10404)).\n- 🪰 Bug fix: `st.data_editor` automatically scrolls to the bottom when a user adds a row ([#10405](https://github.com/streamlit/streamlit/pull/10405), [#10351](https://github.com/streamlit/streamlit/issues/10351)).\n- 🪳 Bug fix: Tooltips are suppressed on user-added rows in `st.data_editor` to prevent erroneous warnings ([#10398](https://github.com/streamlit/streamlit/pull/10398)).\n- 🕷️ Bug fix: `st.logo` displays consistently when used with fragments and dialogs ([#10377](https://github.com/streamlit/streamlit/pull/10377), [#10350](https://github.com/streamlit/streamlit/issues/10350), [#10382](https://github.com/streamlit/streamlit/issues/10382)).\n- 🐞 Bug fix: `st.graphviz_chart` has rounded corners for consistent style ([#10224](https://github.com/streamlit/streamlit/pull/10224)).\n- 🐝 Bug fix: Streamlit raises a clear exception when an underscore is used in `provider` for `st.login` ([#10360](https://github.com/streamlit/streamlit/pull/10360), [#10356](https://github.com/streamlit/streamlit/issues/10356)).\n- 🐜 Bug fix: The dataframe column menu displays correctly inside dialogs ([#10359](https://github.com/streamlit/streamlit/pull/10359), [#10357](https://github.com/streamlit/streamlit/issues/10357)).\n- 🪲 Bug fix: Exception handling was adjusted for improved compatibility with Cython ([#10354](https://github.com/streamlit/streamlit/pull/10354), [#10353](https://github.com/streamlit/streamlit/issues/10353)). Thanks, [tutu-sol](https://github.com/tutu-sol)!\n- 🐛 Bug fix: `st.pills` and `st.segmented_control` have consistent font sizes across browsers ([#10349](https://github.com/streamlit/streamlit/pull/10349)).\n\n## **Version 1.42.0**\n\n_Release date: February 4, 2025_\n\n**Highlights**\n\n- 👩‍💻 Introducing [`st.login()`](/develop/api-reference/user/st.login) and [`st.logout()`](/develop/api-reference/user/st.logout) to authenticate users with any OpenID Connect provider.\n\n**Notable Changes**\n\n- ❣️ [`st.table`](/develop/api-reference/data/st.table) supports Markdown ([#8785](https://github.com/streamlit/streamlit/issues/8785), [#10088](https://github.com/streamlit/streamlit/pull/10088)).\n- ⏲️ [`st.spinner`](/develop/api-reference/status/st.spinner) can show elapsed time with `show_time=True` ([#6805](https://github.com/streamlit/streamlit/issues/6805), [#10072](https://github.com/streamlit/streamlit/pull/10072)).\n- 💈 [`st.image`](/develop/api-reference/media/st.image) supports Markdown in the `caption` parameter ([#6808](https://github.com/streamlit/streamlit/issues/6808), [#10075](https://github.com/streamlit/streamlit/pull/10075)).\n- ↕️ [`st.code`](/develop/api-reference/text/st.code) has a `height` parameter ([#7418](https://github.com/streamlit/streamlit/issues/7418), [#10080](https://github.com/streamlit/streamlit/pull/10080)).\n- ↔️ Most charts default to using `use_container_width=True` ([#10064](https://github.com/streamlit/streamlit/pull/10064)).\n- ❄️ [`SnowflakeConnection`](/develop/api-reference/connections/st.connections.snowflakeconnection) was updated to match the current Snowflake API, which changes its handling of keyword arguments in some cases ([#10122](https://github.com/streamlit/streamlit/pull/10122)).\n- 🐁 Users can drag and drop dataframe columns to rearrange them ([#8796](https://github.com/streamlit/streamlit/issues/8796), [#10099](https://github.com/streamlit/streamlit/pull/10099)).\n\n**Other Changes**\n\n- 📌 Dataframes have column menus for users to sort and pin columns ([#10206](https://github.com/streamlit/streamlit/pull/10206)).\n- 🚦 Dataframes support categorical indices ([#9647](https://github.com/streamlit/streamlit/issues/9647), [#10195](https://github.com/streamlit/streamlit/pull/10195)).\n- 🛸 Dataframes show a hover highlight on rows ([#8096](https://github.com/streamlit/streamlit/issues/8096), [#10104](https://github.com/streamlit/streamlit/pull/10104)).\n- ⚠️ When dataframes have cell values that are inconsistent with their configured type, Streamlit shows a tooltip describing the error ([#8253](https://github.com/streamlit/streamlit/issues/8253), [#9899](https://github.com/streamlit/streamlit/pull/9899)).\n- ➰ If there is an existing asyncio event loop when a Streamlit app starts, the app will reuse it instead of creating a new one ([#10164](https://github.com/streamlit/streamlit/pull/10164)). Thanks, [DeltaGa](https://github.com/DeltaGa)!\n- 🖼️ Streamlit recognizes `pyspark.sql.connect.dataframe.DataFrame` objects as dataframes ([#9953](https://github.com/streamlit/streamlit/issues/9953), [#9954](https://github.com/streamlit/streamlit/pull/9954)). Thanks, [OSalama](https://github.com/OSalama)!\n- 😃 We've updated emoji validation for new emojis ([#10149](https://github.com/streamlit/streamlit/pull/10149)).\n- 🔣 Material Symbols have been updated with the latest icons ([#10247](https://github.com/streamlit/streamlit/pull/10247)).\n- 💅 Visual tweaks and improvements ([#8705](https://github.com/streamlit/streamlit/issues/8705), [#9823](https://github.com/streamlit/streamlit/pull/9823), [#10047](https://github.com/streamlit/streamlit/pull/10047), [#10048](https://github.com/streamlit/streamlit/pull/10048), [#10083](https://github.com/streamlit/streamlit/pull/10083), [#10087](https://github.com/streamlit/streamlit/pull/10087), [#10225](https://github.com/streamlit/streamlit/pull/10225)).\n- ⭕ `st.image` displays rounded corners for consistent design ([#9999](https://github.com/streamlit/streamlit/pull/9999)).\n- 🎩 Bug fix: Top margin is applied correctly in `st.columns` ([#10265](https://github.com/streamlit/streamlit/issues/10265), [#10268](https://github.com/streamlit/streamlit/pull/10268)).\n- 💩 Bug fix: `react-syntax-highlighter` is aliased to prevent rendering errors in `st.code` ([#10231](https://github.com/streamlit/streamlit/issues/10231), [#10244](https://github.com/streamlit/streamlit/pull/10244)).\n- 🧹 Bug fix: We improved error messages for `st.query_params` ([#10111](https://github.com/streamlit/streamlit/issues/10111), [#10237](https://github.com/streamlit/streamlit/pull/10237)).\n- 🪱 Bug fix: Linting for `st.altair_chart` recognizes all Altair chart types ([#10202](https://github.com/streamlit/streamlit/pull/10202)).\n- ↗️ Bug fix: `st.dataframe` supports raw Arrow data ([#5606](https://github.com/streamlit/streamlit/issues/5606), [#10191](https://github.com/streamlit/streamlit/pull/10191)).\n- 🐍 Bug fix: `st.navigation` and `st.page_link` work when running in pure Python tests ([#10163](https://github.com/streamlit/streamlit/pull/10163)).\n- ☠️ Bug fix: Retries were added to prevent a possible race condition when files are removed while Streamlit is running ([#10148](https://github.com/streamlit/streamlit/pull/10148)).\n- 👽 Bug fix: When printing an app, `st.logo` will only print once ([#10165](https://github.com/streamlit/streamlit/issues/10165), [#10171](https://github.com/streamlit/streamlit/pull/10171)).\n- 🌍 Bug fix: Material icons are marked to prevent translation ([#10168](https://github.com/streamlit/streamlit/issues/10168), [#10174](https://github.com/streamlit/streamlit/pull/10174)).\n- 👻 Bug fix: `st.vega_lite_chart` correctly caches and updates its data ([#6689](https://github.com/streamlit/streamlit/issues/6689), [#10125](https://github.com/streamlit/streamlit/pull/10125)).\n- 🦀 Bug fix: When a fragment ID is not found, Streamlit logs a warning but doesn't raise an error ([#9921](https://github.com/streamlit/streamlit/issues/9921), [#10130](https://github.com/streamlit/streamlit/pull/10130)).\n- 🦋 Bug fix: The label on `st.expander` correctly fades when stale ([#10085](https://github.com/streamlit/streamlit/pull/10085)).\n- 🦎 Bug fix: `st.date_input` provides better type hinting for its return value ([#9477](https://github.com/streamlit/streamlit/issues/9477), [#9620](https://github.com/streamlit/streamlit/pull/9620)). Thanks, [pranaybattu](https://github.com/pranaybattu)!\n- 🐌 Bug fix: In dataframes, small float values display their first significant figure instead of displaying as 0 ([#10060](https://github.com/streamlit/streamlit/pull/10060)).\n- 🕸️ Bug fix: When `rich` is installed, errors are only logged once. ([#10097](https://github.com/streamlit/streamlit/pull/10097)).\n- 🦗 Bug fix: `st.text` preserves whitespace ([#10055](https://github.com/streamlit/streamlit/issues/10055), [#10062](https://github.com/streamlit/streamlit/pull/10062)).\n- 🦂 Bug fix: Dataframe `width` is not ignored when `height` is changed ([#9762](https://github.com/streamlit/streamlit/issues/9762), [#10036](https://github.com/streamlit/streamlit/pull/10036)).\n- 🦟 Bug fix: Multi index columns correctly handle empty labels ([#9749](https://github.com/streamlit/streamlit/issues/9749), [#10035](https://github.com/streamlit/streamlit/pull/10035)).\n- 🦠 Bug fix: Pinned columns respect `column_order` in when configured in `st.dataframe` ([#9997](https://github.com/streamlit/streamlit/issues/9997), [#10034](https://github.com/streamlit/streamlit/pull/10034)).\n- 🪰 Bug fix: Tooltips don't overflow to the left or right ([#9288](https://github.com/streamlit/streamlit/issues/9288), [#9452](https://github.com/streamlit/streamlit/issues/9452), [#9983](https://github.com/streamlit/streamlit/pull/9983)).\n- 🪳 Bug fix: Disabled feedback widgets correctly show their value ([#10030](https://github.com/streamlit/streamlit/pull/10030)).\n- 🕷️ Bug fix: Widgets correctly submit values if a user edits the value and immediately clicks a button ([#10007](https://github.com/streamlit/streamlit/issues/10007), [#10018](https://github.com/streamlit/streamlit/pull/10018)).\n- 🐞 Bug fix: Some MIME types have been hardcoded to protect against browser misconfiguration ([#10004](https://github.com/streamlit/streamlit/issues/10004), [#10010](https://github.com/streamlit/streamlit/pull/10010)).\n- 🐝 Bug fix: Files that unnecessarily inflated Streamlit's installation size were removed ([#10008](https://github.com/streamlit/streamlit/issues/10008), [#10011](https://github.com/streamlit/streamlit/pull/10011)).\n- 🐜 Bug fix: `st.date_input` gives the correct type hint for the `value` parameter ([#10005](https://github.com/streamlit/streamlit/issues/10005), [#10006](https://github.com/streamlit/streamlit/pull/10006)).\n- 🪲 Bug fix: `st.write` passes to `st.html` when `._repr_html()` is present for an object ([#9910](https://github.com/streamlit/streamlit/pull/9910)).\n- 🐛 Bug fix: `st.html` preserves `target=_blank` if set in an HTML string ([#9972](https://github.com/streamlit/streamlit/issues/9972), [#9994](https://github.com/streamlit/streamlit/pull/9994))."
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021",
    "content": "# 2021 release notes\n\nThis page contains release notes for Streamlit versions released in 2021. For the latest version of Streamlit, see [Release notes](/develop/quick-reference/release-notes).\n\n## Version 1.3.0\n\n_Release date: Dec 16, 2021_\n\n**Notable Changes**\n\n- 💯 Support for NumPy values in `st.metric`.\n- 🌐 Support for Mesh Layers in PyDeck.\n- 📊 Updated Plotly chart version to support the latest features.\n- 🏀 `st.spinner` element has visual animated spinner.\n- 🍰 `st.caption` supports HTML in text with `unsafe_allow_html` parameter.\n\n**Other Changes**\n\n- 🪲 Bug fix: Allow `st.session_state` to be used to set number_input values with no warning ([#4047](https://github.com/streamlit/streamlit/pull/4047)).\n- 🪲 Bug fix: Fix footer alignment in wide mode ([#4035](https://github.com/streamlit/streamlit/pull/4035)).\n- 🐞 Bug fix: Better support for Graphviz and Bokeh charts in containers (columns, expanders, etc.) ([#4039](https://github.com/streamlit/streamlit/pull/4039)).\n- 🐞 Bug fix: Support inline data values in Vega-Lite ([#4070](https://github.com/streamlit/streamlit/pull/4070)).\n- ✍️ Types: Updated type annotations for experimental memo and singleton decorators.\n- ✍️ Types: Improved type annotations for `st.selectbox`, `st.select_slider`, `st.radio`, `st.number_input`, and `st.multiselect`.\n\n## Version 1.2.0\n\n_Release date: Nov 11, 2021_\n\n**Notable Changes**\n\n- ✏️ `st.text_input` and `st.text_area` now have a `placeholder` parameter to display text when the field is empty.\n- 📏 Viewers can now resize the input box in `st.text_area`.\n- 📁 Streamlit can auto-reload when files in sub-directories change.\n- 🌈 We've upgraded Bokeh support to 2.4.1! We recommend updating your Bokeh library to 2.4.1 to maintain functionality. Going forward, we'll let you know if there's a mismatch in your Bokeh version via an error prompt.\n- 🔒 Developers can access secrets via attribute notation (e.g. `st.secrets.key` vs `st.secrets[\"key\"]`) just like session state.\n- ✍️ Publish type annotations according to [PEP 561](https://mypy.readthedocs.io/en/stable/installed_packages.html). Users now get type annotations for Streamlit when running mypy ([#4025](https://github.com/streamlit/streamlit/pull/4025)).\n\n**Other Changes**\n\n- 👀 Visual fixes ([#3863](https://github.com/streamlit/streamlit/pull/3863), [#3995](https://github.com/streamlit/streamlit/pull/3995), [#3926](https://github.com/streamlit/streamlit/pull/3926), [#3975](https://github.com/streamlit/streamlit/pull/3975)).\n- 🍔 Fixes to the hamburger menu ([#3968](https://github.com/streamlit/streamlit/pull/3968)).\n- 🖨️ Ability to print session state ([#3970](https://github.com/streamlit/streamlit/pull/3970)).\n\n## Version 1.1.0\n\n_Release date: Oct 21, 2021_\n\n**Highlights**\n\n- 🧠 Memory improvements: Streamlit apps allocate way less memory over time now.\n\n**Notable Changes**\n\n- ♻️ Apps automatically rerun now when the content of `secrets.toml` changes (before this you had to refresh the page manually).\n\n**Other Changes**\n\n- 🔗 Redirected some links to our [brand-new docs site](https://docs.streamlit.io/), e.g. in exceptions.\n- 🪲 Bug fix: Allow initialization of range slider with session state ([#3586](https://github.com/streamlit/streamlit/issues/3586)).\n- 🐞 Bug fix: Refresh chart when using `add_rows` with `datetime` index ([#3653](https://github.com/streamlit/streamlit/issues/3653)).\n- ✍️ Added some more type annotation in our codebase ([#3908](https://github.com/streamlit/streamlit/issues/3908)).\n\n## Version 1.0.0\n\n_Release date: Oct 5, 2021_\n\n**Highlights**\n\n- 🎈Announcing Streamlit 1.0! To read more about check out our [1.0 blog post](https://blog.streamlit.io/announcing-streamlit-1-0/).\n\n**Other Changes**\n\n- 🐞 Fixed an issue where using `df.dtypes` to show datatypes for a DF fails while using Arrow ([#3709](https://github.com/streamlit/streamlit/issues/3709)), Image captions stay within image width and are readable ([#3530](https://github.com/streamlit/streamlit/issues/3530)).\n\n## Version 0.89.0\n\n_Release date: Sep 22, 2021_\n\n**Highlights**\n\n- 💰 Introducing `st.experimental_memo` and `experimental_singleton`, a new primitive for caching! See [our blog post](https://blog.streamlit.io/new-experimental-primitives-for-caching/).\n- 🍔 Streamlit allows developers to configure their hamburger menu to be more user-centric.\n\n**Notable Changes**\n\n- 💅 We updated our UI to a more polished look with a new font.\n- 🎨 We now support `theme.base` in the theme object when it's sent to custom components.\n- 🧠 We've modified session state to reset widgets if any of their arguments changed even if they provide a key.\n  - Some widget behavior may have changed, but we believe this change makes the most sense. We have added a section to [our documentation](/develop/concepts/widget-semantics) describing how they behave.\n\n**Other Changes**\n\n- 🐞 Bug fixes: Support svgs from a URL ([#3809](https://github.com/streamlit/streamlit/pull/3809)) and that do not start with `<svg>` tag ([#3789](https://github.com/streamlit/streamlit/pull/3789)).\n\n## Version 0.88.0\n\n_Release date: Sep 2, 2021_\n\n**Highlights**\n\n- ⬇️ Introducing `st.download_button`, a new button widget for easily downloading files.\n\n**Notable Changes**\n\n- 🛑 We made changes to improve the redacted exception experience on Streamlit Community Cloud. When `client.showErrorDetails=true` exceptions display the Error Type and the Traceback, but redact the actual error text to prevent data leaks.\n\n## Version 0.87.0\n\n_Release date: Aug 19, 2021_\n\n**Highlights**\n\n- 🔢 Introducing `st.metric`, an API for displaying KPIs. Check out the [demo app](https://streamlit-release-demos-0-87streamlit-app-0-87-rfzphf.streamlit.app/) showcasing the functionality.\n\n**Other Changes**\n\n- 🐞 **Bug Fixes**: File uploader retains state upon expander closing ([#3557](https://github.com/streamlit/streamlit/issues/3557)), setIn Error with `st.empty` ([#3659](https://github.com/streamlit/streamlit/issues/3659)), Missing IFrame embeds in docs ([#3706](https://github.com/streamlit/streamlit/issues/3706)), Fix error writing certain PNG files ([#3597](https://github.com/streamlit/streamlit/issues/3597)).\n\n## Version 0.86.0\n\n_Release date: Aug 5, 2021_\n\n**Highlights**\n\n- 🎓 Our layout primitives are graduating from beta! You can now use `st.columns`, `st.container` and `st.expander` without the `beta_` prefix.\n\n**Notable Changes**\n\n- 📱 When using `st.columns`, columns will stack vertically when viewport size \\<640px so that column layout on smaller viewports is consistent and cleaner. ([#3594](https://github.com/streamlit/streamlit/issues/3594)).\n\n**Other Changes**\n\n- 🐞 **Bug fixes**: Fixed `st.date_input` crashes if its empty ([#3194](https://github.com/streamlit/streamlit/issues/3194)), Opening files with utf-8([#3022](https://github.com/streamlit/streamlit/issues/3022)), `st.select_slider` resets its state upon interaction ([#3600](https://github.com/streamlit/streamlit/issues/3600)).\n\n## Version 0.85.0\n\n_Release date: Jul 22, 2021_\n\n**Highlights**\n\n- 🏹 Streamlit now uses [Apache Arrow](https://arrow.apache.org) for serializing data frames when they are sent from Streamlit server to the front end. See our [blog post](https://blog.streamlit.io/).\n  - (Users who wish to continue using the legacy data frame serialization can do so by setting the `dataFrameSerialization` config option to `\"legacy\"` in their `config.toml`).\n\n**Other Changes**\n\n- 🐞 Bug fixes: Unresponsive pydeck example ([#3395](https://github.com/streamlit/streamlit/issues/3395)), JSON parse error message ([#2324](https://github.com/streamlit/streamlit/issues/2324)), Tooltips rendering ([#3300](https://github.com/streamlit/streamlit/issues/3300)), Colorpicker not working on Streamlit Sharing ([#2689](https://github.com/streamlit/streamlit/issues/2689)).\n\n## Version 0.84.0\n\n_Release date: Jul 1, 2021_\n\n**Highlights**\n\n- 🧠 Introducing `st.session_state` and widget callbacks to allow you to add statefulness to your apps. Check out the [blog post](http://blog.streamlit.io/session-state-for-streamlit/)\n\n**Notable Changes**\n\n- 🪄 `st.text_input` now has an `autocomplete` parameter to allow password managers to be used\n\n**Other Changes**\n\n- Using st.set_page_config to assign the page title no longer appends \"Streamlit\" to that title ([#3467](https://github.com/streamlit/streamlit/pull/3467))\n- NumberInput: disable plus/minus buttons when the widget is already at its max (or min) value ([#3493](https://github.com/streamlit/streamlit/pull/3493))\n\n## Version 0.83.0\n\n_Release date: Jun 17, 2021_\n\n**Highlights**\n\n- 🛣️ Updates to Streamlit docs to include step-by-step guides which demonstrate how to connect Streamlit apps to various databases & APIs\n\n**Notable Changes**\n\n- 📄 `st.form` now has a `clear_on_submit` parameter which \"resets\" all the form's widgets when the form is submitted.\n\n**Other Changes**\n\n- Fixed bugs regarding file encodings ([#3320](https://github.com/streamlit/streamlit/issues/3220), [#3108](https://github.com/streamlit/streamlit/issues/3108), [#2731](https://github.com/streamlit/streamlit/issues/2731))\n\n## Version 0.82.0\n\n_Release date: May 13, 2021_\n\n**Notable Changes**\n\n- ♻️ Improvements to memory management by forcing garbage collection between script runs.\n\n## Version 0.81.1\n\n_Release date: Apr 29, 2021_\n\n**Highlights**\n\n- 📝 Introducing `st.form` and `st.form_submit_button` to allow you to batch input widgets. Check out our [blog post](http://blog.streamlit.io/introducing-submit-button-and-forms)\n- 🔤 Introducing `st.caption` so you can add explainer text anywhere in you apps.\n- 🎨 Updates to Theming, including ability to build a theme that inherits from any of our default themes.\n- 🚀 Improvements to deployment experience to Streamlit sharing from the app menu.\n\n**Other changes**\n\n- Support for binary files in Custom Components ([#3144](https://github.com/streamlit/streamlit/pull/3144))\n\n## Version 0.80.0\n\n_Release date: Apr 8, 2021_\n\n**Highlights**\n\n- 🔐 Streamlit now support Secrets management for apps deployed to Streamlit Sharing!\n- ⚓️ Titles and headers now come with automatically generated anchor links. Just hover over any title and click the 🔗 to get the link!\n\n**Other changes**\n\n- Added `allow-downloads` capability to custom components ([#3040](https://github.com/streamlit/streamlit/issues/3040))\n- Fixed markdown tables in dark theme ([#3020](https://github.com/streamlit/streamlit/issues/3020))\n- Improved color picker widget in the Custom Theme dialog ([#2970](https://github.com/streamlit/streamlit/issues/2970))\n\n## Version 0.79.0\n\n_Release date: Mar 18, 2021_\n\n**Highlights**\n\n- 🌈 Introducing support for custom themes. Check out our [blog post](http://blog.streamlit.io/introducing-theming/)\n- 🌚 This release also introduces dark mode!\n- 🛠️ Support for tooltips on all input widgets\n\n**Other changes**\n\n- Fixed bugs regarding file encodings ([#1936](https://github.com/streamlit/streamlit/issues/1936), [#2606](https://github.com/streamlit/streamlit/issues/2606)) and caching functions ([#2728](https://github.com/streamlit/streamlit/issues/2728))\n\n## Version 0.78.0\n\n_Release date: Mar 4, 2021_\n\n**Features**\n\n- If you're in the Streamlit for Teams beta, we made a few updates to how secrets work. Check the beta docs for more info!\n- Dataframes now displays timezones for all DateTime and Time columns, and shows the time with the timezone applied, rather than in UTC\n\n**Notable Bug Fixes**\n\n- Various improvement to column alignment in `st.beta_columns`\n- Removed the long-deprecated `format` param from `st.image`, and replaced with `output_format`.\n\n## Version 0.77.0\n\n_Release date: Feb 23, 2021_\n\n**Features**\n\n- Added a new config option `client.showErrorDetails` allowing the developer to control the granularity of error messages. This is useful for when you deploy an app, and want to conceal from your users potentially-sensitive information contained in tracebacks.\n\n**Notable bug fixes**\n\n- Fixed [bug](https://github.com/streamlit/streamlit/issues/1957) where `st.image` wasn't rendering certain kinds of SVGs correctly.\n- Fixed [regression](https://github.com/streamlit/streamlit/issues/2699) where the current value of an `st.slider` was only shown on hover.\n\n## Version 0.76.0\n\n_Release date: February 4, 2021_\n\n**Notable Changes**\n\n- 🎨 [`st.color_picker`](https://docs.streamlit.io/en/0.76.0/api.html#streamlit.color_picker) is now out of beta. This means the old beta_color_picker function, which was marked as deprecated for the past 3 months, has now been replaced with color_picker.\n- 🐍 Display a warning when a Streamlit script is run directly as `python script.py`.\n- [`st.image`](https://docs.streamlit.io/en/0.76.0/api.html#streamlit.image)'s `use_column_width` now defaults to an `auto` option which will resize the image to the column width if the image exceeds the column width.\n- ✂️ Fixed bugs ([2437](https://github.com/streamlit/streamlit/issues/2437) and [2247](https://github.com/streamlit/streamlit/issues/2247)) with content getting cut off within a [`st.beta_expander`](https://docs.streamlit.io/en/0.76.0/api.html#streamlit.beta_expander)\n- 📜 Fixed a [bug](https://github.com/streamlit/streamlit/issues/2543) in [`st.dataframe`](https://docs.streamlit.io/en/0.76.0/api.html#streamlit.dataframe) where the scrollbar overlapped with the contents in the last column.\n- 💾 Fixed a [bug](https://github.com/streamlit/streamlit/issues/2561) for [`st.file_uploader`](https://docs.streamlit.io/en/0.76.0/api.html#streamlit.file_uploader) where file data returned was not the most recently uploaded file.\n- ➕ Fixed bugs ([2086](https://github.com/streamlit/streamlit/issues/2086) and [2556](https://github.com/streamlit/streamlit/issues/2556)) where some LaTeX commands were not rendering correctly.\n\n## Version 0.75.0\n\n_Release date: January 21, 2021_\n\n**Notable Changes**\n\n- 🕳 [`st.empty`](https://docs.streamlit.io/en/0.75.0/api.html#streamlit.empty)\n  previously would clear the component at the end of the script. It has now been\n  updated to clear the component instantly.\n- 🛹 Previously in wide mode, we had thin margins around the webpage. This has\n  now been increased to provide a better visual experience.\n\n## Version 0.74.0\n\n_Release date: January 6, 2021_\n\n**Notable Changes**\n\n- 💾 [`st.file_uploader`](https://docs.streamlit.io/en/0.74.0/api.html#streamlit.file_uploader). has been stabilized and the deprecation warning\n  and associated configuration option (`deprecation.showfileUploaderEncoding`) has been removed.\n- 📊 [`st.bokeh_chart`](https://docs.streamlit.io/en/0.74.0/api.html#streamlit.bokeh_chart) is no longer duplicated when the page loads.\n- 🎈 Fixed page icon to support emojis with variants (i.e. 🤦‍♀️ vs 🤦🏼‍♀️) or dashes (i.e 🌙 - crescent-moon)."
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020",
    "content": "# 2020 release notes\n\nThis page contains release notes for Streamlit versions released in 2020. For the latest version of Streamlit, see [Release notes](/develop/quick-reference/release-notes).\n\n## Version 0.73.0\n\n_Release date: December 17, 2020_\n\n**Notable Changes**\n\n- 🐍 Streamlit can now be installed on Python 3.9. Streamlit components are not\n  yet compatible with Python 3.9 and must use version 3.8 or earlier.\n- 🧱 Streamlit Components now allows same origin, enabling features provided by\n  the browser such as a webcam component.\n- 🐙 Fix Streamlit sharing deploy experience for users running on Git versions\n  2.7.0 or earlier.\n- 🧰 Handle unexpected closing of uploaded files for [`st.file_uploader`](https://docs.streamlit.io/en/0.72.0/api.html#streamlit.file_uploader).\n\n## Version 0.72.0\n\n_Release date: December 2, 2020_\n\n**Notable Changes**\n\n- 🌈 Establish a framework for theming and migrate existing components.\n- 📱 Improve the sidebar experience for mobile devices.\n- 🧰 Update [`st.file_uploader`](https://docs.streamlit.io/en/0.71.0/api.html#streamlit.file_uploader) to reduce reruns.\n\n## Version 0.71.0\n\n_Release date: November 11, 2020_\n\n**Notable Changes**\n\n- 📁 Updated [`st.file_uploader`](https://docs.streamlit.io/en/0.71.0/api.html#streamlit.file_uploader)\n  to automatically reset buffer on app reruns.\n- 📊 Optimize the default rendering of charts and reduce issues with the initial render.\n\n## Version 0.70.0\n\n_Release date: October 28, 2020_\n\n**Notable Changes**\n\n- 🧪 [`st.set_page_config`](https://docs.streamlit.io/en/0.70.0/api.html#streamlit.set_page_config) and [`st.color_picker`](https://docs.streamlit.io/en/0.70.0/api.html#streamlit.color_picker) have now been moved into the\n  Streamlit namespace. These will be removed from beta January 28th, 2021. Learn\n  more about our beta process [here](https://docs.streamlit.io/en/0.70.0/api.html#beta-and-experimental-features).\n- 📊 Improve display of bar charts for discrete values.\n\n## Version 0.69.0\n\n_Release date: October 15, 2020_\n\n**Highlights:**\n\n- 🎁 Introducing Streamlit sharing, the best way to deploy, manage, and share your public Streamlit apps—for free. Read more about it on our [blog post](http://blog.streamlit.io/introducing-streamlit-sharing/) or sign up [here](https://streamlit.io/sharing)!\n- Added `st.experimental_rerun` to programatically re-run your app. Thanks [SimonBiggs](https://github.com/SimonBiggs)!\n\n**Notable Changes**\n\n- 📹 Better support across browsers for start and stop times for st.video.\n- 🖼 Bug fix for intermittently failing media files\n- 📦 Bug fix for custom components compatibility with Safari. Make sure to upgrade to the latest [streamlit-component-lib](https://www.npmjs.com/package/streamlit-component-lib).\n\n## Version 0.68.0\n\n_Release date: October 8, 2020_\n\n**Highlights:**\n\n- ⌗ Introducing new layout options for Streamlit! Move aside, vertical layout.\n  Make a little space for... horizontal layout! Check out our\n  [blog post](https://blog.streamlit.io/introducing-new-layout-options-for-streamlit/).\n- 💾 File uploader redesigned with new functionality for multiple files uploads\n  and better support for working with uploaded files. This may cause breaking\n  changes. Please see the new api in our\n  [documentation](https://docs.streamlit.io/en/0.68.0/api.html#streamlit.file_uploader)\n\n**Notable Changes**\n\n- 🎈 `st.balloon` has gotten a facelift with nicer balloons and smoother animations.\n- 🚨 Breaking Change: Following the deprecation of `st.deck_gl_chart` in\n  January 2020, we have now removed the API completely. Please use\n  `st.pydeck_chart` instead.\n- 🚨 Breaking Change: Following the deprecation of `width` and `height` for\n  `st.altair_chart`, `st.graphviz_chart`, `st.plotly_chart`, and\n  `st.vega_lite_chart` in January 2020, we have now removed the args completely.\n  Please set the width and height in the respective charting library.\n\n## Version 0.67.0\n\n_Release date: September 16, 2020_\n\n**Highlights:**\n\n- 🦷 Streamlit Components can now return bytes to your Streamlit App. To create a\n  component that returns bytes, make sure to upgrade to the latest\n  [streamlit-component-lib](https://www.npmjs.com/package/streamlit-component-lib).\n\n**Notable Changes**\n\n- 📈 Deprecation warning: Beginning December 1st, 2020 `st.pyplot()` will require a figure to\n  be provided. To disable the deprecation warning, please set `deprecation.showPyplotGlobalUse`\n  to `False`\n- 🎚 `st.multiselect` and `st.select` are now lightning fast when working with large datasets. Thanks [masa3141](https://github.com/masa3141)!\n\n## Version 0.66.0\n\n_Release date: September 1, 2020_\n\n**Highlights:**\n\n- ✏️ `st.write` is now available for use in the sidebar!\n- 🎚 A slider for distinct or non-numerical values is now available with `st.select_slider`.\n- ⌗ Streamlit Components can now return dataframes to your Streamlit App. Check out our [SelectableDataTable example](https://github.com/streamlit/component-template/tree/master/examples/SelectableDataTable).\n- 📦 The Streamlit Components library used in our Streamlit Component template is\n  now available as a npm package ([streamlit-component-lib](https://www.npmjs.com/package/streamlit-component-lib)) to simplify future upgrades to the latest version.\n  Existing components do not need to migrate.\n\n**Notable Changes**\n\n- 🐼 Support StringDtype from pandas version 1.0.0\n- 🧦 Support for running Streamlit on Unix sockets\n\n## Version 0.65.0\n\n_Release date: August 12, 2020_\n\n**Highlights:**\n\n- ⚙️ Ability to set page title, favicon, sidebar state, and wide mode via st.beta_set_page_config(). See our [documentation](https://docs.streamlit.io/en/0.65.0/api.html#streamlit.set_page_config) for details.\n- 📝 Add stateful behaviors through the use of query parameters with st.experimental_set_query_params and st.experimental_get_query_params. Thanks [@zhaoooyue](https://github.com/zhaoooyue)!\n- 🐼 Improved pandas dataframe support for st.radio, st.selectbox, and st.multiselect.\n- 🛑 Break out of your Streamlit app with st.stop.\n- 🖼 Inline SVG support for st.image.\n\n**Callouts:**\n\n- 🚨Deprecation Warning: The st.image parameter format has been renamed to output_format.\n\n## Version 0.64.0\n\n_Release date: July 23, 2020_\n\n**Highlights:**\n\n- 📊 Default matplotlib to display charts with a tight layout. To disable this,\n  set `bbox_inches` to `None`, inches as a string, or a `Bbox`\n- 🗃 Deprecation warning for automatic encoding on `st.file_uploader`\n- 🙈 If `gatherUserStats` is `False`, do not even load the Segment library.\n  Thanks [@tanmaylaud](https://github.com/tanmaylaud)!\n\n## Version 0.63.0\n\n_Release date: July 13, 2020_\n\n**Highlights:**\n\n- 🧩 **Support for Streamlit Components!!!** See\n  [documentation](https://docs.streamlit.io/en/latest/streamlit_components.html) for more info.\n- 🕗 Support for datetimes in\n  [`st.slider`](https://docs.streamlit.io/en/latest/api.html#streamlit.slider). And, of course, just\n  like any other value you use in `st.slider`, you can also pass in two-element lists to get a\n  datetime range slider.\n\n## Version 0.62.0\n\n_Release date: June 21, 2020_\n\n**Highlights:**\n\n- 📨 Ability to turn websocket compression on/off via the config option\n  `server.enableWebsocketCompression`. This is useful if your server strips HTTP headers and you do\n  not have access to change that behavior.\n- 🗝️ Out-of-the-box support for CSRF protection using the\n  [Cookie-to-header token](https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-header_token)\n  technique. This means that if you're serving your Streamlit app from multiple replicas you'll need\n  to configure them to to use the same cookie secret with the `server.cookieSecret` config option.\n  To turn XSRF protection off, set `server.enableXsrfProtection=false`.\n\n**Notable bug fixes:**\n\n- 🖼️ Added a grace period to the image cache expiration logic in order to fix multiple related bugs\n  where images sent with `st.image` or `st.pyplot` were sometimes missing.\n\n## Version 0.61.0\n\n_Release date: June 2, 2020_\n\n**Highlights:**\n\n- 📅 Support for date ranges in `st.date_picker`. See\n  [docs](https://docs.streamlit.io/en/latest/api.html#streamlit.date_picker)\n  for more info, but the TLDR is: just pass a list/tuple as the default date and it will be\n  interpreted as a range.\n- 🗣️ You can now choose whether `st.echo` prints the code above or below the output of the echoed\n  block. To learn more, refer to the `code_location` argument in the\n  [docs](https://docs.streamlit.io/en/latest/api.html#streamlit.echo).\n- 📦 Improved `@st.cache` support for Keras models and Tensorflow `saved_models`.\n\n## Version 0.60.0\n\n_Release date: May 18, 2020_\n\n**Highlights:**\n\n- ↕️ Ability to set the height of an `st.text_area` with the `height` argument\n  (expressed in pixels). See\n  [docs](https://docs.streamlit.io/en/latest/api.html#streamlit.text_area) for more.\n- 🔡 Ability to set the maximimum number of characters allowed in `st.text_area`\n  or `st.text_input`. Check out the `max_chars` argument in the\n  [docs](https://docs.streamlit.io/en/latest/api.html#streamlit.text_area).\n- 🗺️ Better DeckGL support for the [H3](https://h3geo.org/) geospatial indexing\n  system. So now you can use things like `H3HexagonLayer` in\n  [`st.pydeck_chart`](https://docs.streamlit.io/en/latest/api.html#streamlit.pydeck_chart).\n- 📦 Improved `@st.cache` support for PyTorch TensorBase and Model.\n\n## Version 0.59.0\n\n_Release date: May 05, 2020_\n\n**Highlights:**\n\n- 🎨 New color-picker widget! Use it with\n  [`st.beta_color_picker()`](https://docs.streamlit.io/en/0.69.0/api.html#streamlit.beta_color_picker)\n- 🧪 Introducing `st.beta_*` and `st.experimental_*` function prefixes, for faster\n  Streamlit feature releases. See\n  [docs](https://docs.streamlit.io/en/latest/api.html#pre-release-features) for more info.\n- 📦 Improved `@st.cache` support for SQL Alchemy objects, CompiledFFI, PyTorch\n  Tensors, and `builtins.mappingproxy`.\n\n## Version 0.58.0\n\n_Release date: April 22, 2020_\n\n**Highlights:**\n\n- 💼 Made `st.selectbox` filtering case-insensitive.\n- ㈬ Better support for Tensorflow sessions in `@st.cache`.\n- 📊 Changed behavior of `st.pyplot` to auto-clear the figure only when using\n  the global Matplotlib figure (i.e. only when calling `st.pyplot()` rather\n  than `st.pyplot(fig)`).\n\n## Version 0.57.0\n\n_Release date: March 26, 2020_\n\n**Highlights:**\n\n- ⏲️ Ability to set expiration options for `@st.cache`'ed functions by setting\n  the `max_entries` and `ttl` arguments. See\n  [docs](https://docs.streamlit.io/en/latest/api.html#streamlit.cache).\n- 🆙 Improved the machinery behind `st.file_uploader`, so it's much more\n  performant now! Also increased the default upload limit to 200MB\n  (configurable via `server.max_upload_size`).\n- 🔒 The `server.address` config option now _binds_ the server to that address\n  for added security.\n- 📄 Even more details added to error messages for `@st.cache` for easier\n  debugging.\n\n## Version 0.56.0\n\n_Release date: February 15, 2020_\n\n**Highlights:**\n\n- 📄 Improved error messages for st.cache. The errors now also point to the new\n  caching docs we just released. Read more\n  [here](https://discuss.streamlit.io/t/help-us-stress-test-streamlit-s-latest-caching-update/1944)!\n\n**Breaking changes:**\n\n- 🐍 As [announced last month](https://discuss.streamlit.io/t/streamlit-will-deprecate-python-2-in-february/1656),\n  **Streamlit no longer supports Python 2.** To use Streamlit you'll need\n  Python 3.5 or above.\n\n## Version 0.55.0\n\n_Release date: February 4, 2020_\n\n**Highlights:**\n\n- 📺 **Ability to record screencasts directly from Streamlit!** This allows\n  you to easily record and share explanations about your models, analyses,\n  data, etc. Just click ☰ then \"Record a screencast\". Give it a try!\n\n## Version 0.54.0\n\n_Release date: January 29, 2020_\n\n**Highlights:**\n\n- ⌨️ Support for password fields! Just pass `type=\"password\"` to\n  `st.text_input()`.\n\n**Notable fixes:**\n\n- ✳️ Numerous st.cache improvements, including better support for complex objects.\n- 🗣️ Fixed cross-talk in sidebar between multiple users.\n\n**Breaking changes:**\n\n- If you're using the SessionState <del>hack</del> Gist, you should re-download it!\n  Depending on which hack you're using, here are some links to save you some\n  time:\n  - [SessionState.py](https://gist.github.com/tvst/036da038ab3e999a64497f42de966a92)\n  - [st_state_patch.py](https://gist.github.com/tvst/0899a5cdc9f0467f7622750896e6bd7f)\n\n## Version 0.53.0\n\n_Release date: January 14, 2020_\n\n**Highlights:**\n\n- 🗺️ Support for all DeckGL features! Just use\n  [Pydeck](https://deckgl.readthedocs.io/en/latest/) instead of\n  [`st.deck_gl_chart`](https://docs.streamlit.io/en/latest/api.html#streamlit.pydeck_chart).\n  To do that, simply pass a PyDeck object to\n  [`st.pydeck_chart`](https://docs.streamlit.io/en/latest/api.html#streamlit.pydeck_chart),\n  [`st.write`](https://docs.streamlit.io/en/latest/api.html#streamlit.write),\n  or [magic](https://docs.streamlit.io/en/latest/api.html#magic).\n\n  _Note that as a **preview release** things may change in the near future.\n  Looking forward to hearing input from the community before we stabilize the\n  API!_\n\n  **The goals is for this to replace `st.deck_gl_chart`,** since it\n  is does everything the old API did _and much more!_\n\n- 🆕 Better handling of Streamlit upgrades while developing. We now auto-reload\n  the browser tab if the app it is displaying uses a newer version of Streamlit\n  than the one the tab is running.\n\n- 👑 New favicon, with our new logo!\n\n**Notable fixes:**\n\n- Magic now works correctly in Python 3.8. It no longer causes\n  docstrings to render in your app.\n\n**Breaking changes:**\n\n- Updated how we calculate the default width and height of all chart types.\n  We now leave chart sizing up to your charting library itself, so please refer\n  to the library's documentation.\n\n  As a result, the `width` and `height` arguments have been deprecated\n  from most chart commands, and `use_container_width` has been introduced\n  everywhere to allow you to make charts fill as much horizontal space as\n  possible (this used to be the default)."
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024",
    "content": "# 2024 release notes\n\nThis page contains release notes for Streamlit versions released in 2024. For the latest version of Streamlit, see [Release notes](/develop/quick-reference/release-notes).\n\n## **Version 1.41.0**\n\n_Release date: December 10, 2024_\n\n**Notable Changes**\n\n- 🔲 [`st.metric`](/develop/api-reference/data/st.metric) and [`st.columns`](/develop/api-reference/layout/st.columns) have a parameter to show an optional border ([#9927](https://github.com/streamlit/streamlit/pull/9927), [#9928](https://github.com/streamlit/streamlit/pull/9928)).\n- 🎨 Text and background color in [Markdown](/develop/api-reference/text/st.markdown) can use the \"primary\" color from the `theme.primaryColor` configuration option ([#9676](https://github.com/streamlit/streamlit/pull/9676)).\n- 🥶 You can freeze columns with [column configuration](/develop/api-reference/data/st.column_config) to make them always visible when scrolling horizontally ([#9535](https://github.com/streamlit/streamlit/pull/9535), [#7078](https://github.com/streamlit/streamlit/issues/7078)).\n- 3️⃣ The `type` parameter for [buttons](/develop/api-reference/widgets/st.button) accepts a new option, `\"tertiary\"` ([#9923](https://github.com/streamlit/streamlit/pull/9923)).\n- 🚶‍♂️ Streamlit supports `pathlib.Path` objects everywhere you can use a string path ([#9711](https://github.com/streamlit/streamlit/pull/9711), [#9783](https://github.com/streamlit/streamlit/pull/9783)).\n- ⏱️ [`st.date_input`](/develop/api-reference/widgets/st.date_input) and [`st.time_input`](/develop/api-reference/widgets/st.time_input) accept ISO formatted strings for initial values ([#9753](https://github.com/streamlit/streamlit/pull/9753)).\n- 💬 [`st.write_stream`](/develop/api-reference/write-magic/st.write_stream) accepts async generators, which it converts internally to sync generators ([#8724](https://github.com/streamlit/streamlit/pull/8724), [#8161](https://github.com/streamlit/streamlit/issues/8161)).\n- 🪵 The [`client.showErrorDetails`](/develop/api-reference/configuration/config.toml#client) configuration option has additional values to show or hide more information ([#9909](https://github.com/streamlit/streamlit/pull/9909)).\n- 🔎 When Streamlit shows stack traces in the app for uncaught exceptions, internal code is omitted or reduced for easier debugging ([#9913](https://github.com/streamlit/streamlit/pull/9913)).\n- 📈 [`st.line_chart`](/develop/api-reference/charts/st.line_chart) shows tooltips for the nearest point on hover ([#9674](https://github.com/streamlit/streamlit/pull/9674)).\n- 🌐 [`st.html`](/develop/api-reference/utilities/st.html) will attempt to convert non-string objects with `._repr_html_()` before falling back to `str()` ([#9877](https://github.com/streamlit/streamlit/pull/9877)).\n- 🐍 Streamlit supports Python 3.13 and no longer supports Python 3.8 ([#9635](https://github.com/streamlit/streamlit/pull/9635)).\n\n**Other Changes**\n\n- 🔣 Material Symbols have been updated with the latest icons ([#9813](https://github.com/streamlit/streamlit/pull/9813), [#9810](https://github.com/streamlit/streamlit/issues/9810)).\n- 👽 Streamlit supports Watchdog version 6 ([#9785](https://github.com/streamlit/streamlit/pull/9785)). Thanks, [RubenVanEldik](https://github.com/RubenVanEldik).\n- 🌀 Bug fix: Streamlit only shows cached function spinners on cache misses and doesn't show spinners for nested cached functions ([#9956](https://github.com/streamlit/streamlit/pull/9956), [#9951](https://github.com/streamlit/streamlit/issues/9951)).\n- 🔈 Bug fix: Streamlit's audio buffer handles channels better to correctly play audio recordings in Firefox ([#9885](https://github.com/streamlit/streamlit/pull/9885), [#9799](https://github.com/streamlit/streamlit/issues/9799)).\n- 🦊 Bug fix: URL patterns are matched correctly to allow Community Cloud developer tools to display correctly in Firefox ([#9849](https://github.com/streamlit/streamlit/pull/9849), [#9848](https://github.com/streamlit/streamlit/issues/9848)).\n- ☠️ Bug fix: Corrected a performance and alignment problem with containers ([#9901](https://github.com/streamlit/streamlit/pull/9901), [#9456](https://github.com/streamlit/streamlit/issues/9456), [#9560](https://github.com/streamlit/streamlit/issues/9560)).\n- 👻 Bug fix: `st.rerun` will raise an error if an invalid `scope` is passed to it ([#9911](https://github.com/streamlit/streamlit/pull/9911), [#9908](https://github.com/streamlit/streamlit/issues/9908)).\n- 🦋 Bug fix: Dataframe toolbars show correctly in dialogs ([#9897](https://github.com/streamlit/streamlit/pull/9897), [#9461](https://github.com/streamlit/streamlit/issues/9461)).\n- 🦀 Bug fix: `LinkColumn` regex for `display_text` uses the correct URI decoding ([#9895](https://github.com/streamlit/streamlit/pull/9895), [#9893](https://github.com/streamlit/streamlit/issues/9893)).\n- 🦎 Bug fix: `st.dataframe` has correct type hinting when `on_selection=\"ignore\"` ([#9898](https://github.com/streamlit/streamlit/pull/9898), [#9669](https://github.com/streamlit/streamlit/issues/9669)).\n- 🐌 Bug fix: Padding is applied consistently for wide and centered layout mode ([#9882](https://github.com/streamlit/streamlit/pull/9882), [#9707](https://github.com/streamlit/streamlit/issues/9707)).\n- 🕸️ Bug fix: `st.graphviz_chart` is displayed correctly when `use_container_width=True` ([#9867](https://github.com/streamlit/streamlit/pull/9867), [#9866](https://github.com/streamlit/streamlit/issues/9866)).\n- 🦗 Bug fix: The overloaded definitions of `st.pills` and `st.segmented_control` use the correct selection-mode default ([#9801](https://github.com/streamlit/streamlit/pull/9801)). Thanks, [RubenVanEldik](https://github.com/RubenVanEldik)!\n- 🦂 Bug fix: `st.text_area` (and other widgets) are correctly submitted in a form when using `Ctrl+Enter` ([#9847](https://github.com/streamlit/streamlit/pull/9847), [#9841](https://github.com/streamlit/streamlit/issues/9841)).\n- 🦟 Bug Fix: `st.write` renders `DeltaGenerator` objects with [`st.help`](http://st.help) ([#9828](https://github.com/streamlit/streamlit/pull/9828), [#9827](https://github.com/streamlit/streamlit/issues/9827)).\n- 🦠 Bug fix: `st.text_area` correctly matches the value in Session State when used with a key ([#9829](https://github.com/streamlit/streamlit/pull/9829), [#9825](https://github.com/streamlit/streamlit/issues/9825)).\n- 🪰 Bug fix: `st.text_input` does not trigger a rerun when a user submits an unchanged value ([#9826](https://github.com/streamlit/streamlit/pull/9826)).\n- 🪳 Bug fix: Improved styling for `st.exception` to fix overflow and incorrect padding ([#9818](https://github.com/streamlit/streamlit/pull/9818), [#9817](https://github.com/streamlit/streamlit/issues/9817), [#9816](https://github.com/streamlit/streamlit/issues/9816)).\n- 🕷️ Bug fix: Large dataframe don't overflow and cover the dataframe toolbar in fullscreen mode ([#9803](https://github.com/streamlit/streamlit/pull/9803), [#9798](https://github.com/streamlit/streamlit/issues/9798)).\n- 🐞 Bug fix: `st.audio_input` shows the correct time on recording in time zones with a half-hour offset ([#9791](https://github.com/streamlit/streamlit/pull/9791), [#9631](https://github.com/streamlit/streamlit/issues/9631)).\n- 🐝 Bug fix: In iOS, `st.number_input` shows a number pad instead of a keyboard when in focus ([#9766](https://github.com/streamlit/streamlit/pull/9766), [#9763](https://github.com/streamlit/streamlit/issues/9763)).\n- 🐜 Bug fix: Widget keys containing hyphens are correctly added to HTML classes in the DOM with an `st-key-` prefix ([#9793](https://github.com/streamlit/streamlit/pull/9793)).\n- 🪲 Bug fix: Audio files created by `st.audio_input` include a timestamp to ensure unique file names ([#9768](https://github.com/streamlit/streamlit/pull/9768)).\n- 🐛 Bug fix: Double slash URL pathnames do not create a 301 redirect ([#9754](https://github.com/streamlit/streamlit/pull/9754), [#9690](https://github.com/streamlit/streamlit/issues/9690)).\n\n## **Version 1.40.0**\n\n_Release date: November 6, 2024_\n\n**Highlights**\n\n- 💊 Introducing [`st.pills`](/develop/api-reference/widgets/st.pills) to create a single- or multi-select group of pill-buttons.\n- 🎛️ Introducing [`st.segmented_control`](/develop/api-reference/widgets/st.segmented_control) to create a segmented button or button group.\n- 🎤 Announcing the general availability of [`st.audio_input`](), a widget to let users record sound with their microphones.\n\n**Notable Changes**\n\n- ➡️ Markdown renders a limited set of typographical symbols (arrows and comparators).\n- <img src=\"/logo.svg\" style={{ display: \"inline-block\", width: \"1em\" }} /> You can use `:streamlit:` to render the Streamlit logo in [Markdown](/develop/api-reference/text/st.markdown).\n- 🐍 [`st.text`](/develop/api-reference/text/st.text) wraps text and no longer uses monospace font.\n- 🪣 You can set `use_container_width` for [`st.image`](/develop/api-reference/media/st.image). `use_column_width` is deprecated.\n- 📅 [`st.date_input`](/develop/api-reference/widgets/st.date_input) infers the first day of the week from the user’s locale ([#9706](https://github.com/streamlit/streamlit/pull/9706), [#5215](https://github.com/streamlit/streamlit/issues/5215)).\n\n**Other Changes**\n\n- 🎶 Streamlit’s CLI tool accepts array values for configuration options ([#9577](https://github.com/streamlit/streamlit/pull/9577)).\n- ⛓️ Static file serving supports symlinks ([#9147](https://github.com/streamlit/streamlit/pull/9147), [#9146](https://github.com/streamlit/streamlit/issues/9146)). Thanks, [link89](https://github.com/link89)!\n- 🚀 Streamlit provides helpful links for deployment when an app is running locally ([#9681](https://github.com/streamlit/streamlit/pull/9681)).\n- ↕️ The fullscreen button for charts matches with the dataframe toolbar ([#9721](https://github.com/streamlit/streamlit/pull/9721)).\n- 🏃 The running-man icon has a brief delay before rendering to avoid an unnecessary flicker for fast running apps ([#9732](https://github.com/streamlit/streamlit/pull/9732)).\n- 🖇️ The `ComponentRequestHandler` allows symlinks ([#9588](https://github.com/streamlit/streamlit/pull/9588)).\n- 👆 Streamlit works with `pillow` version 11 ([#9742](https://github.com/streamlit/streamlit/pull/9742)). Thanks, [hauntsaninja](https://github.com/hauntsaninja)!\n- 🗺️ Deck.gl was upgraded to version 9.0.33 ([#9636](https://github.com/streamlit/streamlit/pull/9636)).\n- 🦠 Bug fix: `st.latex` stays center-aligned when using the `help` keyword argument ([#9698](https://github.com/streamlit/streamlit/pull/9698), [#9682](https://github.com/streamlit/streamlit/issues/9682)). Thanks, [emmagarr](https://github.com/emmagarr)!\n- 🪰 Bug fix: Apps correctly access local storage on Android ([#9744](https://github.com/streamlit/streamlit/pull/9744), [#9740](https://github.com/streamlit/streamlit/issues/9740)).\n- 🕷️ Bug fix: Cached class methods can be cleared ([#9642](https://github.com/streamlit/streamlit/pull/9642), [#9633](https://github.com/streamlit/streamlit/issues/9633)).\n- 🐞 Bug fix: Streamlit clears fragment auto-reruns when a user changes pages. This prevents an invalid index ([#9617](https://github.com/streamlit/streamlit/pull/9617)).\n- 🐝 Bug fix: `st.page_link` margins are correct ([#9625](https://github.com/streamlit/streamlit/pull/9625)).\n- 🐜 Bug fix: Form widgets show submission instructions when in focus ([#9576](https://github.com/streamlit/streamlit/pull/9576), [#7079](https://github.com/streamlit/streamlit/issues/7079)).\n- 🪲 Bug fix: `st.navigation` correctly reconciles `client.showSidebarNavigation` ([#9589](https://github.com/streamlit/streamlit/pull/9589), [#9581](https://github.com/streamlit/streamlit/issues/9581)).\n- 🐛 Bug fix: `st.text_area` requires a minimum height of 68px which fits two lines ([#9561](https://github.com/streamlit/streamlit/pull/9561), [#9217](https://github.com/streamlit/streamlit/issues/9217)).\n- 💅 Bug fix: Various styling fixes ([#9529](https://github.com/streamlit/streamlit/pull/9529), [#8131](https://github.com/streamlit/streamlit/issues/8131), [#9555](https://github.com/streamlit/streamlit/pull/9555), [#9496](https://github.com/streamlit/streamlit/issues/9496), [#9554](https://github.com/streamlit/streamlit/pull/9554), [#9349](https://github.com/streamlit/streamlit/issues/9349), [#7739](https://github.com/streamlit/streamlit/issues/7739)).\n\n## **Version 1.39.0**\n\n_Release date: October 1, 2024_\n\n**Highlights**\n\n- 🎤 Introducing [`st.experimental_audio_input`](/develop/api-reference/widgets/st.audio_input) to let users record with their microphones!\n- 📍 [`st.pydeck_chart`](/develop/api-reference/charts/st.pydeck_chart#chart-selections) can return selection events!\n\n**Notable Changes**\n\n- 😃 [`st.button`](/develop/api-reference/widgets/st.button), [`st.download_button`](/develop/api-reference/widgets/st.download_button), [`st.form_submit_button`](/develop/api-reference/execution-flow/st.form_submit_button), [`st.link_button`](/develop/api-reference/widgets/st.link_button), and [`st.popover`](/develop/api-reference/layout/st.popover) each have a new parameter to add an icon.\n- 🏢 [`st.logo`](/develop/api-reference/media/st.logo) has a new parameter to adjust the size of your logo.\n- 🧭 [`st.navigation`](/develop/api-reference/navigation/st.navigation) lets you display an always-expanded or collapsible menu using a new `expanded` parameter.\n- ↕️ You can set `height` and `width` for [`st.map`](/develop/api-reference/charts/st.map) and [`st.pydeck_chart`](/develop/api-reference/charts/st.pydeck_chart).\n- ↩️ Form submission behavior can be configured with a new `enter_to_submit` parameter ([#9480](https://github.com/streamlit/streamlit/pull/9480), [#7538](https://github.com/streamlit/streamlit/issues/7538), [#9406](https://github.com/streamlit/streamlit/pull/9406), [#8042](https://github.com/streamlit/streamlit/issues/8042)).\n- ⏱️ A new config option, `server.disconnectedSessionTTL`, lets you set a minimum time before a disconnected session is cleaned up ([#9179](https://github.com/streamlit/streamlit/pull/9179)).\n- 🤹 Dataframes support multi-index headers ([#9483](https://github.com/streamlit/streamlit/pull/9483), [#6319](https://github.com/streamlit/streamlit/issues/6319)).\n\n**Other Changes**\n\n- 🔑 Widget keys appear as HTML classes in the DOM with an `st-key-` prefix ([#9295](https://github.com/streamlit/streamlit/pull/9295), [#5437](https://github.com/streamlit/streamlit/issues/5437), [#3888](https://github.com/streamlit/streamlit/issues/3888)).\n- 🔍 The `StreamlitAPIException` class has been extended into more specific exceptions for some of the most common errors ([#9318](https://github.com/streamlit/streamlit/pull/9318)).\n- 🗺️ `st.map` and `st.pydeck_chart` have a full-screen toggle that matches the dataframe toolbar.\n- ⬆️ Frontend dependencies for Vega have been upgraded ([#9443](https://github.com/streamlit/streamlit/pull/9443), [#9438](https://github.com/streamlit/streamlit/issues/9438)).\n- 🕵️ Streamlit is compatible with Watchdog version 5 ([#9354](https://github.com/streamlit/streamlit/pull/9354)). Thanks, [RubenVanEldik](https://github.com/RubenVanEldik)!\n- 🔁 Streamlit is compatible with Tenacity version 9 ([#9348](https://github.com/streamlit/streamlit/pull/9348)).\n- 🔢 Bug fix: Column configuration will override any text or number format from `pandas.Styler` ([#9538](https://github.com/streamlit/streamlit/pull/9538), [#7329](https://github.com/streamlit/streamlit/issues/7329), [#7977](https://github.com/streamlit/streamlit/issues/7977)).\n- 🦋 Bug fix: Deck GL zoom button has the correct border radius ([#9536](https://github.com/streamlit/streamlit/pull/9536)).\n- 🦐 Bug fix: Embedded apps have the correct padding to avoid hiding elements ([#9524](https://github.com/streamlit/streamlit/pull/9524), [#9341](https://github.com/streamlit/streamlit/issues/9341)).\n- 🎨 Bug fix: The `st.multiselect` placeholder text has the correct color ([#9523](https://github.com/streamlit/streamlit/pull/9523), [#9514](https://github.com/streamlit/streamlit/issues/9514)).\n- 🧹 Bug fix: `st.json` scrolls horizontally instead of overflowing its container ([#9521](https://github.com/streamlit/streamlit/pull/9521), [#9520](https://github.com/streamlit/streamlit/issues/9520)).\n- 🌬️ Bug fix: Bokeh charts (temporarily) don't have a fullscreen button to prevent horizontal scrolling ([#9528](https://github.com/streamlit/streamlit/pull/9528), [#2358](https://github.com/streamlit/streamlit/issues/2358)).\n- 🐡 Bug fix: Users are correctly redirected if they add a trailing slash to a page URL ([#9500](https://github.com/streamlit/streamlit/pull/9500), [#9127](https://github.com/streamlit/streamlit/issues/9127)).\n- 📁 Bug fix: `st.Page` warns developers against using subdirectories in `url_path`, which is not supported ([#9499](https://github.com/streamlit/streamlit/pull/9499)).\n- 💩 Bug fix: Streamlit correctly calculates dataframe widths to prevent Minified React error #185: Maximum update depth exceeded ([#9490](https://github.com/streamlit/streamlit/pull/9490), [#7949](https://github.com/streamlit/streamlit/issues/7949)).\n- ☠️ Bug fix: ScriptRunContext handles the active script hash to avoid a race condition where widgets lose state in a multipage app ([#9441](https://github.com/streamlit/streamlit/pull/9441), [#9100](https://github.com/streamlit/streamlit/issues/9100)).\n- 🪱 Bug fix: PDFs don't appear as plain text when hosted through static file serving in Streamlit ([#9439](https://github.com/streamlit/streamlit/pull/9439), [#9425](https://github.com/streamlit/streamlit/issues/9425)).\n- 👻 Bug fix: Fragment elements don't disappear when used with custom components and callbacks ([#9381](https://github.com/streamlit/streamlit/pull/9381), [#9389](https://github.com/streamlit/streamlit/pull/9389), [#9372](https://github.com/streamlit/streamlit/issues/9372)).\n- 👽 Bug fix: Streamlit watches the correct directory for file changes ([#9453](https://github.com/streamlit/streamlit/pull/9453), [#7467](https://github.com/streamlit/streamlit/issues/7467)).\n- 🦀 Bug fix: The sidebar navigation uses page count to determine when to display a \"show more\" button for more consistent behavior ([#9394](https://github.com/streamlit/streamlit/pull/9394)).\n- 🦎 Bug fix: The internal script hash is updated at the beginning of a script run instead of the end for correct page routing when a script run is interrupted ([#9408](https://github.com/streamlit/streamlit/pull/9408), [#8975](https://github.com/streamlit/streamlit/issues/8975)).\n- 🐌 Bug fix: Bold formatting in headers is ignored ([#9395](https://github.com/streamlit/streamlit/pull/9395), [#4248](https://github.com/streamlit/streamlit/issues/4428)).\n- 🕸️ Bug fix: Streamlit correctly identifies the MIME type of more files to prevent custom components from not rendering ([#9390](https://github.com/streamlit/streamlit/pull/9390), [#9365](https://github.com/streamlit/streamlit/issues/9365)). Thanks, [t0mdavid-m](https://github.com/t0mdavid-m)!\n- 🦗 Bug fix: The `client.showSidebarNavigation` configuration option works correctly with `st.navigation` ([#9379](https://github.com/streamlit/streamlit/pull/9379)).\n- 🦂 Bug fix: Streamlit uses `example.com` instead of `test.com` in a health check to avoid unnecessary warnings ([#9371](https://github.com/streamlit/streamlit/pull/9371)). Thanks, [wyattscarpenter](https://github.com/wyattscarpenter)!\n- 🦟 Bug fix: `st.Page` will raise an error if it tries to initialize a page with an empty path ([#9374](https://github.com/streamlit/streamlit/pull/9374), [#8892](https://github.com/streamlit/streamlit/issues/8892)).\n- 🦠 Bug fix: An unchanged `st.dialog` can be programmatically reopened after a user has dismissed it ([#9333](https://github.com/streamlit/streamlit/pull/9333), [#9323](https://github.com/streamlit/streamlit/issues/9323)).\n- 🪰 Bug fix: Streamlit will not remove underscores from declared page titles in `st.Page` ([#9375](https://github.com/streamlit/streamlit/pull/9375), [#8890](https://github.com/streamlit/streamlit/issues/8890)).\n- 🪳 Bug fix: `st.logo` does not flicker when switching pages ([#9361](https://github.com/streamlit/streamlit/pull/9361), [#8815](https://github.com/streamlit/streamlit/issues/8815)).\n- 🕷️ Bug fix: `st.data_editor` allows users to re-add a row with the same index after deleting it ([#8864](https://github.com/streamlit/streamlit/pull/8864), [#8854](https://github.com/streamlit/streamlit/issues/8854)).\n- 🐞 Bug fix: `st.logo` maintains its aspect ratio when resized to fit within the sidebar width ([#9368](https://github.com/streamlit/streamlit/pull/9368)).\n- 🐝 Bug fix: Streamlit correctly removes `st.logo` if not called during a rerun ([#9337](https://github.com/streamlit/streamlit/pull/9337), [#9336](https://github.com/streamlit/streamlit/issues/9336)).\n- 🐜 Bug fix: `st.logo` does not flicker when the sidebar changes its state ([#9338](https://github.com/streamlit/streamlit/pull/9338)).\n- 🪲 Bug fix: Streamlit renders `st.balloons` and `st.snow` in a React Portal for improved rendering and compatibility with `st.dialog` ([#9335](https://github.com/streamlit/streamlit/pull/9335), [#9236](https://github.com/streamlit/streamlit/issues/9236)).\n- 🐛 Bug fix: Option labels are cleanly truncated when `st.multiselect` is displayed in a narrow container ([#9334](https://github.com/streamlit/streamlit/pull/9334), [#8213](https://github.com/streamlit/streamlit/issues/8213)).\n\n## **Version 1.38.0**\n\n_Release date: August 27, 2024_\n\n**Highlights**\n\n- 📈 Streamlit natively supports more dataframe formats! Use dataframe and series objects from popular libraries like Dask, Modin, Numpy, pandas, Polars, PyArrow, Snowpark, Xarray, and more. Use database cursors compliant with the Python Database API Specification 2.0. Use anything that supports the Python dataframe interchange protocol. See the [docs](/develop/api-reference/data/st.dataframe).\n\n**Notable Changes**\n\n- ↔️ You can control the initial expansion state of [`st.json`](/develop/api-reference/data/st.json) elements.\n- 🧑‍💻 You can choose to wrap lines in [`st.code`](/develop/api-reference/text/st.code).\n- 🕵️ Streamlit supports Kubernetes style secrets so you can use Snowflake Snowpark Container Services secret format ([#9078](https://github.com/streamlit/streamlit/pull/9078)).\n- ⤴️ Breaking change: We removed a patch that allows custom validators in `pydantic<2.0` ([#9257](https://github.com/streamlit/streamlit/pull/9257)).\n- 💔 Breaking change: We removed the experimental cache replay feature from caching decorators ([#9305](https://github.com/streamlit/streamlit/pull/9305)).\n\n**Other Changes**\n\n- 🌐 For better app efficiency, a WebSocket reconnect will not trigger a rerun unless a script run was interrupted ([#9083](https://github.com/streamlit/streamlit/pull/9083)).\n- 👋 We updated our `streamlit hello` app to use Google Material icons.\n- ⌨️ `st.number_input`, `st.selectbox`, `st.slider`, `st.select_slider`, and [`st.radio`](http://st.radio) provide more precise type hinting for their return values ([#9048](https://github.com/streamlit/streamlit/pull/9048), [#9296](https://github.com/streamlit/streamlit/pull/9296), [#8717](https://github.com/streamlit/streamlit/issues/8717)). Thanks, [Asaurus1](https://github.com/Asaurus1)!\n- ⭐ [`st.feedback`](http://st.feedback) provides more precise type hinting for its return value ([#9216](https://github.com/streamlit/streamlit/pull/9216)). Thanks, [wyattscarpenter](https://github.com/wyattscarpenter)!\n- 💅 We improved theme management for embedded apps via `postMessage` ([#9103](https://github.com/streamlit/streamlit/pull/9103)).\n- 🌱 Bug fix: Within the sidebar, the image for `st.logo` resizes along with the sidebar width ([#9298](https://github.com/streamlit/streamlit/pull/9298), [#8707](https://github.com/streamlit/streamlit/issues/8707)).\n- 🪹 Bug fix: When a parent fragment updates, Streamlit cleans up child fragments correctly ([#9246](https://github.com/streamlit/streamlit/pull/9246), [#9233](https://github.com/streamlit/streamlit/issues/9233), [#9267](https://github.com/streamlit/streamlit/issues/9267)).\n- 💩 Bug fix: Elements unstale within a fragment rerun as they are updated instead of all together at the end of the fragment rerun ([#9285](https://github.com/streamlit/streamlit/pull/9285)).\n- 🪱 Bug fix: If a block type changes during a rerun, Streamlit discards the child elements of that block to prevent improper visual artifacts, like `st.tabs` causing a blank page ([#9276](https://github.com/streamlit/streamlit/pull/9276), [#9259](https://github.com/streamlit/streamlit/issues/9259), [#8676](https://github.com/streamlit/streamlit/issues/8676)).\n- ☠️ Bug fix: Widget state is preserved when page reruns are interrupted with another rerun ([#9187](https://github.com/streamlit/streamlit/pull/9187), [#9163](https://github.com/streamlit/streamlit/issues/9163)). Thanks, [dannyopts](https://github.com/dannyopts)!\n- 👽 Bug fix: `options` in `st.selectbox`, `st.multiselect`, `st.radio`, and `st.select_slider` correctly use `dict_items` ([#9241](https://github.com/streamlit/streamlit/pull/9241), [#9237](https://github.com/streamlit/streamlit/issues/9237), [#5377](https://github.com/streamlit/streamlit/issues/5377)).\n- 👻 Bug fix: A `SelectboxColumn` index will show with the correct, grayed-out styling in a dataframe ([#9231](https://github.com/streamlit/streamlit/pull/9231), [#8772](https://github.com/streamlit/streamlit/issues/8772)).\n- 🦀 Bug fix: `st.write_stream` will not immediately fail when receiving an empty chunk ([#9234](https://github.com/streamlit/streamlit/pull/9234), [#9227](https://github.com/streamlit/streamlit/issues/9227)).\n- 🦋 Bug fix: Streamlit won't auto-scroll to an empty anchor, if present ([#9206](https://github.com/streamlit/streamlit/pull/9206), [#9203](https://github.com/streamlit/streamlit/issues/9203)).\n- 🦎 Bug fix: We changed the handling of `scriptRunId` to prevent `st.tabs` from showing extra, empty tabs in fragments ([#9186](https://github.com/streamlit/streamlit/pull/9186), [#9158](https://github.com/streamlit/streamlit/issues/9158), [#9215](https://github.com/streamlit/streamlit/pull/9215)).\n- 🐌 Bug fix: Automatically rerunning fragments don't raise `FragmentStorageKeyError` to prevent a possible race condition ([#9183](https://github.com/streamlit/streamlit/pull/9183), [#9080](https://github.com/streamlit/streamlit/issues/9080)).\n- 🕸️ Bug fix: We improved `st.plotly_chart`'s handling of the pass-through keyword argument `config` ([#9190](https://github.com/streamlit/streamlit/pull/9190), [#9134](https://github.com/streamlit/streamlit/issues/9134)).\n- 🦗 Bug fix: Markdown in all `label` parameters correctly ignores headers ([#9189](https://github.com/streamlit/streamlit/pull/9189), [#9141](https://github.com/streamlit/streamlit/issues/9141)).\n- 🦂 Bug fix: We reverted a change to fragments which caused some widgets to lose state in some circumstances ([#9178](https://github.com/streamlit/streamlit/pull/9178), [#9171](https://github.com/streamlit/streamlit/issues/9171)).\n- 🦟 Bug fix: The deprecation warnings for `st.experimental_fragment` and `st.experimental_dialog` only show when the commands are called. This prevents custom components which use them from raising premature warnings on import ([#9170](https://github.com/streamlit/streamlit/pull/9170), [#9143](https://github.com/streamlit/streamlit/issues/9143)).\n- 🦠 Bug fix: `st.code` shows syntax highlighting for diff code when `language=\"diff\"` ([#9172](https://github.com/streamlit/streamlit/pull/9172), [#8687](https://github.com/streamlit/streamlit/issues/8687)).\n- 🪰 Bug fix: Streamlit commands that raise `ScriptControlException` execute as expected in try-except blocks ([#9167](https://github.com/streamlit/streamlit/pull/9167), [#9155](https://github.com/streamlit/streamlit/issues/9155), [#9182](https://github.com/streamlit/streamlit/issues/9182)).\n- 🪳 Bug fix: The `value` for `st.date_input` has the correct type for linting ([#9149](https://github.com/streamlit/streamlit/pull/9149)). Thanks, [wyattscarpenter](https://github.com/wyattscarpenter)!\n- 🕷️ Bug fix: We updated `plotly.js` to support `hoversubplots=\"axis\"` ([#9144](https://github.com/streamlit/streamlit/pull/9144), [#9118](https://github.com/streamlit/streamlit/issues/9118)).\n- 🐞 Bug fix: We stabilized the identity of [`st.map`](http://st.map) instances so the command doesn't create multiple maps when its parameters are updated ([#9092](https://github.com/streamlit/streamlit/pull/9092), [#8329](https://github.com/streamlit/streamlit/issues/8329)).\n- 🐝 Bug fix: You can now clear the cache for cached class instance methods ([#9101](https://github.com/streamlit/streamlit/pull/9101), [#8638](https://github.com/streamlit/streamlit/issues/8638)).\n- 🐜 Bug fix: Copy buttons work correctly in dialogs ([#9130](https://github.com/streamlit/streamlit/pull/9130), [#9112](https://github.com/streamlit/streamlit/issues/9112)).\n- 🪲 Bug fix: Streamlit magic works consistently in for-else, while-else, try-else, try-except, and match blocks ([#9110](https://github.com/streamlit/streamlit/pull/9110), [#9109](https://github.com/streamlit/streamlit/issues/9109)). Thanks, [whitphx](https://github.com/whitphx)!\n- 🐛 Bug fix: When printing an app, the bottom container will always print at the end without overlapping other content ([#9129](https://github.com/streamlit/streamlit/pull/9129)).\n\n## **Version 1.37.0**\n\n_Release date: July 25, 2024_\n\n**Highlights**\n\n- 🍪 Introducing [`st.context`](/develop/api-reference/utilities/st.context) to read headers and cookies!\n- ⭐ Introducing [`st.feedback`](/develop/api-reference/widgets/st.feedback) to collect ratings and sentiment from your users!\n- 👟 Announcing the general availability of [`st.fragment`](/develop/api-reference/execution-flow/st.fragment), a decorator that lets you rerun functions independently of the whole page.\n- 🍿 Announcing the general availability of [`st.dialog`](/develop/api-reference/execution-flow/st.dialog), a decorator that lets you create modal dialogs.\n\n**Notable Changes**\n\n- ℹ️ You can use icons from the Material Symbols library in [Markdown](/develop/api-reference/text/st.markdown)!\n- 📈 You can pass `graphviz.Source` objects to [`st.graphviz_chart`](/develop/api-reference/charts/st.graphviz_chart).\n- 📊 You can modify the stacking behavior for [`st.bar_chart`](/develop/api-reference/charts/st.bar_chart) and [`st.area_chart`](/develop/api-reference/charts/st.area_chart).\n- 🔭 Within a fragment, you can scope [`st.rerun`](/develop/api-reference/execution-flow/st.rerun) to the fragment.\n- 🪺 Streamlit supports nested fragments ([#8931](https://github.com/streamlit/streamlit/pull/8931), [#8635](https://github.com/streamlit/streamlit/issues/8635)).\n- 📞 Fragments can be used in callback functions ([#8916](https://github.com/streamlit/streamlit/pull/8916), [#8591](https://github.com/streamlit/streamlit/issues/8591)).\n\n**Other Changes**\n\n- ⭕ Material Symbols are rounded instead of outlined ([#8998](https://github.com/streamlit/streamlit/pull/8998)).\n- 🔢 Streamlit supports Numpy version 2.0 ([#8940](https://github.com/streamlit/streamlit/pull/8940)).\n- 😄 We've updated emoji validation for new emojis ([#8923](https://github.com/streamlit/streamlit/pull/8923)).\n- 👻 We've removed several experimental commands with new, generally available versions ([#8943](https://github.com/streamlit/streamlit/pull/8943)).\n- ☠️ We've removed deprecated configuration options per their announced expiration date ([#9005](https://github.com/streamlit/streamlit/pull/9005), [#9013](https://github.com/streamlit/streamlit/pull/9013), [#9018](https://github.com/streamlit/streamlit/pull/9018)).\n- 🦎 Bug fix: Nested fragments rerun correctly when a child fragment precedes a widget in the parent fragment ([#9114](https://github.com/streamlit/streamlit/pull/9114)).\n- 🐌 Bug fix: Streamlit validates file paths before performing additional checks when using static file serving for improved security ([#8990](https://github.com/streamlit/streamlit/pull/8990)).\n- 🕸️ Bug fix: [`st.map`](http://st.map) displays at the correct width inside `st.expander` ([#9070](https://github.com/streamlit/streamlit/pull/9070), [#8004](https://github.com/streamlit/streamlit/issues/8004)).\n- 🦗 Bug fix: Streamlit displays the correct (Windows) path for `secrets.toml` in an error message ([#9061](https://github.com/streamlit/streamlit/pull/9061), [#6147](https://github.com/streamlit/streamlit/issues/6147)).\n- 🦂 Bug fix: `st.switch_page` correctly clears non-embed query parameters when the user switches pages ([#9059](https://github.com/streamlit/streamlit/pull/9059), [#9050](https://github.com/streamlit/streamlit/issues/9050)).\n- 🦟 Bug fix: Custom themes display correctly for multipage elements like `st.page_link` ([#8994](https://github.com/streamlit/streamlit/pull/8994), [#8978](https://github.com/streamlit/streamlit/issues/8978)).\n- 🦠 Bug fix: `st.snow` and `st.balloons` don't show in prints ([#9053](https://github.com/streamlit/streamlit/pull/9053), [#7790](https://github.com/streamlit/streamlit/issues/7790)).\n- 🪰 Bug fix: We've improved the default formatting for `st.number_input` ([#9035](https://github.com/streamlit/streamlit/pull/9035), [#7163](https://github.com/streamlit/streamlit/issues/7163)).\n- 🪳 Bug fix: An `st.navigation` example was corrected ([#9027](https://github.com/streamlit/streamlit/pull/9027), [#9026](https://github.com/streamlit/streamlit/issues/9026)). Thanks, [mahotd](https://github.com/mahotd)!\n- 🕷️ Bug fix: Dialogs no longer have a brief delay when closing ([#9023](https://github.com/streamlit/streamlit/pull/9023), [#8747](https://github.com/streamlit/streamlit/issues/8747)).\n- 🦀 Bug fix: Streamlit correctly raises a `KeyError` when encountered in a fragment instead of a misleading, fragment-related error ([#9011](https://github.com/streamlit/streamlit/pull/9011), [#8494](https://github.com/streamlit/streamlit/issues/8494)).\n- 🐞 Bug fix: Streamlit doesn't clear `MediaFileManager` on fragment reruns to prevent invalid references ([#9010](https://github.com/streamlit/streamlit/pull/9010), [#8932](https://github.com/streamlit/streamlit/issues/8932)).\n- 🐝 Bug fix: Custom themes are correctly removed when deleted ([#8989](https://github.com/streamlit/streamlit/pull/8989), [#8962](https://github.com/streamlit/streamlit/issues/8962)).\n- 🐜 Bug fix: Streamlit supports non-unix style paths for correct multipage routing in Windows ([#8988](https://github.com/streamlit/streamlit/pull/8988), [#8958](https://github.com/streamlit/streamlit/issues/8958)).\n- 🪲 Bug fix: Using `st.rerun` in a fragment will not cause the app's main body content to render in the fragment in rare events ([#8798](https://github.com/streamlit/streamlit/pull/8798)).\n- 🐛 Bug fix: When an exception is raised within a fragment, Streamlit shows the error message within the fragment ([#8868](https://github.com/streamlit/streamlit/pull/8868)).\n\n## **Version 1.36.0**\n\n_Release date: June 20, 2024_\n\n**Highlights**\n\n- 🧭 Introducing [`st.navigation`](/develop/api-reference/navigation/st.navigation) and [`st.Page`](/develop/api-reference/navigation/st.page) for a new way to define multipage apps! Check out the [docs](/develop/concepts/multipage-apps/overview) to learn more.\n\n**Notable Changes**\n\n- 📊 [`st.bar_chart`](/develop/api-reference/charts/st.bar_chart) can render charts horizontally.\n- ℹ️ [`st.expander`](/develop/api-reference/layout/st.expander) supports adding an icon next to its label.\n- 🏗️ [`st.columns`](/develop/api-reference/layout/st.columns) lets you set vertical alignment.\n- 📲 Custom components support callback functions ([#8633](https://github.com/streamlit/streamlit/pull/8633), [#3977](https://github.com/streamlit/streamlit/issues/3977)).\n- 📥 Fragments no longer support rendering widgets outside of their main body ([#8756](https://github.com/streamlit/streamlit/pull/8756)).\n- 🏷️ You can now customize axis labels for [`st.area_chart`](/develop/api-reference/charts/st.area_chart), [`st.bar_chart`](/develop/api-reference/charts/st.bar_chart), [`st.line_chart`](/develop/api-reference/charts/st.line_chart), and [`st.scatter_chart`](/develop/api-reference/charts/st.scatter_chart).\n- ⌛ The caching parameter `experimental_allow_widgets` is deprecated ([#8817](https://github.com/streamlit/streamlit/pull/8817)).\n- ❌ Streamlit no longer supports legacy caching. `st.cache` is now an alias for `st.cache_data` and `st.cache_resource` ([#8737](https://github.com/streamlit/streamlit/pull/8737)).\n- ⬆️ Streamlit supports `protobuf` version 5 ([#8627](https://github.com/streamlit/streamlit/pull/8627)).\n\n**Other Changes**\n\n- ✨ Streamlit Hello uses `st.navigation` and `st.Page`, the new, preferred method for declaring multipage apps ([#8806](https://github.com/streamlit/streamlit/pull/8806)).\n- 🧹 Streamlit no longer appends \"· Streamlit\" to the page title of apps, unless running on Community Cloud ([#8900](https://github.com/streamlit/streamlit/pull/8900)).\n- 🦋 Streamlit magic and `st.write` use `st.json` to display `st.secrets` ([#8659](https://github.com/streamlit/streamlit/pull/8659), [#2905](https://github.com/streamlit/streamlit/issues/2905)).\n- 🔍 Streamlit doesn't automatically check for newer version on PyPi ([#8841](https://github.com/streamlit/streamlit/pull/8841), [#8453](https://github.com/streamlit/streamlit/issues/8453)).\n- 🐌 Bug fix: Custom component functions require importing `streamlit.components.v1` ([#8666](https://github.com/streamlit/streamlit/pull/8666), [#8644](https://github.com/streamlit/streamlit/issues/8644)).\n- 🕸️ Bug fix: Reverted change to handle Altairs `resolve_scale` method since it caused a regression ([#8845](https://github.com/streamlit/streamlit/pull/8845), [#8642](https://github.com/streamlit/streamlit/issues/8642)).\n- 🦗 Bug fix: Images in Markdown do not overflow the Markdown container ([#8794](https://github.com/streamlit/streamlit/pull/8794)).\n- 🦂 Bug fix: Clarified the error message for `st.selectbox` when `index` is larger than the size of `options` ([#8775](https://github.com/streamlit/streamlit/pull/8775), [#8771](https://github.com/streamlit/streamlit/issues/8771)).\n- 🦟 Bug fix: Streamlit correctly handles non-widget elements with IDs ([#8770](https://github.com/streamlit/streamlit/pull/8770), [#8768](https://github.com/streamlit/streamlit/issues/8768)).\n- 🦠 Bug fix: Docstrings correctly identify when `use_container_width=True` is the default ([#8809](https://github.com/streamlit/streamlit/pull/8809)).\n- 🪰 Bug fix: Streamlit has a consistent minimum element height for better vertical alignment ([#8797](https://github.com/streamlit/streamlit/pull/8797), [#8835](https://github.com/streamlit/streamlit/pull/8835), [#8027](https://github.com/streamlit/streamlit/issues/8027), [#8706](https://github.com/streamlit/streamlit/issues/8706)).\n- 🪳 Bug fix: Added check to ensure `SessionInfo` is initialized before performing actions ([#8779](https://github.com/streamlit/streamlit/pull/8779), [#8321](https://github.com/streamlit/streamlit/issues/8321), [#7549](https://github.com/streamlit/streamlit/issues/7549)).\n- 🕷️ Bug fix: Dataframe use raw numbers without formatting by default ([#8708](https://github.com/streamlit/streamlit/pull/8708), [#8695](https://github.com/streamlit/streamlit/issues/8695)).\n- 🐞 Bug fix: Updated the error message for disallowed writes to Session State ([#8720](https://github.com/streamlit/streamlit/pull/8720), [#8715](https://github.com/streamlit/streamlit/issues/8715)).\n- 🐝 Bug fix: Streamlit doesn't initialize `LocalSourcesWatcher` if file watching is disabled ([#8741](https://github.com/streamlit/streamlit/pull/8741), [#8738](https://github.com/streamlit/streamlit/issues/8738)).\n- 🐜 Bug fix: `st.experimental_dialog` no longer has an invalid default value for `title` ([#8729](https://github.com/streamlit/streamlit/pull/8729)).\n- 🪲 Bug fix: Removed deprecated kwargs in [`ast.Call`](http://ast.Call) to prevent type error ([#8711](https://github.com/streamlit/streamlit/pull/8711)). Thanks, [JelleZijlstra](https://github.com/JelleZijlstra)!\n- 🐛 Bug fix: `st.experimental_dialog` is explicitly exported to avoid a type checking error ([#8728](https://github.com/streamlit/streamlit/pull/8728), [#8712](https://github.com/streamlit/streamlit/issues/8712)).\n\n## **Version 1.35.0**\n\n_Release date: May 23, 2024_\n\n**Highlights**\n\n- 📈 Announcing user selections for charts! Use [`st.plotly_chart`](/develop/api-reference/charts/st.plotly_chart), [`st.altair_chart`](/develop/api-reference/charts/st.altair_chart), and [`st.vega_lite_chart`](/develop/api-reference/charts/st.vega_lite_chart) to make chart widgets for even more interactive apps.\n- 🚣‍♂️ Announcing user selections for dataframes. Get row and column selections from users with [`st.dataframe`](/develop/api-reference/data/st.dataframe).\n- 💼 Introducing [`st.logo`](/develop/api-reference/media/st.logo) to add an image in the sidebar, above navigation.\n\n**Notable Changes**\n\n- 🔗 [`st.page_link`](/develop/api-reference/widgets/st.page_link) supports Material icons ([#8593](https://github.com/streamlit/streamlit/pull/8593)).\n- ⚓ Anchor button for headers display inline at the end of headers for a more beautiful and consistent appearance ([#8587](https://github.com/streamlit/streamlit/pull/8587)).\n- 🈂️ [`SQLConnection`](/develop/api-reference/connections/st.connections.sqlconnection) accepts `query` as a `sqlalchemy.URL.create` parameter so you can specify character sets ([#8581](https://github.com/streamlit/streamlit/pull/8581)). Thanks, [LucianLiu6](https://github.com/LucianLiu6)!\n\n**Other Changes**\n\n- 🕸️ Bug fix: A fallback method was added for CSV downloads to increase browser compatibility ([#8452](https://github.com/streamlit/streamlit/pull/8452), [#8210](https://github.com/streamlit/streamlit/issues/8210)).\n- 🦗 Bug fix: Column config is deep-copied when cloned to prevent unintentional modifications ([#8677](https://github.com/streamlit/streamlit/pull/8677)).\n- 🦂 Bug fix: `st.data_editor` renders correctly when using `num_rows=dynamic` with null values in added rows ([#8640](https://github.com/streamlit/streamlit/pull/8640), [#7458](https://github.com/streamlit/streamlit/issues/7458)).\n- 🦟 Bug fix: `streamlit run` will display the `localhost` address when initializing Streamlit with `server.headless=true` ([#8647](https://github.com/streamlit/streamlit/pull/8647), [#8629](https://github.com/streamlit/streamlit/issues/8629)).\n- 🦠 Bug fix: Scroll margin matches the new toolbar (app chrome) height ([#8641](https://github.com/streamlit/streamlit/pull/8641), [#8554](https://github.com/streamlit/streamlit/pull/8554)).\n- 🪰 Bug fix: Enum coercion is compatible with StrEnum ([#8622](https://github.com/streamlit/streamlit/pull/8622), [#8500](https://github.com/streamlit/streamlit/issues/8500)). Thanks, [97k](https://github.com/97k)!\n- 🪳 Bug fix: Focus is returned to chat input after clicking submit for a better mobile experience ([#8637](https://github.com/streamlit/streamlit/pull/8637)).\n- 🕷️ Bug fix: Internal parameter and view names for Altair charts are stabilized for better performance ([#8628](https://github.com/streamlit/streamlit/pull/8628)).\n- 🐞 Bug fix: Typing was improved for `st.query_params.update()` and `st.query_params.from_dict()` ([#8614](https://github.com/streamlit/streamlit/pull/8614), [#8613](https://github.com/streamlit/streamlit/issues/8613)). Thanks, [Asaurus1](https://github.com/Asaurus1)!\n- 🐝 Bug fix: The fullscreen button no longer appears for `st.table` to prevent unwanted side scrolling ([#8621](https://github.com/streamlit/streamlit/pull/8621), [#2358](https://github.com/streamlit/streamlit/issues/2358)).\n- 🐜 Bug fix: Streamlit correctly clears stale elements when using `st.rerun` ([#8599](https://github.com/streamlit/streamlit/pull/8599), [#8360](https://github.com/streamlit/streamlit/issues/8360)).\n- 🪲 Bug fix: Custom components can be executed standalone for testing and scripting ([#8620](https://github.com/streamlit/streamlit/pull/8620), [#8606](https://github.com/streamlit/streamlit/issues/8606)).\n- 👻 Bug fix: Plotly charts no longer render cached data when updated ([#8191](https://github.com/streamlit/streamlit/pull/8191), [#5902](https://github.com/streamlit/streamlit/issues/5902))\n- 👽 Plotly chart widths will not overflow its parent container when rendered in a bordered container ([#8191](https://github.com/streamlit/streamlit/pull/8191), [#8244](https://github.com/streamlit/streamlit/issues/8244)).\n- 🦀 Plotly charts using `webgl` render correctly on M1/M2 chipsets for macOS ([#8191](https://github.com/streamlit/streamlit/pull/8191), [#8169](https://github.com/streamlit/streamlit/issues/8169)).\n- 🦋 Plotly charts are sized correctly when rendered vertically adjacent ([#8191](https://github.com/streamlit/streamlit/pull/8191), [#7597](https://github.com/streamlit/streamlit/issues/7597)).\n- 🦎 Bug fix: Plotly charts retain their state when the app window is resized ([#8191](https://github.com/streamlit/streamlit/pull/8191), [#6324](https://github.com/streamlit/streamlit/issues/6324)).\n- 🐛 Bug fix: Plotly charts in `st.tabs` no longer flicker when changing tabs ([#8191](https://github.com/streamlit/streamlit/pull/8191), [#8575](https://github.com/streamlit/streamlit/issues/8575)).\n- 🐌 Bug fix: Plotly charts respect `use_container_width` if this parameter is changed between reruns ([#8191](https://github.com/streamlit/streamlit/pull/8191), [#8576](https://github.com/streamlit/streamlit/issues/8576)).\n\n## **Version 1.34.0**\n\n_Release date: May 2, 2024_\n\n**Highlights**\n\n- 🍿 Introducing `st.experimental_dialog`! Create a modal overlay that can also rerun independently from the rest of your app. Check out the [docs](/develop/api-reference/execution-flow/st.dialog) to learn how.\n\n**Notable Changes**\n\n- 🔣 `st.toast`, `st.chat_message`, `st.set_page_config`, `st.info`, `st.success`, `st.error`, and `st.warning` can use Google Material Symbols for their icons.\n- 🌈 [Markdown](/develop/api-reference/text/st.markdown) supports background colors for text. Check out the [feature demo app](https://background-colors.streamlit.app/).\n- 🎥 [`st.audio`](/develop/api-reference/media/st.audio) and [`st.video`](/develop/api-reference/media/st.video) can now be set to autoplay. `st.video` can be muted.\n- 🗃️ You can [clear specific cached values](/develop/api-reference/caching-and-state/st.cache_data#cachedfuncclear) for a cached function. Thanks, [OscarSaharoy](https://github.com/OscarSaharoy)!\n- ❓ You can now set all query parameters with a single call to [`st.query_params.from_dict`](/develop/api-reference/caching-and-state/st.query_params#stquery_paramsfrom_dict). Thanks, [Asaurus1](https://github.com/Asaurus1)!\n\n**Other Changes**\n\n- 🔲 Streamlit supports Modin and Snowpark pandas DataFrames and Series ([#8506](https://github.com/streamlit/streamlit/pull/8506)).\n- ⏱️ Improved support for `period` data types in `st.dataframe` and `st.data_editor` ([#7987](https://github.com/streamlit/streamlit/pull/7987)).\n- 🗺️ Streamlit supports using `pydeck-carto` with `st.pydeck_chart` ([#8422](https://github.com/streamlit/streamlit/pull/8422)).\n- ❄️ Additional `snowflake` requirements were updated to allow Python versions 3.8 to 3.11 ([#8538](https://github.com/streamlit/streamlit/pull/8538)).\n- 🍞 `st.toast` received visual improvements and now appears in the top right ([#8433](https://github.com/streamlit/streamlit/pull/8433)).\n- 🦋 Visual tweaks for dialogs and modals.\n- 🦀 Bug fix: `st.write_stream` returns an empty string when passed a generator with no yield ([#8560](https://github.com/streamlit/streamlit/pull/8560)).\n- 🦎 Bug fix: Widgets that support `None` values can be correctly set to `None` through Session State ([#8529](https://github.com/streamlit/streamlit/pull/8529), [#7649](https://github.com/streamlit/streamlit/issues/7649)).\n- 🐌 Bug fix: If the initial value for `st.date_input` is not set and today's date falls outside the declared minimum or maximum, then the minimum or maximum will be used instead, whichever is closer ([#8519](https://github.com/streamlit/streamlit/pull/8519), [#6167](https://github.com/streamlit/streamlit/issues/6167)).\n- 🕸️ Bug fix: Altair's `resolve_scale` method is handled correctly ([#8497](https://github.com/streamlit/streamlit/pull/8497), [#1667](https://github.com/streamlit/streamlit/issues/1667)).\n- 🦗 Bug fix: `st.multiselects` correctly handles sets when passed to `options` or `default` ([#8471](https://github.com/streamlit/streamlit/pull/8471), [#8466](https://github.com/streamlit/streamlit/issues/8466)).\n- 🦂 Bug fix: `st.status` does not show the expander toggle when empty ([#8369](https://github.com/streamlit/streamlit/pull/8369)).\n- 🦟 Bug fix: The width of `vconcat` charts in Vega and Altair is set correctly ([#8498](https://github.com/streamlit/streamlit/pull/8498), [#2751](https://github.com/streamlit/streamlit/issues/2751)).\n- 🦠 Bug fix: Apps print beautifully and no longer show excessive whitespace ([#8502](https://github.com/streamlit/streamlit/pull/8502), [#7815](https://github.com/streamlit/streamlit/issues/7815)).\n- 🪰 Bug fix: Invalid escape sequences were removed to avoid warnings from `pytest` ([#8510](https://github.com/streamlit/streamlit/pull/8510), [#8501](https://github.com/streamlit/streamlit/issues/8501)).\n- 🪳 Bug fix: `st.file_uploader` callback is correctly executed once per file selection after the first selection ([#8493](https://github.com/streamlit/streamlit/pull/8493), [#4877](https://github.com/streamlit/streamlit/issues/4877)).\n- 🕷️ Bug fix: Streamlit is compatible down to `pillow` version 7.1.0 instead of 9.1.0 ([#8492](https://github.com/streamlit/streamlit/pull/8492), [#8486](https://github.com/streamlit/streamlit/issues/8486)).\n- 🐞 Bug fix: Widget values are correctly dropped when a script run is interrupted by switching pages ([#8425](https://github.com/streamlit/streamlit/pull/8425), [#7338](https://github.com/streamlit/streamlit/issues/7338)).\n- 🐝 Bug fix: Apps in dark mode will return to dark mode after printing ([#8469](https://github.com/streamlit/streamlit/pull/8469), [#7879](https://github.com/streamlit/streamlit/issues/7879)).\n- 🐜 Bug fix: Component ready state is dynamic to avoid race conditions that caused blank apps in Safari ([#8434](https://github.com/streamlit/streamlit/pull/8434), [#8362](https://github.com/streamlit/streamlit/issues/8362)).\n- 🪲 Bug fix: `st.slider` yields a Python error when `min_value` is less than or equal to `max_value` ([#8413](https://github.com/streamlit/streamlit/pull/8413), [#8342](https://github.com/streamlit/streamlit/issues/8342)).\n- 🐛 Bug fix: Time is offset correctly for Vega and Altair ([#8278](https://github.com/streamlit/streamlit/pull/8278), [#4342](https://github.com/streamlit/streamlit/issues/4342)).\n\n## **Version 1.33.0**\n\n_Release date: April 4, 2024_\n\n**Highlights**\n\n- 👟 Introducing [`st.experimental_fragment`](/develop/api-reference/execution-flow/st.fragment) to decorate functions and rerun them independently of the whole page. Check out the [docs](/develop/concepts/architecture/fragments) and give your apps a speed boost!\n- 🌐 Introducing `st.html` to insert custom HTML into your app! Check out the [docs](/develop/api-reference/utilities/st.html) for how to use it.\n\n**Notable Changes**\n\n- 📺 [`st.audio`](/develop/api-reference/media/st.audio) and [`st.video`](/develop/api-reference/media/st.video) allow looping and setting an end time ([#8203](https://github.com/streamlit/streamlit/pull/8203), [#8348](https://github.com/streamlit/streamlit/pull/8348)).\n- 🔁 `AppTest` allows switching pages with [`AppTest.switch_page`](/develop/api-reference/app-testing/st.testing.v1.apptest#apptestswitch_page) ([#8280](https://github.com/streamlit/streamlit/pull/8280)).\n- 🧪 `format_func` is accessible in `AppTest` for widgets that use it ([#8189](https://github.com/streamlit/streamlit/pull/8189), [#8019](https://github.com/streamlit/streamlit/issues/8019), [#7679](https://github.com/streamlit/streamlit/issues/7679)).\n- 📈 Column configuration now includes [`AreaChartColumn`](/develop/api-reference/data/st.column_config/st.column_config.areachartcolumn). [`LineChartColumn`](/develop/api-reference/data/st.column_config/st.column_config.linechartcolumn) no longer shows area ([#8237](https://github.com/streamlit/streamlit/pull/8237)).\n- 🚧 Breaking change: [`st.write`](/develop/api-reference/write-magic/st.write) will no longer set `unsafe_allow_html=True` when passed an object containing a `_repr_html_` method. For more information, see PR [#8238](https://github.com/streamlit/streamlit/pull/8238).\n\n**Other Changes**\n\n- 🖱️Users can click on the widget label to focus on input for `st.number_input`, `st.text_input`, and `st.text_area` ([#8155](https://github.com/streamlit/streamlit/pull/8155)). Thanks, [filiptammergard](https://github.com/filiptammergard)!\n- ⬆️ Streamlit supports `packaging` version 24.x ([#8338](https://github.com/streamlit/streamlit/pull/8338), [#8328](https://github.com/streamlit/streamlit/issues/8328)).\n- 🕸️ Bug fix: Streamlit now watches for changes to imported modules in addition to pages ([#8372](https://github.com/streamlit/streamlit/pull/8372)). Thanks, [zyxue](https://github.com/zyxue)!\n- 🦗 Bug fix: Overflowing toast messages are correctly truncated ([#8337](https://github.com/streamlit/streamlit/pull/8337), [#8330](https://github.com/streamlit/streamlit/issues/8330)).\n- 🦂 Bug fix: `st.status` correctly updates to complete when using LangChain's `StreamlitCallbackHandler` ([#8331](https://github.com/streamlit/streamlit/pull/8311)).\n- 🦟 Bug fix: Custom components no longer show white backgrounds in dark themes ([#8242](https://github.com/streamlit/streamlit/pull/8242), [#8156](https://github.com/streamlit/streamlit/issues/8156), [#7813](https://github.com/streamlit/streamlit/issues/7813)).\n- 🦠 Bug fix: Content area width is reduced when a fullscreen icon would otherwise cause horizontal overflow ([#8279](https://github.com/streamlit/streamlit/pull/8279), [#6990](https://github.com/streamlit/streamlit/issues/6990)).\n- 🪰 Bug fix: Custom components with undefined frame heights will render with a height of 0 ([#8290](https://github.com/streamlit/streamlit/pull/8290), [#8285](https://github.com/streamlit/streamlit/issues/8285)).\n- 🪳 Bug fix: Restored a check for active sessions to prevent apps from needlessly running when no users are connected ([#8294](https://github.com/streamlit/streamlit/pull/8294)).\n- 🕷️ Bug fix: Custom themes have precedence over embedding options ([#8021](https://github.com/streamlit/streamlit/pull/8021), [#7118](https://github.com/streamlit/streamlit/issues/7118)).\n- 🐞 Bug fix: Reverted the async timer to expire session storage cache to address computational efficiency ([#8281](https://github.com/streamlit/streamlit/pull/8281)).\n- 🐝 Bug fix: When using `st.popover` with `use_container_width=True`, the popover container's minimum width will match the popover button ([#8266](https://github.com/streamlit/streamlit/pull/8266), [#8261](https://github.com/streamlit/streamlit/issues/8261)).\n- 🐜 Bug fix: Using `st.rerun` with a triggering widget in `AppTest` no longer creates an infinite loop ([#8264](https://github.com/streamlit/streamlit/pull/8264), [#7768](https://github.com/streamlit/streamlit/issues/7768)).\n- 🪲 Bug fix: URLs are correctly decoded in `LinkColumn` if regex is used or if not using fully qualified URLs ([#8258](https://github.com/streamlit/streamlit/pull/8258), [#7064](https://github.com/streamlit/streamlit/issues/7064)).\n- 🐛 Bug fix: `st.query_params` only sends one `ForwardMsg` when updating multiple parameters ([#8205](https://github.com/streamlit/streamlit/pull/8205), [#8199](https://github.com/streamlit/streamlit/issues/8199)). Thanks, [Asaurus1](https://github.com/Asaurus1)!\n\n## **Version 1.32.0**\n\n_Release date: March 7, 2024_\n\n**Highlights**\n\n- 🍿 Introducing `st.popover` to create popover elements in your Streamlit apps. Check out [the docs](/develop/api-reference/layout/st.popover) to see how to use it!\n\n**Notable Changes**\n\n- 📺 You can now pass subtitles to [`st.video`](/develop/api-reference/media/st.video)! Check out our [feature demo](https://doc-video-subtitle-inputs.streamlit.app/).\n- ⚗️ [`AppTest`](/develop/api-reference/app-testing/st.testing.v1.apptest) includes support for `st.expander` and `st.status`.\n- 🧪 [`AppTest.from_function`](/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_function) accepts a function that takes arguments and/or returns a value.\n- 🧩 The timeout warning for custom components was replaced with an element skeleton to improve the UX for slow-loading components, especially in some cloud-hosted platforms ([#8179](https://github.com/streamlit/streamlit/pull/8179), [#7046](https://github.com/streamlit/streamlit/issues/7046)).\n- 📄 `st.switch_page` and `st.page_link` received significant improvements to path handling, performance, and visual appearance (see below for details).\n- 🦀 Bug fix: Streamlit uses `glide-data-grid` version 6.0.4 to fix a variety of dataframe issues ([#7779](https://github.com/streamlit/streamlit/pull/7779), [#6900](https://github.com/streamlit/streamlit/issues/6900), [#7032](https://github.com/streamlit/streamlit/issues/7032), [#7727](https://github.com/streamlit/streamlit/issues/7727), [#6810](https://github.com/streamlit/streamlit/issues/6810), [#7930](https://github.com/streamlit/streamlit/issues/7930), [#7949](https://github.com/streamlit/streamlit/issues/7949), [#7831](https://github.com/streamlit/streamlit/issues/7831), [#8168](https://github.com/streamlit/streamlit/issues/8168)).\n- 💦 Bug fix: We've plugged a significant memory leak in the coroutine loop. Apps that generate a large number of small messages between client and server will benefit greatly ([#8068](https://github.com/streamlit/streamlit/pull/8068), [#7989](https://github.com/streamlit/streamlit/issues/7989), [#6510](https://github.com/streamlit/streamlit/issues/6510)).\n\n**Other Changes**\n\n- 💪 Multiple modules are now lazy-loaded to speed up Streamlit's import time ([#8150](https://github.com/streamlit/streamlit/pull/8150), [#8143](https://github.com/streamlit/streamlit/pull/8143), [#8134](https://github.com/streamlit/streamlit/pull/8134), [#8113](https://github.com/streamlit/streamlit/pull/8113), [#8125](https://github.com/streamlit/streamlit/pull/8125), [#8111](https://github.com/streamlit/streamlit/pull/8111), [#8109](https://github.com/streamlit/streamlit/pull/8109), [#6066](https://github.com/streamlit/streamlit/issues/6066)).\n- 🖼️ `st.write` supports `PIL` images ([#8039](https://github.com/streamlit/streamlit/pull/8039)).\n- 🔗 `st.radio` allows markdown links within the items passed to `options` ([#8028](https://github.com/streamlit/streamlit/pull/8028), [#7992](https://github.com/streamlit/streamlit/issues/7992)).\n- 💀 The `deprecation.showPyplotGlobalUse` config option is deprecated and will be removed in the subsequent release ([#8133](https://github.com/streamlit/streamlit/pull/8133)).\n- 🤖 Streamlit supports AzureOpenAI chat stream ([#8107](https://github.com/streamlit/streamlit/pull/8107), [#8084](https://github.com/streamlit/streamlit/issues/8084)).\n- 🌐 The `/healthz` endpoint supports the HTTP HEAD method ([#8145](https://github.com/streamlit/streamlit/pull/8145), [#8144](https://github.com/streamlit/streamlit/issues/8144)). Thanks, [rahulmistri1997](https://github.com/rahulmistri1997)!\n- 🌀 The `cache` parameter for `st.spinner` is now private (`_cache`) since it's for internal use ([#8118](https://github.com/streamlit/streamlit/pull/8118)).\n- 🏃 Session storage is checked and expired asynchronously to improve performance and efficiency of apps with lower traffic ([#8083](https://github.com/streamlit/streamlit/pull/8083)).\n- 🐜 `st.write_stream` raises a descriptive `Exception` when the message cannot be parsed ([#8036](https://github.com/streamlit/streamlit/pull/8036)).\n- 📘 Fixed a typo in the examples for `st.switch_page` and `st.page_link` ([#8162](https://github.com/streamlit/streamlit/pull/8162)). Thanks, [t1emp0](https://github.com/t1emp0)!\n- 👻 Bug fix: `st.help` correctly displays conditional members ([#8228](https://github.com/streamlit/streamlit/pull/8228)).\n- 🦋 Bug fix: App State fully clears on page change to prevent lingering stale elements ([#8208](https://github.com/streamlit/streamlit/pull/8208)).\n- 🦎 Bug fix: `st.info`, `st.success`, `st.warning`, and `st.error` don't overflow with long markdown strings ([#8194](https://github.com/streamlit/streamlit/pull/8194), [#6394](https://github.com/streamlit/streamlit/issues/6394)).\n- 🐌 Bug fix: Streamlit shows a warning that port 3000 is reserved for development when the server port is set to 3000 ([#8152](https://github.com/streamlit/streamlit/pull/8152), [#8149](https://github.com/streamlit/streamlit/issues/8149)).\n- 🕸️ Bug fix: `st.page_link` and `st.switch_page` have improved path calculation for consistency ([#8127](https://github.com/streamlit/streamlit/pull/8127)).\n- 🦗 Bug fix: `st.page_link` shows the correct path in browser on hover ([#8086](https://github.com/streamlit/streamlit/pull/8086), [#8080](https://github.com/streamlit/streamlit/issues/8080)).\n- 🦂 Bug fix: `st.page_link` and `st.switch_page` normalize paths for correct handling in Windows ([#8103](https://github.com/streamlit/streamlit/pull/8103), [#8070](https://github.com/streamlit/streamlit/issues/8070)).\n- 🦟 Bug fix: Script runner uses a while loop instead of recursion to avoid stack overflows ([#8100](https://github.com/streamlit/streamlit/pull/8100)).\n- 🦠 Bug fix: `st.page_link` and `st.switch_page` correctly handle relative paths prefixed with `\"/\"` ([#8085](https://github.com/streamlit/streamlit/pull/8085), [#8081](https://github.com/streamlit/streamlit/issues/8081)).\n- 🪰 Bug fix: `st.image` parses paths in Windows correctly ([#8092](https://github.com/streamlit/streamlit/pull/8092), [#7271](https://github.com/streamlit/streamlit/issues/7271), [#6066](https://github.com/streamlit/streamlit/issues/6066)).\n- 🪳 Bug fix: `st.switch_page` no longer waits for the current page to finish running before switching pages ([#8054](https://github.com/streamlit/streamlit/pull/8054), [#7954](https://github.com/streamlit/streamlit/issues/7954)).\n- 🕷️ Bug fix: `st.map` and other simple charts correctly handle color when data is not indexed starting from 0 ([#8158](https://github.com/streamlit/streamlit/pull/8158), [#8079](https://github.com/streamlit/streamlit/pull/8079), [#8077](https://github.com/streamlit/streamlit/issues/8077)). Thanks, [awhazell](https://github.com/awhazell)!\n- 🐞 Bug fix: `st.selectbox`, `st.multiselect`, `st.select_slider`, and `st.radio` use shallow copies of their options to prevent unexpected mutations ([#8064](https://github.com/streamlit/streamlit/pull/8064), [#7534](https://github.com/streamlit/streamlit/issues/7534)).\n- 🐝 Bug fix: The selected time in `st.time_input` displays correctly in dark mode ([#8056](https://github.com/streamlit/streamlit/pull/8056), [#7436](https://github.com/streamlit/streamlit/issues/7436)).\n- 🪲 Bug fix: Dataframe scrollbars display correctly in the latest version of Chrome ([#8034](https://github.com/streamlit/streamlit/pull/8034)).\n- 🐛 Bug fix: Casting `st.query_params` to `str` will print the content of the query parameters instead of the class description ([#8030](https://github.com/streamlit/streamlit/pull/8030)).\n\n## **Version 1.31.0**\n\n_Release date: February 1, 2024_\n\n**Release videos**\n\n- [What's new?](https://www.youtube.com/watch?v=0TSXM-BGqHU)\n\n**Highlights**\n\n- 🔗 Introducing `st.page_link`! Now, you can build custom navigation menus for your multipage apps. Check out [our docs](/develop/api-reference/widgets/st.page_link) to see how.\n- 💦 Announcing `st.write_stream` to conveniently handle generators and streamed responses. Check out [our docs](/develop/api-reference/write-magic/st.write_stream) to see how making chat apps just got easier.\n\n**Notable Changes**\n\n- 📝 `st.chat_input` can be used inline and placed anywhere in the app. You can also have multiple `st.chat_input` widgets on a page ([#7896](https://github.com/streamlit/streamlit/pull/7896)).\n\n**Other Changes**\n\n- 🧹 Internal refactoring and cleanup ([#7980](https://github.com/streamlit/streamlit/pull/7980)). Thanks, [whitphx](https://github.com/whitphx)!\n- ❄️ Bug fix: Snowpark is now an optional dependency for `SnowflakeConnection` ([#7919](https://github.com/streamlit/streamlit/pull/7919)).\n- 🕷️ Bug fix: The watchdog suggestion is disabled when `server.fileWatcherType` is set to `none` or `poll` ([#8024](https://github.com/streamlit/streamlit/pull/8024), [#7999](https://github.com/streamlit/streamlit/issues/7999)).\n- 🐞 Bug fix: Required columns can be hidden when not using `st.data_editor` with dynamic rows ([#7996](https://github.com/streamlit/streamlit/pull/7996), [#7991](https://github.com/streamlit/streamlit/issues/7991)).\n- 🐝 Bug fix: New period types are supported for pandas 2.2.0 ([#7988](https://github.com/streamlit/streamlit/pull/7988)).\n- 🐜 Bug fix: Custom components receive only the app's origin and path to avoid reloading components when query parameters change ([#7951](https://github.com/streamlit/streamlit/pull/7951), [#7503](https://github.com/streamlit/streamlit/issues/7503)). Thanks, [eric-skydio](https://github.com/eric-skydio)!\n- 🪲 Bug fix: `st.progress` won't raise an exception when given a value above 1.0 due to float precision ([#7953](https://github.com/streamlit/streamlit/pull/7953), [#5517](https://github.com/streamlit/streamlit/issues/5517)). Thanks, [notiona](https://github.com/notiona)!\n- 📚 Streamlit supports`importlib-metadata` version 7 ([#7925](https://github.com/streamlit/streamlit/pull/7925)). Thanks, [elgalu](https://github.com/elgalu)!\n- 🐛 Bug fix: `AppTest` correctly sees widgets inside containers ([#7923](https://github.com/streamlit/streamlit/pull/7923), [#7711](https://github.com/streamlit/streamlit/issues/7711)).\n- 💿 Custom components no longer accumulate style elements when re-rendered for better performance ([#7914](https://github.com/streamlit/streamlit/pull/7914)). Thanks, [Tom-Julux](https://github.com/Tom-Julux)!\n\n## **Version 1.30.0**\n\n_Release date: January 11, 2024_\n\n**Release videos**\n\n- [What's new?](https://www.youtube.com/watch?v=OIQskkX_DK0)\n\n**Highlights**\n\n- 🔄 Announcing `st.switch_page` to programmatically switch pages in multipage apps! Check out our [docs](/develop/api-reference/navigation/st.switch_page) to learn about this highly anticipated feature!\n- ❓Introducing `st.query_params` to handle variables passed through your app's URL. Check out our [docs](/develop/api-reference/caching-and-state/st.query_params) to understand this feature and how it's been upgraded and improved from our experimental version!\n\n**Notable Changes**\n\n- 📐 `st.container` can be configured with a height to create grids or scrolling containers ([#7697](https://github.com/streamlit/streamlit/pull/7697), [#2169](https://github.com/streamlit/streamlit/issues/2169), [#2447](https://github.com/streamlit/streamlit/issues/2447)).\n- 🔗 For dataframes, `LinkColumn` has a simplified UI and can be configured with display text, including programmatically defined text through regular expressions ([#7784](https://github.com/streamlit/streamlit/pull/7784), [#7741](https://github.com/streamlit/streamlit/pull/7741), [#6787](https://github.com/streamlit/streamlit/issues/6787)).\n- 🧭 Sidebar navigation for multipage apps can be hidden via configuration ([#7852](https://github.com/streamlit/streamlit/pull/7852)).\n- ⏩ Plotly figures can load even faster when used in combination with `orjson` ([#7860](https://github.com/streamlit/streamlit/pull/7860)). Thanks, [eric-skydio](https://github.com/eric-skydio)!\n- ♻️ Behavior change: Query parameters are removed when changing pages ([#7817](https://github.com/streamlit/streamlit/pull/7817), [#6725](https://github.com/streamlit/streamlit/issues/6725), [#5505](https://github.com/streamlit/streamlit/issues/5505)).\n\n**Other Changes**\n\n- 🛠️ `showFooter` is no longer an embed option since the footer no longer exists ([#7902](https://github.com/streamlit/streamlit/pull/7902), [#7785](https://github.com/streamlit/streamlit/issues/7785)).\n- 🕵️ All security concerns should be reported through [HackerOne](https://hackerone.com/snowflake?type=team) ([#7783](https://github.com/streamlit/streamlit/pull/7783)).\n- 🕷️ Bug fix: Tabs are not disabled when stale to prevent flickering ([#7905](https://github.com/streamlit/streamlit/pull/7905), [#7820](https://github.com/streamlit/streamlit/issues/7820)).\n- 🛡️ Bug fix: The full file path is used instead of a prefix to prevent custom components from reaching beyond their own folders ([#7901](https://github.com/streamlit/streamlit/pull/7901)).\n- 🪱 Bug fix: Widgets raise an exception if its values aren't Python comparable ([#7840](https://github.com/streamlit/streamlit/pull/7840), [#3714](https://github.com/streamlit/streamlit/issues/3714)).\n- 🐞 Bug fix: The down-arrow icons on expanders maintain a consistent size ([#7596](https://github.com/streamlit/streamlit/pull/7596)). Thanks, [matiboux](https://github.com/matiboux)!\n- 🐝 Bug fix: Tabs no longer flicker when switching between them ([#7904](https://github.com/streamlit/streamlit/pull/7904)).\n- 🐜 Bug fix: Enter-to-submit is automatically disabled when the associated `st.form_submit_button` is disabled ([#7827](https://github.com/streamlit/streamlit/pull/7827), [#7822](https://github.com/streamlit/streamlit/issues/7822)).\n- 🪲 Bug fix: Required columns cannot be hidden with column configuration ([#7888](https://github.com/streamlit/streamlit/pull/7888), [#7559](https://github.com/streamlit/streamlit/issues/7559)).\n- 🐛 Bug fix: Using `nan` as a value in `SelectboxColumn` will raise an error instead of silently failing ([#7887](https://github.com/streamlit/streamlit/pull/7887), [#7558](https://github.com/streamlit/streamlit/issues/7558)).\n- 🌙 Bug fix: Custom component iframes allow dark mode ([#7821](https://github.com/streamlit/streamlit/pull/7821), [#7813](https://github.com/streamlit/streamlit/issues/7813)).\n- 🪰 Bug fix: The command to start Streamlit is not sent to the frontend ([#7787](https://github.com/streamlit/streamlit/pull/7787)).\n- 💅 Bug fix: The background color of `st.toggle` is enhanced for better visibility ([#7788](https://github.com/streamlit/streamlit/pull/7788)).\n- 🪳 Bug fix: Built-in charts can handle ordered categorical columns ([#7771](https://github.com/streamlit/streamlit/pull/7771), [#7776](https://github.com/streamlit/streamlit/issues/7776))."
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023",
    "content": "# 2023 release notes\n\nThis page contains release notes for Streamlit versions released in 2023. For the latest version of Streamlit, see [Release notes](/develop/quick-reference/release-notes).\n\n## **Version 1.29.0**\n\n_Release date: November 30, 2023_\n\n**Highlights**\n\n- 🔲 [`st.container`](/develop/api-reference/layout/st.container) and [`st.form`](/develop/api-reference/execution-flow/st.form) now have a `border` parameter to show or hide a border.\n- 🐍 Streamlit supports Python 3.12!\n\n**Notable Changes**\n\n- ⌛ `st.dataframe`, `st.data_editor`, and `st.table` support `datetime.timedelta` values ([#7689](https://github.com/streamlit/streamlit/pull/7689), [#4489](https://github.com/streamlit/streamlit/issues/4489)).\n- 💀 Streamlit apps preload skeleton elements for a smoother appearance when initializing ([#7598](https://github.com/streamlit/streamlit/pull/7598)).\n- 🏃 Reduced the overhead of running `AppTest`-simulated apps, especially for fast-running apps ([#7691](https://github.com/streamlit/streamlit/pull/7691)).\n- 🛁 String representations of `AppTest` data are improved for a better testing and debugging experience ([#7658](https://github.com/streamlit/streamlit/pull/7658)).\n- 🔢 Apps can be configured to identify `Enum` classes as the same if they have matching member names ([#7408](https://github.com/streamlit/streamlit/pull/7408), [#4909](https://github.com/streamlit/streamlit/issues/4909)). Thanks, [Asaurus1](https://github.com/Asaurus1)!\n- ❌ The \"Made with Streamlit\" footer no longer appears at the bottom of apps ([#7583](https://github.com/streamlit/streamlit/pull/7583)).\n- 🧹 Unused config options have been deprecated ([#7584](https://github.com/streamlit/streamlit/pull/7584)).\n- 🕳️ Query parameters can be empty ([#7601](https://github.com/streamlit/streamlit/pull/7601), [#7416](https://github.com/streamlit/streamlit/issues/7416)).\n- 💅 Visual tweaks ([#7592](https://github.com/streamlit/streamlit/pull/7592), [#7630](https://github.com/streamlit/streamlit/pull/7630)).\n\n**Other Changes**\n\n- 🦗 Bug fix: Convert floats to bytes instead of hashing to avoid hashing instability ([#7754](https://github.com/streamlit/streamlit/pull/7754)). Thanks, [BlackHC](https://github.com/BlackHC)!\n- 🦎 Bug fix: Corrected broken URLs and typos in error messages ([#7746](https://github.com/streamlit/streamlit/pull/7746), [#7764](https://github.com/streamlit/streamlit/pull/7764), [#7770](https://github.com/streamlit/streamlit/pull/7770)). Thanks, [ObservedObserver](https://github.com/ObservedObserver)!\n- 🐌 Bug fix: `st.connection` correctly caches results when using two connections of the same type ([#7730](https://github.com/streamlit/streamlit/pull/7730), [#7709](https://github.com/streamlit/streamlit/issues/7709)).\n- 🕸️ Bug fix: Using context managers with multithreading now displays content in the expected order ([#7715](https://github.com/streamlit/streamlit/pull/7715), [#7668](https://github.com/streamlit/streamlit/issues/7668)). Thanks, [eric-skydio](https://github.com/eric-skydio)!\n- 🦂 Bug fix: Added https fallback when obtaining the host machine's address ([#7712](https://github.com/streamlit/streamlit/pull/7712), [#7703](https://github.com/streamlit/streamlit/issues/7703)). Thanks, [LarsHill](https://github.com/LarsHill)!\n- 🛡️ Bug fix: Added security patch for `pyarrow` vulnerability. Custom components using `pyarrow` table deserialization should require `pyarrow>=14.0.1` ([#7695](https://github.com/streamlit/streamlit/pull/7695), [#7700](https://github.com/streamlit/streamlit/issues/7700)).\n- 🦟 Bug fix: Improved typing for `st.connection` ([#7671](https://github.com/streamlit/streamlit/pull/7671)). Thanks, [thezanke](https://github.com/thezanke)!\n- 🪰 Bug fix: Retries of `SnowflakeConnection` methods are narrowed to only occur with transient errors to avoid unnecessary repeated errors ([#7645](https://github.com/streamlit/streamlit/pull/7645), [#7637](https://github.com/streamlit/streamlit/issues/7637)).\n- 🏗️ Removed the v0 testing framework which was undocumented ([#7657](https://github.com/streamlit/streamlit/pull/7657)).\n- 🪳 Bug fix: The navigation expander arrow no longer disappears ([#7634](https://github.com/streamlit/streamlit/pull/7634), [#7547](https://github.com/streamlit/streamlit/issues/7547)).\n- ❄️ Improved the error message for `SnowflakeConnection` when a configuration is not found ([#7652](https://github.com/streamlit/streamlit/pull/7652)).\n- 🕷️ Bug fix: `st.rerun` no longer causes a `RecursionError` when used with `st.chat_input` ([#7643](https://github.com/streamlit/streamlit/pull/7643), [#7629](https://github.com/streamlit/streamlit/issues/7629)).\n- 🐞 Bug fix: `st.file_uploader` no longer causes an extra rerun and therefore doesn't conflict with `st.chat_input` ([#7641](https://github.com/streamlit/streamlit/pull/7641), [#7556](https://github.com/streamlit/streamlit/issues/7556)).\n- 🐝 Bug fix: `AppTest` no longer raises an error when encountering `st.container` ([#7644](https://github.com/streamlit/streamlit/pull/7644), [#7636](https://github.com/streamlit/streamlit/issues/7636)).\n- 🪲 Bug fix: Graphviz charts scale correctly when exiting fullscreen view ([#7398](https://github.com/streamlit/streamlit/pull/7398), [#7527](https://github.com/streamlit/streamlit/issues/6527)).\n- 🎥 Bug fix: \"Record a screencast\" is hidden when known to be unsupported in a browser ([#7604](https://github.com/streamlit/streamlit/pull/7604)).\n- 🐛 Bug fix: Increased the top padding of embedded apps to better display the dataframe toolbar ([#7681](https://github.com/streamlit/streamlit/pull/7681), [#7609](https://github.com/streamlit/streamlit/pull/7609), [#7607](https://github.com/streamlit/streamlit/issues/7607)).\n- 🐜 Bug fix: `st.rerun` uses `NoReturn` for improved type checking ([#7422](https://github.com/streamlit/streamlit/pull/7422)) Thanks, [kongzii](https://github.com/kongzii).\n\n## **Version 1.28.0**\n\n_Release date: October 26, 2023_\n\n**Release videos**\n\n- [Introducing `AppTest`](https://www.youtube.com/watch?v=99OEoP5sy0U)\n\n**Highlights**\n\n- 🧪 Introducing a new testing framework for Streamlit apps! Check out our [documentation](/develop/api-reference/app-testing) to learn how to build automated tests for your apps.\n- 💻 Announcing the general availability of `st.connection`, a command to conveniently manage connections in Streamlit apps. Check out the [docs](/develop/api-reference/connections/st.connection) to learn more.\n- ❄️ `SnowparkConnection` has been upgraded to the new and improved `SnowflakeConnection` — the same, great functionality _plus more_! Check out our [built-in connections](/develop/api-reference/connections#built-in-connections).\n- 🛠️ `st.dataframe` and `st.data_editor` have a new toolbar! Users can search and download data in addition to enjoying improved UI for row additions and deletions. See our updated guide on [Dataframes](/develop/concepts/design/dataframes).\n\n**Notable Changes**\n\n- 🌀 When using a spinner with cached functions, the spinner will be overlaid instead of pushing content down ([#7488](https://github.com/streamlit/streamlit/pull/7488)).\n- 📅 `st.data_editor` now supports datetime index editing ([#7483](https://github.com/streamlit/streamlit/pull/7483)).\n- 🔢 Improved support for `decimal.Decimal` in `st.dataframe` and `st.data_editor` ([#7475](https://github.com/streamlit/streamlit/pull/7475)).\n- 🥸 Global kwargs were added for `hashlib` ([#7527](https://github.com/streamlit/streamlit/pull/7527), [#7526](https://github.com/streamlit/streamlit/issues/7526)). Thanks, [DueViktor](https://github.com/DueViktor)!\n- 📋 `st.components.v1.iframe` now permits writing to clipboard ([#7487](https://github.com/streamlit/streamlit/pull/7487)). Thanks, [dilipthakkar](https://github.com/dilipthakkar)!\n- 📝 `SafeSessionState` disconnect was replaced with script runner yield points for improved efficiency and clarity ([#7373](https://github.com/streamlit/streamlit/pull/7373)).\n- 🤖 The Langchain callback handler will show the full input string inside the body of a `st.status` when the input string is too long to show as a label ([#7478](https://github.com/streamlit/streamlit/pull/7478)). Thanks, [pokidyshev](https://github.com/pokidyshev)!\n- 📈 `st.graphviz_chart` now supports using different Graphviz layout engines ([#7505](https://github.com/streamlit/streamlit/pull/7505), [#4089](https://github.com/streamlit/streamlit/issues/4089)).\n- 🦋 Assorted visual tweaks ([#7486](https://github.com/streamlit/streamlit/pull/7486), [#7592](https://github.com/streamlit/streamlit/pull/7592)).\n- 📊 `plotly.js` was upgraded to version 2.26.1 ([#7449](https://github.com/streamlit/streamlit/pull/7449), [#7476](https://github.com/streamlit/streamlit/issues/7476), [#7045](https://github.com/streamlit/streamlit/issues/7045)).\n- 💽 Legacy serialization for DataFrames was removed. All DataFrames will be serialized by Apache Arrow ([#7429](https://github.com/streamlit/streamlit/pull/7429)).\n- 🖼️ Compatibility for Pillow 10.x was added ([#7442](https://github.com/streamlit/streamlit/pull/7442)).\n- 📬 Migrated `_stcore/allowed-message-origins` endpoint to `_stcore/host-config` ([#7342](https://github.com/streamlit/streamlit/pull/7342)).\n- 💬 Added `post_parent_message` platform command to send custom messages from a Streamlit app to its parent window ([#7522](https://github.com/streamlit/streamlit/pull/7522)).\n\n**Other Changes**\n\n- ⌨️ Improved string dtype handling for DataFrames ([#7479](https://github.com/streamlit/streamlit/pull/7479)).\n- ✒️ `st.write` will avoid using `unsafe_allow_html=True` if possible ([#7432](https://github.com/streamlit/streamlit/pull/7432)).\n- 🐛 Bug fix: Implementation of `st.expander` was simplified for improved behavior and consistency ([#7247](https://github.com/streamlit/streamlit/pull/7247), [#2839](https://github.com/streamlit/streamlit/issues/2839), [#4111](https://github.com/streamlit/streamlit/issues/4111), [#4651](https://github.com/streamlit/streamlit/issues/4651), [#5604](https://github.com/streamlit/streamlit/issues/5604)).\n- 🪲 Bug fix: Multipage links in the sidebar are now aligned with other sidebar elements ([#7531](https://github.com/streamlit/streamlit/pull/7531)).\n- 🐜 Bug fix: `st.chat_input` won't incorrectly prompt for `label` parameter in IDEs ([#7560](https://github.com/streamlit/streamlit/pull/7560)).\n- 🐝 Bug fix: Scroll bars correctly overlay `st.dataframe` and `st.data_editor` without adding empty space ([#7090](https://github.com/streamlit/streamlit/pull/7090), [#6888](https://github.com/streamlit/streamlit/issues/6888)).\n- 🐞 Bug fix: `st.chat_message` behaves correctly with the removal of AutoSizer ([#7504](https://github.com/streamlit/streamlit/pull/7504), [#7473](https://github.com/streamlit/streamlit/issues/7473)).\n- 🕷️ Bug fix: Anchor links are reliably produced for non-English headers ([#7454](https://github.com/streamlit/streamlit/pull/7454), [#5291](https://github.com/streamlit/streamlit/issues/5291)).\n- ☃️ Bug fix: `st.connections.SnowparkConnection` more accurately detects when it's running within Streamlit in Snowflake ([#7502](https://github.com/streamlit/streamlit/pull/7502)).\n- 🪳 Bug fix: A user-friendly warning is shown when exceeding the size limitations of a pandas `Styler` object ([#7497](https://github.com/streamlit/streamlit/pull/7497), [#5953](https://github.com/streamlit/streamlit/issues/5953)).\n- 🪰 Bug fix: `st.data_editor` automatically converts non-string column names to strings ([#7485](https://github.com/streamlit/streamlit/pull/7485), [#6950](https://github.com/streamlit/streamlit/issues/6950)).\n- 🦠 Bug fix: `st.data_editor` correctly identifies non-range indices as a required column ([#7481](https://github.com/streamlit/streamlit/pull/7481), [#6995](https://github.com/streamlit/streamlit/issues/6995)).\n- 🦟 Bug fix: `st.file_uploader` displays compound file extensions like `csv.gz` correctly ([#7362](https://github.com/streamlit/streamlit/pull/7362)). Thanks, [mo42](https://github.com/mo42)!\n- 🦂 Bug fix: Column Configuration no longer uses deprecated type checks ([#7496](https://github.com/streamlit/streamlit/pull/7496), [#7477](https://github.com/streamlit/streamlit/pull/7477), [#7550](https://github.com/streamlit/streamlit/issues/7550)). Thanks, [c-bik](https://github.com/c-bik)!\n- 🦗 Bug fix: Additional toolbar items no longer stack vertically ([#7470](https://github.com/streamlit/streamlit/pull/7470), [#7471](https://github.com/streamlit/streamlit/issues/7471)).\n- 🕸️ Bug fix: Column Configuration no longer causes a type warning in Mypy ([#7457](https://github.com/streamlit/streamlit/pull/7457)). Thanks, [kopp](https://github.com/kopp)!\n- 🐌 Bug fix: Bokeh Sliders no longer cause JavaScript errors ([#7441](https://github.com/streamlit/streamlit/pull/7441), [#7171](https://github.com/streamlit/streamlit/issues/7171)).\n- 🦎 Bug fix: Caching now recognizes DataFrames with the same values but different column names as different ([#7331](https://github.com/streamlit/streamlit/pull/7331), [#7086](https://github.com/streamlit/streamlit/issues/7086)).\n\n## **Version 1.27.0**\n\n_Release date: September 21, 2023_\n\n**Highlights**\n\n- ✨ Introducing `st.scatter_chart` — a new, simple chart element to build scatter charts Streamlit-y fast and easy! See our [documentation](/develop/api-reference/charts/st.scatter_chart).\n- 🔗 Introducing `st.link_button`! Want to open an external link in a new tab with a bit more pizazz than a plain-text link? Check out our [documentation](/develop/api-reference/widgets/st.link_button) to see how.\n- 🏃 Announcing the general availability of [`st.rerun`](/develop/api-reference/execution-flow/st.rerun), a command to interrupt your script and trigger an immediate rerun.\n\n**Notable Changes**\n\n- 👻 You can initialize widgets with an empty state by setting `None` as an initial value for [`st.number_input`](/develop/api-reference/widgets/st.number_input), [`st.selectbox`](/develop/api-reference/widgets/st.selectbox), [`st.date_input`](/develop/api-reference/widgets/st.date_input), [`st.time_input`](/develop/api-reference/widgets/st.time_input), [`st.radio`](/develop/api-reference/widgets/st.radio), [`st.text_input`](/develop/api-reference/widgets/st.text_input), and [`st.text_area`](/develop/api-reference/widgets/st.text_area)!\n- 📤 [`st.download_button`](/develop/api-reference/widgets/st.download_button) now uses `target=\"_self\"` instead of opening a new tab ([#7151](https://github.com/streamlit/streamlit/pull/7151), [#7132](https://github.com/streamlit/streamlit/issues/7132)).\n- 🧟 Removed unmaintained `pympler` dependency ([#7193](https://github.com/streamlit/streamlit/pull/7193), [#7131](https://github.com/streamlit/streamlit/issues/7131)). Thanks, [rudyardrichter](https://github.com/rudyardrichter)!\n\n**Other Changes**\n\n- 🐛 Bug fix: `st.multiselect` now shows a correct message when no result matches a user's search ([#7205](https://github.com/streamlit/streamlit/pull/7205), [#7116](https://github.com/streamlit/streamlit/issues/7116)).\n- 🪲 Bug fix: `st.experimental_user` now defaults to `test@example.com` ([#7219](https://github.com/streamlit/streamlit/pull/7219), [#7215](https://github.com/streamlit/streamlit/issues/7215)).\n- 🐜 Bug fix: `st.slider` labels don't overlap when small ranges are selected ([#7221](https://github.com/streamlit/streamlit/pull/7221), [#3385](https://github.com/streamlit/streamlit/issues/3385)).\n- 🐝 Bug fix: Type-checking correctly identifies all string types to avoid hashing errors ([#7255](https://github.com/streamlit/streamlit/pull/7255), [#6455](https://github.com/streamlit/streamlit/issues/6455)).\n- 🐞 Bug fix: JSON is parsed with JSON5 to avoid errors from null values when using `st.pydeck_chart` ([#7256](https://github.com/streamlit/streamlit/pull/7256), [#5799](https://github.com/streamlit/streamlit/issues/5799)).\n- 🕷️ Bug fix: Identical widgets on different pages are correctly interpreted by Streamlit as distinct ([#7264](https://github.com/streamlit/streamlit/pull/7264), [#6146](https://github.com/streamlit/streamlit/issues/6146)).\n- 🦋 Bug fix: Visual tweaks to widgets for responsive behavior ([#7145](https://github.com/streamlit/streamlit/pull/7145)).\n- 🪳 Bug fix: SVGs are accurately displayed ([#7183](https://github.com/streamlit/streamlit/pull/7183), [#3882](https://github.com/streamlit/streamlit/issues/3882)).\n- 🪰 Bug fix: `st.video` correctly updates with changes to `start_time` ([#7257](https://github.com/streamlit/streamlit/pull/7257), [#7126](https://github.com/streamlit/streamlit/issues/7126)).\n- 🦠 Bug fix: Additional error handling was added to `st.session_state` ([#7280](https://github.com/streamlit/streamlit/pull/7280), [#7206](https://github.com/streamlit/streamlit/issues/7206)).\n- 🦟 Bug fix: `st.map` correctly refreshes with new data ([#7307](https://github.com/streamlit/streamlit/pull/7307), [#7294](https://github.com/streamlit/streamlit/issues/7294)).\n- 🦂 Bug fix: The decorative app header line is no longer covered by the sidebar ([#7297](https://github.com/streamlit/streamlit/pull/7297), [#6264](https://github.com/streamlit/streamlit/issues/6264)).\n- 🦗 Bug fix: `st.code` no longer triggers a `CachedStFunctionWarning` ([#7306](https://github.com/streamlit/streamlit/pull/7306), [#7055](https://github.com/streamlit/streamlit/issues/7055)).\n- 🕸️ Bug fix: `st.download_button` no longer resets with different `data` ([#7316](https://github.com/streamlit/streamlit/pull/7316), [#7308](https://github.com/streamlit/streamlit/issues/7308)).\n- 🐌 Bug fix: Widgets consistently recognize user interaction while a page is still running, with or without `fastRerun` enabled ([#7283](https://github.com/streamlit/streamlit/pull/7283), [#6643](https://github.com/streamlit/streamlit/issues/6643)).\n- 🦎 Bug fix: `st.tabs` was improved to better handle and render conditionally appearing tabs ([#7287](https://github.com/streamlit/streamlit/pull/7287), [#7310](https://github.com/streamlit/streamlit/pull/7310), [#5454](https://github.com/streamlit/streamlit/issues/5454), [#7040](https://github.com/streamlit/streamlit/issues/7040)).\n\n## **Version 1.26.0**\n\n_Release date: August 24, 2023_\n\n**Highlights**\n\n- 🤖 Introducing `st.status` to display output from long-running processes and external API calls ([#7140](https://github.com/streamlit/streamlit/pull/7140)). Works great with `st.chat_message`! See our [documentation](/develop/api-reference/status/st.status) for how to use this feature.\n- 🚥 Introducing [`st.toggle`](/develop/api-reference/widgets/st.toggle) — an alternative to `st.checkbox` when you need an on/off switch.\n\n**Notable Changes**\n\n- 🎨 Simple [chart elements](/develop/api-reference/charts) have a `color` parameter to set the color of your data points or series ([#7022](https://github.com/streamlit/streamlit/pull/7022)).\n- 🌈 [Markdown](/develop/api-reference/text/st.markdown) supports rainbow and gray colors ([#7106](https://github.com/streamlit/streamlit/pull/7106), [#7179](https://github.com/streamlit/streamlit/pull/7179)).\n- 📏 [`st.header`](/develop/api-reference/text/st.header) and [`st.subheader`](/develop/api-reference/text/st.subheader) have optional, colored dividers ([#7133](https://github.com/streamlit/streamlit/pull/7133)).\n- 🚀 Deploying to Community Cloud is even easier—locally running apps have a [deploy button](/develop/concepts/architecture/app-chrome#deploy-this-app) in their toolbars ([#7085](https://github.com/streamlit/streamlit/pull/7085), [#6935](https://github.com/streamlit/streamlit/issues/6935)).\n- 🖌️ [`st.download_button`](/develop/api-reference/widgets/st.download_button) has a new parameter `type` for theming ([#7056](https://github.com/streamlit/streamlit/pull/7056), [#7038](https://github.com/streamlit/streamlit/issues/7038)).\n- 🤖 [`st.chat_message`](/develop/api-reference/chat/st.chat_message) has ai and human presets for messages ([#7094](https://github.com/streamlit/streamlit/pull/7094)).\n- 💅 [`st.radio`](/develop/api-reference/widgets/st.radio) options support markdown and have captions ([#7018](https://github.com/streamlit/streamlit/pull/7018), [#7105](https://github.com/streamlit/streamlit/pull/7105), [#6085](https://github.com/streamlit/streamlit/issues/6085)).\n- 🧼 Assorted visual tweaks ([#7050](https://github.com/streamlit/streamlit/pull/7050), [#894](https://github.com/streamlit/streamlit/issues/894)).\n- 🛏️ Replaced deprecated `imghdr` dependency with `pillow` ([#7081](https://github.com/streamlit/streamlit/pull/7081), [#7027](https://github.com/streamlit/streamlit/issues/7027)).\n- 🔢 [`st.number_input`](/develop/api-reference/widgets/st.number_input)'s step buttons (+/-) are ignored during tabbing navigation ([#7154](https://github.com/streamlit/streamlit/pull/7154)). Thanks [@denck007](https://github.com/denck007)!\n\n**Other Changes**\n\n- 🍞 Bug fix: Toast messages are no longer blocked by `st.chat_input` ([#7204](https://github.com/streamlit/streamlit/pull/7204), [#7115](https://github.com/streamlit/streamlit/issues/7115)).\n- 🕸️ Bug fix: Widget IDs are now stable to prevent inconsistent statefulness ([#7003](https://github.com/streamlit/streamlit/pull/7003)).\n- 🦟 Bug fix: Browser autofill is correctly recognized within forms now ([#7150](https://github.com/streamlit/streamlit/pull/7150), [#7101](https://github.com/streamlit/streamlit/issues/7101), [#7084](https://github.com/streamlit/streamlit/issues/7084)).\n- 🪱 Bug fix: `st.file_uploader` no longer causes session state to reset when a websocket connection is dropped and reconnected ([#7149](https://github.com/streamlit/streamlit/pull/7149), [#7025](https://github.com/streamlit/streamlit/pull/7025)).\n- 🏎️ Bug fix: Pydeck JSON data is cached for improved performance ([#7113](https://github.com/streamlit/streamlit/pull/7113), [#5532](https://github.com/streamlit/streamlit/issues/5532)).\n- 🦋 Bug fix: `st.chat_input` no longer submits prematurely while typing with an input method editor ([#6993](https://github.com/streamlit/streamlit/pull/6993)).\n- 🐞 Bug fix: Label backgrounds for `st.tabs` are now transparent ([#7070](https://github.com/streamlit/streamlit/pull/7070), [#5707](https://github.com/streamlit/streamlit/issues/5707)).\n- 🐝 Bug fix: Page width is no longer ignored when using the `help` parameter in `st.button` ([#7033](https://github.com/streamlit/streamlit/pull/7033), [#6161](https://github.com/streamlit/streamlit/issues/6161)).\n- 🐜 Bug fix: Tweaked Altair color specification for improved visibility in dark mode ([#7061](https://github.com/streamlit/streamlit/pull/7061), [#3343](https://github.com/streamlit/streamlit/issues/3343)).\n- 🪲 Bug fix: `st.chat_message` can correctly use local images as avatars ([#7130](https://github.com/streamlit/streamlit/pull/7130)).\n- 🐛 Bug fix: Specified that MD5 is not used for security ([#7122](https://github.com/streamlit/streamlit/pull/7122), [#7120](https://github.com/streamlit/streamlit/issues/7120)).\n- 🪄 Bug fix: Async function docstrings are ignored by [Streamlit magic](/develop/api-reference/write-magic/magic) ([#7143](https://github.com/streamlit/streamlit/pull/7143), [#7137](https://github.com/streamlit/streamlit/issues/7137)).\n\n## **Version 1.25.0**\n\n_Release date: July 20, 2023_\n\n**Highlights**\n\n- 🍞 Introducing `st.toast` — a command to briefly show toast messages to users in the bottom-right corner of apps. See [our documentation](/develop/api-reference/status/st.toast) on how to use this feature.\n\n**Notable Changes**\n\n- 🗺️ [`st.map`](/develop/api-reference/charts/st.map) now has parameters for `latitude`, `longitude`, `color`, and `size` to customize data points ([#6896](https://github.com/streamlit/streamlit/pull/6896)).\n- 🚩 [`st.multiselect`](/develop/api-reference/widgets/st.multiselect) supports setting placeholders and specifying the maximum number of selections via the `placeholder` and `max_selections` keyword-only arguments, respectively ([#6901](https://github.com/streamlit/streamlit/pull/6901), [#4750](https://github.com/streamlit/streamlit/issues/4750)). Thanks, [@fhiroki](https://github.com/fhiroki)!\n- 📅 Customize the date format for `st.date_input` with the `format` parameter ([#6974](https://github.com/streamlit/streamlit/pull/6974), [#5234](https://github.com/streamlit/streamlit/issues/5234)).\n- ↩️ [Forms](/develop/api-reference/execution-flow/st.form) can now be submitted with Enter/Return while inside [`st.text_input`](/develop/api-reference/widgets/st.text_input), [`st.number_input`](/develop/api-reference/widgets/st.number_input), or [`st.text_area`](/develop/api-reference/widgets/st.text_area) ([#6911](https://github.com/streamlit/streamlit/pull/6911), [#3790](https://github.com/streamlit/streamlit/issues/3790)).\n- 🍢 The app menu icon in the upper-right corner of apps has been changed from \"**☰**\" to \"**⋮**\" ([#6947](https://github.com/streamlit/streamlit/pull/6947)).\n\n**Other Changes**\n\n- ⛓️ Minimum required versions increased for multiple Python dependencies, including `numpy>=1.19.3` and `pandas>=1.3.0` ([#6802](https://github.com/streamlit/streamlit/pull/6802)).\n- 🛡️ `protobufjs` was bumped from 7.2.1 to 7.2.4 ([#6959](https://github.com/streamlit/streamlit/pull/6959)).\n- ✨ Visual design tweaks to Streamlit's input widgets ([#6944](https://github.com/streamlit/streamlit/pull/6944)).\n- 🦋 Bug Fix: `st.slider` now accepts general number types like `numpy.int64` instead of just `int` and `float` ([#6816](https://github.com/streamlit/streamlit/pull/6816), [#6815](https://github.com/streamlit/streamlit/issues/6815)). Thanks, [@milliams](https://github.com/milliams)!\n- 🐜 Bug Fix: Data labels for `st.slider` and `st.select_slider` no longer overflow when inside `st.expander` ([#6828](https://github.com/streamlit/streamlit/pull/6828), [#6297](https://github.com/streamlit/streamlit/issues/6297)).\n- 🐛 Bug Fix: Elements no longer re-render from scratch with each rerun ([#6923](https://github.com/streamlit/streamlit/pull/6923), [#6920](https://github.com/streamlit/streamlit/issues/6920)).\n- 🐞 Bug Fix: `st.data_editor` hashes styler objects correctly for stability across reruns ([#6815](https://github.com/streamlit/streamlit/pull/6915), [#6898](https://github.com/streamlit/streamlit/issues/6898)).\n- 🐝 Bug Fix: Fixed the padding for embedded apps using `st.chat_input` to prevent messages being cutoff ([#6979](https://github.com/streamlit/streamlit/pull/6979)).\n\n## **Version 1.24.0**\n\n_Release date: June 27, 2023_\n\n**Highlights**\n\n- 💬 Introducing `st.chat_message` and `st.chat_input` — two new [chat elements](/develop/api-reference/chat) that let you build conversational apps. Learn how to use these features in your LLM-powered chat apps in our [tutorial](/develop/tutorials/llms/build-conversational-apps).\n- 💾 Streamlit's caching decorators now allow you to customize Streamlit's hashing of input parameters with the keyword-only argument [`hash_funcs`](/develop/concepts/architecture/caching#the-hash_funcs-parameter).\n\n**Notable Changes**\n\n- 🐍 We've deprecated support for Python 3.7 in the core library and Streamlit Community Cloud ([#6868](https://github.com/streamlit/streamlit/pull/6868)).\n- 📅 `st.cache_data` and `st.cache_resource` can hash timezone-aware `datetime` objects ([#6812](https://github.com/streamlit/streamlit/pull/6812), [#6690](https://github.com/streamlit/streamlit/issues/6690), [#5110](https://github.com/streamlit/streamlit/issues/5110)).\n\n**Other Changes**\n\n- ✨ Visual design tweaks to Streamlit's input widgets ([#6817](https://github.com/streamlit/streamlit/pull/6817)).\n- 🐛 Bug fix: `st.write` pretty-prints dataclasses using `st.help` ([#6750](https://github.com/streamlit/streamlit/pull/6750)).\n- 🪲 Bug fix: `st.button`'s height is consistent with that of other widgets ([#6738](https://github.com/streamlit/streamlit/pull/6738)).\n- 🐜 Bug fix: Upgraded the `react-range` frontend dependency to fix the memory usage of sliders ([#6764](https://github.com/streamlit/streamlit/pull/6764), [#5436](https://github.com/streamlit/streamlit/issues/5436)). Thanks [@wolfd](https://github.com/wolfd)!\n- 🐝 Bug fix: Pydantic validators no longer result in exceptions on app reruns ([#6664](https://github.com/streamlit/streamlit/pull/6664), [#3218](https://github.com/streamlit/streamlit/issues/3218)).\n- 🐞 Bug fix: `streamlit config show` honors newlines ([#6758](https://github.com/streamlit/streamlit/pull/6758), [#2868](https://github.com/streamlit/streamlit/issues/2868)).\n- 🪰 Bug fix: Fixed a race condition to ensure Streamlit reruns the latest code when the file changes ([#6884](https://github.com/streamlit/streamlit/pull/6884)).\n- 🦋 Bug fix: Apps no longer rerun when users click anchor links ([#6834](https://github.com/streamlit/streamlit/pull/6834), [#6500](https://github.com/streamlit/streamlit/issues/6500)).\n- 🕸️ Bug fix: Added robust out-of-bounds checks for `min_value` and `max_value` in `st.number_input` ([#6847](https://github.com/streamlit/streamlit/pull/6847), [#6797](https://github.com/streamlit/streamlit/issues/6797)).\n\n## **Version 1.23.0**\n\n_Release date: June 1, 2023_\n\n**Highlights**\n\n- ✂️ Announcing the general availability of [st.data_editor](/develop/api-reference/data/st.data_editor), a widget that allows you to edit DataFrames and many other data structures in a table-like UI. **Breaking change:** the data editor's representation used in `st.session_state` was altered. Find out more about the new format in [Access edited data](/develop/concepts/design/dataframes#access-edited-data).\n- ⚙️ Introducing the [Column configuration API](/develop/api-reference/data/st.column_config) with a suite of methods to configure the display and editing behavior of `st.dataframe` and `st.data_editor` columns (e.g. their title, visibility, type, or format). Keep an eye out for a detailed [blog post](https://blog.streamlit.io/) and in-depth [documentation](/develop/concepts/design/dataframes#configuring-columns) upcoming in the next two weeks.\n- 🔌 Learn to use `st.experimental_connection` to create and manage data connections in your apps with the new [Connecting to data](/develop/concepts/connections/connecting-to-data) docs and [video tutorial](https://www.youtube.com/watch?v=xQwDfW7UHMo).\n\n**Notable Changes**\n\n- 📊 Streamlit now supports Protobuf 4 and Altair 5 ([#6215](https://github.com/streamlit/streamlit/issues/6215), [#6618](https://github.com/streamlit/streamlit/pull/6618), [#5626](https://github.com/streamlit/streamlit/issues/5626), [#6622](https://github.com/streamlit/streamlit/pull/6622)).\n- ☎️ st.dataframe and st.data_editor can hide index columns with `hide_index`, specify the display order of columns with `column_order`, and disable editing for individual columns with the `disabled` parameter.\n- ⏱️ The `ttl` parameter in [st.cache_data](/develop/api-reference/caching-and-state/st.cache_data) and [st.cache_resource](/develop/api-reference/caching-and-state/st.cache_resource) accepts formatted strings, so you can simply say `ttl=\"30d\"`, `ttl=\"1h30m\"` and any other combination of `w`, `d`, `h`, `m`, `s` supported by [Pandas's Timedelta constructor](https://pandas.pydata.org/docs/reference/api/pandas.Timedelta.html) ([#6560](https://github.com/streamlit/streamlit/pull/6560)).\n- 📂 `st.file_uploader` now interprets the `type` parameter more accurately. For example, \"jpg\" or \".jpg\" now accept both \"jpg\" and \"jpeg\" extensions. This functionality has also been extended to \"mpeg/mpg\", \"tiff/tif\", \"html/htm\", and \"mpeg4/mp4\".\n- 🤫 The new `global.disableWidgetStateDuplicationWarning` configuration option allows the silencing of warnings triggered by setting widget default values and keyed session state values concurrently ([#3605](https://github.com/streamlit/streamlit/issues/3605), [#6640](https://github.com/streamlit/streamlit/pull/6640)). Thanks, [@antonAce](https://github.com/antonAce)!\n\n**Other Changes**\n\n- 🏃‍♀️Improved startup time by lazy loading some dependencies ([#6531](https://github.com/streamlit/streamlit/pull/6531)).\n- 👋 Removed `st.beta_*` and `st.experimental_show` due to deprecation and low-use ([#6558](https://github.com/streamlit/streamlit/pull/6558))\n- 🚀 Further improvements to st.dataframe and st.data_editor:\n  - Improved editing on mobile devices for the data editor ([#6548](https://github.com/streamlit/streamlit/pull/6548)).\n  - All editable columns have an icon in their column header and support tooltips ([#6550](https://github.com/streamlit/streamlit/pull/6550), [#6561](https://github.com/streamlit/streamlit/pull/6561)).\n  - Enable editing for columns containing datetime, date, or time values ([#6025](https://github.com/streamlit/streamlit/pull/6025)).\n  - New input validation options for columns in the data editor, such as `max_chars` and `validate` for text columns, and `min_value`, `max_value` and `step` for number columns ([#6563](https://github.com/streamlit/streamlit/pull/6563)).\n  - Improved type parsing capabilities in the data editor ([#6551](https://github.com/streamlit/streamlit/pull/6551)).\n  - Unified missing values to `None` in returned data structures ([#6544](https://github.com/streamlit/streamlit/pull/6544)).\n  - A warning is shown in cells when integers exceed the maximum safe value of `(2^53) -1` ([#6311](https://github.com/streamlit/streamlit/issues/6311), [#6549](https://github.com/streamlit/streamlit/pull/6549)).\n  - Prevented editing the sessions state by showing a warning ([#6634](https://github.com/streamlit/streamlit/pull/6634)).\n  - Fixed issues with list columns sometimes breaking the frontend ([#6644](https://github.com/streamlit/streamlit/pull/6644)).\n  - Fixed a display issue with index columns using category dtype ([#6680](https://github.com/streamlit/streamlit/issues/6680), [#6598](https://github.com/streamlit/streamlit/pull/6598)).\n  - Fixed an issue that prevented a rerun when adding empty rows ([#6598](https://github.com/streamlit/streamlit/pull/6598)).\n  - Unified the behavior between `st.data_editor` and `st.dataframe` related to auto-hiding the index column(s) based on the input data ([#6659](https://github.com/streamlit/streamlit/issues/6659), [#6598](https://github.com/streamlit/streamlit/pull/6598))\n- 🛡️ Streamlit's [Security Policy](https://github.com/streamlit/streamlit/blob/develop/SECURITY.md) can be found in its GitHub repository ([#6666](https://github.com/streamlit/streamlit/pull/6666)).\n- 🤏 Documented the integer size limit for `st.number_input` and `st.slider` ([#6724](https://github.com/streamlit/streamlit/pull/6724)).\n- 🐍 The majority of Streamlit's Python dependencies have set a maximum allowable version, with the standard upper limit set to the next major version, but not inclusive of it ([#6691](https://github.com/streamlit/streamlit/pull/6691)).\n- 💅 UI design improvements to in-app modals ([#6688](https://github.com/streamlit/streamlit/pull/6688)).\n- 🐞 Bug fix: `st.date_input`'s date selector is equally visible in dark mode ([#6072](https://github.com/streamlit/streamlit/issues/6072), [#6630](https://github.com/streamlit/streamlit/pull/6630)).\n- 🐜 Bug fix: the sidebar navigation expansion indicator in multipage apps is restored ([#6731](https://github.com/streamlit/streamlit/pull/6731)).\n- 🐛 Bug fix: The docstring and exception message for `st.set_page_config` have been updated to clarify that this command can be invoked once for each page within a multipage app, rather than once per entire app ([#6594](https://github.com/streamlit/streamlit/pull/6594)).\n- 🐝 Bug fix: `st.json` no longer collapses multiple spaces in both keys and values with single space when rendered ([#6657](https://github.com/streamlit/streamlit/issues/6657), [#6663](https://github.com/streamlit/streamlit/pull/6663)).\n\n## **Version 1.22.0**\n\n_Release date: April 27, 2023_\n\n**Highlights**\n\n- 🔌 Introducing `st.experimental_connection`: Easily connect your app to data sources and APIs using our new connection feature. Find more details in the [API reference](/develop/api-reference/connections), and stay tuned for an upcoming blog post and in-depth documentation! In the meantime, explore our updated [MySQL](/develop/tutorials/databases/mysql) and [Snowflake](/develop/tutorials/databases/snowflake) connection tutorials for examples of this feature.\n\n**Notable Changes**\n\n- 🐼 Streamlit now supports Pandas 2.0 ([#6413](https://github.com/streamlit/streamlit/issues/6413), [#6378](https://github.com/streamlit/streamlit/pull/6378), [#6507](https://github.com/streamlit/streamlit/pull/6507)). Thanks, [connortann](https://github.com/connortann)!\n- 🍔 Customize the visibility of items in the toolbar, options menu, and the settings dialog using the `client.toolbarMode` [config option](https://docs.streamlit.io/develop/concepts/configuration#view-all-configuration-options) ([#6174](https://github.com/streamlit/streamlit/pull/6174)).\n- 🪵 Streamlit logs now reside in the \"streamlit\" namespace instead of the root logger, enabling app developers to better manage log handling ([#3978](https://github.com/streamlit/streamlit/issues/3978), [#6377](https://github.com/streamlit/streamlit/pull/6377)).\n\n**Other Changes**\n\n- 🔏 CLI parameters can no longer be used to set sensitive configuration values ([#6376](https://github.com/streamlit/streamlit/pull/6376)).\n- 🤖 Improved the debugging experience by reducing log noise ([#6391](https://github.com/streamlit/streamlit/pull/6391)).\n- 🐞 Bug fix: `@st.cache_data` decorated functions support UUID objects as parameters ([#6440](https://github.com/streamlit/streamlit/issues/6440), [#6459](https://github.com/streamlit/streamlit/pull/6459)).\n- 🐛 Bug fix: Tabbing through buttons and other elements now displays a red border only when focused, not when clicked ([#6373](https://github.com/streamlit/streamlit/pull/6373)).\n- 🪲 Bug fix: `st.multiselect`'s clear icon is larger and includes a hover effect ([#6471](https://github.com/streamlit/streamlit/pull/6471)).\n- 🐜 Bug fix: Custom theme font settings no longer apply to code blocks ([#6484](https://github.com/streamlit/streamlit/issues/6484), [#6535](https://github.com/streamlit/streamlit/pull/6535)).\n- ©️ Bug fix: `st.code`'s copy-to-clipboard button appears when you hover on code blocks ([#6490](https://github.com/streamlit/streamlit/issues/6490), [#6498](https://github.com/streamlit/streamlit/pull/6498)).\n\n## **Version 1.21.0**\n\n_Release date: April 6, 2023_\n\n**Highlights**\n\n- 📏 Introducing `st.divider` — a command that displays a horizontal line in your app. Learn how to use this command in its [API reference](/develop/api-reference/text/st.divider).\n- 🔏 Streamlit now supports the use of a global `secrets.toml` file, in addition to a project-level file, to easily store and securely access your secrets. Learn more in [Secrets management](/develop/concepts/connections/secrets-management).\n- 🚀 [st.help](/develop/api-reference/utilities/st.help) has been revamped to show more information about object methods, attributes, classes, and more, which is great for debugging ([#5857](https://github.com/streamlit/streamlit/pull/5857), [#6382](https://github.com/streamlit/streamlit/pull/6382))!\n\n**Notable Changes**\n\n- 🪜 [st.time_input](/develop/api-reference/widgets/st.time_input) supports adding a stepping interval with the keyword-only `step` parameter ([#6071](https://github.com/streamlit/streamlit/pull/6071)).\n- ❓ Most [text elements](/develop/api-reference/text) can include tooltips with the `help` parameter ([#6043](https://github.com/streamlit/streamlit/pull/6043)).\n- ↔️ [st.pyplot](/develop/api-reference/charts/st.pyplot) has a `use_container_width` parameter to set the chart to the container width (now all [chart elements](/develop/api-reference/charts) support this parameter) ([#6067](https://github.com/streamlit/streamlit/pull/6067)).\n- 👩‍💻 [st.code](/develop/api-reference/text/st.code) supports optionally displaying line numbers to the code block's left with the boolean `line_numbers` parameter ([#5756](https://github.com/streamlit/streamlit/issues/5756), [#6042](https://github.com/streamlit/streamlit/pull/6042)).\n- ⚓ Anchors in header elements can be turned off by setting `anchor=False` ([#6158](https://github.com/streamlit/streamlit/pull/6158)).\n\n**Other Changes**\n\n- 🐼 [st.table](/develop/api-reference/data/st.table) and [st.dataframe](/develop/api-reference/data/st.dataframe) support `pandas.Period`, and number and boolean types in categorical columns ([#2547](https://github.com/streamlit/streamlit/issues/2547), [#5429](https://github.com/streamlit/streamlit/pull/5429), [#5329](https://github.com/streamlit/streamlit/issues/5392), [#6248](https://github.com/streamlit/streamlit/pull/6248)).\n- 🕸️ Added `.webp` to the list of allowed static file extensions ([#6331](https://github.com/streamlit/streamlit/pull/6331))\n- 🐞 Bug fix: stop script execution on websocket close to immediately clear session information ([#6166](https://github.com/streamlit/streamlit/issues/6166), [#6204](https://github.com/streamlit/streamlit/pull/6204)).\n- 🐜 Bug fixes: updated allowed/disallowed label markdown behavior such that unsupported elements are unwrapped and only their children (text contents) render ([#5872](https://github.com/streamlit/streamlit/issues/5872), [#6036](https://github.com/streamlit/streamlit/issues/6036), [#6054](https://github.com/streamlit/streamlit/issues/6054), [#6163](https://github.com/streamlit/streamlit/pull/6163)).\n- 🪲 Bug fixes: don't push browser history states on rerun, use HTTPS to load external resources in `streamlit hello`, and make the browser back button work for multipage apps ([#5292](https://github.com/streamlit/streamlit/issues/5292), [#6266](https://github.com/streamlit/streamlit/pull/6266), [#6232](https://github.com/streamlit/streamlit/pull/6232)). Thanks, [whitphx](https://github.com/whitphx)!\n- 🐝 Bug fix: avoid showing emoji on non-UTF-8 terminals. ([#2284](https://github.com/streamlit/streamlit/issues/2284), [#6088](https://github.com/streamlit/streamlit/pull/6088)). Thanks, [kcarnold](https://github.com/kcarnold)!\n- 📁 Bug fix: override default use of [File System Access API](https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API) for `react-dropzone` so that `st.file_uploader`'s File Selection Dialog only shows file types corresponding to those included in the `type` parameter ([#6176](https://github.com/streamlit/streamlit/issues/6176), [#6315](https://github.com/streamlit/streamlit/pull/6315)).\n- 💾 Bug fix: make the `.clear()` method on cache-decorated functions work ([#6310](https://github.com/streamlit/streamlit/issues/6310), [#6321](https://github.com/streamlit/streamlit/pull/6321)).\n- 🏃 Bug fix: `st.experimental_get_query_params` doesn't need reruns to work ([#6347](https://github.com/streamlit/streamlit/issues/6347), [#6348](https://github.com/streamlit/streamlit/pull/6348)). Thanks, [PaleNeutron](https://github.com/PaleNeutron)!\n- 🐛 Bug fix: `CachedStFunctionWarning` mentions `experimental_allow_widgets` instead of the deprecated `suppress_st_warning` ([#6216](https://github.com/streamlit/streamlit/issues/6216), [#6217](https://github.com/streamlit/streamlit/pull/6217)).\n\n## **Version 1.20.0**\n\n_Release date: March 09, 2023_\n\n**Notable Changes**\n\n- 🔐 Added support for configuring SSL to [serve apps directly over HTTPS](/develop/concepts/configuration/https-support) ([#5969](https://github.com/streamlit/streamlit/pull/5969)).\n- 🖼️ Granular control over app embedding behavior with the `/?embed` and `/?embed_options` query parameters. Learn how to use this feature in our [docs](/deploy/streamlit-community-cloud/share-your-app/embed-your-app) ([#6011](https://github.com/streamlit/streamlit/pull/6011), [#6019](https://github.com/streamlit/streamlit/pull/6019)).\n- ⚡ Enabled the `runner.fastReruns` [configuration option](/develop/concepts/configuration#view-all-configuration-options) by default to make apps much more responsive to user interaction ([#6200](https://github.com/streamlit/streamlit/pull/6200)).\n\n**Other Changes**\n\n- 🍔 Cleaned up the hamburger menu by removing the least used options ([#6080](https://github.com/streamlit/streamlit/pull/6080)).\n- 🖨️ Design changes to ensure apps being printed or saved as a PDF look good ([#6180](https://github.com/streamlit/streamlit/pull/6180)).\n- 🐞 Bug fix: improved `dtypes` checking in `st.experimental_data_editor` ([#6185](https://github.com/streamlit/streamlit/issues/6185), [#6188](https://github.com/streamlit/streamlit/pull/6188)).\n- 🐛 Bug fix: properly position `st.metric`'s `help` tooltip when not inside columns ([#6168](https://github.com/streamlit/streamlit/pull/6168)).\n- 🪲 Bug fix: regression in retrieving messages from the server's `ForwardMsgCache` ([#6210](https://github.com/streamlit/streamlit/pull/6210)).\n- 🌀 Bug fix: `st.cache_data` docstring for the `show_spinner` param now lists `str` as a supported type ([#6207](https://github.com/streamlit/streamlit/issues/6207), [#6213](https://github.com/streamlit/streamlit/pull/6213)).\n- ⏱️ Made ping and websocket timeouts far more forgiving ([#6212](https://github.com/streamlit/streamlit/pull/6212)).\n- 🗺️ `st.map` and `st.pydeck_chart` docs state that Streamlit's Mapbox token will not work indefinitely ([#6143](https://github.com/streamlit/streamlit/pull/6143)).\n\n## **Version 1.19.0**\n\n_Release date: February 23, 2023_\n\n**Highlights**\n\n- ✂️ Introducing `st.experimental_data_editor`, a widget that allows you to edit DataFrames and many other data structures in a table-like UI. Read more in our [documentation](/develop/concepts/design/dataframes) and [blog post](https://blog.streamlit.io/editable-dataframes-are-here/).\n\n**Other Changes**\n\n- ✨ Streamlit's GitHub README got a new look ([#6016](https://github.com/streamlit/streamlit/pull/6016)).\n- 🌚 Improved readability of styled dataframe cells in dark mode ([#6060](https://github.com/streamlit/streamlit/issues/6060), [#6098](https://github.com/streamlit/streamlit/pull/6098)).\n- 🐛 Bug fix: make apps work again in the latest versions of Safari, and in Chrome with third-party cookies blocked ([#6092](https://github.com/streamlit/streamlit/issues/6092), [#6094](https://github.com/streamlit/streamlit/pull/6094), [#6087](https://github.com/streamlit/streamlit/issues/6087), [#6100](https://github.com/streamlit/streamlit/pull/6100)).\n- 🐞 Bug fix: refer to new cache primitives in the \"Clear cache\" dialog and error messages ([#6082](https://github.com/streamlit/streamlit/pull/6082), [#6128](https://github.com/streamlit/streamlit/pull/6128)).\n- 🐝 Bug fix: properly cache class member functions and instance methods ([#6109](https://github.com/streamlit/streamlit/issues/6109), [#6114](https://github.com/streamlit/streamlit/pull/6114)).\n- 🐜 Bug fix: regression in `st.metric` tooltip position ([#6093](https://github.com/streamlit/streamlit/issues/6093), [#6129](https://github.com/streamlit/streamlit/pull/6129)).\n- 🪲 Bug fix: allow fullscreen button to show for dataframes, charts, etc, in expander ([#6083](https://github.com/streamlit/streamlit/pull/6083), [#6148](https://github.com/streamlit/streamlit/pull/6148)).\n\n## **Version 1.18.0**\n\n_Release date: February 09, 2023_\n\n**Highlights**\n\n- 🎊 Introducing `@st.cache_data` and `@st.cache_resource` — two new caching commands to replace `st.cache`! Check out our [blog post](https://blog.streamlit.io/p/c0a90231-9848-47ec-a40c-ad4a344e4de1/) and [documentation](/develop/concepts/architecture/caching) for more information.\n\n**Notable Changes**\n\n- 🪆 `st.columns` supports up to one level of column nesting (i.e., columns inside columns) in the main area of the app.\n- ⏳ `st.progress` supports adding a message to display above the progress bar with the `text` keyword parameter.\n- ↔️ `st.button` has an optional `use_container_width` parameter to allow you to stretch buttons across the full container width.\n- 🐍 We formally added support for Python 3.11.\n- 🖨️ Save your app as a PDF via the \"Print\" option in your app's hamburger menu.\n- 🛎️ Apps can serve small, static media files via the `enableStaticServing` config option. See our [documentation](/develop/concepts/configuration/serving-static-files) on how to use this feature and our demo [app](https://static-file-serving.streamlit.app/) for an example.\n\n**Other Changes**\n\n- 🏁 All Streamlit endpoints (including `/healthz`) have been renamed to have a consistent pattern and avoid any clashes with reserved endpoints of GCP (notably Cloud Run and App Engine) ([#5534](https://github.com/streamlit/streamlit/pull/5534)).\n- ⚡ Improved caching performance when multiple sessions access an uncomputed cached value simultaneously ([#6017](https://github.com/streamlit/streamlit/pull/6017)).\n- 🚧 Streamlit only displays deprecation warnings in the browser when the `client.showErrorDetails` config option is set to `True`. Deprecation warnings always get logged to the console, regardless of whether they're displayed in-browser ([#5945](https://github.com/streamlit/streamlit/pull/5945)).\n- 🏓 Refactored the `st.dataframe` internals to improve dataframe handling and conversion, such as detecting more types, converting key-value dicts to dataframes, and more ([#6026](https://github.com/streamlit/streamlit/pull/6026), [#6023](https://github.com/streamlit/streamlit/pull/6023)).\n- 💽 The behavior of widget labels when they are passed unsupported Markdown elements is documented ([#5978](https://github.com/streamlit/streamlit/pull/5978)).\n- 📊 Bug fix: Plotly improvements — upgraded multiple frontend dependencies, including Plotly, to the latest version to properly redraw cached charts, make Plotly mapbox animations work, and allow users to update the figure layout when using the Streamlit theme ([#5885](https://github.com/streamlit/streamlit/pull/5885), [#5967](https://github.com/streamlit/streamlit/pull/5967), [#6055](https://github.com/streamlit/streamlit/pull/6055)).\n- 📶 Bug fix: allow browser tabs that transiently disconnect (due to a network blip, load balancer timeout, etc.) to avoid losing all of their state ([#5856](https://github.com/streamlit/streamlit/pull/5856)).\n- 📱 Bug fix: the keyboard is hidden on mobile when `st.selectbox` and `st.multiselect` have less than 10 options ([#5979](https://github.com/streamlit/streamlit/pull/5979)).\n- 🐝 Bug fix: design tweaks to `st.metric`, `st.multiselect`, `st.tabs` , and menu items to prevent label overflow and scrolling issues, especially with small viewport sizes ([#5933](https://github.com/streamlit/streamlit/pull/5933), [#6034](https://github.com/streamlit/streamlit/pull/6034)).\n- 🐞 Bug fix: switched to a functioning Twemoji URL from which page favicons are loaded in `st.set_page_config` ([#5943](https://github.com/streamlit/streamlit/pull/5943)).\n- ✍️ More type hints ([#5986](https://github.com/streamlit/streamlit/pull/5986)). Thanks, [harahu](https://github.com/harahu)!\n\n## **Version 1.17.0**\n\n_Release date: January 12, 2023_\n\n**Notable Changes**\n\n- 🪄 [`@st.experimental_singleton`](/develop/api-reference/caching-and-state/st.experimental_singleton#validating-the-cache) supports an optional `validate` parameter that accepts a validation function for cached data and is called each time the cached value is accessed.\n- 💾  [`@st.experimental_memo`](/develop/api-reference/caching-and-state/st.experimental_memo)'s `persist` parameter can also accept booleans.\n\n**Other Changes**\n\n- 📟 Multipage apps exclude `__init__.py` from the page selector ([#5890](https://github.com/streamlit/streamlit/pull/5890)).\n- 📐 The iframes of embedded apps have the ability to dynamically resize their height ([#5894](https://github.com/streamlit/streamlit/pull/5894)).\n- 🐞 Bug fix: thumb values of range sliders respect the container width ([#5913](https://github.com/streamlit/streamlit/pull/5913)).\n- 🪲 Bug fix: all examples in docstrings of Streamlit commands contain relevant imports to make them reproducible ([#5877](https://github.com/streamlit/streamlit/pull/5877))."
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022",
    "content": "# 2022 release notes\n\nThis page contains release notes for Streamlit versions released in 2022. For the latest version of Streamlit, see [Release notes](/develop/quick-reference/release-notes).\n\n## **Version 1.16.0**\n\n_Release date: December 14, 2022_\n\n**Highlights**\n\n- 👩‍🎨 Introducing a new Streamlit theme for Altair, Plotly, and Vega-Lite charts! Check out our [blog post](https://blog.streamlit.io/a-new-streamlit-theme-for-altair-and-plotly/) for more information.\n- 🎨 Streamlit now supports colored text in all commands that accept Markdown, including `st.markdown`, `st.header`, and more. Learn more in our [documentation](/develop/api-reference/text/st.markdown).\n\n**Notable Changes**\n\n- 🔁 Functions cached with `st.experimental_memo` or `st.experimental_singleton` can contain Streamlit media elements and forms.\n- ⛄ All Streamlit commands that accept pandas DataFrames as input also support Snowpark and PySpark DataFrames.\n- 🏷 [st.checkbox](/develop/api-reference/widgets/st.checkbox) and [st.metric](/develop/api-reference/data/st.metric) can customize how to hide their labels with the `label_visibility` parameter.\n\n**Other Changes**\n\n- 🗺️ `st.map` improvements: support for upper case columns and better exception messages ([#5679](https://github.com/streamlit/streamlit/pull/5679), [#5792](https://github.com/streamlit/streamlit/pull/5792)).\n- 🐞 Bug fix: `st.plotly_chart` respects the figure's height attribute and the `use_container_width` parameter ([#5779](https://github.com/streamlit/streamlit/pull/5779)).\n- 🪲 Bug fix: all commands with the `icon` parameter such as [st.error](/develop/api-reference/status/st.error), [st.warning](/develop/api-reference/status/st.warning), etc, can contain emojis with variant selectors ([#5583](https://github.com/streamlit/streamlit/pull/5583)).\n- 🐝 Bug fix: prevent `st.camera_input` from jittering when resizing the browser window ([#5661](https://github.com/streamlit/streamlit/pull/5711)).\n- 🐜 Bug fix: update exception layout to avoid overflow of stack traces ([#5700](https://github.com/streamlit/streamlit/pull/5700)).\n\n## **Version 1.15.0**\n\n_Release date: November 17, 2022_\n\n**Notable Changes**\n\n- 💅 Widget labels can contain inline Markdown. See our [docs](/develop/api-reference/widgets) and demo [app](https://markdown-labels.streamlit.app/) for more info.\n- 🎵 [`st.audio`](/develop/api-reference/media/st.audio) now supports playing audio data passed in as NumPy arrays with the keyword-only `sample_rate` parameter.\n- 🔁 Functions cached with `st.experimental_memo` or `st.experimental_singleton` can contain Streamlit widgets using the `experimental_allow_widgets` parameter. This allows caching checkboxes, sliders, radio buttons, and more!\n\n**Other Changes**\n\n- 👩‍🎨 Design tweak to prevent jittering in sliders ([#5612](https://github.com/streamlit/streamlit/pull/5612)).\n- 🐛 Bug fix: links in headers are red, not blue ([#5609](https://github.com/streamlit/streamlit/pull/5609)).\n- 🐞 Bug fix: properly resize Plotly charts when exiting fullscreen ([#5645](https://github.com/streamlit/streamlit/pull/5645)).\n- 🐝: Bug fix: don't accidentally trigger `st.balloons` and `st.snow` ([#5401](https://github.com/streamlit/streamlit/pull/5401)).\n\n## **Version 1.14.0**\n\n_Release date: October 27, 2022_\n\n**Highlights**\n\n- 🎨 `st.button` and `st.form_submit_button` support designating buttons as \"primary\" (for additional emphasis) or \"secondary\" (for normal buttons) with the `type` keyword-only parameter.\n\n**Notable Changes**\n\n- 🤏 `st.multiselect` has a keyword-only `max_selections` parameter to limit the number of options that can be selected at a time.\n- 📄 `st.form_submit_button` now has the `disabled` parameter that removes interactivity.\n\n**Other Changes**\n\n- 🏓 `st.dataframe` and `st.table` accept categorical intervals as input ([#5395](https://github.com/streamlit/streamlit/pull/5395)).\n- ⚡ Performance improvements to Plotly charts ([#5542](https://github.com/streamlit/streamlit/pull/5542)).\n- 🪲 Bug fix: `st.download_button` supports non-latin1 characters in filenames ([#5465](https://github.com/streamlit/streamlit/pull/5465)).\n- 🐞 Bug fix: Allow `st.image` to render a local GIF as a GIF, not as a static PNG ([#5438](https://github.com/streamlit/streamlit/pull/5438)).\n- 📱 Design tweaks to the sidebar in multipage apps ([#5538](https://github.com/streamlit/streamlit/pull/5538), [#5445](https://github.com/streamlit/streamlit/pull/5445), [#5559](https://github.com/streamlit/streamlit/pull/5559)).\n- 📊 Improvements to the axis configuration for built-in charts ([#5412](https://github.com/streamlit/streamlit/pull/5412)).\n- 🔧 Memo and singleton improvements: support text values for `show_spinner`, use `datetime.timedelta` objects as `ttl` parameter value, properly hash PIL images and `Enum` classes, show better error messages when returning unevaluated dataframes ([#5447](https://github.com/streamlit/streamlit/pull/5447), [#5413](https://github.com/streamlit/streamlit/pull/5413), [#5504](https://github.com/streamlit/streamlit/pull/5504), [#5426](https://github.com/streamlit/streamlit/pull/5426), [#5515](https://github.com/streamlit/streamlit/pull/5515)).\n- 🔍 Zoom buttons in maps created with `st.map` and `st.pydeck_chart` use light or dark style based on the app's theme ([#5479](https://github.com/streamlit/streamlit/pull/5479)).\n- 🗜 Websocket headers from the current session's incoming WebSocket request can be obtained from a new \"internal\" (i.e.: subject to change without deprecation) API ([#5457](https://github.com/streamlit/streamlit/pull/5457)).\n- 📝 Improve the text that gets printed when you first install and use Streamlit ([#5473](https://github.com/streamlit/streamlit/pull/5473)).\n\n## **Version 1.13.0**\n\n_Release date: September 22, 2022_\n\n**Notable Changes**\n\n- 🏷 Widgets can customize how to hide their labels with the `label_visibility` parameter.\n- 🔍 `st.map` adds zoom buttons to the map by default.\n- ↔️ `st.dataframe` supports the `use_container_width` parameter to stretch across the full container width.\n- 🪄 Improvements to `st.dataframe` sizing: Column width calculation respects column headers, supports double click between column headers to autosize, better fullscreen support, and fixes the issue with the `width` parameter.\n\n**Other Changes**\n\n- ⌨️ `st.time_input` allows for keyboard-only input ([#5194](https://github.com/streamlit/streamlit/pull/5194)).\n- 💿 `st.memo` will warn the user when using `ttl` and `persist` keyword argument together ([#5032](https://github.com/streamlit/streamlit/pull/5032)).\n- 🔢 `st.number_input` returns consistent type after rerun ([#5359](https://github.com/streamlit/streamlit/pull/5359)).\n- 🚒 `st.sidebar` UI fixes including a fix for scrollbars in Firefox browsers ([#5157](https://github.com/streamlit/streamlit/pull/5157), [#5324](https://github.com/streamlit/streamlit/pull/5324)).\n- 👩‍💻 Improvements to usage metrics to guide API development.\n- ✍️ More type hints! ([#5191](https://github.com/streamlit/streamlit/pull/5191), [#5192](https://github.com/streamlit/streamlit/pull/5192), [#5242](https://github.com/streamlit/streamlit/pull/5242), [#5243](https://github.com/streamlit/streamlit/pull/5243), [#5244](https://github.com/streamlit/streamlit/pull/5244), [#5245](https://github.com/streamlit/streamlit/pull/5245), [#5246](https://github.com/streamlit/streamlit/pull/5246)) Thanks [harahu](https://github.com/harahu)!\n\n## **Version 1.12.0**\n\n_Release date: August 11, 2022_\n\n**Highlights**\n\n- 📊 Built-in charts (e.g. `st.line_chart`) get a brand-new look and parameters `x` and `y`! Check out our [blog post](https://blog.streamlit.io/built-in-charts-get-a-new-look-and-parameters/) for more information.\n\n**Notable Changes**\n\n- ⏯ Functions cached with `st.experimental_memo` or `st.experimental_singleton` can now contain static `st` commands. This allows caching text, charts, dataframes, and more!\n- ↔️ The sidebar is now resizable via drag and drop.\n- ☎️ `st.info`, `st.success`, `st.error`, and `st.warning` got a redesign and have a new keyword-only parameter: `icon`.\n\n**Other Changes**\n\n- 🎚️ `st.select_slider` correctly handles all floats now ([#4973](https://github.com/streamlit/streamlit/pull/4973), [#4978](https://github.com/streamlit/streamlit/pull/4978)).\n- 🔢 `st.multi_select` can take values from enums ([#4987](https://github.com/streamlit/streamlit/pull/4987)).\n- 🍊 `st.slider` range values can now be set through `st.session_state` ([#5007](https://github.com/streamlit/streamlit/pull/5007)).\n- 🎨 `st.progress` got a redesign ([#5011](https://github.com/streamlit/streamlit/pull/5011), [#5086](https://github.com/streamlit/streamlit/pull/5086)).\n- 🔘 `st.radio` better deals with list-like dataframes ([#5021](https://github.com/streamlit/streamlit/pull/5021)).\n- 🧞‍♂️ `st.cache` properly handles JSON files now ([#5023](https://github.com/streamlit/streamlit/pull/5023)).\n- ⚓️ Headers render markdown now when the `anchor` parameter is set ([#5038](https://github.com/streamlit/streamlit/pull/5038)).\n- 🗻 `st.image` can now load SVGs from Inkscape ([#5040](https://github.com/streamlit/streamlit/pull/5040)).\n- 🗺️ `st.map` and `st.pydeck_chart` use light or dark style based on the app's theme ([#5074](https://github.com/streamlit/streamlit/pull/5074), [#5108](https://github.com/streamlit/streamlit/pull/5108)).\n- 🎈 Clicks on elements below `st.balloons` and `st.snow` don't get blocked anymore ([#5098](https://github.com/streamlit/streamlit/pull/5098)).\n- 🔝 Embedded apps have lower top padding ([#5111](https://github.com/streamlit/streamlit/pull/5111)).\n- 💅 Adjusted padding and alignment for widgets, charts, and dataframes ([#4995](https://github.com/streamlit/streamlit/pull/4995), [#5061](https://github.com/streamlit/streamlit/pull/5061), [#5081](https://github.com/streamlit/streamlit/pull/5081)).\n- ✍️ More type hints! ([#4926](https://github.com/streamlit/streamlit/pull/4926), [#4932](https://github.com/streamlit/streamlit/pull/4932), [#4933](https://github.com/streamlit/streamlit/pull/4933))\n\n## **Version 1.11.0**\n\n_Release date: July 14, 2022_\n\n**Highlights**\n\n- 🗂 Introducing `st.tabs` to have tab containers in your app. See our [documentation](/develop/api-reference/layout/st.tabs) on how to use this feature.\n\n**Notable Changes**\n\n- ℹ️ `st.metric` supports tooltips with the `help` keyword parameter.\n- 🚇 `st.columns` supports setting the gap size between columns with the `gap` keyword parameter.\n\n**Other Changes**\n\n- 💅 Design tweaks to `st.selectbox`, `st.expander`, `st.spinner` ([#4801](https://github.com/streamlit/streamlit/pull/4801)).\n- 📱 The sidebar will close when users select a page from the navigation menu on mobile devices ([#4851](https://github.com/streamlit/streamlit/pull/4841)).\n- 🧠 `st.memo` supports dataclasses! ([#4850](https://github.com/streamlit/streamlit/pull/4850))\n- 🏎 Bug fix for a race condition that destroyed widget state with rapid interaction ([#4882](https://github.com/streamlit/streamlit/pull/4882)).\n- 🏓 `st.table` presents overflowing content to be scrollable when placed inside columns and expanders ([#4934](https://github.com/streamlit/streamlit/pull/4934)).\n- 🐍 Types: More updated type annotations across Streamlit! ([#4808](https://github.com/streamlit/streamlit/pull/4808), [#4809](https://github.com/streamlit/streamlit/pull/4809), [#4856](https://github.com/streamlit/streamlit/pull/4856))\n\n## **Version 1.10.0**\n\n_Release date: June 2, 2022_\n\n**Highlights**\n\n- 📖 Introducing native support for multipage apps! Check out our [blog post](https://blog.streamlit.io/introducing-multipage-apps) and try out our new `streamlit hello`.\n\n**Notable Changes**\n\n- ✨ `st.dataframe` has been redesigned.\n- 🔘 `st.radio` has a `horizontal` keyword-only parameter to display options horizontally.\n- ⚠️ Streamlit Community Cloud will support richer exception formatting.\n- 🏂 Get user information on private apps using `st.experimental_user`.\n\n**Other Changes**\n\n- 📊 Upgraded Vega-Lite library to support even more interactive charting improvements. See their [release notes](https://github.com/vega/vega-lite/releases) to find out more. ([#4751](https://github.com/streamlit/streamlit/pull/4751)).\n- 📈 `st.vega_lite_chart` will respond to updates, particularly in response to input widgets ([#4736](https://github.com/streamlit/streamlit/pull/4736)).\n- 💬 `st.markdown` with long text will always wrap ([#4696](https://github.com/streamlit/streamlit/pull/4696)).\n- 📦 Support for [PDM](https://pdm.fming.dev/) ([#4724](https://github.com/streamlit/streamlit/pull/4724)).\n- ✍️ Types: Updated type annotations across Streamlit! ([#4679](https://github.com/streamlit/streamlit/pull/4679), [#4680](https://github.com/streamlit/streamlit/pull/4680), [#4681](https://github.com/streamlit/streamlit/pull/4681), [#4682](https://github.com/streamlit/streamlit/pull/4682), [#4683](https://github.com/streamlit/streamlit/pull/4683), [#4684](https://github.com/streamlit/streamlit/pull/4684), [#4685](https://github.com/streamlit/streamlit/pull/4685), [#4686](https://github.com/streamlit/streamlit/pull/4686), [#4687](https://github.com/streamlit/streamlit/pull/4687), [#4688](https://github.com/streamlit/streamlit/pull/4688), [#4690](https://github.com/streamlit/streamlit/pull/4690), [#4703](https://github.com/streamlit/streamlit/pull/4703), [#4704](https://github.com/streamlit/streamlit/pull/4704), [#4705](https://github.com/streamlit/streamlit/pull/4705), [#4706](https://github.com/streamlit/streamlit/pull/4706), [#4707](https://github.com/streamlit/streamlit/pull/4707), [#4708](https://github.com/streamlit/streamlit/pull/4708), [#4710](https://github.com/streamlit/streamlit/pull/4710), [#4723](https://github.com/streamlit/streamlit/pull/4723), [#4733](https://github.com/streamlit/streamlit/pull/4733)).\n\n## **Version 1.9.0**\n\n_Release date: May 4, 2022_\n\n**Notable Changes**\n\n- 🪗 `st.json` now supports a keyword-only argument, `expanded` on whether the JSON should be expanded by default (defaults to `True`).\n- 🏃‍♀️ More performance improvements from reducing redundant work each script run.\n\n**Other Changes**\n\n- 🏇 Widgets when `disabled` is set/unset will maintain its value ([#4527](https://github.com/streamlit/streamlit/pull/4527)).\n- 🧪 Experimental feature to increase the speed of reruns using configuration `runner.fastReruns`. See [#4628](https://github.com/streamlit/streamlit/pull/4628) for the known issues in enabling this feature.\n- 🗺️ DataFrame timestamps support UTC offset (in addition to time zone notation) ([#4669](https://github.com/streamlit/streamlit/pull/4669)).\n\n## **Version 1.8.0**\n\n_Release date: March 24, 2022_\n\n**Notable Changes**\n\n- 🏃‍♀️ Dataframes should see performance improvements ([#4463](https://github.com/streamlit/streamlit/pull/4463)).\n\n**Other Changes**\n\n- 🕰 `st.slider` handles timezones better by removing timezone conversions on the backend ([#4348](https://github.com/streamlit/streamlit/pull/4358)).\n- 👩‍🎨 Design improvements to our header ([#4496](https://github.com/streamlit/streamlit/pull/4496)).\n\n## **Version 1.7.0**\n\n_Release date: March 3, 2022_\n\n**Highlights**\n\n- Introducing `st.snow`, celebrating our acquisition by Snowflake! See more information in [our blog post](https://blog.streamlit.io/snowflake-to-acquire-streamlit/).\n\n## **Version 1.6.0**\n\n_Release date: Feb 24, 2022_\n\n**Other Changes**\n\n- 🗜 WebSocket compression is now disabled by default, which will improve CPU and latency performance for large dataframes. You can use the `server.enableWebsocketCompression` configuration option to re-enable it if you find the increased network traffic more impactful.\n- ☑️ 🔘 Radio and checkboxes improve focus on Keyboard navigation ([#4308](https://github.com/streamlit/streamlit/pull/4308)).\n\n## **Version 1.5.0**\n\n_Release date: Jan 27, 2022_\n\n**Notable Changes**\n\n- 🌟 Favicon defaults to a PNG to allow for transparency ([#4272](https://github.com/streamlit/streamlit/pull/4272)).\n- 🚦 Select Slider Widget now has the `disabled` parameter that removes interactivity (completing all of our widgets) ([#4314](https://github.com/streamlit/streamlit/pull/4314)).\n\n**Other Changes**\n\n- 🔤 Improvements to our markdown library to provide better support for HTML (specifically nested HTML) ([#4221](https://github.com/streamlit/streamlit/pull/4221)).\n- 📖 Expanders maintain their expanded state better when multiple expanders are present ([#4290](https://github.com/streamlit/streamlit/pull/4290)).\n- 🗳 Improved file uploader and camera input to call its `on_change` handler only when necessary ([#4270](https://github.com/streamlit/streamlit/pull/4270)).\n\n## **Version 1.4.0**\n\n_Release date: Jan 13, 2022_\n\n**Highlights**\n\n- 📸 Introducing `st.camera_input` for uploading images straight from your camera.\n\n**Notable Changes**\n\n- 🚦 Widgets now have the `disabled` parameter that removes interactivity.\n- 🚮 Clear `st.experimental_memo` and `st.experimental_singleton` programmatically by using the `clear()` method on a cached function.\n- 📨 Developers can now configure the maximum size of a message to accommodate larger messages within the Streamlit application. See `server.maxMessageSize`.\n- 🐍 We formally added support for Python 3.10.\n\n**Other Changes**\n\n- 😵‍💫 Calling `str` or `repr` on `threading.current_thread()` does not cause a RecursionError ([#4172](https://github.com/streamlit/streamlit/issues/4172)).\n- 📹 Gracefully stop screencast recording when user removes permission to record ([#4180](https://github.com/streamlit/streamlit/pull/4180)).\n- 🌇 Better scale images by using a higher-quality image bilinear resampling algorithm ([#4159](https://github.com/streamlit/streamlit/pull/4159))."
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019",
    "content": "# 2019 release notes\n\nThis page contains release notes for Streamlit versions released in 2019. For the latest version of Streamlit, see [Release notes](/develop/quick-reference/release-notes).\n\n## Version 0.52.0\n\n_Release date: December 20, 2019_\n\n**Highlights:**\n\n- 📤 Preview release of the file uploader widget. To try it out just call\n  [`st.file_uploader`](https://docs.streamlit.io/en/latest/api.html#streamlit.file_uploader)!\n\n  _Note that as a **preview release** things may change in the near future.\n  Looking forward to hearing input from the community before we stabilize the\n  API!_\n\n- 👋 Support for [emoji codes](https://www.webfx.com/tools/emoji-cheat-sheet/) in\n  `st.write` and `st.markdown`! Try it out with `st.write(\"Hello :wave:\")`.\n\n**Breaking changes:**\n\n- 🧹 `st.pyplot` now clears figures by default, since that's what you want 99% of\n  the time. This allows you to create two or more Matplotlib charts without\n  having to call\n  [`pyplot.clf`](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.clf.html)\n  every time. If you want to turn this behavior off, use\n  [`st.pyplot(clear_figure=False)`](https://docs.streamlit.io/en/latest/api.html#streamlit.pyplot)\n- 📣 `st.cache` no longer checks for input mutations. This is the first change\n  of our ongoing effort to simplify the caching system and prepare Streamlit\n  for the launch of other caching primitives like Session State!\n\n## Version 0.51.0\n\n_Release date: November 30, 2019_\n\n**Highlights:**\n\n- 🐕 You can now tweak the behavior of the file watcher with the config option `server.fileWatcherType`. Use it to switch between:\n  - `auto` (default) : Streamlit will attempt to use the watchdog module, and\n    falls back to polling if watchdog is not available.\n  - `watchdog` : Force Streamlit to use the watchdog module.\n  - `poll` : Force Streamlit to always use polling.\n  - `none` : Streamlit will not watch files.\n\n**Notable bug fixes:**\n\n- Fix the \"keyPrefix\" option in static report sharing [#724](https://github.com/streamlit/streamlit/pull/724)\n- Add support for getColorX and getTargetColorX to DeckGL Chart [#718](https://github.com/streamlit/streamlit/pull/718)\n- Fixing Tornado on Windows + Python 3.8 [#682](https://github.com/streamlit/streamlit/pull/682)\n- Fall back on webbrowser if xdg-open is not installed on Linux [#701](https://github.com/streamlit/streamlit/pull/701)\n- Fixing number input spin buttons for Firefox [#683](https://github.com/streamlit/streamlit/pull/683)\n- Fixing CTRL+ENTER on Windows [#699](https://github.com/streamlit/streamlit/pull/699)\n- Do not automatically create credential file when in headless mode [#467](https://github.com/streamlit/streamlit/pull/467)\n\n## Version 0.50.1\n\n_Release date: November 10, 2019_\n\n**Highlights:**\n\n- 👩‍🎓 SymPy support and ability to draw mathematical expressions using LaTeX! See\n  [`st.latex`](/develop/api-reference/text/st.latex),\n  [`st.markdown`](/develop/api-reference/text/st.markdown),\n  and\n  [`st.write`](/develop/api-reference/write-magic/st.write).\n- 🌄 You can now set config options using environment variables. For example,\n  `export STREAMLIT_SERVER_PORT=9876`.\n- 🐱 Ability to call `streamlit run` directly with Github and Gist URLs. No\n  need to grab the \"raw\" URL first!\n- 📃 Cleaner exception stack traces. We now remove all Streamlit-specific code\n  from stack traces originating from the user's app.\n\n## Version 0.49.0\n\n_Release date: October 23, 2019_\n\n**Highlights:**\n\n- 💯 New input widget for entering numbers with the keyboard: `st.number_input()`\n- 📺 Audio/video improvements: ability to load from a URL, to embed YouTube\n  videos, and to set the start position.\n- 🤝 You can now (once again) share static snapshots of your apps to S3! See\n  the S3 section of `streamlit config show` to set it up. Then share from\n  top-right menu.\n- ⚙️ Use `server.baseUrlPath` config option to set Streamlit's URL to something\n  like `http://domain.com/customPath`.\n\n**Notable bug fixes:**\n\n- Fixes numerous Windows bugs, including [Issues\n  #339](https://github.com/streamlit/streamlit/issues/399) and\n  [#401](https://github.com/streamlit/streamlit/issues/301).\n\n## Version 0.48.0\n\n_Release date: October 12, 2019_\n\n**Highlights:**\n\n- 🔧 Ability to set config options as command line flags or in a local config file.\n- ↕️ You can now maximize charts and images!\n- ⚡ Streamlit is now much faster when writing data in quick succession to your app.\n- ✳️ Ability to blacklist folder globs from \"run on save\" and `@st.cache` hashing.\n- 🎛️ Improved handling of widget state when Python file is modified.\n- 🙈 Improved HTML support in `st.write` and `st.markdown`. HTML is still unsafe, though!\n\n**Notable bug fixes:**\n\n- Fixes `@st.cache` bug related to having your Python environment on current\n  working directory. [Issue #242](https://github.com/streamlit/streamlit/issues/242)\n- Fixes loading of root url `/` on Windows. [Issue #244](https://github.com/streamlit/streamlit/issues/244)\n\n## Version 0.47.0\n\n_Release date: October 1, 2019_\n\n**Highlights:**\n\n- 🌄 New hello.py showing off 4 glorious Streamlit apps. Try it out!\n- 🔄 Streamlit now automatically selects an unused port when 8501 is already in use.\n- 🎁 Sidebar support is now out of beta! Just start any command with `st.sidebar.` instead of `st.`\n- ⚡ Performance improvements: we added a cache to our websocket layer so we no longer re-send data to the browser when it hasn't changed between runs\n- 📈 Our \"native\" charts `st.line_chart`, `st.area_chart` and `st.bar_chart` now use Altair behind the scenes\n- 🔫 Improved widgets: custom st.slider labels; default values in multiselect\n- 🕵️‍♀️ The filesystem watcher now ignores hidden folders and virtual environments\n- 💅 Plus lots of polish around caching and widget state management\n\n**Breaking change:**\n\n- 🛡️ We have temporarily disabled support for sharing static \"snapshots\" of Streamlit apps. Now that we're no longer in a limited-access beta, we need to make sure sharing is well thought through and abides by laws like the DMCA. But we're working on a solution!\n\n## Version 0.46.0\n\n_Release date: September 19, 2019_\n\n**Highlights:**\n\n- ✨ Magic commands! Use `st.write` without typing `st.write`. See\n  [https://docs.streamlit.io/en/latest/api.html#magic-commands](https://docs.streamlit.io/en/latest/api.html#magic-commands)\n- 🎛️ New `st.multiselect` widget.\n- 🐍 Fixed numerous install issues so now you can use `pip install streamlit`\n  even in Conda! We've therefore deactivated our Conda repo.\n- 🐞 Multiple bug fixes and additional polish in preparation for our launch!\n\n**Breaking change:**\n\n- 🛡️ HTML tags are now blacklisted in `st.write`/`st.markdown` by default. More\n  information and a temporary work-around at:\n  [https://github.com/streamlit/streamlit/issues/152](https://github.com/streamlit/streamlit/issues/152)\n\n## Version 0.45.0\n\n_Release date: August 28, 2019_\n\n**Highlights:**\n\n- 😱 Experimental support for _sidebar_! Let us know if you want to be a beta\n  tester.\n- 🎁 Completely redesigned `st.cache`! Much more performant, has a cleaner API,\n  support for caching functions called by `@st.cached` functions,\n  user-friendly error messages, and much more!\n- 🖼️ Lightning fast `st.image`, ability to choose between JPEG and PNG\n  compression, and between RGB and BGR (for OpenCV).\n- 💡 Smarter API for `st.slider`, `st.selectbox`, and `st.radio`.\n- 🤖 Automatically fixes the Matplotlib backend -- no need to edit .matplotlibrc\n\n## Version 0.44.0\n\n_Release date: July 28, 2019_\n\n**Highlights:**\n\n- ⚡ Lightning-fast reconnect when you do a ctrl-c/rerun on your Streamlit code\n- 📣 Useful error messages when the connection fails\n- 💎 Fixed multiple bugs and improved polish of our newly-released interactive widgets\n\n## Version 0.43.0\n\n_Release date: July 9, 2019_\n\n**Highlights:**\n\n- ⚡ Support for interactive widgets! 🎈🎉\n\n## Version 0.42.0\n\n_Release date: July 1, 2019_\n\n**Highlights:**\n\n- 💾 Ability to save Vega-Lite and Altair charts to SVG or PNG\n- 🐇 We now cache JS files in your browser for faster loading\n- ⛔ Improvements to error-handling inside Streamlit apps\n\n## Version 0.41.0\n\n_Release date: June 24, 2019_\n\n**Highlights:**\n\n- 📈 Greatly improved our support for named datasets in Vega-Lite and Altair\n- 🙄 Added ability to ignore certain folders when watching for file changes. See the `server.folderWatchBlacklist` config option.\n- ☔ More robust against syntax errors on the user's script and imported modules\n\n## Version 0.40.0\n\n_Release date: June 10, 2019_\n\n**Highlights:**\n\n- Streamlit is more than 10x faster. Just save and watch your analyses update instantly.\n- We changed how you run Streamlit apps:\n  `$ streamlit run your_script.py [script args]`\n- Unlike the previous versions of Streamlit, `streamlit run [script] [script args]` creates a server (now you don't need to worry if the proxy is up). To kill the server, all you need to do is hit **Ctrl+c**.\n\n**Why is this so much faster?**\n\nNow, Streamlit keeps a single Python session running until you kill the server. This means that Streamlit can re-run your code without kicking off a new process; imported libraries are cached to memory. An added bonus is that `st.cache` now caches to memory instead of to disk.\n\n**What happens if I run Streamlit the old way?**\n\nIf you run `$ python your_script.py` the script will execute from top to bottom, but won't produce a Streamlit app.\n\n**What are the limitations of the new architecture?**\n\n- To switch Streamlit apps, first you have to kill the Streamlit server with **Ctrl-c**. Then, you can use `streamlit run` to generate the next app.\n- Streamlit only works when used inside Python files, not interactively from the Python REPL.\n\n**What else do I need to know?**\n\n- The strings we print to the command line when **liveSave** is on have been cleaned up. You may need to adjust any RegEx that depends on those.\n- A number of config options have been renamed:\n\n  | Old config                 | New config            |\n  | -------------------------- | --------------------- |\n  | proxy.isRemote             | server.headless       |\n  | proxy.liveSave             | server.liveSave       |\n  | proxy.runOnSave            | server.runOnSave      |\n  | proxy.watchFileSystem      | server.runOnSave      |\n  | proxy.enableCORS           | server.enableCORS     |\n  | proxy.port                 | server.port           |\n  | browser.proxyAddress       | browser.serverAddress |\n  | browser.proxyPort          | browser.serverPort    |\n  | client.waitForProxySecs    | _n/a_                 |\n  | client.throttleSecs        | _n/a_                 |\n  | client.tryToOutliveProxy   | _n/a_                 |\n  | client.proxyAddress        | _n/a_                 |\n  | client.proxyPort           | _n/a_                 |\n  | proxy.autoCloseDelaySecs   | _n/a_                 |\n  | proxy.reportExpirationSecs | _n/a_                 |\n\n**What if something breaks?**\n\nIf the new Streamlit isn't working, please let us know by Slack or email. You can downgrade at any time with these commands:\n\n```bash\npip install --upgrade streamlit==0.37\n```\n\n```bash\nconda install streamlit=0.37\n```\n\n**What's next?**\n\nThank you for staying with us on this journey! This version of Streamlit lays the foundation for interactive widgets, a new feature of Streamlit we're really excited to share with you in the next few months.\n\n## Version 0.36.0\n\n_Release date: May 03, 2019_\n\n**Highlights**\n\n- 🚣‍♀️ `st.progress()` now also accepts floats from 0.0–1.0\n- 🤯 Improved rendering of long headers in DataFrames\n- 🔐 Shared apps now default to HTTPS\n\n## Version 0.35.0\n\n_Release date: April 26, 2019_\n\n**Highlights**\n\n- 📷 Bokeh support! Check out docs for `st.bokeh_chart`\n- ⚡️ Improved the size and load time of saved apps\n- ⚾️ Implemented better error-catching throughout the codebase"
  },
  {
    "url": "https://docs.streamlit.io/develop/quick-reference/release-notes",
    "content": "# Release notes\n\nThis page lists highlights, bug fixes, and known issues for the latest release of Streamlit. If you're looking for information about nightly releases or experimental features, see [Pre-release features](/develop/quick-reference/prerelease).\n\n## Upgrade Streamlit\n\n<Tip>\n\nTo upgrade to the latest version of Streamlit, run:\n\n```bash\npip install --upgrade streamlit\n```\n\n</Tip>\n\n## **Version 1.46.0 (latest)**\n\n_Release date: June 18, 2025_\n\n**Highlights**\n\n- 🧭 Introducing top navigation! Use [`st.navigation`](https://docs.streamlit.io/develop/api-reference/navigation/st.navigation) with `position=\"top\"` to create a navigation menu across the top of your app.\n- 🔆 You can detect if the viewer is in light mode or dark mode at runtime with [`st.context.theme`](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.context#contexttheme).\n\n**Notable Changes**\n\n- 🪺 Streamlit no longer restricts the nesting of columns, expanders, popovers, and chat message containers, but beware of bad design! Always be mindful of different screen sizes and orientations, and don't overuse nested layouts.\n- ↔️ You can set the width of most Streamlit elements.\n- ⬆️ [`st.form`](https://docs.streamlit.io/develop/api-reference/execution-flow/st.form) has a new parameter to configure its `height`.\n- 🛠️ [`st.columns`](https://docs.streamlit.io/develop/api-reference/layout/st.columns) supports `gap=None` for no gap between columns.\n- 🏋️ Font face declarations in [`config.toml`](https://docs.streamlit.io/develop/api-reference/configuration/config.toml#theme) support weight and unicode ranges ([#11248](https://github.com/streamlit/streamlit/pull/11248), [#11163](https://github.com/streamlit/streamlit/issues/11163), [#11247](https://github.com/streamlit/streamlit/issues/11247)).\n- 😃 Font face declarations are supported in the window variable ([#11628](https://github.com/streamlit/streamlit/pull/11628), [#11568](https://github.com/streamlit/streamlit/issues/11568)).\n- 🔎 Streamlit searches for secrets and configuration options relative to the entrypoint file in addition to the working directory and user root ([#10173](https://github.com/streamlit/streamlit/pull/10173), [#8195](https://github.com/streamlit/streamlit/issues/8195)).\n- 🎨 A new configuration option, `theme.dataframeBorderColor`, lets you set the border color for dataframes and tables separately from other border colors ([#11475](https://github.com/streamlit/streamlit/pull/11475)).\n- 🌯 A new configuration option, `theme.buttonRadius`, lets you set the radius of buttons separately from other elements ([#11464](https://github.com/streamlit/streamlit/pull/11464)).\n- 🖥️ A new configuration option, `theme.codeFontSize`, lets you set the size of code in `st.code`, `st.json`, and `st.help` ([#11508](https://github.com/streamlit/streamlit/pull/11508)).\n- 🔒 You can configure a list of allowed origins when CORS protection is enabled ([#11377](https://github.com/streamlit/streamlit/pull/11377)).\n- 📄 `st.set_page_config` can be called multiple times in a single script run ([#11286](https://github.com/streamlit/streamlit/pull/11286), [#4483](https://github.com/streamlit/streamlit/issues/4483), [#2216](https://github.com/streamlit/streamlit/issues/2216), [#9797](https://github.com/streamlit/streamlit/issues/9797), [#9038](https://github.com/streamlit/streamlit/issues/9038)).\n- 🗺️ `st.pydeck_chart` and [`st.map`](http://st.map) now use Carto by default to provide map tiles ([#11231](https://github.com/streamlit/streamlit/pull/11231)).\n- 👀 You can configure Streamlit to watch additional directories for changes with the new configuration option, `server.folderWatchList` ([#9656](https://github.com/streamlit/streamlit/pull/9656), [#9655](https://github.com/streamlit/streamlit/issues/9655)). Thanks, [akramsystems](https://github.com/akramsystems)!\n\n**Other Changes**\n\n- 🔘 Exception messages include a copy button to conveniently copy the message to your clipboard ([#11250](https://github.com/streamlit/streamlit/pull/11250), [#11083](https://github.com/streamlit/streamlit/issues/11083)). Thanks, [snakeM](https://github.com/snakeM)!\n- ⚓ Streamlit apps can be served from port 3000 ([#11525](https://github.com/streamlit/streamlit/pull/11525), [#8149](https://github.com/streamlit/streamlit/issues/8149)).\n- 👟 Markdown dependencies were upgraded for improved performance ([#11553](https://github.com/streamlit/streamlit/pull/11553), [#11550](https://github.com/streamlit/streamlit/issues/11550)).\n- ↔️ The sidebar is narrower by default and consistently handles the scrollbar spacing ([#11412](https://github.com/streamlit/streamlit/pull/11412)).\n- 👋 We gave Streamlit hello a couple small tweaks ([#11442](https://github.com/streamlit/streamlit/pull/11442)).\n- 🧑‍💻 Base URL window variables are consistently namespaced in `__streamlit` ([#11481](https://github.com/streamlit/streamlit/pull/11481)).\n- 🌐 Streamlit apps now serve a `manifest.json` file ([#11462](https://github.com/streamlit/streamlit/pull/11462)).\n- 🖌️ `st.dataframe` shows row selection boxes always instead of just on hover ([#11411](https://github.com/streamlit/streamlit/pull/11411), [#11410](https://github.com/streamlit/streamlit/issues/11410)).\n- 🦋 `ListColumn` and `LinkColumn` can inherit coloring from `pandas` `Styler` ([#11612](https://github.com/streamlit/streamlit/pull/11612), [#8254](https://github.com/streamlit/streamlit/issues/8254)).\n- 💹 `NumberColumn` and `ProgressColumn` support a Japanese yen number format ([#11588](https://github.com/streamlit/streamlit/pull/11588)). Thanks, [alexmalins](https://github.com/alexmalins)!\n- 🔗 `st.page_link` can inherit an icon when passed a `StreamlitPage` ([#10694](https://github.com/streamlit/streamlit/pull/10694), [#9743](https://github.com/streamlit/streamlit/issues/9743)). Thanks, [abokey1](https://github.com/abokey1)!\n- 🎫 A button's placement in the sidebar or main body of an app is included in its widget identity ([#10881](https://github.com/streamlit/streamlit/pull/10881), [#10598](https://github.com/streamlit/streamlit/issues/10598)). Thanks, [joaooliveira-11](https://github.com/joaooliveira-11)!\n- 🕷️ Built-in Streamlit fonts now use variable font files ([#11646](https://github.com/streamlit/streamlit/pull/11646), [#11600](https://github.com/streamlit/streamlit/pull/11600), [#11534](https://github.com/streamlit/streamlit/pull/11534)).\n- 🤹 Bug fix: Streamlit Markdown correctly formats task lists and block quotes (#11237).\n- 🐞 Bug fix: Horizontal scroll bars are sized correctly in Safari ([#11625](https://github.com/streamlit/streamlit/pull/11625)).\n- 🐝 Bug fix: Unnecessary media caching was reduced to improve efficiency and avoid video player crashes ([#11635](https://github.com/streamlit/streamlit/pull/11635), [#9688](https://github.com/streamlit/streamlit/issues/9688)).\n- 🐜 Bug fix: `st.text` uses the `break-word` CSS property to wrap long lines without whitespace ([#10969](https://github.com/streamlit/streamlit/pull/10969), [#10824](https://github.com/streamlit/streamlit/issues/10824)). Thanks, [matilde2004](https://github.com/matilde2004)!\n- 🪲 Bug fix: Material icons display correctly in `st.markdown` when `unsafe_allow_html=True` ([#11633](https://github.com/streamlit/streamlit/pull/11633), [#9945](https://github.com/streamlit/streamlit/issues/9945)).\n- 🐛 Bug fix: Multi-index column names preserve brackets ([#11617](https://github.com/streamlit/streamlit/pull/11617), [#10415](https://github.com/streamlit/streamlit/issues/10415)).\n- 💅 Bug fix: Various CSS tweaks ([#11631](https://github.com/streamlit/streamlit/pull/11631), [#11632](https://github.com/streamlit/streamlit/pull/11632), [#11630](https://github.com/streamlit/streamlit/pull/11630), [#11611](https://github.com/streamlit/streamlit/issues/11611), [#11577](https://github.com/streamlit/streamlit/pull/11577), [#9085](https://github.com/streamlit/streamlit/issues/9085), [#8671](https://github.com/streamlit/streamlit/issues/8671), [#11576](https://github.com/streamlit/streamlit/pull/11576), [#11569](https://github.com/streamlit/streamlit/issues/11569)).\n- ⛏️ Bug fix: `st.dataframe` clears filter options when applying sort to prevent incorrect highlights ([#11587](https://github.com/streamlit/streamlit/pull/11587), [#11575](https://github.com/streamlit/streamlit/issues/11575)).\n- 📊 Bug fix: Altair charts have the correct width and don't overflow with long titles ([#11585](https://github.com/streamlit/streamlit/pull/11585), [#9984](https://github.com/streamlit/streamlit/issues/9984)).\n- 🍞 Bug fix: `st.toast` messages appear above `st.dialog` containers ([#11578](https://github.com/streamlit/streamlit/pull/11578), [#10383](https://github.com/streamlit/streamlit/issues/10383)).\n- 🪱 Bug fix: Streamlit apps correctly scroll to anchor links ([#11552](https://github.com/streamlit/streamlit/pull/11552), [#11551](https://github.com/streamlit/streamlit/issues/11551)).\n- ✍️ Bug fix: `st.context` does not lose state in an app being edited ([#11506](https://github.com/streamlit/streamlit/pull/11506), [#11330](https://github.com/streamlit/streamlit/issues/11330)).\n- ⬜ Bug fix: `st.code` preserves leading white space ([#10065](https://github.com/streamlit/streamlit/pull/10065), [#6302](https://github.com/streamlit/streamlit/issues/6302)). Thanks, [XuehaiPan](https://github.com/XuehaiPan)!\n- 📅 Bug fix: `st.date_input` shows the correct hover effect when using date ranges ([#11223](https://github.com/streamlit/streamlit/pull/11223), [#10929](https://github.com/streamlit/streamlit/issues/10929)). Thanks, [Bernardo1008](https://github.com/Bernardo1008)!\n- 💩 Bug fix: Dataframes using `pandas` `Styler` correctly display `Enum` values ([#11049](https://github.com/streamlit/streamlit/pull/11049), [#10637](https://github.com/streamlit/streamlit/issues/10637)). Thanks, [BigBird404](https://github.com/BigBird404)!\n- ☠️ Bug fix: `st.context` does not lose state when `st.switch_page` is called ([#11521](https://github.com/streamlit/streamlit/pull/11521), [#11507](https://github.com/streamlit/streamlit/issues/11507)).\n- 👽 Bug fix: File watcher correctly handles custom metaclasses ([#10388](https://github.com/streamlit/streamlit/pull/10388), [#10992](https://github.com/streamlit/streamlit/issues/10992)). Thanks, [HomenShum](https://github.com/HomenShum)!\n- 👻 Bug fix: [`st.map`](http://st.map) uses a private Mapbox token when configured ([#11511](https://github.com/streamlit/streamlit/pull/11511), [#11399](https://github.com/streamlit/streamlit/issues/11399)).\n- 🦀 Bug fix: `vega-interpreter` was updated to prevent unintentional blank axes ([#11514](https://github.com/streamlit/streamlit/pull/11514), [#5733](https://github.com/streamlit/streamlit/issues/5733)).\n- 🦎 Bug fix: Truncated values in `NumberColumn` are rounded correctly ([#11520](https://github.com/streamlit/streamlit/pull/11520), [#11519](https://github.com/streamlit/streamlit/issues/11519)).\n- 🐌 Bug fix: Highlighted in text in Markdown has the correct padding on wrapped lines ([#11530](https://github.com/streamlit/streamlit/pull/11530)).\n- 🕸️ Bug fix: For a Plotly chart, reset axes works correctly after using fullscreen ([#11498](https://github.com/streamlit/streamlit/pull/11498), [#11327](https://github.com/streamlit/streamlit/issues/11327)).\n- 🦗 Bug fix: Altair chart are not cropped on the left on first load ([#10939](https://github.com/streamlit/streamlit/pull/10939), [#9339](https://github.com/streamlit/streamlit/issues/9339)). Thanks, [goncalossmartins](https://github.com/goncalossmartins)!\n- 📈 Bug fix: Chart columns correctly show negative values ([#11048](https://github.com/streamlit/streamlit/pull/11048), [#10411](https://github.com/streamlit/streamlit/issues/10411)). Thanks, [tiagorb1](https://github.com/tiagorb1)!\n- 🦂 Bug fix: Streamlit doesn't crash when editing indices in `st.data_editor` ([#11448](https://github.com/streamlit/streamlit/pull/11448), [#11434](https://github.com/streamlit/streamlit/issues/11434)).\n- 🦟 Bug fix: Color and style is preserved in charts when using `.add_rows()` ([#11414](https://github.com/streamlit/streamlit/pull/11414), [#11312](https://github.com/streamlit/streamlit/issues/11312)).\n- 🌪️ Bug fix: Tornado 6.5.0 is excluded to prevent file uploading errors related to unicode filenames ([#11440](https://github.com/streamlit/streamlit/pull/11440), [#11396](https://github.com/streamlit/streamlit/issues/11396), [#11436](https://github.com/streamlit/streamlit/issues/11436)).\n- 🦠 Bug fix: Selected rows are cleared when a column in `st.dataframe` is sorted ([#11363](https://github.com/streamlit/streamlit/pull/11363), [#11345](https://github.com/streamlit/streamlit/issues/11345)).\n- 📶 Bug fix: Streamlit shows a clearer message when it can't connect to the server and automatically dismisses the message if a connection is successful ([#11366](https://github.com/streamlit/streamlit/pull/11366)).\n- 🪰 Bug fix: Localized number and date formats correctly interpret locales with commas ([#11297](https://github.com/streamlit/streamlit/pull/11297), [#11291](https://github.com/streamlit/streamlit/issues/11291)).\n- 🧹 Bug fix: Streamlit cleans up the forward message cache to prevent WebSocket message errors ([#11302](https://github.com/streamlit/streamlit/pull/11302), [#11299](https://github.com/streamlit/streamlit/issues/11299), [#11300](https://github.com/streamlit/streamlit/issues/11300)).\n- 📜 Bug fix: `st.latex` scrolls horizontally when its content is wider than the app ([#10071](https://github.com/streamlit/streamlit/pull/10071), [#4304](https://github.com/streamlit/streamlit/issues/4304)).\n- 🪳 Bug fix: `st.multiselect` has a more stable sort when filtering options ([#11309](https://github.com/streamlit/streamlit/pull/11309), [#11218](https://github.com/streamlit/streamlit/issues/11218)).\n- 🕷️ Bug fix: `st.multiselect` options are case sensitive and don't overlap in the drop down menu ([#11307](https://github.com/streamlit/streamlit/pull/11307), [#11217](https://github.com/streamlit/streamlit/issues/11217), [#11306](https://github.com/streamlit/streamlit/pull/11306), [#11215](https://github.com/streamlit/streamlit/issues/11215)).\n- 🍪 Bug fix: Streamlit logs an error if the cookie returned by `st.login` is too large ([#11290](https://github.com/streamlit/streamlit/pull/11290), [#11168](https://github.com/streamlit/streamlit/issues/11168)).\n- 🪲 Bug fix: Displaying elements within a fragment's callback logs a clear warning that it's not supported ([#10942](https://github.com/streamlit/streamlit/pull/10942), [#10475](https://github.com/streamlit/streamlit/issues/10475)). Thanks, [Zane-dev16](https://github.com/Zane-dev16)!\n- 🐞 Bug fix: `st.file_uploader` is case insensitive when validating allowed file extensions ([#11261](https://github.com/streamlit/streamlit/pull/11261), [#11259](https://github.com/streamlit/streamlit/issues/11259)).\n- 🐝 Bug fix: Page runs end correctly to prevent invalid widget states ([#11258](https://github.com/streamlit/streamlit/pull/11258), [#11202](https://github.com/streamlit/streamlit/issues/11202)).\n- 👤 Bug fix: Error messages correctly refer to `st.user` instead of `st.experimental_user` ([#11198](https://github.com/streamlit/streamlit/pull/11198)).\n- 🏷️ Bug fix: The missing label warning for widgets includes a stack trace ([#11187](https://github.com/streamlit/streamlit/pull/11187), [#8908](https://github.com/streamlit/streamlit/issues/8908)).\n- 🐛 Bug fix: `st.data_editor` returns the correct result when some rows are deleted and others are added ([#11183](https://github.com/streamlit/streamlit/pull/11183), [#11180](https://github.com/streamlit/streamlit/issues/11180)).\n\n## Older versions of Streamlit\n\n- [2025 release notes](/develop/quick-reference/release-notes/2025)\n- [2024 release notes](/develop/quick-reference/release-notes/2024)\n- [2023 release notes](/develop/quick-reference/release-notes/2023)\n- [2022 release notes](/develop/quick-reference/release-notes/2022)\n- [2021 release notes](/develop/quick-reference/release-notes/2021)\n- [2020 release notes](/develop/quick-reference/release-notes/2020)\n- [2019 release notes](/develop/quick-reference/release-notes/2019)"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav",
    "content": "# Build a custom navigation menu with `st.page_link`\n\nStreamlit lets you build custom navigation menus and elements with `st.page_link`. Introduced in Streamlit version 1.31.0, `st.page_link` can link to other pages in your multipage app or to external sites. When linked to another page in your app, `st.page_link` will show a highlight effect to indicate the current page. When combined with the [`client.showSidebarNavigation`](/develop/concepts/configuration#client) configuration option, you can build sleek, dynamic navigation in your app.\n\n## Prerequisites\n\nCreate a new working directory in your development environment. We'll call this directory `your-repository`.\n\n## Summary\n\nIn this example, we'll build a dynamic navigation menu for a multipage app that depends on the current user's role. We've abstracted away the use of username and creditials to simplify the example. Instead, we'll use a selectbox on the main page of the app to switch between roles. Session State will carry this selection between pages. The app will have a main page (`app.py`) which serves as the abstracted log-in page. There will be three additional pages which will be hidden or accessible, depending on the current role. The file structure will be as follows:\n\n```\nyour-repository/\n├── .streamlit/\n│   └── config.toml\n├── pages/\n│   ├── admin.py\n│   ├── super-admin.py\n│   └── user.py\n├── menu.py\n└── app.py\n```\n\nHere's a look at what we'll build:\n\n<Cloud name=\"doc-custom-navigation\" height=\"400px\" />\n\n## Build the example\n\n### Hide the default sidebar navigation\n\nWhen creating a custom navigation menu, you need to hide the default sidebar navigation using `client.showSidebarNavigation`. Add the following `.streamlit/config.toml` file to your working directory:\n\n```toml\n[client]\nshowSidebarNavigation = false\n```\n\n### Create a menu function\n\nYou can write different menu logic for different pages or you can create a single menu function to call on multiple pages. In this example, we'll use the same menu logic on all pages, including a redirect to the main page when a user isn't logged in. We'll build a few helper functions to do this.\n\n- `menu_with_redirect()` checks if a user is logged in, then either redirects them to the main page or renders the menu.\n- `menu()` will call the correct helper function to render the menu based on whether the user is logged in or not.\n- `authenticated_menu()` will display a menu based on an authenticated user's role.\n- `unauthenticated_menu()` will display a menu for unauthenticated users.\n\nWe'll call `menu()` on the main page and call `menu_with_redirect()` on the other pages. `st.session_state.role` will store the current selected role. If this value does not exist or is set to `None`, then the user is not logged in. Otherwise, it will hold the user's role as a string: `\"user\"`, `\"admin\"`, or `\"super-admin\"`.\n\nAdd the following `menu.py` file to your working directory. (We'll describe the functions in more detail below.)\n\n```python\nimport streamlit as st\n\n\ndef authenticated_menu():\n    # Show a navigation menu for authenticated users\n    st.sidebar.page_link(\"app.py\", label=\"Switch accounts\")\n    st.sidebar.page_link(\"pages/user.py\", label=\"Your profile\")\n    if st.session_state.role in [\"admin\", \"super-admin\"]:\n        st.sidebar.page_link(\"pages/admin.py\", label=\"Manage users\")\n        st.sidebar.page_link(\n            \"pages/super-admin.py\",\n            label=\"Manage admin access\",\n            disabled=st.session_state.role != \"super-admin\",\n        )\n\n\ndef unauthenticated_menu():\n    # Show a navigation menu for unauthenticated users\n    st.sidebar.page_link(\"app.py\", label=\"Log in\")\n\n\ndef menu():\n    # Determine if a user is logged in or not, then show the correct\n    # navigation menu\n    if \"role\" not in st.session_state or st.session_state.role is None:\n        unauthenticated_menu()\n        return\n    authenticated_menu()\n\n\ndef menu_with_redirect():\n    # Redirect users to the main page if not logged in, otherwise continue to\n    # render the navigation menu\n    if \"role\" not in st.session_state or st.session_state.role is None:\n        st.switch_page(\"app.py\")\n    menu()\n```\n\nLet's take a closer look at `authenticated_menu()`. When this function is called, `st.session_state.role` exists and has a value other than `None`.\n\n```python\ndef authenticated_menu():\n    # Show a navigation menu for authenticated users\n```\n\nThe first two pages in the navigation menu are available to all users. Since we know a user is logged in when this function is called, we'll use the label \"Switch accounts\" for the main page. (If you don't use the `label` parameter, the page name will be derived from the file name like it is with the default sidebar navigation.)\n\n```python\n    st.sidebar.page_link(\"app.py\", label=\"Switch accounts\")\n    st.sidebar.page_link(\"pages/user.py\", label=\"Your profile\")\n```\n\nWe only want to show the next two pages to admins. Furthermore, we've chosen to disable&mdash;but not hide&mdash;the super-admin page when the admin user is not a super-admin. We do this using the `disabled` parameter. (`disabled=True` when the role is not `\"super-admin\"`.)\n\n```\n    if st.session_state.role in [\"admin\", \"super-admin\"]:\n        st.sidebar.page_link(\"pages/admin.py\", label=\"Manage users\")\n        st.sidebar.page_link(\n            \"pages/super-admin.py\",\n            label=\"Manage admin access\",\n            disabled=st.session_state.role != \"super-admin\",\n        )\n```\n\nIt's that simple! `unauthenticated_menu()` will only show a link to the main page of the app with the label \"Log in.\" `menu()` does a simple inspection of `st.session_state.role` to switch between the two menu-rendering functions. Finally, `menu_with_redirect()` extends `menu()` to redirect users to `app.py` if they aren't logged in.\n\n<Tip>\n\nIf you want to include emojis in your page labels, you can use the `icon` parameter. There's no need to include emojis in your file name or the `label` parameter.\n\n</Tip>\n\n### Create the main file of your app\n\nThe main `app.py` file will serve as a pseudo-login page. The user can choose a role from the `st.selectbox` widget. A few bits of logic will save that role into Session State to preserve it while navigating between pages&mdash;even when returning to `app.py`.\n\nAdd the following `app.py` file to your working directory:\n\n```python\nimport streamlit as st\nfrom menu import menu\n\n# Initialize st.session_state.role to None\nif \"role\" not in st.session_state:\n    st.session_state.role = None\n\n# Retrieve the role from Session State to initialize the widget\nst.session_state._role = st.session_state.role\n\ndef set_role():\n    # Callback function to save the role selection to Session State\n    st.session_state.role = st.session_state._role\n\n\n# Selectbox to choose role\nst.selectbox(\n    \"Select your role:\",\n    [None, \"user\", \"admin\", \"super-admin\"],\n    key=\"_role\",\n    on_change=set_role,\n)\nmenu() # Render the dynamic menu!\n```\n\n### Add other pages to your app\n\nAdd the following `pages/user.py` file:\n\n```python\nimport streamlit as st\nfrom menu import menu_with_redirect\n\n# Redirect to app.py if not logged in, otherwise show the navigation menu\nmenu_with_redirect()\n\nst.title(\"This page is available to all users\")\nst.markdown(f\"You are currently logged with the role of {st.session_state.role}.\")\n```\n\nSession State resets if a user manually navigates to a page by URL. Therefore, if a user tries to access an admin page in this example, Session State will be cleared, and they will be redirected to the main page as an unauthenicated user. However, it's still good practice to include a check of the role at the top of each restricted page. You can use `st.stop` to halt an app if a role is not whitelisted.\n\n`pages/admin.py`:\n\n```python\nimport streamlit as st\nfrom menu import menu_with_redirect\n\n# Redirect to app.py if not logged in, otherwise show the navigation menu\nmenu_with_redirect()\n\n# Verify the user's role\nif st.session_state.role not in [\"admin\", \"super-admin\"]:\n    st.warning(\"You do not have permission to view this page.\")\n    st.stop()\n\nst.title(\"This page is available to all admins\")\nst.markdown(f\"You are currently logged with the role of {st.session_state.role}.\")\n```\n\n`pages/super-admin.py`:\n\n```python\nimport streamlit as st\nfrom menu import menu_with_redirect\n\n# Redirect to app.py if not logged in, otherwise show the navigation menu\nmenu_with_redirect()\n\n# Verify the user's role\nif st.session_state.role not in [\"super-admin\"]:\n    st.warning(\"You do not have permission to view this page.\")\n    st.stop()\n\nst.title(\"This page is available to super-admins\")\nst.markdown(f\"You are currently logged with the role of {st.session_state.role}.\")\n```\n\nAs noted above, the redirect in `menu_with_redirect()` will prevent a user from ever seeing the warning messages on the admin pages. If you want to see the warning, just add another `st.page_link(\"pages/admin.py\")` button at the bottom of `app.py` so you can navigate to the admin page after selecting the \"user\" role. 😉"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/multipage",
    "content": "# Build multipage apps\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/tutorials/multipage/dynamic-navigation\">\n\n<h5>Create a dynamic navigation menu</h5>\n\nCreate a dynamic, user-dependant navigation menu with `st.navigation`.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation",
    "content": "# Create a dynamic navigation menu\n\n`st.navigation` makes it easy to build dynamic navigation menus. You can change the set of pages passed to `st.navigation` with each rerun, which changes the navigation menu to match. This is a convenient feature for creating custom, role-based navigation menus.\n\nThis tutorial uses `st.navigation` and `st.Page`, which were introduced in Streamlit version 1.36.0. For an older workaround using the `pages/` directory and `st.page_link`, see [Build a custom navigation menu with `st.page_link`](/develop/tutorials/multipage/st.page_link-nav).\n\n## Applied concepts\n\n- Use `st.navigation` and `st.Page` to define a multipage app.\n- Create a dynamic, role-based navigation menu.\n\n## Prerequisites\n\n- This tutorial requires the following version of Streamlit:\n\n  ```\n  streamlit>=1.36.0\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You should have a basic understanding of `st.navigation` and `st.Page`.\n\n## Summary\n\nIn this example, we'll build a dynamic navigation menu for a multipage app that depends on the current user's role. You'll abstract away the use of username and credentials to simplify the example. Instead, you'll use a selectbox to let users choose a role and log in.\n\nThe entrypoint file, `streamlit_app.py` will handle user authentication. The other pages will be stubs representing account management (`settings.py`) and specific pages associated to three roles: Requester, Responder, and Admin. Requesters can access the account and request pages. Responders can access the account and respond pages. Admins can access all pages.\n\nHere's a look at what we'll build:\n\n<Collapse title=\"Complete code\" expanded={false}>\n\n**Directory structure:**\n\n```\nyour-repository/\n├── admin\n│   ├── admin_1.py\n│   └── admin_2.py\n├── images\n│   ├── horizontal_blue.png\n│   └── icon_blue.png\n├── request\n│   ├── request_1.py\n│   └── request_2.py\n├── respond\n│   ├── respond_1.py\n│   └── respond_2.py\n├── settings.py\n└── streamlit_app.py\n```\n\n**`streamlit_app.py`:**\n\n```python\nimport streamlit as st\n\nif \"role\" not in st.session_state:\n    st.session_state.role = None\n\nROLES = [None, \"Requester\", \"Responder\", \"Admin\"]\n\n\ndef login():\n\n    st.header(\"Log in\")\n    role = st.selectbox(\"Choose your role\", ROLES)\n\n    if st.button(\"Log in\"):\n        st.session_state.role = role\n        st.rerun()\n\n\ndef logout():\n    st.session_state.role = None\n    st.rerun()\n\n\nrole = st.session_state.role\n\nlogout_page = st.Page(logout, title=\"Log out\", icon=\":material/logout:\")\nsettings = st.Page(\"settings.py\", title=\"Settings\", icon=\":material/settings:\")\nrequest_1 = st.Page(\n    \"request/request_1.py\",\n    title=\"Request 1\",\n    icon=\":material/help:\",\n    default=(role == \"Requester\"),\n)\nrequest_2 = st.Page(\n    \"request/request_2.py\", title=\"Request 2\", icon=\":material/bug_report:\"\n)\nrespond_1 = st.Page(\n    \"respond/respond_1.py\",\n    title=\"Respond 1\",\n    icon=\":material/healing:\",\n    default=(role == \"Responder\"),\n)\nrespond_2 = st.Page(\n    \"respond/respond_2.py\", title=\"Respond 2\", icon=\":material/handyman:\"\n)\nadmin_1 = st.Page(\n    \"admin/admin_1.py\",\n    title=\"Admin 1\",\n    icon=\":material/person_add:\",\n    default=(role == \"Admin\"),\n)\nadmin_2 = st.Page(\"admin/admin_2.py\", title=\"Admin 2\", icon=\":material/security:\")\n\naccount_pages = [logout_page, settings]\nrequest_pages = [request_1, request_2]\nrespond_pages = [respond_1, respond_2]\nadmin_pages = [admin_1, admin_2]\n\nst.title(\"Request manager\")\nst.logo(\"images/horizontal_blue.png\", icon_image=\"images/icon_blue.png\")\n\npage_dict = {}\nif st.session_state.role in [\"Requester\", \"Admin\"]:\n    page_dict[\"Request\"] = request_pages\nif st.session_state.role in [\"Responder\", \"Admin\"]:\n    page_dict[\"Respond\"] = respond_pages\nif st.session_state.role == \"Admin\":\n    page_dict[\"Admin\"] = admin_pages\n\nif len(page_dict) > 0:\n    pg = st.navigation({\"Account\": account_pages} | page_dict)\nelse:\n    pg = st.navigation([st.Page(login)])\n\npg.run()\n```\n\n</Collapse>\n\n<Cloud name=\"doc-dynamic-navigation\" height=\"600px\" />\n\n## Build the example\n\n### Initialize your app\n\n1. In `your_repository`, create a file named `streamlit_app.py`.\n1. In a terminal, change directories to `your_repository`, and start your app:\n\n   ```bash\n   streamlit run streamlit_app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `streamlit_app.py`, write the following:\n\n   ```python\n   import streamlit as st\n   ```\n\n1. Save your `streamlit_app.py` file, and view your running app.\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `streamlit_app.py`.\n\n1. Return to your code.\n\n### Add your page and image files\n\n1. In `your_repositoy`, create a file named `settings.py`.\n\n1. In `settings.py` add the following stub.\n\n   ```python\n   import streamlit as st\n\n   st.header(\"Settings\")\n   st.write(f\"You are logged in as {st.session_state.role}.\")\n   ```\n\n   In later steps, you'll create an authentication method that saves the current user's role to `st.session_state.role`. Since you'll be blocking access to this page until a user is logged in, you don't need to initialize the `\"role\"` key in Session State for this page.\n\n1. Create similar stubs by changing the value of `st.header` for the following six pages:\n\n   ```\n   your-repository/\n   ├── admin\n   │   ├── admin_1.py\n   │   └── admin_2.py\n   ├── request\n   │   ├── request_1.py\n   │   └── request_2.py\n   └── respond\n       ├── respond_1.py\n       └── respond_2.py\n   ```\n\n   For example, `admin/admin_1.py` should be the following:\n\n   ```python\n   import streamlit as st\n\n   st.header(\"Admin 1\")\n   st.write(f\"You are logged in as {st.session_state.role}.\")\n   ```\n\n1. Create an `images` subdirectory in `your-repository` and add the following two files:\n\n   - [horizontal_blue.png](/images/horizontal_blue.png)\n   - [icon_blue.png](/images/icon_blue.png)\n\n   You now have all the files needed to build your app.\n\n### Initialize global values\n\n1. Return to `streamlit_app.py` and initialize `\"role\"` in Session State.\n\n   ```python\n   if \"role\" not in st.session_state:\n       st.session_state.role = None\n   ```\n\n   You will use this value to gatekeep access to your app. This represents the role of the current, authenticated user.\n\n1. Define the available roles.\n\n   ```python\n   ROLES = [None, \"Requester\", \"Responder\", \"Admin\"]\n   ```\n\n   `None` is included as a role since that is the value corresponding to an unauthenticated user.\n\n### Define your user authentication pages\n\n`st.navigation` lets you define pages from Python functions. Here, you'll define the login and logout pages from Python functions.\n\n1. Begin your login page (function definition).\n\n   ```python\n   def login():\n   ```\n\n1. Add a header for the page.\n\n   ```python\n       st.header(\"Log in\")\n   ```\n\n1. Create a selectbox for the user to choose a role.\n\n   ```python\n       role = st.selectbox(\"Choose your role\", ROLES)\n   ```\n\n1. Add a button to commit the user role to Session State.\n\n   ```python\n       if st.button(\"Log in\"):\n           st.session_state.role = role\n           st.rerun()\n   ```\n\n   This is an abstraction of an authentication workflow. When a user clicks the button, Streamlit saves the role to Session State and reruns the app. In later steps, you'll add logic to direct users to a role's default page when the value changes in `st.session_state.role`. This completes your login page function.\n\n1. Begin your logout page (function definition).\n\n   ```python\n   def logout():\n   ```\n\n1. Immediately set the role to `None` and rerun the app.\n\n   ```python\n       st.session_state.role = None\n       st.rerun()\n   ```\n\n   Since the lougout page function immediately updates Session State and reruns, a user will never view this page. The page will execute in a fraction of a second and, upon rerunning, the app will send the user to the login page. Therefore, no additional elements are rendered on the page. If desired, you can change this page to also include a button, similar to the login page. A button would allow users to confirm they really intend to log out.\n\n### Define all your pages\n\n1. As a convenience, save `st.session_state.role` to a variable.\n\n   ```python\n   role = st.session_state.role\n   ```\n\n1. Define your account pages.\n\n   ```python\n   logout_page = st.Page(logout, title=\"Log out\", icon=\":material/logout:\")\n   settings = st.Page(\"settings.py\", title=\"Settings\", icon=\":material/settings:\")\n   ```\n\n   This gives each page a nice title and icon to make your navigation menu look neat and clean.\n\n1. Define your request pages.\n\n   ```python\n   request_1 = st.Page(\n       \"request/request_1.py\",\n       title=\"Request 1\",\n       icon=\":material/help:\",\n       default=(role == \"Requester\"),\n   )\n   request_2 = st.Page(\n       \"request/request_2.py\", title=\"Request 2\", icon=\":material/bug_report:\"\n   )\n   ```\n\n   If you don't manually declare a default page in `st.navigation`, then the first page will automatically be the default. The first page in the menu will be \"Log out\" within an \"Account\" section of the menu. Therefore, you'll need to tell Streamlit what page each user should be directed to by default.\n\n   This code dynamically sets `default=True` when the role is \"Requester\" and sets it to `False`, otherwise.\n\n1. Define your remaining pages.\n\n   ```python\n   respond_1 = st.Page(\n       \"respond/respond_1.py\",\n       title=\"Respond 1\",\n       icon=\":material/healing:\",\n       default=(role == \"Responder\"),\n   )\n   respond_2 = st.Page(\n       \"respond/respond_2.py\", title=\"Respond 2\", icon=\":material/handyman:\"\n   )\n   admin_1 = st.Page(\n       \"admin/admin_1.py\",\n       title=\"Admin 1\",\n       icon=\":material/person_add:\",\n       default=(role == \"Admin\"),\n   )\n   admin_2 = st.Page(\"admin/admin_2.py\", title=\"Admin 2\", icon=\":material/security:\")\n   ```\n\n   Similar to the request pages, the `default` parameter is set for the other roles' default pages.\n\n1. Group your pages into convenient lists.\n\n   ```python\n   account_pages = [logout_page, settings]\n   request_pages = [request_1, request_2]\n   respond_pages = [respond_1, respond_2]\n   admin_pages = [admin_1, admin_2]\n   ```\n\n   These are all the pages available to logged-in users.\n\n### Define your common elements and navigation\n\n1. Add a title to show on all pages.\n\n   ```python\n   st.title(\"Request manager\")\n   ```\n\n   Since you're calling the title command in your entrypoint file, this title will be visible on all pages. Elements created in your entrypoint file create a frame of common elements around all your pages.\n\n1. Add a logo to your app.\n\n   ```python\n   st.logo(\"images/horizontal_blue.png\", icon_image=\"images/icon_blue.png\")\n   ```\n\n   Once again, since you're calling this command in your entrypoint file, you won't need to also call it within each page.\n\n1. Initialize a dictionary of page lists.\n\n   ```python\n   page_dict = {}\n   ```\n\n   In the next step, you'll check the user's role and add pages to the dictionary that the user is allowed to access. When `st.navigation` receives a dictionary of page lists, it creates a navigation menu with groups of pages and section headers.\n\n1. Build the dictionary of allowed pages by checking the user's role.\n\n   ```python\n   if st.session_state.role in [\"Requester\", \"Admin\"]:\n       page_dict[\"Request\"] = request_pages\n   if st.session_state.role in [\"Responder\", \"Admin\"]:\n       page_dict[\"Respond\"] = respond_pages\n   if st.session_state.role == \"Admin\":\n       page_dict[\"Admin\"] = admin_pages\n   ```\n\n1. Check if the user is allowed to access any pages and add the account pages if they are.\n\n   ```python\n   if len(page_dict) > 0:\n       pg = st.navigation({\"Account\": account_pages} | page_dict)\n   ```\n\n   If `page_dict` is not empty, then the user is logged in. The `|` operator merges the two dictionaries, adding the account pages to the beginning.\n\n1. Fallback to the login page if the user isn't logged in.\n\n   ```python\n   else:\n       pg = st.navigation([st.Page(login)])\n   ```\n\n1. Execute the page returned by `st.navigation`.\n\n   ```python\n   pg.run()\n   ```\n\n1. Save your `streamlit_app.py` file and view your app!\n\n   Try logging in, switching pages, and logging out. Try again with a different role."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake",
    "content": "# Connect Streamlit to Snowflake\n\n## Introduction\n\nThis guide explains how to securely access a Snowflake database from Streamlit. It uses [st.connection](/develop/api-reference/connections/st.connection), the [Snowpark library](https://docs.snowflake.com/en/developer-guide/snowpark/python/index), and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management).\n\n### Prerequisites\n\n- The following packages must be installed in your Python environment:\n\n  ```txt\n  streamlit>=1.28\n  snowflake-snowpark-python>=0.9.0\n  snowflake-connector-python>=2.8.0\n  ```\n\n    <Note>\n        Use the correct version of Python required by `snowflake-snowpark-python`. For example, if you use `snowflake-snowpark-python==1.23.0`, you must use Python version \\>=3.8, \\<3.12.\n    </Note>\n\n- You must have a Snowflake account. To create a trial account, see the [tutorial](/get-started/installation/streamlit-in-snowflake) in _Get started_.\n- You should have a basic understanding of [`st.connection`](/develop/api-reference/connections/st.connection) and [Secrets management](/develop/concepts/connections/secrets-management).\n\n## Create a Snowflake database\n\nIf you already have a database that you want to use, you can [skip to the next step](#add-connection-parameters-to-your-local-app-secrets).\n\n1. Sign in to your Snowflake account at [https://app.snowflake.com](https://app.snowflake.com).\n1. In the left navigation, select \"**Projects**,\" and then select \"**Worksheets**.\"\n1. To create a new worksheet, in the upper-right corner, click the plus icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>add</i>).\n\n   You can use a worksheet to quickly and conveniently execute SQL statements. This is a great way to learn about and experiment with SQL in a trial account.\n\n1. Optional: To rename your worksheet, in the upper-left corner, hover over the tab with your worksheet name, and then click the overflow menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>). Select \"**Rename**\", enter a new worksheet name (e.g. \"Scratchwork\"), and then press \"**Enter**\".\n1. To create a new database with a table, in your worksheet's SQL editor, type and execute the following SQL statements:\n\n   ```sql\n   CREATE DATABASE PETS;\n\n   CREATE TABLE MYTABLE (NAME varchar(80), PET varchar(80));\n\n   INSERT INTO MYTABLE\n   VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');\n\n   SELECT * FROM MYTABLE;\n   ```\n\n   To execute the statements in a worksheet, select all the lines you want to execute by highlighting them with your mouse. Then, in the upper-right corner, click the play button (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>play_arrow</i>). Alternatively, if you want to execute everything in a worksheet, click the down arrow (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>expand_more</i>) next to the play button, and select \"**Run All**\".\n\n   <Image alt=\"AWS screenshot 1\" src=\"/images/databases/snowflake-worksheet-execute.png\" />\n\n   <Important>\n\n   If no lines are highlighted and you click the play button, only the line with your cursor will be executed.\n\n   </Important>\n\n1. Optional: To view your new database, above the left navigation, select \"**Databases**.\" Click the down arrows (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>expand_more</i>) to expand \"PETS\" → \"PUBLIC\" → \"Tables\" → \"MYTABLE.\"\n\n   <Image alt=\"AWS screenshot 2\" src=\"/images/databases/snowflake-database-new.png\" />\n\n1. For your use in later steps, note down your role, warehouse, database, and schema. In the preceding screenshot, these are the following:\n\n   ```toml\n   role = \"ACCOUNTADMIN\"\n   warehouse = \"COMPUTE_WH\"\n   database = \"PETS\"\n   schema = \"PUBLIC\"\n   ```\n\n   Because the SQL statements did not specify a schema, they defaulted to the \"PUBLIC\" schema within the new \"PETS\" database. The role and warehouse are trial-account defaults. You can see the role and warehouse used by your worksheet in the upper-right corner, to the left of the \"**Share**\" and play (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>play_arrow</i>) buttons.\n\n   In Snowflake, databases provide storage, and warehouses provide compute. When you configure your connection, you aren't explicitly required to declare role, warehouse, database, and schema; if these are not specified, the connection will use your account defaults. If you want to use multiple roles, warehouses, or databases, you can also change these settings within an active connection. However, declaring these defaults avoids unintentional selections.\n\n1. To conveniently copy your account identifier, in the lower-left corner, click your profile image, and hover over your account. A popover dialog expands to the right with your organization and account. In the popover, hover over your account, and click the copy icon (<i style={{ verticalAlign: \"-.25em\", transform: \"rotateZ(90deg)\" }} className={{ class: \"material-icons-sharp\" }}>content_copy</i>).\n\n   The account identifier in your clipboard is period-separated, which is the format used for SQL statements. However, the Snowflake Connector for Python requires a hyphen-separated format. Paste your account identifier into your notes, and change the period to a hyphen.\n\n   ```toml\n   account = \"xxxxxxx-xxxxxxx\"\n   ```\n\n   For more information, see [Account identifiers](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html) in the Snowflake docs.\n\n## Add connection parameters to your local app secrets\n\nThere are three places Streamlit looks for your connection parameters: keyword arguments in `st.connection`, `.streamlit/secrets.toml`, and `.snowflake/configuration.toml`. For more information, especially if you want to manage multiple connections, see the examples in the API reference for [`SnowflakeConnnection`](/develop/api-reference/connections/st.connections.snowflakeconnection).\n\nTo configure your connection, you must specify the following:\n\n    - Your account identifier (`account`)\n    - Your username (`user`)\n    - Some form of authentication parameter (like `password` or `private_key_file`)\n\nIf you don't have MFA on your account, you can just specify your `password`. Alternatively, you can set up [key-pair authentication](https://docs.snowflake.com/en/user-guide/key-pair-auth) on your account and point to your `private_key_file`. If you are just looking for a quick, local connection, you can set `authenticator` to prompt you for credentials in an external browser.\n\nIn addition to the three required parameters to authenticate your connection, it is common to specify the default `role`, `warehouse`, `database`, and `schema` for convenience. For more information about required and optional parameters, see the [Snowflake Connector for Python](https://docs.snowflake.com/en/developer-guide/python-connector/python-connector-api#functions) documentation.\n\n### Option 1: Use `.streamlit/secrets.toml`\n\n1. If you don't already have a `.streamlit/secrets.toml` file in your app's working directory, create an empty secrets file.\n\n   To learn more, see [Secrets Management](/develop/concepts/connections/secrets-management).\n\n   <Important>\n\n   Add this file to `.gitignore` and don't commit it to your GitHub repo! If you want to use this connection in multiple repositories, you can create a global `secrets.toml` file instead. For more information, see [`secrets.toml` file location](/develop/api-reference/connections/secrets.toml#file-location).\n\n   </Important>\n\n1. Add your connection parameters to `.streamlit/secrets.toml`:\n\n   ```toml\n   [connections.snowflake]\n   account = \"xxxxxxx-xxxxxxx\"\n   user = \"xxx\"\n   private_key_file = \"../xxx/xxx.p8\"\n   role = \"xxx\"\n   warehouse = \"xxx\"\n   database = \"xxx\"\n   schema = \"xxx\"\n   ```\n\n   <Important>\n\n   Your account identifier must be hyphen-separated: `<my_organization>-<my_account>`. This is the general-purpose identifier format and not the period-separated format used within SQL statements.\n\n   </Important>\n\n   In the example above, the connection uses key-pair authentication. Therefore, `private_key_file` is defined instead of `password`. `private_key_file` can be an absolute or relative path. If you use a relative path, it should be relative to your app's working directory (where you execute `streamlit run`).\n\n### Option 2: Use `.snowflake/connections.toml`\n\nIf you already have your connection configured using [Snowflake's connections file](https://docs.snowflake.com/en/developer-guide/python-connector/python-connector-connect#connecting-using-the-connections-toml-file), you can use it as-is. If you are using a default connection, no change is needed in later steps of this tutorial. If you are using a named connection, you will need to include the name in `st.connection`. This is noted in a later step. For information about using named connections, see the examples in the API reference for [`SnowflakeConnnection`](/develop/api-reference/connections/st.connections.snowflakeconnection).\n\n1. If you don't already have a `.snowflake/configuration.toml` file in your user directory, create an empty connections file.\n1. Add your connection parameters to `.snowflake/connection.toml`:\n\n   ```toml\n   [default]\n   account = \"xxxxxxx-xxxxxxx\"\n   user = \"xxx\"\n   private_key_file = \"../xxx/xxx.p8\"\n   role = \"xxx\"\n   warehouse = \"xxx\"\n   database = \"xxx\"\n   schema = \"xxx\"\n   ```\n\n   This example uses key-pair authentication as described in the previous option.\n\n## Write your Streamlit app\n\n1. Copy the following code to your Streamlit app and save it. If you are not using the example database and table from the first section of this tutorial, replace the SQL query and results handling as appropriate.\n\n   ```python\n   # streamlit_app.py\n\n   import streamlit as st\n\n   conn = st.connection(\"snowflake\")\n   df = conn.query(\"SELECT * FROM mytable;\", ttl=\"10m\")\n\n   for row in df.itertuples():\n       st.write(f\"{row.NAME} has a :{row.PET}:\")\n   ```\n\n   The `st.connection` command creates a `SnowflakeConnection` object and handles secrets retrieval. The `.query()` method handles query caching and retries. By default, query results are cached without expiring. Setting `ttl=\"10m\"` ensures that the query result is cached for no longer than 10 minutes. To disable caching, you can set `ttl=0` instead. Learn more in [Caching](/develop/concepts/architecture/caching).\n\n   <Note>\n\n   If you configured your connection using a named connection in `.snowflake/connections.toml` instead of `[default]` (Option 2 above), you must include your connection name in `st.connection`. If you have `[my_connection]` in your connections file, replace the line with `st.connection` as follows:\n\n   ```python\n   conn = st.connection(\"my_connection\", type=\"snowflake\")\n   ```\n\n   </Note>\n\n1. In your working directory, open a terminal, and run your Streamlit app.\n\n   ```bash\n   streamlit run streamlit_app.py\n   ```\n\n   If everything worked out (and you used the example table from the first section), your app should look like this:\n\n   ![Finished app screenshot](/images/databases/streamlit-app.png)\n\n### Use a Snowpark session\n\nThe [SnowflakeConnection](/develop/api-reference/connections/st.connections.snowflakeconnection) used above also provides access to [Snowpark sessions](https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/session.html) for dataframe-style operations that run natively inside Snowflake. Using this approach, you can rewrite the app above as follows:\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\n\nconn = st.connection(\"snowflake\")\n\n@st.cache_data\ndef load_table():\n    session = conn.session()\n    return session.table(\"mytable\").to_pandas()\n\ndf = load_table()\n\nfor row in df.itertuples():\n    st.write(f\"{row.NAME} has a :{row.PET}:\")\n```\n\nBecause this example uses `.session()` instead of `.query()`, caching is added manually for better performance and efficiency.\n\nIf everything worked out (and you used the example table from the first section), your app should look the same as the preceding screenshot.\n\n## Connecting to Snowflake from Community Cloud\n\nThis tutorial assumes a local Streamlit app, however you can also connect to Snowflake from apps hosted in Community Cloud. The main additional steps are:\n\n- [Include information about dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies) using a `requirements.txt` file with `snowflake-snowpark-python` and any other dependencies.\n- [Add your secrets](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management) to your Community Cloud app. You must use the `.streamlit/secrets.toml` format described in [Option 1](/develop/tutorials/databases/snowflake#option-1-use-streamlitsecretstoml) above."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/public-gsheet",
    "content": "# Connect Streamlit to a public Google Sheet\n\n## Introduction\n\nThis guide explains how to securely access a public Google Sheet from Streamlit. It uses [st.connection](/develop/api-reference/connections/st.connection), [Streamlit GSheetsConnection](https://github.com/streamlit/gsheets-connection), and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management).\n\nThis method requires you to enable link sharing for your Google Sheet. While the sharing link will not appear in your code (and actually acts as sort of a password!), someone with the link can get all the data in the Sheet. If you don't want this, follow the (more complicated) guide to [Connect Streamlit to a private Google Sheet](private-gsheet).\n\n### Prerequisites\n\nThis tutorial requires `streamlit>=1.28` and `st-gsheets-connection` in your Python environment.\n\n## Create a Google Sheet and turn on link sharing\n\nIf you already have a Sheet that you want to access, you can [skip to the next step](#add-the-sheets-url-to-your-local-app-secrets). See Google's documentation on how to [share spreadsheets](https://support.google.com/docs/answer/9331169?hl=en#6.1) for more information.\n\nCreate a spreadsheet with this example data and create a share link. The link should have \"Anyone with the link\" set as a \"Viewer.\"\n\n<div style={{ maxWidth: '200px', margin: 'auto' }}>\n\n| name   | pet  |\n| :----- | :--- |\n| Mary   | dog  |\n| John   | cat  |\n| Robert | bird |\n\n</div>\n\n<Flex>\n<Image alt=\"screenshot 1\" src=\"/images/databases/public-gsheet-1.png\" />\n<Image alt=\"screenshot 1\" src=\"/images/databases/public-gsheet-2.png\" />\n</Flex>\n\n## Add the Sheets URL to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Create this file if it doesn't exist yet and add the share link of your Google Sheet to it as shown below:\n\n```toml\n# .streamlit/secrets.toml\n[connections.gsheets]\nspreadsheet = \"https://docs.google.com/spreadsheets/d/xxxxxxx/edit#gid=0\"\n```\n\n<Important>\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\nfrom streamlit_gsheets import GSheetsConnection\n\n# Create a connection object.\nconn = st.connection(\"gsheets\", type=GSheetsConnection)\n\ndf = conn.read()\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n```\n\nSee `st.connection` above? This handles secrets retrieval, setup, query caching and retries. By default, `.read()` results are cached without expiring. You can pass optional parameters to `.read()` to customize your connection. For example, you can specify the name of a worksheet, cache expiration time, or pass-through parameters for [`pandas.read_csv`](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) like this:\n\n```python\ndf = conn.read(\n    worksheet=\"Sheet1\",\n    ttl=\"10m\",\n    usecols=[0, 1],\n    nrows=3,\n)\n```\n\nIn this case, we set `ttl=\"10m\"` to ensure the query result is cached for no longer than 10 minutes. You can also set `ttl=0` to disable caching. Learn more in [Caching](/develop/concepts/architecture/caching). We've declared optional parameters `usecols=[0,1]` and `nrows=3` for `pandas` to use under the hood.\n\nIf everything worked out (and you used the example table we created above), your app should look like this:\n\n![Finished app screenshot](/images/databases/streamlit-app.png)\n\n## Connecting to a Google Sheet from Community Cloud\n\nThis tutorial assumes a local Streamlit app, however you can also connect to Google Sheets from apps hosted in Community Cloud. The main additional steps are:\n\n- [Include information about dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies) using a `requirements.txt` file with `st-gsheets-connection` and any other dependencies.\n- [Add your secrets](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management) to your Community Cloud app."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/mysql",
    "content": "# Connect Streamlit to MySQL\n\n## Introduction\n\nThis guide explains how to securely access a **_remote_** MySQL database from Streamlit Community Cloud. It uses [st.connection](/develop/api-reference/connections/st.connection) and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management). The below example code will **only work on Streamlit version >= 1.28**, when `st.connection` was added.\n\n## Create a MySQL database\n\n<Note>\n\nIf you already have a database that you want to use, feel free\nto [skip to the next step](#add-username-and-password-to-your-local-app-secrets).\n\n</Note>\n\nFirst, follow [this tutorial](https://dev.mysql.com/doc/mysql-getting-started/en/) to install MySQL and start the MySQL server (note down the username and password!). Once your MySQL server is up and running, connect to it with the `mysql` client and enter the following commands to create a database and a table with some example values:\n\n```sql\nCREATE DATABASE pets;\n\nUSE pets;\n\nCREATE TABLE mytable (\n    name varchar(80),\n    pet varchar(80)\n);\n\nINSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');\n```\n\n## Add username and password to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Learn more about [Streamlit secrets management here](/develop/concepts/connections/secrets-management). Create this file if it doesn't exist yet and add the database name, user, and password of your MySQL server as shown below:\n\n```toml\n# .streamlit/secrets.toml\n\n[connections.mysql]\ndialect = \"mysql\"\nhost = \"localhost\"\nport = 3306\ndatabase = \"xxx\"\nusername = \"xxx\"\npassword = \"xxx\"\nquery = { charset = \"xxx\" }\n```\n\nIf you use `query` when defining your connection, you must use `streamlit>=1.35.0`.\n\n<Important>\n\nWhen copying your app secrets to Streamlit Community Cloud, be sure to replace the values of **host**, **port**, **database**, **username**, and **password** with those of your _remote_ MySQL database!\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Copy your app secrets to the cloud\n\nAs the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add dependencies to your requirements file\n\nAdd the [mysqlclient](https://github.com/PyMySQL/mysqlclient) and [SQLAlchemy](https://github.com/sqlalchemy/sqlalchemy) packages to your `requirements.txt` file, preferably pinning its version (replace `x.x.x` with the version you want installed):\n\n```bash\n# requirements.txt\nmysqlclient==x.x.x\nSQLAlchemy==x.x.x\n```\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it. Make sure to adapt `query` to use the name of your table.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\n\n# Initialize connection.\nconn = st.connection('mysql', type='sql')\n\n# Perform query.\ndf = conn.query('SELECT * from mytable;', ttl=600)\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n```\n\nSee `st.connection` above? This handles secrets retrieval, setup, query caching and retries. By default, `query()` results are cached without expiring. In this case, we set `ttl=600` to ensure the query result is cached for no longer than 10 minutes. You can also set `ttl=0` to disable caching. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nIf everything worked out (and you used the example table we created above), your app should look like this:\n\n![Finished app screenshot](/images/databases/streamlit-app.png)"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/tigergraph",
    "content": "# Connect Streamlit to TigerGraph\n\n## Introduction\n\nThis guide explains how to securely access a TigerGraph database from Streamlit Community Cloud. It uses the [pyTigerGraph](https://pytigergraph.github.io/pyTigerGraph/GettingStarted/) library and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management).\n\n## Create a TigerGraph Cloud Database\n\nFirst, follow the official tutorials to create a TigerGraph instance in TigerGraph Cloud, either as a [blog](https://www.tigergraph.com/blog/getting-started-with-tigergraph-3-0/) or a [video](https://www.youtube.com/watch?v=NtNW2e8MfCQ). Note your username, password, and subdomain.\n\nFor this tutorial, we will be using the COVID-19 starter kit. When setting up your solution, select the “COVID-19 Analysis\" option.\n\n![TG_Cloud_COVID19](/images/databases/tigergraph-1.png)\n\nOnce it is started, ensure your data is downloaded and queries are installed.\n\n![TG_Cloud_Schema](/images/databases/tigergraph-2.png)\n\n## Add username and password to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app’s root directory. Create this file if it doesn’t exist yet and add your TigerGraph Cloud instance username, password, graph name, and subdomain as shown below:\n\n```toml\n# .streamlit/secrets.toml\n\n[tigergraph]\nhost = \"https://xxx.i.tgcloud.io/\"\nusername = \"xxx\"\npassword = \"xxx\"\ngraphname = \"xxx\"\n```\n\n<Important>\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Copy your app secrets to the cloud\n\nAs the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on Edit Secrets. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add PyTigerGraph to your requirements file\n\nAdd the pyTigerGraph package to your `requirements.txt` file, preferably pinning its version (replace `x.x.x` with the version you want installed):\n\n```bash\n# requirements.txt\npyTigerGraph==x.x.x\n```\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it. Make sure to adapt the name of your graph and query.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\nimport pyTigerGraph as tg\n\n# Initialize connection.\nconn = tg.TigerGraphConnection(**st.secrets[\"tigergraph\"])\nconn.apiToken = conn.getToken(conn.createSecret())\n\n# Pull data from the graph by running the \"mostDirectInfections\" query.\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\n@st.cache_data(ttl=600)\ndef get_data():\n    most_infections = conn.runInstalledQuery(\"mostDirectInfections\")[0][\"Answer\"][0]\n    return most_infections[\"v_id\"], most_infections[\"attributes\"]\n\nitems = get_data()\n\n# Print results.\nst.title(f\"Patient {items[0]} has the most direct infections\")\nfor key, val in items[1].items():\n    st.write(f\"Patient {items[0]}'s {key} is {val}.\")\n```\n\nSee `st.cache_data` above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With `st.cache_data`, it only runs when the query changes or after 10 minutes (that's what `ttl` is for). Watch out: If your database updates more frequently, you should adapt `ttl` or remove caching so viewers always see the latest data. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nIf everything worked out (and you used the example data we created above), your app should look like this:\n\n![Final_App](/images/databases/tigergraph-3.png)"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/aws-s3",
    "content": "# Connect Streamlit to AWS S3\n\n## Introduction\n\nThis guide explains how to securely access files on AWS S3 from Streamlit Community Cloud. It uses [Streamlit FilesConnection](https://github.com/streamlit/files-connection), the [s3fs](https://github.com/dask/s3fs) library and optionally Streamlit's [Secrets management](/develop/concepts/connections/secrets-management).\n\n## Create an S3 bucket and add a file\n\n<Note>\n\nIf you already have a bucket that you want to use, feel free\nto [skip to the next step](#create-access-keys).\n\n</Note>\n\nFirst, [sign up for AWS](https://aws.amazon.com/) or log in. Go to the [S3 console](https://s3.console.aws.amazon.com/s3/home) and create a new bucket:\n\n<Flex>\n<Image alt=\"AWS screenshot 1\" src=\"/images/databases/aws-1.png\" />\n<Image alt=\"AWS screenshot 2\" src=\"/images/databases/aws-2.png\" />\n</Flex>\n\nNavigate to the upload section of your new bucket:\n\n<Flex>\n<Image alt=\"AWS screenshot 3\" src=\"/images/databases/aws-3.png\" />\n<Image alt=\"AWS screenshot 4\" src=\"/images/databases/aws-4.png\" />\n</Flex>\n\nAnd note down the \"AWS Region\" for later. In this example, it's `us-east-1`, but it may differ for you.\n\nNext, upload the following CSV file, which contains some example data:\n\n<Download href=\"/images/databases/myfile.csv\">myfile.csv</Download>\n\n## Create access keys\n\nGo to the [AWS console](https://console.aws.amazon.com/), create access keys as shown below and copy the \"Access Key ID\" and \"Secret Access Key\":\n\n<Flex>\n<Image alt=\"AWS screenshot 5\" src=\"/images/databases/aws-5.png\" />\n<Image alt=\"AWS screenshot 6\" src=\"/images/databases/aws-6.png\" />\n</Flex>\n\n<Tip>\n\nAccess keys created as a root user have wide-ranging permissions. In order to make your AWS account\nmore secure, you should consider creating an IAM account with restricted permissions and using its\naccess keys. More information [here](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html).\n\n</Tip>\n\n## Set up your AWS credentials locally\n\nStreamlit FilesConnection and s3fs will read and use your existing [AWS credentials and configuration](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) if available - such as from an `~/.aws/credentials` file or environment variables.\n\nIf you don't already have this set up, or plan to host the app on Streamlit Community Cloud, you should specify the credentials from a file `.streamlit/secrets.toml` in your app's root directory or your home directory. Create this file if it doesn't exist yet and add to it the access key ID, access key secret, and the AWS default region you noted down earlier, as shown below:\n\n```toml\n# .streamlit/secrets.toml\nAWS_ACCESS_KEY_ID = \"xxx\"\nAWS_SECRET_ACCESS_KEY = \"xxx\"\nAWS_DEFAULT_REGION = \"xxx\"\n```\n\n<Important>\n\nBe sure to replace `xxx` above with the values you noted down earlier, and add this file to `.gitignore` so you don't commit it to your GitHub repo!\n\n</Important>\n\n## Copy your app secrets to the cloud\n\nTo host your app on Streamlit Community Cloud, you will need to pass your credentials to your deployed app via secrets. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` above into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add FilesConnection and s3fs to your requirements file\n\nAdd the [FilesConnection](https://github.com/streamlit/files-connection) and [s3fs](https://github.com/dask/s3fs) packages to your `requirements.txt` file, preferably pinning the versions (replace `x.x.x` with the version you want installed):\n\n```bash\n# requirements.txt\ns3fs==x.x.x\nst-files-connection\n```\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it. Make sure to adapt the name of your bucket and file. Note that Streamlit automatically turns the access keys from your secrets file into environment variables, where `s3fs` searches for them by default.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\nfrom st_files_connection import FilesConnection\n\n# Create connection object and retrieve file contents.\n# Specify input format is a csv and to cache the result for 600 seconds.\nconn = st.connection('s3', type=FilesConnection)\ndf = conn.read(\"testbucket-jrieke/myfile.csv\", input_format=\"csv\", ttl=600)\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.Owner} has a :{row.Pet}:\")\n```\n\nSee `st.connection` above? This handles secrets retrieval, setup, result caching and retries. By default, `read()` results are cached without expiring. In this case, we set `ttl=600` to ensure the file contents is cached for no longer than 10 minutes. You can also set `ttl=0` to disable caching. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nIf everything worked out (and you used the example file given above), your app should look like this:\n\n![Finished app screenshot](/images/databases/streamlit-app.png)"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql",
    "content": "# Connect Streamlit to Microsoft SQL Server\n\n## Introduction\n\nThis guide explains how to securely access a **_remote_** Microsoft SQL Server database from Streamlit Community Cloud. It uses the [pyodbc](https://github.com/mkleehammer/pyodbc/wiki) library and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management).\n\n## Create an SQL Server database\n\n<Note>\n\nIf you already have a remote database that you want to use, feel free\nto [skip to the next step](#add-username-and-password-to-your-local-app-secrets).\n\n</Note>\n\nFirst, follow the Microsoft documentation to install [SQL Server](https://docs.microsoft.com/en-gb/sql/sql-server/?view=sql-server-ver15) and the `sqlcmd` [Utility](https://docs.microsoft.com/en-gb/sql/tools/sqlcmd-utility?view=sql-server-ver15). They have detailed installation guides on how to:\n\n- [Install SQL Server on Windows](https://docs.microsoft.com/en-gb/sql/database-engine/install-windows/install-sql-server?view=sql-server-ver15)\n- [Install on Red Hat Enterprise Linux](https://docs.microsoft.com/en-gb/sql/linux/quickstart-install-connect-red-hat?view=sql-server-ver15)\n- [Install on SUSE Linux Enterprise Server](https://docs.microsoft.com/en-gb/sql/linux/quickstart-install-connect-suse?view=sql-server-ver15)\n- [Install on Ubuntu](https://docs.microsoft.com/en-gb/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15)\n- [Run on Docker](https://docs.microsoft.com/en-gb/sql/linux/quickstart-install-connect-docker?view=sql-server-ver15)\n- [Provision a SQL VM in Azure](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sql/provision-sql-server-linux-virtual-machine?toc=/sql/toc/toc.json)\n\nOnce you have SQL Server installed, note down your SQL Server name, username, and password during setup.\n\n## Connect locally\n\nIf you are connecting locally, use `sqlcmd` to connect to your new local SQL Server instance.\n\n1. In your terminal, run the following command:\n\n   ```bash\n   sqlcmd -S localhost -U SA -P '<YourPassword>'\n   ```\n\n   As you are connecting locally, the SQL Server name is `localhost`, the username is `SA`, and the password is the one you provided during the SA account setup.\n\n2. You should see a **sqlcmd** command prompt `1>`, if successful.\n\n3. If you run into a connection failure, review Microsoft's connection troubleshooting recommendations for your OS ([Linux](https://docs.microsoft.com/en-gb/sql/linux/sql-server-linux-troubleshooting-guide?view=sql-server-ver15#connection) & [Windows](https://docs.microsoft.com/en-gb/sql/linux/sql-server-linux-troubleshooting-guide?view=sql-server-ver15#connection)).\n\n<Tip>\n\nWhen connecting remotely, the SQL Server name is the machine name or IP address. You might also need to open the SQL Server TCP port (default 1433) on your firewall.\n\n</Tip>\n\n### Create a SQL Server database\n\nBy now, you have SQL Server running and have connected to it with `sqlcmd`! 🥳 Let's put it to use by creating a database containing a table with some example values.\n\n1. From the `sqlcmd` command prompt, run the following Transact-SQL command to create a test database `mydb`:\n\n   ```sql\n   CREATE DATABASE mydb\n   ```\n\n2. To execute the above command, type `GO` on a new line:\n\n   ```sql\n   GO\n   ```\n\n### Insert some data\n\nNext create a new table, `mytable`, in the `mydb` database with three columns and two rows.\n\n1. Switch to the new `mydb` database:\n\n   ```sql\n   USE mydb\n   ```\n\n2. Create a new table with the following schema:\n\n   ```sql\n   CREATE TABLE mytable (name varchar(80), pet varchar(80))\n   ```\n\n3. Insert some data into the table:\n\n   ```sql\n   INSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird')\n   ```\n\n4. Type `GO` to execute the above commands:\n\n   ```sql\n   GO\n   ```\n\nTo end your **sqlcmd** session, type `QUIT` on a new line.\n\n### Add username and password to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Create this file if it doesn't exist yet and add the SQL Server name, database name, username, and password as shown below:\n\n```toml\n# .streamlit/secrets.toml\n\nserver = \"localhost\"\ndatabase = \"mydb\"\nusername = \"SA\"\npassword = \"xxx\"\n```\n\n<Important>\n\nWhen copying your app secrets to Streamlit Community Cloud, be sure to replace the values of **server**, **database**, **username**, and **password** with those of your _remote_ SQL Server!\n\nAnd add this file to `.gitignore` and don't commit it to your GitHub repo.\n\n</Important>\n\n## Copy your app secrets to Streamlit Community Cloud\n\nAs the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add pyodbc to your requirements file\n\nTo connect to SQL Server _locally_ with Streamlit, you need to `pip install pyodbc`, in addition to the Microsoft ODBC driver you installed during the SQL Server installation.\n\nOn _Streamlit Cloud_, we have built-in support for SQL Server. On popular demand, we directly added SQL Server tools including the ODBC drivers and the executables `sqlcmd` and `bcp` to the container image for Cloud apps, so you don't need to install them.\n\nAll you need to do is add the [`pyodbc`](https://github.com/mkleehammer/pyodbc) Python package to your `requirements.txt` file, and you're ready to go! 🎈\n\n```bash\n# requirements.txt\npyodbc==x.x.x\n```\n\nReplace `x.x.x` ☝️ with the version of pyodbc you want installed on Cloud.\n\n<Note>\n\nAt this time, Streamlit Community Cloud does not support Azure Active Directory authentication. We will update this tutorial when we add support for Azure Active Directory.\n\n</Note>\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it. Make sure to adapt `query` to use the name of your table.\n\n```python\nimport streamlit as st\nimport pyodbc\n\n# Initialize connection.\n# Uses st.cache_resource to only run once.\n@st.cache_resource\ndef init_connection():\n    return pyodbc.connect(\n        \"DRIVER={ODBC Driver 17 for SQL Server};SERVER=\"\n        + st.secrets[\"server\"]\n        + \";DATABASE=\"\n        + st.secrets[\"database\"]\n        + \";UID=\"\n        + st.secrets[\"username\"]\n        + \";PWD=\"\n        + st.secrets[\"password\"]\n    )\n\nconn = init_connection()\n\n# Perform query.\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\n@st.cache_data(ttl=600)\ndef run_query(query):\n    with conn.cursor() as cur:\n        cur.execute(query)\n        return cur.fetchall()\n\nrows = run_query(\"SELECT * from mytable;\")\n\n# Print results.\nfor row in rows:\n    st.write(f\"{row[0]} has a :{row[1]}:\")\n\n```\n\nSee `st.cache_data` above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With `st.cache_data`, it only runs when the query changes or after 10 minutes (that's what `ttl` is for). Watch out: If your database updates more frequently, you should adapt `ttl` or remove caching so viewers always see the latest data. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nIf everything worked out (and you used the example table we created above), your app should look like this:\n\n![Finished app screenshot](/images/databases/streamlit-app.png)"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/neon",
    "content": "# Connect Streamlit to Neon\n\n## Introduction\n\nThis guide explains how to securely access a [Neon database](https://neon.tech/) from Streamlit. Neon is a fully managed serverless PostgreSQL database that separates storage and compute to offer features such as instant branching and automatic scaling.\n\n### Prerequisites\n\n- The following packages must be installed in your Python environment:\n\n  ```txt\n  streamlit>=1.28\n  psycopg2-binary>=2.9.6\n  sqlalchemy>=2.0.0\n  ```\n\n    <Note>\n        You may use `psycopg2` instead of `psycopg2-binary`. However, building Psycopg requires a few prerequisites (like a C compiler). To use `psycopg2` on Community Cloud, you must include `libpq-dev` in a [`packages.txt`](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#apt-get-dependencies) file in the root of your repository. `psycopg2-binary` is a stand-alone package that is practical for testing and development.\n    </Note>\n\n- You must have a Neon account.\n- You should have a basic understanding of [`st.connection`](/develop/api-reference/connections/st.connection) and [Secrets management](/develop/concepts/connections/secrets-management).\n\n## Create a Neon project\n\nIf you already have a Neon project that you want to use, you can [skip to the next step](#add-neon-connection-string-to-your-local-app-secrets).\n\n1. Log in to the Neon console and navigate to the [Projects](https://console.neon.tech/app/projects) section.\n1. If you see a prompt to enter your project name, skip to the next step. Otherwise, click the \"**New Project**\" button to create a new project.\n1. Enter \"Streamlit-Neon\" for your project name, accept the othe default settings, and click \"**Create Project**.\"\n\n   After Neon creates your project with a ready-to-use `neondb` database, you will be redirected to your project's Quickstart.\n\n1. Click on \"**SQL Editor**\" from the left sidebar.\n1. Replace the text in the input area with the following code and click \"**Run**\" to add sample data to your project.\n\n   ```sql\n   CREATE TABLE home (\n       id SERIAL PRIMARY KEY,\n       name VARCHAR(100),\n       pet VARCHAR(100)\n   );\n\n   INSERT INTO home (name, pet)\n   VALUES\n       ('Mary', 'dog'),\n       ('John', 'cat'),\n       ('Robert', 'bird');\n   ```\n\n## Add the Neon connection string to your local app secrets\n\n1. Within your Neon project, click \"**Dashboard**\" in the left sidebar.\n1. Within the \"Connection Details\" tile, locate your database connection string. It should look similar to this:\n\n   ```bash\n   postgresql://neondb_owner:xxxxxxxxxxxx@ep-adjective-noun-xxxxxxxx.us-east-2.aws.neon.tech/neondb?sslmode=require\n   ```\n\n1. If you do not already have a `.streamlit/secrets.toml` file in your app's root directory, create an empty secrets file.\n1. Copy your connection string and add it to your app's `.streamlit/secrets.toml` file as follows:\n\n   ```toml\n   # .streamlit/secrets.toml\n\n   [connections.neon]\n   url=\"postgresql://neondb_owner:xxxxxxxxxxxx@ep-adjective-noun-xxxxxxxx.us-east-2.aws.neon.tech/neondb?sslmode=require\"\n   ```\n\n   <Important>\n       Add this file to `.gitignore` and don't commit it to your GitHub repo!\n   </Important>\n\n## Write your Streamlit app\n\n1. Copy the code below to your Streamlit app and save it.\n\n   ```python\n   # streamlit_app.py\n\n   import streamlit as st\n\n   # Initialize connection.\n   conn = st.connection(\"neon\", type=\"sql\")\n\n   # Perform query.\n   df = conn.query('SELECT * FROM home;', ttl=\"10m\")\n\n   # Print results.\n   for row in df.itertuples():\n       st.write(f\"{row.name} has a :{row.pet}:\")\n   ```\n\n   The `st.connection` object above handles secrets retrieval, setup, query caching and retries.\n\n   By default, `query()` results are cached without expiring. Setting the `ttl` parameter to `\"10m\"` ensures the query result is cached for no longer than 10 minutes. You can also set `ttl=0` to disable caching. Learn more in [Caching](/develop/concepts/architecture/caching).\n\n1. Run your Streamlit app.\n\n   ```bash\n   streamlit run streamlit_app.py\n   ```\n\n   If everything worked out (and you used the example table we created above), your app should look like this:\n\n   ![Finished app screenshot](/images/databases/streamlit-app.png)\n\n## Connecting to a Neon database from Community Cloud\n\nThis tutorial assumes a local Streamlit app, but you can also connect to a Neon database from apps hosted on Community Cloud. The additional steps are:\n\n- Add a [`requirements.txt`](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies) file to your repo. Include all the packages listed in [Prequisites](#prerequisites) and any other dependencies.\n- [Add your secrets](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management#deploy-an-app-and-set-up-secrets) to your app in Community Cloud."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/tidb",
    "content": "# Connect Streamlit to TiDB\n\n## Introduction\n\nThis guide explains how to securely access a **_remote_** TiDB database from Streamlit Community Cloud. It uses [st.connection](/develop/api-reference/connections/st.connection) and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management). The below example code will **only work on Streamlit version >= 1.28**, when `st.connection` was added.\n\n[TiDB](https://www.pingcap.com/tidb/) is an open-source, MySQL-compatible database that supports Hybrid Transactional and Analytical Processing (HTAP) workloads. TiDB introducs a [built-in vector search](https://www.pingcap.com/ai/) to the SQL database family, enabling support for your AI applications without requiring a new database or additional technical stacks. [TiDB Cloud](https://tidb.cloud/) is a fully managed cloud database service that simplifies the deployment and management of TiDB databases for developers.\n\n## Sign in to TiDB Cloud and create a cluster\n\nFirst, head over to [TiDB Cloud](https://tidbcloud.com/free-trial) and sign up for a free account, using either Google, GitHub, Microsoft or E-mail:\n\n![Sign up TiDB Cloud](/images/databases/tidb-1.png)\n\nOnce you've signed in, you will already have a TiDB cluster:\n\n![List clusters](/images/databases/tidb-2.png)\n\nYou can create more clusters if you want to. Click the cluster name to enter cluster overview page:\n\n![Cluster overview](/images/databases/tidb-3.png)\n\nThen click **Connect** to easily get the connection arguments to access the cluster. On the popup, click **Generate Password** to set the password.\n\n![Get connection arguments](/images/databases/tidb-4.png)\n\n<Important>\n\nMake sure to note down the password. It won't be available on TiDB Cloud after this step.\n\n</Important>\n\n## Create a TiDB database\n\n<Note>\n\nIf you already have a database that you want to use, feel free\nto [skip to the next step](#add-username-and-password-to-your-local-app-secrets).\n\n</Note>\n\nOnce your TiDB cluster is up and running, connect to it with the `mysql` client(or with **SQL Editor** tab on the console) and enter the following commands to create a database and a table with some example values:\n\n```sql\nCREATE DATABASE pets;\n\nUSE pets;\n\nCREATE TABLE mytable (\n    name            varchar(80),\n    pet             varchar(80)\n);\n\nINSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');\n```\n\n## Add username and password to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Learn more about [Streamlit secrets management here](/develop/concepts/connections/secrets-management). Create this file if it doesn't exist yet and add host, username and password of your TiDB cluster as shown below:\n\n```toml\n# .streamlit/secrets.toml\n\n[connections.tidb]\ndialect = \"mysql\"\nhost = \"<TiDB_cluster_host>\"\nport = 4000\ndatabase = \"pets\"\nusername = \"<TiDB_cluster_user>\"\npassword = \"<TiDB_cluster_password>\"\n```\n\n<Important>\n\nWhen copying your app secrets to Streamlit Community Cloud, be sure to replace the values of **host**, **username** and **password** with those of your _remote_ TiDB cluster!\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Copy your app secrets to the cloud\n\nAs the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add dependencies to your requirements file\n\nAdd the [mysqlclient](https://github.com/PyMySQL/mysqlclient) and [SQLAlchemy](https://github.com/sqlalchemy/sqlalchemy) packages to your `requirements.txt` file, preferably pinning its version (replace `x.x.x` with the version you want installed):\n\n```bash\n# requirements.txt\nmysqlclient==x.x.x\nSQLAlchemy==x.x.x\n```\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it. Make sure to adapt `query` to use the name of your table.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\n\n# Initialize connection.\nconn = st.connection('tidb', type='sql')\n\n# Perform query.\ndf = conn.query('SELECT * from mytable;', ttl=600)\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n```\n\nSee `st.connection` above? This handles secrets retrieval, setup, query caching and retries. By default, `query()` results are cached without expiring. In this case, we set `ttl=600` to ensure the query result is cached for no longer than 10 minutes. You can also set `ttl=0` to disable caching. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nIf everything worked out (and you used the example table we created above), your app should look like this:\n\n![Finished app screenshot](/images/databases/streamlit-app.png)\n\n## Connect with PyMySQL\n\nOther than [mysqlclient](https://github.com/PyMySQL/mysqlclient), [PyMySQL](https://github.com/PyMySQL/PyMySQL) is another popular MySQL Python client. To use PyMySQL, first you need to adapt your requirements file:\n\n```bash\n# requirements.txt\nPyMySQL==x.x.x\nSQLAlchemy==x.x.x\n```\n\nThen adapt your secrets file:\n\n```toml\n# .streamlit/secrets.toml\n\n[connections.tidb]\ndialect = \"mysql\"\ndriver = \"pymysql\"\nhost = \"<TiDB_cluster_host>\"\nport = 4000\ndatabase = \"pets\"\nusername = \"<TiDB_cluster_user>\"\npassword = \"<TiDB_cluster_password>\"\ncreate_engine_kwargs = { connect_args = { ssl = { ca = \"<path_to_CA_store>\" }}}\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/gcs",
    "content": "# Connect Streamlit to Google Cloud Storage\n\n## Introduction\n\nThis guide explains how to securely access files on Google Cloud Storage from Streamlit Community Cloud. It uses [Streamlit FilesConnection](https://github.com/streamlit/files-connection), the [gcsfs](https://github.com/fsspec/gcsfs) library and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management).\n\n## Create a Google Cloud Storage bucket and add a file\n\n<Note>\n\nIf you already have a bucket that you want to use, feel free\nto [skip to the next step](#enable-the-google-cloud-storage-api).\n\n</Note>\n\nFirst, [sign up for Google Cloud Platform](https://console.cloud.google.com/) or log in. Go to the [Google Cloud Storage console](https://console.cloud.google.com/storage/) and create a new bucket.\n\n<Flex>\n<Image alt=\"GCS screenshot 1\" src=\"/images/databases/gcs-1.png\" />\n<Image alt=\"GCS screenshot 2\" src=\"/images/databases/gcs-2.png\" />\n</Flex>\n\nNavigate to the upload section of your new bucket:\n\n<Flex>\n<Image alt=\"GCS screenshot 3\" src=\"/images/databases/gcs-3.png\" />\n<Image alt=\"GCS screenshot 4\" src=\"/images/databases/gcs-4.png\" />\n</Flex>\n\nAnd upload the following CSV file, which contains some example data:\n\n<Download href=\"/images/databases/myfile.csv\">myfile.csv</Download>\n\n## Enable the Google Cloud Storage API\n\nThe Google Cloud Storage API is [enabled by default](https://cloud.google.com/service-usage/docs/enabled-service#default) when you create a project through the Google Cloud Console or CLI. Feel free to [skip to the next step](#create-a-service-account-and-key-file).\n\nIf you do need to enable the API for programmatic access in your project, head over to the [APIs & Services dashboard](https://console.cloud.google.com/apis/dashboard) (select or create a project if asked). Search for the Cloud Storage API and enable it. The screenshot below has a blue \"Manage\" button and indicates the \"API is enabled\" which means no further action needs to be taken. This is very likely what you have since the API is enabled by default. However, if that is not what you see and you have an \"Enable\" button, you'll need to enable the API:\n\n<Flex>\n<Image alt=\"GCS screenshot 5\" src=\"/images/databases/gcs-5.png\" />\n<Image alt=\"GCS screenshot 6\" src=\"/images/databases/gcs-6.png\" />\n<Image alt=\"GCS screenshot 7\" src=\"/images/databases/gcs-7.png\" />\n</Flex>\n\n## Create a service account and key file\n\nTo use the Google Cloud Storage API from Streamlit, you need a Google Cloud Platform service account (a special type for programmatic data access). Go to the Service Accounts page and create an account with <b>Viewer</b> permission.\n\n<Flex>\n<Image alt=\"GCS screenshot 8\" src=\"/images/databases/gcs-8.png\" />\n<Image alt=\"GCS screenshot 9\" src=\"/images/databases/gcs-9.png\" />\n<Image alt=\"GCS screenshot 10\" src=\"/images/databases/gcs-10.png\" />\n</Flex>\n\n<Note>\n\nIf the button **CREATE SERVICE ACCOUNT** is gray, you don't have the correct permissions. Ask the\nadmin of your Google Cloud project for help.\n\n</Note>\n\nAfter clicking **DONE**, you should be back on the service accounts overview. Create a JSON key file for the new account and download it:\n\n<Flex>\n<Image alt=\"GCS screenshot 11\" src=\"/images/databases/gcs-11.png\" />\n<Image alt=\"GCS screenshot 12\" src=\"/images/databases/gcs-12.png\" />\n<Image alt=\"GCS screenshot 13\" src=\"/images/databases/gcs-13.png\" />\n</Flex>\n\n## Add the key to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Create this file if it doesn't exist yet and add the access key to it as shown below:\n\n```toml\n# .streamlit/secrets.toml\n\n[connections.gcs]\ntype = \"service_account\"\nproject_id = \"xxx\"\nprivate_key_id = \"xxx\"\nprivate_key = \"xxx\"\nclient_email = \"xxx\"\nclient_id = \"xxx\"\nauth_uri = \"https://accounts.google.com/o/oauth2/auth\"\ntoken_uri = \"https://oauth2.googleapis.com/token\"\nauth_provider_x509_cert_url = \"https://www.googleapis.com/oauth2/v1/certs\"\nclient_x509_cert_url = \"xxx\"\n```\n\n<Important>\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Copy your app secrets to the cloud\n\nAs the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add FilesConnection and gcsfs to your requirements file\n\nAdd the [FilesConnection](https://github.com/streamlit/files-connection) and [gcsfs](https://github.com/fsspec/gcsfs) packages to your `requirements.txt` file, preferably pinning the versions (replace `x.x.x` with the version you want installed):\n\n```bash\n# requirements.txt\ngcsfs==x.x.x\nst-files-connection\n```\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it. Make sure to adapt the name of your bucket and file. Note that Streamlit automatically turns the access keys from your secrets file into environment variables.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\nfrom st_files_connection import FilesConnection\n\n# Create connection object and retrieve file contents.\n# Specify input format is a csv and to cache the result for 600 seconds.\nconn = st.connection('gcs', type=FilesConnection)\ndf = conn.read(\"streamlit-bucket/myfile.csv\", input_format=\"csv\", ttl=600)\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.Owner} has a :{row.Pet}:\")\n```\n\nSee `st.connection` above? This handles secrets retrieval, setup, result caching and retries. By default, `read()` results are cached without expiring. In this case, we set `ttl=600` to ensure the file contents is cached for no longer than 10 minutes. You can also set `ttl=0` to disable caching. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nIf everything worked out (and you used the example file given above), your app should look like this:\n\n![Finished app screenshot](/images/databases/streamlit-app.png)"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/supabase",
    "content": "# Connect Streamlit to Supabase\n\n## Introduction\n\nThis guide explains how to securely access a Supabase instance from Streamlit Community Cloud. It uses [st.connection](/develop/api-reference/connections/st.connection), [Streamlit Supabase Connector](https://github.com/SiddhantSadangi/st_supabase_connection/tree/main) (a community-built connection developed by [@SiddhantSadangi](https://github.com/SiddhantSadangi)) and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management). Supabase is the open source Firebase alternative and is based on PostgreSQL.\n\n<Note>\n\nCommunity-built connections, such as the [Streamlit Supabase Connector](https://github.com/SiddhantSadangi/st_supabase_connection/tree/main), extend and build on the `st.connection` interface and make it easier than ever to build Streamlit apps with a wide variety of data sources. These type of connections work exactly the same as [the ones built into Streamlit](/develop/api-reference/connections) and have access to all the same capabilities.\n\n</Note>\n\n## Sign in to Supabase and create a project\n\nFirst, head over to [Supabase](https://app.supabase.io/) and sign up for a free account using your GitHub.\n\n<Flex>\n<Image caption=\"Sign in with GitHub\" src=\"/images/databases/supabase-1.png\" />\n<Image caption=\"Authorize Supabase\" src=\"/images/databases/supabase-2.png\" />\n</Flex>\n\nOnce you're signed in, you can create a project.\n\n<Flex>\n<Image caption=\"Your Supabase account\" src=\"/images/databases/supabase-3.png\" />\n<Image caption=\"Create a new project\" src=\"/images/databases/supabase-4.png\" />\n</Flex>\n\nYour screen should look like this once your project has been created:\n\n<Image src=\"/images/databases/supabase-5.png\" />\n\n<Important>\n\nMake sure to note down your Project API Key and Project URL highlighted in the above screenshot. ☝️\n\nYou will need these to connect to your Supabase instance from Streamlit.\n\n</Important>\n\n## Create a Supabase database\n\nNow that you have a project, you can create a database and populate it with some sample data. To do so, click on the **SQL editor** button on the same project page, followed by the **New query** button in the SQL editor.\n\n<Flex>\n<Image caption=\"Open the SQL editor\" src=\"/images/databases/supabase-6.png\" />\n<Image caption=\"Create a new query\" src=\"/images/databases/supabase-7.png\" />\n</Flex>\n\nIn the SQL editor, enter the following queries to create a database and a table with some example values:\n\n```sql\nCREATE TABLE mytable (\n    name            varchar(80),\n    pet             varchar(80)\n);\n\nINSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');\n```\n\nClick **Run** to execute the queries. To verify that the queries were executed successfully, click on the **Table Editor** button on the left menu, followed by your newly created table `mytable`.\n\n<Flex>\n<Image caption=\"Write and run your queries\" src=\"/images/databases/supabase-8.png\" />\n<Image caption=\"View your table in the Table Editor\" src=\"/images/databases/supabase-9.png\" />\n</Flex>\n\nWith your Supabase database created, you can now connect to it from Streamlit!\n\n### Add Supabase Project URL and API key to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Create this file if it doesn't exist yet and add the `SUPABASE_URL` and `SUPABASE_KEY` here:\n\n```toml\n# .streamlit/secrets.toml\n\n[connections.supabase]\nSUPABASE_URL = \"xxxx\"\nSUPABASE_KEY = \"xxxx\"\n```\n\nReplace `xxxx` above with your Project URL and API key from [Step 1](/develop/tutorials/databases/supabase#sign-in-to-supabase-and-create-a-project).\n\n<Important>\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Copy your app secrets to the cloud\n\nAs the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add st-supabase-connection to your requirements file\n\nAdd the [`st-supabase-connection`](https://pypi.org/project/st-supabase-connection/) community-built connection library to your `requirements.txt` file, preferably pinning its version (replace `x.x.x` with the version you want installed):\n\n```bash\n# requirements.txt\nst-supabase-connection==x.x.x\n```\n\n<Tip>\n\nWe've used the `st-supabase-connection` library here in combination with `st.connection` to benefit from the ease of setting up the data connection, managing your credentials, and Streamlit's caching capabilities that native and community-built connections provide.\n\nYou can however still directly use the [Supabase Python Client Library](https://pypi.org/project/supabase/) library if you prefer, but you'll need to write more code to set up the connection and cache the results. See [Using the Supabase Python Client Library](/develop/tutorials/databases/supabase#using-the-supabase-python-client-library) below for an example.\n\n</Tip>\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\nfrom st_supabase_connection import SupabaseConnection\n\n# Initialize connection.\nconn = st.connection(\"supabase\",type=SupabaseConnection)\n\n# Perform query.\nrows = conn.query(\"*\", table=\"mytable\", ttl=\"10m\").execute()\n\n# Print results.\nfor row in rows.data:\n    st.write(f\"{row['name']} has a :{row['pet']}:\")\n\n```\n\nSee `st.connection` above? This handles secrets retrieval, setup, query caching and retries. By default, `query()` results are cached without expiring. In this case, we set `ttl=\"10m\"` to ensure the query result is cached for no longer than 10 minutes. You can also set `ttl=0` to disable caching. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nIf everything worked out (and you used the example table we created above), your app should look like this:\n\n![Finished app screenshot](/images/databases/supabase-10.png)\n\nAs Supabase uses PostgresSQL under the hood, you can also connect to Supabase by using the connection string Supabase provides under Settings > Databases. From there, you can refer to the [PostgresSQL tutorial](/develop/tutorials/databases/postgresql) to connect to your database.\n\n## Using the Supabase Python Client Library\n\nIf you prefer to use the [Supabase Python Client Library](https://pypi.org/project/supabase/) directly, you can do so by following the steps below.\n\n1. Add your Supabase Project URL and API key to your local app secrets:\n\n   Your local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Create this file if it doesn't exist yet and add the SUPABASE_URL and SUPABASE_KEY here:\n\n   ```toml\n   # .streamlit/secrets.toml\n\n   SUPABASE_URL = \"xxxx\"\n   SUPABASE_KEY = \"xxxx\"\n   ```\n\n2. Add `supabase` to your requirements file:\n\n   Add the [`supabase`](https://github.com/supabase-community/supabase-py) Python Client Library to your `requirements.txt` file, preferably pinning its version (replace `x.x.x` with the version you want installed):\n\n   ```bash\n   # requirements.txt\n   supabase==x.x.x\n   ```\n\n3. Write your Streamlit app:\n\n   Copy the code below to your Streamlit app and run it.\n\n   ```python\n   # streamlit_app.py\n\n   import streamlit as st\n   from supabase import create_client, Client\n\n   # Initialize connection.\n   # Uses st.cache_resource to only run once.\n   @st.cache_resource\n   def init_connection():\n       url = st.secrets[\"SUPABASE_URL\"]\n       key = st.secrets[\"SUPABASE_KEY\"]\n       return create_client(url, key)\n\n   supabase = init_connection()\n\n   # Perform query.\n   # Uses st.cache_data to only rerun when the query changes or after 10 min.\n   @st.cache_data(ttl=600)\n   def run_query():\n       return supabase.table(\"mytable\").select(\"*\").execute()\n\n   rows = run_query()\n\n   # Print results.\n   for row in rows.data:\n       st.write(f\"{row['name']} has a :{row['pet']}:\")\n   ```\n\n   See `st.cache_data` above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With `st.cache_data`, it only runs when the query changes or after 10 minutes (that's what `ttl` is for). Watch out: If your database updates more frequently, you should adapt `ttl` or remove caching so viewers always see the latest data. Learn more in [Caching](/develop/concepts/architecture/caching)."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/postgresql",
    "content": "# Connect Streamlit to PostgreSQL\n\n## Introduction\n\nThis guide explains how to securely access a **_remote_** PostgreSQL database from Streamlit Community Cloud. It uses [st.connection](/develop/api-reference/connections/st.connection) and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management). The below example code will **only work on Streamlit version >= 1.28**, when `st.connection` was added.\n\n## Create a PostgreSQL database\n\n<Note>\n\nIf you already have a database that you want to use, feel free\nto [skip to the next step](#add-username-and-password-to-your-local-app-secrets).\n\n</Note>\n\nFirst, follow [this tutorial](https://www.tutorialspoint.com/postgresql/postgresql_environment.htm) to install PostgreSQL and create a database (note down the database name, username, and password!). Open the SQL Shell (`psql`) and enter the following two commands to create a table with some example values:\n\n```sql\nCREATE TABLE mytable (\n    name            varchar(80),\n    pet             varchar(80)\n);\n\nINSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');\n```\n\n## Add username and password to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Create this file if it doesn't exist yet and add the name, user, and password of your database as shown below:\n\n```toml\n# .streamlit/secrets.toml\n\n[connections.postgresql]\ndialect = \"postgresql\"\nhost = \"localhost\"\nport = \"5432\"\ndatabase = \"xxx\"\nusername = \"xxx\"\npassword = \"xxx\"\n```\n\n<Important>\n\nWhen copying your app secrets to Streamlit Community Cloud, be sure to replace the values of **host**, **port**, **database**, **username**, and **password** with those of your _remote_ PostgreSQL database!\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Copy your app secrets to the cloud\n\nAs the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add dependencies to your requirements file\n\nAdd the [psycopg2-binary](https://www.psycopg.org/) and [SQLAlchemy](https://github.com/sqlalchemy/sqlalchemy) packages to your `requirements.txt` file, preferably pinning its version (replace `x.x.x` with the version you want installed):\n\n```bash\n# requirements.txt\npsycopg2-binary==x.x.x\nsqlalchemy==x.x.x\n```\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it. Make sure to adapt `query` to use the name of your table.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\n\n# Initialize connection.\nconn = st.connection(\"postgresql\", type=\"sql\")\n\n# Perform query.\ndf = conn.query('SELECT * FROM mytable;', ttl=\"10m\")\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n```\n\nSee `st.connection` above? This handles secrets retrieval, setup, query caching and retries. By default, `query()` results are cached without expiring. In this case, we set `ttl=\"10m\"` to ensure the query result is cached for no longer than 10 minutes. You can also set `ttl=0` to disable caching. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nIf everything worked out (and you used the example table we created above), your app should look like this:\n\n![Finished app screenshot](/images/databases/streamlit-app.png)"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/tableau",
    "content": "# Connect Streamlit to Tableau\n\n## Introduction\n\nThis guide explains how to securely access data on Tableau from Streamlit Community Cloud. It uses the [tableauserverclient](https://tableau.github.io/server-client-python/#) library and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management).\n\n## Create a Tableau site\n\n<Note>\n\nIf you already have a database that you want to use, feel free\nto [skip to the next step](#create-personal-access-tokens).\n\n</Note>\n\nFor simplicity, we are using the cloud version of Tableau here but this guide works equally well for self-hosted deployments. First, sign up for [Tableau Online](https://www.tableau.com/products/cloud-bi) or log in. Create a workbook or run one of the example workbooks under \"Dashboard Starters\".\n\n![Tableau screenshot 1](/images/databases/tableau-1.png)\n\n## Create personal access tokens\n\nWhile the Tableau API allows authentication via username and password, you should use [personal access tokens](https://help.tableau.com/current/server/en-us/security_personal_access_tokens.htm) for a production app.\n\nGo to your [Tableau Online homepage](https://online.tableau.com/), create an access token and note down the token name and secret.\n\n<Flex>\n<Image alt=\"Tableau screenshot 2\" src=\"/images/databases/tableau-2.png\" />\n<Image alt=\"Tableau screenshot 3\" src=\"/images/databases/tableau-3.png\" />\n</Flex>\n\n<Note>\n\nPersonal access tokens will expire if not used after 15 consecutive days.\n\n</Note>\n\n## Add token to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Create this file if it doesn't exist yet and add your token, the site name you created during setup, and the URL of your Tableau server like below:\n\n```toml\n# .streamlit/secrets.toml\n\n[tableau]\ntoken_name = \"xxx\"\ntoken_secret = \"xxx\"\nserver_url = \"https://abc01.online.tableau.com/\"\nsite_id = \"streamlitexample\"  # in your site's URL behind the server_url\n```\n\n<Important>\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Copy your app secrets to the cloud\n\nAs the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add tableauserverclient to your requirements file\n\nAdd the [tableauserverclient](https://tableau.github.io/server-client-python/#) package to your `requirements.txt` file, preferably pinning its version (replace `x.x.x` with the version you want installed):\n\n```bash\n# requirements.txt\ntableauserverclient==x.x.x\n```\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it. Note that this code just shows a few options of data you can get – explore the [tableauserverclient](https://tableau.github.io/server-client-python/#) library to find more!\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\nimport tableauserverclient as TSC\n\n\n# Set up connection.\ntableau_auth = TSC.PersonalAccessTokenAuth(\n    st.secrets[\"tableau\"][\"token_name\"],\n    st.secrets[\"tableau\"][\"personal_access_token\"],\n    st.secrets[\"tableau\"][\"site_id\"],\n)\nserver = TSC.Server(st.secrets[\"tableau\"][\"server_url\"], use_server_version=True)\n\n\n# Get various data.\n# Explore the tableauserverclient library for more options.\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\n@st.cache_data(ttl=600)\ndef run_query():\n    with server.auth.sign_in(tableau_auth):\n\n        # Get all workbooks.\n        workbooks, pagination_item = server.workbooks.get()\n        workbooks_names = [w.name for w in workbooks]\n\n        # Get views for first workbook.\n        server.workbooks.populate_views(workbooks[0])\n        views_names = [v.name for v in workbooks[0].views]\n\n        # Get image & CSV for first view of first workbook.\n        view_item = workbooks[0].views[0]\n        server.views.populate_image(view_item)\n        server.views.populate_csv(view_item)\n        view_name = view_item.name\n        view_image = view_item.image\n        # `view_item.csv` is a list of binary objects, convert to str.\n        view_csv = b\"\".join(view_item.csv).decode(\"utf-8\")\n\n        return workbooks_names, views_names, view_name, view_image, view_csv\n\nworkbooks_names, views_names, view_name, view_image, view_csv = run_query()\n\n\n# Print results.\nst.subheader(\"📓 Workbooks\")\nst.write(\"Found the following workbooks:\", \", \".join(workbooks_names))\n\nst.subheader(\"👁️ Views\")\nst.write(\n    f\"Workbook *{workbooks_names[0]}* has the following views:\",\n    \", \".join(views_names),\n)\n\nst.subheader(\"🖼️ Image\")\nst.write(f\"Here's what view *{view_name}* looks like:\")\nst.image(view_image, width=300)\n\nst.subheader(\"📊 Data\")\nst.write(f\"And here's the data for view *{view_name}*:\")\nst.write(pd.read_csv(StringIO(view_csv)))\n```\n\nSee `st.cache_data` above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With `st.cache_data`, it only runs when the query changes or after 10 minutes (that's what `ttl` is for). Watch out: If your database updates more frequently, you should adapt `ttl` or remove caching so viewers always see the latest data. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nIf everything worked out, your app should look like this (can differ based on your workbooks):\n\n![Tableau screenshot 4](/images/databases/tableau-4.png)"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet",
    "content": "# Connect Streamlit to a private Google Sheet\n\n## Introduction\n\nThis guide explains how to securely access a private Google Sheet from Streamlit Community Cloud. It uses [st.connection](/develop/api-reference/connections/st.connection), [Streamlit GSheetsConnection](https://github.com/streamlit/gsheets-connection), and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management).\n\nIf you are fine with enabling link sharing for your Google Sheet (i.e. everyone with the link can view it), the guide [Connect Streamlit to a public Google Sheet](/develop/tutorials/databases/public-gsheet) shows a simpler method of doing this. If your Sheet contains sensitive information and you cannot enable link sharing, keep on reading.\n\n### Prerequisites\n\nThis tutorial requires `streamlit>=1.28` and `st-gsheets-connection` in your Python environment.\n\n## Create a Google Sheet\n\nIf you already have a Sheet that you want to use, you can [skip to the next step](#enable-the-sheets-api).\n\nCreate a spreadsheet with this example data.\n\n<div style={{ maxWidth: '200px', margin: 'auto' }}>\n\n| name   | pet  |\n| :----- | :--- |\n| Mary   | dog  |\n| John   | cat  |\n| Robert | bird |\n\n</div>\n\n![Google sheet screenshot](/images/databases/private-gsheet-1.png)\n\n## Enable the Sheets API\n\nProgrammatic access to Google Sheets is controlled through [Google Cloud Platform](https://cloud.google.com/). Create an account or sign in and head over to the [**APIs & Services** dashboard](https://console.cloud.google.com/apis/dashboard) (select or create a project if asked). As shown below, search for the Sheets API and enable it:\n\n<Flex>\n<Image alt=\"GCP screenshot 1\" src=\"/images/databases/private-gsheet-2.png\" />\n<Image alt=\"GCP screenshot 2\" src=\"/images/databases/private-gsheet-3.png\" />\n<Image alt=\"GCP screenshot 3\" src=\"/images/databases/private-gsheet-4.png\" />\n</Flex>\n\n## Create a service account & key file\n\nTo use the Sheets API from Streamlit Community Cloud, you need a Google Cloud Platform service account (a special account type for programmatic data access). Go to the [**Service Accounts** page](https://console.cloud.google.com/iam-admin/serviceaccounts) and create an account with the **Viewer** permission (this will let the account access data but not change it):\n\n<Flex>\n<Image alt=\"GCP screenshot 5\" src=\"/images/databases/private-gsheet-5.png\" />\n<Image alt=\"GCP screenshot 6\" src=\"/images/databases/private-gsheet-6.png\" />\n<Image alt=\"GCP screenshot 7\" src=\"/images/databases/private-gsheet-7.png\" />\n</Flex>\n\n<Note>\n\nThe button \"**CREATE SERVICE ACCOUNT**\" is gray, you don't have the correct permissions. Ask the admin of your Google Cloud project for help.\n\n</Note>\n\nAfter clicking \"**DONE**\", you should be back on the service accounts overview. First, note down the email address of the account you just created (**important for next step!**). Then, create a JSON key file for the new account and download it:\n\n<Flex>\n<Image alt=\"GCP screenshot 8\" src=\"/images/databases/private-gsheet-8.png\" />\n<Image alt=\"GCP screenshot 9\" src=\"/images/databases/private-gsheet-9.png\" />\n<Image alt=\"GCP screenshot 10\" src=\"/images/databases/private-gsheet-10.png\" />\n</Flex>\n\n## Share the Google Sheet with the service account\n\nBy default, the service account you just created cannot access your Google Sheet. To give it access, click on the \"**Share**\" button in the Google Sheet, add the email of the service account (noted down in step 2), and choose the correct permission (if you just want to read the data, \"**Viewer**\" is enough):\n\n<Flex>\n<Image alt=\"GCP screenshot 11\" src=\"/images/databases/private-gsheet-11.png\" />\n<Image alt=\"GCP screenshot 12\" src=\"/images/databases/private-gsheet-12.png\" />\n</Flex>\n\n## Add the key file to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Create this file if it doesn't exist yet and add the URL of your Google Sheet plus the content of the key file you downloaded to it as shown below:\n\n```toml\n# .streamlit/secrets.toml\n\n[connections.gsheets]\nspreadsheet = \"https://docs.google.com/spreadsheets/d/xxxxxxx/edit#gid=0\"\n\n# From your JSON key file\ntype = \"service_account\"\nproject_id = \"xxx\"\nprivate_key_id = \"xxx\"\nprivate_key = \"xxx\"\nclient_email = \"xxx\"\nclient_id = \"xxx\"\nauth_uri = \"https://accounts.google.com/o/oauth2/auth\"\ntoken_uri = \"https://oauth2.googleapis.com/token\"\nauth_provider_x509_cert_url = \"https://www.googleapis.com/oauth2/v1/certs\"\nclient_x509_cert_url = \"xxx\"\n```\n\n<Important>\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\nfrom streamlit_gsheets import GSheetsConnection\n\n# Create a connection object.\nconn = st.connection(\"gsheets\", type=GSheetsConnection)\n\ndf = conn.read()\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n```\n\nSee `st.connection` above? This handles secrets retrieval, setup, query caching and retries. By default, `.read()` results are cached without expiring. You can pass optional parameters to `.read()` to customize your connection. For example, you can specify the name of a worksheet, cache expiration time, or pass-through parameters for [`pandas.read_csv`](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) like this:\n\n```python\ndf = conn.read(\n    worksheet=\"Sheet1\",\n    ttl=\"10m\",\n    usecols=[0, 1],\n    nrows=3,\n)\n```\n\nIn this case, we set `ttl=\"10m\"` to ensure the query result is cached for no longer than 10 minutes. You can also set `ttl=0` to disable caching. Learn more in [Caching](/develop/concepts/architecture/caching). We've declared optional parameters `usecols=[0,1]` and `nrows=3` for `pandas` to use under the hood.\n\nIf everything worked out (and you used the example table we created above), your app should look like this:\n\n![Finished app screenshot](/images/databases/streamlit-app.png)\n\n## Connecting to a Google Sheet from Community Cloud\n\nThis tutorial assumes a local Streamlit app, however you can also connect to Google Sheets from apps hosted in Community Cloud. The main additional steps are:\n\n- [Include information about dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies) using a `requirements.txt` file with `st-gsheets-connection` and any other dependencies.\n- [Add your secrets](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management) to your Community Cloud app."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/bigquery",
    "content": "# Connect Streamlit to Google BigQuery\n\n## Introduction\n\nThis guide explains how to securely access a BigQuery database from Streamlit Community Cloud. It uses the\n[google-cloud-bigquery](https://googleapis.dev/python/bigquery/latest/index.html) library and\nStreamlit's [Secrets management](/develop/concepts/connections/secrets-management).\n\n## Create a BigQuery database\n\n<Note>\n\nIf you already have a database that you want to use, feel free\nto [skip to the next step](#enable-the-bigquery-api).\n\n</Note>\n\nFor this example, we will use one of the [sample datasets](https://cloud.google.com/bigquery/public-data#sample_tables) from BigQuery (namely the `shakespeare` table). If you want to create a new dataset instead, follow [Google's quickstart guide](https://cloud.google.com/bigquery/docs/quickstarts/quickstart-web-ui).\n\n## Enable the BigQuery API\n\nProgrammatic access to BigQuery is controlled through [Google Cloud Platform](https://cloud.google.com). Create an account or sign in and head over to the [APIs & Services dashboard](https://console.cloud.google.com/apis/dashboard) (select or create a project if asked). As shown below, search for the BigQuery API and enable it:\n\n<Flex>\n<Image alt=\"Bigquery screenshot 1\" src=\"/images/databases/big-query-1.png\" />\n<Image alt=\"Bigquery screenshot 2\" src=\"/images/databases/big-query-2.png\" />\n<Image alt=\"Bigquery screenshot 3\" src=\"/images/databases/big-query-3.png\" />\n</Flex>\n\n## Create a service account & key file\n\nTo use the BigQuery API from Streamlit Community Cloud, you need a Google Cloud Platform service account (a special account type for programmatic data access). Go to the [Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) page and create an account with the **Viewer** permission (this will let the account access data but not change it):\n\n<Flex>\n<Image alt=\"Bigquery screenshot 4\" src=\"/images/databases/big-query-4.png\" />\n<Image alt=\"Bigquery screenshot 5\" src=\"/images/databases/big-query-5.png\" />\n<Image alt=\"Bigquery screenshot 6\" src=\"/images/databases/big-query-6.png\" />\n</Flex>\n\n<Note>\n\nIf the button **CREATE SERVICE ACCOUNT** is gray, you don't have the correct permissions. Ask the\nadmin of your Google Cloud project for help.\n\n</Note>\n\nAfter clicking **DONE**, you should be back on the service accounts overview. Create a JSON key file for the new account and download it:\n\n<Flex>\n<Image alt=\"Bigquery screenshot 7\" src=\"/images/databases/big-query-7.png\" />\n<Image alt=\"Bigquery screenshot 8\" src=\"/images/databases/big-query-8.png\" />\n<Image alt=\"Bigquery screenshot 9\" src=\"/images/databases/big-query-9.png\" />\n</Flex>\n\n## Add the key file to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root\ndirectory. Create this file if it doesn't exist yet and add the content of the key file you just\ndownloaded to it as shown below:\n\n```toml\n# .streamlit/secrets.toml\n\n[gcp_service_account]\ntype = \"service_account\"\nproject_id = \"xxx\"\nprivate_key_id = \"xxx\"\nprivate_key = \"xxx\"\nclient_email = \"xxx\"\nclient_id = \"xxx\"\nauth_uri = \"https://accounts.google.com/o/oauth2/auth\"\ntoken_uri = \"https://oauth2.googleapis.com/token\"\nauth_provider_x509_cert_url = \"https://www.googleapis.com/oauth2/v1/certs\"\nclient_x509_cert_url = \"xxx\"\n```\n\n<Important>\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Copy your app secrets to the cloud\n\nAs the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add google-cloud-bigquery to your requirements file\n\nAdd the [google-cloud-bigquery](https://googleapis.dev/python/bigquery/latest/index.html) package to your `requirements.txt` file, preferably pinning its version (replace `x.x.x` with the version want installed):\n\n```bash\n# requirements.txt\ngoogle-cloud-bigquery==x.x.x\n```\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it. Make sure to adapt the query if you don't use the sample table.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\nfrom google.oauth2 import service_account\nfrom google.cloud import bigquery\n\n# Create API client.\ncredentials = service_account.Credentials.from_service_account_info(\n    st.secrets[\"gcp_service_account\"]\n)\nclient = bigquery.Client(credentials=credentials)\n\n# Perform query.\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\n@st.cache_data(ttl=600)\ndef run_query(query):\n    query_job = client.query(query)\n    rows_raw = query_job.result()\n    # Convert to list of dicts. Required for st.cache_data to hash the return value.\n    rows = [dict(row) for row in rows_raw]\n    return rows\n\nrows = run_query(\"SELECT word FROM `bigquery-public-data.samples.shakespeare` LIMIT 10\")\n\n# Print results.\nst.write(\"Some wise words from Shakespeare:\")\nfor row in rows:\n    st.write(\"✍️ \" + row['word'])\n```\n\nSee `st.cache_data` above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With `st.cache_data`, it only runs when the query changes or after 10 minutes (that's what `ttl` is for). Watch out: If your database updates more frequently, you should adapt `ttl` or remove caching so viewers always see the latest data. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nAlternatively, you can use pandas to read from BigQuery right into a dataframe! Follow all the above steps, install the [pandas-gbq](https://pandas-gbq.readthedocs.io/en/latest/index.html) library (don't forget to add it to `requirements.txt`!), and call `pandas.read_gbq(query, credentials=credentials)`. More info [in the pandas docs](https://pandas.pydata.org/docs/reference/api/pandas.read_gbq.html).\n\nIf everything worked out (and you used the sample table), your app should look like this:\n\n![Final app screenshot](/images/databases/big-query-10.png)"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases/mongodb",
    "content": "# Connect Streamlit to MongoDB\n\n## Introduction\n\nThis guide explains how to securely access a **_remote_** MongoDB database from Streamlit Community Cloud. It uses the [PyMongo](https://github.com/mongodb/mongo-python-driver) library and Streamlit's [Secrets management](/develop/concepts/connections/secrets-management).\n\n## Create a MongoDB Database\n\n<Note>\n\nIf you already have a database that you want to use, feel free\nto [skip to the next step](#add-username-and-password-to-your-local-app-secrets).\n\n</Note>\n\nFirst, follow the official tutorials to [install MongoDB](https://docs.mongodb.com/guides/server/install/), [set up authentication](https://docs.mongodb.com/guides/server/auth/) (note down the username and password!), and [connect to the MongoDB instance](https://docs.mongodb.com/guides/server/drivers/). Once you are connected, open the `mongo` shell and enter the following two commands to create a collection with some example values:\n\n```sql\nuse mydb\ndb.mycollection.insertMany([{\"name\" : \"Mary\", \"pet\": \"dog\"}, {\"name\" : \"John\", \"pet\": \"cat\"}, {\"name\" : \"Robert\", \"pet\": \"bird\"}])\n```\n\n## Add username and password to your local app secrets\n\nYour local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root directory. Create this file if it doesn't exist yet and add the database information as shown below:\n\n```toml\n# .streamlit/secrets.toml\n\n[mongo]\nhost = \"localhost\"\nport = 27017\nusername = \"xxx\"\npassword = \"xxx\"\n```\n\n<Important>\n\nWhen copying your app secrets to Streamlit Community Cloud, be sure to replace the values of **host**, **port**, **username**, and **password** with those of your _remote_ MongoDB database!\n\nAdd this file to `.gitignore` and don't commit it to your GitHub repo!\n\n</Important>\n\n## Copy your app secrets to the cloud\n\nAs the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).\n\n![Secrets manager screenshot](/images/databases/edit-secrets.png)\n\n## Add PyMongo to your requirements file\n\nAdd the [PyMongo](https://github.com/mongodb/mongo-python-driver) package to your `requirements.txt` file, preferably pinning its version (replace `x.x.x` with the version you want installed):\n\n```bash\n# requirements.txt\npymongo==x.x.x\n```\n\n## Write your Streamlit app\n\nCopy the code below to your Streamlit app and run it. Make sure to adapt the name of your database and collection.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\nimport pymongo\n\n# Initialize connection.\n# Uses st.cache_resource to only run once.\n@st.cache_resource\ndef init_connection():\n    return pymongo.MongoClient(**st.secrets[\"mongo\"])\n\nclient = init_connection()\n\n# Pull data from the collection.\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\n@st.cache_data(ttl=600)\ndef get_data():\n    db = client.mydb\n    items = db.mycollection.find()\n    items = list(items)  # make hashable for st.cache_data\n    return items\n\nitems = get_data()\n\n# Print results.\nfor item in items:\n    st.write(f\"{item['name']} has a :{item['pet']}:\")\n```\n\nSee `st.cache_data` above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With `st.cache_data`, it only runs when the query changes or after 10 minutes (that's what `ttl` is for). Watch out: If your database updates more frequently, you should adapt `ttl` or remove caching so viewers always see the latest data. Learn more in [Caching](/develop/concepts/architecture/caching).\n\nIf everything worked out (and you used the example data we created above), your app should look like this:\n\n![Finished app screenshot](/images/databases/streamlit-app.png)"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/databases",
    "content": "# Connect Streamlit to data sources\n\nThese step-by-step guides demonstrate how to connect Streamlit apps to various databases & APIs.\nThey use Streamlit's [Secrets management](/develop/concepts/connections/secrets-management) and\n[caching](/develop/concepts/architecture/caching) to provide secure and fast data access.\n\n<DataSourcesContainer>\n<DataSourcesCard href=\"/develop/tutorials/databases/aws-s3\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/s3.png\" />\n\n<h5>AWS S3</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/bigquery\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/bigquery.png\" />\n\n<h5>BigQuery</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"https://blog.streamlit.io/streamlit-firestore/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/firestore.png\" />\n\n<h5>Firestore (blog)</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/gcs\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/gcs.png\" />\n\n<h5>Google Cloud Storage</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/mssql\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/mssql.png\" />\n\n<h5>Microsoft SQL Server</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/mongodb\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/mongodb.png\" />\n\n<h5>MongoDB</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/mysql\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/mysql.png\" />\n\n<h5>MySQL</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/neon\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/neon-logo.png\" />\n\n<h5>Neon</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/postgresql\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/postgresql.png\" />\n\n<h5>PostgreSQL</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/private-gsheet\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/gsheet.png\" />\n\n<h5>Private Google Sheet</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/public-gsheet\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/gsheet.png\" />\n\n<h5>Public Google Sheet</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/snowflake\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/snowflake.png\" />\n\n<h5>Snowflake</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/supabase\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/supabase.png\" />\n\n<h5>Supabase</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/tableau\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/tableau.png\" />\n\n<h5>Tableau</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/tidb\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/tidb.png\" />\n\n<h5>TiDB</h5>\n\n</DataSourcesCard>\n\n<DataSourcesCard href=\"/develop/tutorials/databases/tigergraph\">\n\n<Image pure alt=\"screenshot\" src=\"/images/databases/tigergraph.png\" />\n\n<h5>TigerGraph</h5>\n\n</DataSourcesCard>\n</DataSourcesContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/elements",
    "content": "# Work with Streamlit elements\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/tutorials/elements/annotate-an-altair-chart\">\n\n<h5>Annotate an Altair chart</h5>\n\nAdd annotations to an Altair chart.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/elements/dataframe-row-selections\">\n\n<h5>Get row selections from dataframes</h5>\n\nWork with user row-selections in dataframes.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/execution-flow",
    "content": "# Use core features to work with Streamlit's execution model\n\n## Fragments\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment\">\n\n<h5>Trigger a full-script rerun from inside a fragment</h5>\n\nCall `st.rerun` from inside a fragment to trigger a full-script rerun when a condition is met.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/execution-flow/create-a-multiple-container-fragment\">\n\n<h5>Create a fragment across multiple containers</h5>\n\nUse a fragment to write to multiple containers across your app.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns\">\n\n<h5>Start and stop a streaming fragment</h5>\n\nUse a fragment to live-stream data. Use a button to start and stop the live-streaming.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/static-fonts",
    "content": "# Use static font files to customize your font\n\nStreamlit comes with Source Sans as the default font, but you can configure your app to use another font. This tutorial uses static font files and is a walkthrough of Example 2 from [Customize fonts in your Streamlit app](/develop/concepts/configuration/theming-customize-fonts#example-2-define-an-alternative-font-with-static-font-files). For an example that uses variable font files, see [Use variable font files to customize your font](/develop/tutorials/configuration-and-theming/variable-fonts).\n\n## Prerequisites\n\n- This tutorial requires the following version of Streamlit:\n\n  ```text\n  streamlit>=1.45.0\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You should have a basic understanding of [static file serving](/develop/concepts/configuration/serving-static-files).\n- You should have a basic understanding of working with font files in web development. Otherwise, start by reading [Customize fonts in your Streamlit app](/develop/concepts/configuration/theming-customize-fonts) up to Example 2.\n\n## Summary\n\nThe following example uses [Tuffy](https://fonts.google.com/specimen/Tuffy) font. The font has four static font files which cover the four following weight-style pairs:\n\n- normal normal\n- normal bold\n- italic normal\n- italic bold\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete config.toml file\" expanded={false}>\n\nDirectory structure:\n\n```none\nyour_repository/\n├── .streamlit/\n│   └── config.toml\n├── static/\n│   ├── Tuffy-Bold.ttf\n│   ├── Tuffy-BoldItalic.ttf\n│   ├── Tuffy-Italic.ttf\n│   └── Tuffy-Regular.ttf\n└── streamlit_app.py\n```\n\n`.streamlit/config.toml`:\n\n```toml\n[server]\nenableStaticServing = true\n\n[[theme.fontFaces]]\nfamily=\"tuffy\"\nurl=\"app/static/Tuffy-Regular.ttf\"\nstyle=\"normal\"\nweight=400\n[[theme.fontFaces]]\nfamily=\"tuffy\"\nurl=\"app/static/Tuffy-Bold.ttf\"\nstyle=\"normal\"\nweight=700\n[[theme.fontFaces]]\nfamily=\"tuffy\"\nurl=\"app/static/Tuffy-Italic.ttf\"\nstyle=\"italic\"\nweight=400\n[[theme.fontFaces]]\nfamily=\"tuffy\"\nurl=\"app/static/Tuffy-BoldItalic.ttf\"\nstyle=\"italic\"\nweight=700\n\n[theme]\nfont=\"tuffy\"\n```\n\n`streamlit_app.py`:\n\n```\nimport streamlit as st\n\nst.write(\"Normal ABCabc123\")\nst.write(\"_Italic ABCabc123_\")\nst.write(\"*Bold ABCabc123*\")\nst.write(\"***Bold-italic ABCabc123***\")\nst.write(\"`Code ABCabc123`\")\n```\n\n</Collapse>\n\n## Download and save your font files\n\n1. Go to [Google fonts](https://fonts.google.com/).\n\n1. Search for or follow the link to [Tuffy](https://fonts.google.com/specimen/Tuffy), and select \"**Get font**.\"\n\n1. To download your font files, in the upper-right corner, select the shopping bag (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>shopping_bag</i>), and then select \"<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>download</i> **Download all**.\"\n\n1. In your downloads directory, unzip the downloaded file.\n\n1. From the unzipped files, copy and save the TTF font files into a `static/` directory in `your_repository/`.\n\n   Copy the following files:\n\n   ```none\n   Tuffy/\n   ├── Tuffy-Bold.ttf\n   ├── Tuffy-BoldItalic.ttf\n   ├── Tuffy-Italic.ttf\n   └── Tuffy-Regular.ttf\n   ```\n\n   Save those files in your repository:\n\n   ```none\n   your_repository/\n   └── static/\n       ├── Tuffy-Bold.ttf\n       ├── Tuffy-BoldItalic.ttf\n       ├── Tuffy-Italic.ttf\n       └── Tuffy-Regular.ttf\n   ```\n\n## Create your app configuration\n\n1. In `your_repository/`, create a `.streamlit/config.toml` file:\n\n   ```none\n   your_repository/\n   ├── .streamlit/\n   │   └── config.toml\n   └── static/\n       ├── Tuffy-Bold.ttf\n       ├── Tuffy-BoldItalic.ttf\n       ├── Tuffy-Italic.ttf\n       └── Tuffy-Regular.ttf\n   ```\n\n1. To enable static file serving, in `.streamlit/config.toml`, add the following text:\n\n   ```toml\n   [server]\n   enableStaticServing = true\n   ```\n\n   This makes the files in your `static/` directory publicly available through your app's URL at the relative path `app/static/{filename}`.\n\n1. To define your alternative fonts, in `.streamlit/config.toml`, add the following text:\n\n   ```toml\n    [[theme.fontFaces]]\n    family=\"tuffy\"\n    url=\"app/static/Tuffy-Regular.ttf\"\n    style=\"normal\"\n    weight=400\n    [[theme.fontFaces]]\n    family=\"tuffy\"\n    url=\"app/static/Tuffy-Bold.ttf\"\n    style=\"normal\"\n    weight=700\n    [[theme.fontFaces]]\n    family=\"tuffy\"\n    url=\"app/static/Tuffy-Italic.ttf\"\n    style=\"italic\"\n    weight=400\n    [[theme.fontFaces]]\n    family=\"tuffy\"\n    url=\"app/static/Tuffy-BoldItalic.ttf\"\n    style=\"italic\"\n    weight=700\n   ```\n\n   The `[[theme.fontFaces]]` table can be repeated to use multiple files to define a single font or to define multiple fonts. In this example, the definitions make `\"tuffy\"` available to other font configuration options.\n\n   <Tip>\n\n   For convenience, avoid spaces in your font family names. When you declare the default font, you can also declare fallback fonts. If you avoid spaces in your font family names, you don't need inner quotes.\n\n   </Tip>\n\n1. To set your alternative fonts as the default font for your app, in `.streamlit/config.toml`, add the following text:\n\n   ```toml\n   [theme]\n   font=\"tuffy\"\n   ```\n\n   This sets Tuffy as the default for all text in your app except inline code and code blocks.\n\n## Build the example\n\nTo verify that your font is loaded correctly, create a simple app.\n\n### Initialize your app\n\n1. In your_repository, create a file named `streamlit_app.py`.\n\n1. In a terminal, change directories to your_repository, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `streamlit_app.py`, write the following:\n\n   ```\n   import streamlit as st\n   ```\n\n1. Save your `streamlit_app.py` file, and view your running app.\n\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `streamlit_app.py`.\n\n1. Return to your code.\n\n### Display some text in your app\n\n1. Create a `streamlit_app.py` file in your working directory.\n\n1. In `streamlit_app.py`, add the following text:\n\n   ```\n   import streamlit as st\n\n   st.write(\"Normal ABCabc123\")\n   st.write(\"_Italic ABCabc123_\")\n   st.write(\"*Bold ABCabc123*\")\n   st.write(\"***Bold-italic ABCabc123***\")\n   st.write(\"`Code ABCabc123`\")\n   ```\n\n1. Save your `streamlit_app.py` file, and view your running app."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/variable-fonts",
    "content": "# Use variable font files to customize your font\n\nStreamlit comes with Source Sans as the default font, but you can configure your app to use another font. This tutorial uses variable font files and is a walkthrough of Example 1 from [Customize fonts in your Streamlit app](/develop/concepts/configuration/theming-customize-fonts#example-1-define-an-alternative-font-with-variable-font-files). For an example that uses static font files, see [Use static font files to customize your font](/develop/tutorials/configuration-and-theming/static-fonts).\n\n## Prerequisites\n\n- This tutorial requires the following version of Streamlit:\n\n  ```text\n  streamlit>=1.45.0\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You should have a basic understanding of [static file serving](/develop/concepts/configuration/serving-static-files).\n- You should have a basic understanding of working with font files in web development. Otherwise, start by reading [Customize fonts in your Streamlit app](/develop/concepts/configuration/theming-customize-fonts) up to Example 1.\n\n## Summary\n\nThe following example uses static file serving to host Google's [Noto Sans](https://fonts.google.com/noto/specimen/Noto+Sans) and [Noto Sans Mono](https://fonts.google.com/noto/specimen/Noto+Sans+Mono) fonts and configures the app to use them. Both of these fonts are defined with variable font files that include a parameterized weight. However, because font style is not parameterized, Noto Sans requires two files to define the normal and italic styles separately. Noto Sans Mono does not include a separate file for its italic style. Per [CSS rules](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style#italic), because no italic style is explicitly provided, it will be simulated by skewing the normal-style font.\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete config.toml file\" expanded={false}>\n\nDirectory structure:\n\n```none\nyour_repository/\n├── .streamlit/\n│   └── config.toml\n├── static/\n│   ├── NotoSans-Italic-VariableFont_wdth,wght.ttf\n│   ├── NotoSans-VariableFont_wdth,wght.ttf\n│   └── NotoSansMono-VariableFont_wdth,wght.ttf\n└── streamlit_app.py\n```\n\n`.streamlit/config.toml`:\n\n```toml\n[server]\nenableStaticServing = true\n\n[[theme.fontFaces]]\nfamily=\"noto-sans\"\nurl=\"app/static/NotoSans-Italic-VariableFont_wdth,wght.ttf\"\nstyle=\"italic\"\n[[theme.fontFaces]]\nfamily=\"noto-sans\"\nurl=\"app/static/NotoSans-VariableFont_wdth,wght.ttf\"\nstyle=\"normal\"\n[[theme.fontFaces]]\nfamily=\"noto-mono\"\nurl=\"app/static/NotoSansMono-VariableFont_wdth,wght.ttf\"\n\n[theme]\nfont=\"noto-sans\"\ncodeFont=\"noto-mono\"\n```\n\n`streamlit_app.py`:\n\n```\nimport streamlit as st\n\nst.write(\"Normal efg\")\nst.write(\"_Italic efg_\")\nst.write(\"*Bold efg*\")\nst.write(\"***Bold-italic efg***\")\nst.write(\"`Code efg`\")\n```\n\n</Collapse>\n\n## Download and save your font files\n\n1. Go to [Google fonts](https://fonts.google.com/).\n\n1. Search for or follow the link to [Noto Sans](https://fonts.google.com/noto/specimen/Noto+Sans), and select \"**Get font**.\"\n\n1. Search for or follow the link to [Noto Sans Mono](https://fonts.google.com/noto/specimen/Noto+Sans+Mono), and select \"**Get font**.\"\n\n1. To download your font files, in the upper-right corner, select the shopping bag (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>shopping_bag</i>), and then select \"<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>download</i> **Download all**.\"\n\n1. In your downloads directory, unzip the downloaded file.\n\n1. From the unzipped files, copy and save the TTF font files into a `static/` directory in `your_repository/`.\n\n   Copy the following files:\n\n   ```none\n   Noto_Sans,Noto_Sans_Mono/\n   ├── Noto_Sans_Mono/\n   │   └── NotoSansMono-VariableFont_wdth,wght.ttf\n   └── Noto_Sans/\n      ├── NotoSans-Italic-VariableFont_wdth,wght.ttf\n      └── NotoSans-VariableFont_wdth,wght.ttf\n   ```\n\n   Save those files in your repository:\n\n   ```none\n   your_repository/\n   └── static/\n       ├── NotoSans-Italic-VariableFont_wdth,wght.ttf\n       ├── NotoSans-VariableFont_wdth,wght.ttf\n       └── NotoSansMono-VariableFont_wdth,wght.ttf\n   ```\n\n   In this example, the font files are `NotoSans-Italic-VariableFont_wdth,wght.ttf` and `NotoSansMono-VariableFont_wdth,wght.ttf` for Noto Sans italic and normal font, respectively. `NotoSansMono-VariableFont_wdth,wght.ttf` is the file for Noto Sans Mono.\n\n## Create your app configuration\n\n1. In `your_repository/`, create a `.streamlit/config.toml` file:\n\n   ```none\n   your_repository/\n   ├── .streamlit/\n   │   └── config.toml\n   └── static/\n       ├── NotoSans-Italic-VariableFont_wdth,wght.ttf\n       ├── NotoSans-VariableFont_wdth,wght.ttf\n       └── NotoSansMono-VariableFont_wdth,wght.ttf\n   ```\n\n1. To enable static file serving, in `.streamlit/config.toml`, add the following text:\n\n   ```toml\n   [server]\n   enableStaticServing = true\n   ```\n\n   This makes the files in your `static/` directory publicly available through your app's URL at the relative path `app/static/{filename}`.\n\n1. To define your alternative fonts, in `.streamlit/config.toml`, add the following text:\n\n   ```toml\n   [[theme.fontFaces]]\n   family=\"noto-sans\"\n   url=\"app/static/NotoSans-Italic-VariableFont_wdth,wght.ttf\"\n   style=\"italic\"\n   [[theme.fontFaces]]\n   family=\"noto-sans\"\n   url=\"app/static/NotoSans-VariableFont_wdth,wght.ttf\"\n   style=\"normal\"\n   [[theme.fontFaces]]\n   family=\"noto-mono\"\n   url=\"app/static/NotoSansMono-VariableFont_wdth,wght.ttf\"\n   ```\n\n   The `[[theme.fontFaces]]` table can be repeated to use multiple files to define a single font or to define multiple fonts. In this example, the definitions make `\"noto-sans\"` and `\"noto-mono\"` available to other font configuration options.\n\n   <Tip>\n\n   For convenience, avoid spaces in your font family names. When you declare the default font, you can also declare fallback fonts. If you avoid spaces in your font family names, you don't need inner quotes.\n\n   </Tip>\n\n1. To set your alternative fonts as the default font for your app, in `.streamlit/config.toml`, add the following text:\n\n   ```toml\n   [theme]\n   font=\"noto-sans\"\n   codeFont=\"noto-mono\"\n   ```\n\n   This sets Noto Sans as the default for all text in your app except inline code and code blocks, which will be Noto Sans Mono instead.\n\n## Build the example\n\nTo verify that your font is loaded correctly, create a simple app.\n\n### Initialize your app\n\n1. In your_repository, create a file named `streamlit_app.py`.\n\n1. In a terminal, change directories to your_repository, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `streamlit_app.py`, write the following:\n\n   ```\n   import streamlit as st\n   ```\n\n1. Save your `streamlit_app.py` file, and view your running app.\n\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `streamlit_app.py`.\n\n1. Return to your code.\n\n### Display some text in your app\n\n1. Create a `streamlit_app.py` file in your working directory.\n\n1. In `streamlit_app.py`, add the following text:\n\n   ```\n   import streamlit as st\n\n   st.write(\"Normal efg\")\n   st.write(\"_Italic efg_\")\n   st.write(\"*Bold efg*\")\n   st.write(\"***Bold-italic efg***\")\n   st.write(\"`Code efg`\")\n   ```\n\n   The example includes \"efg\" in each line to better show the typographical differences when you run your app. The italic \"f\" descends below baseline, but the normal \"f\" doesn't. The italic \"e\" has a rounded front, but the normal \"e\" has a sharp corner.\n\n1. Save your `streamlit_app.py` file, and view your running app."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming",
    "content": "# Customize your theme and configure your app\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/tutorials/configuration-and-theming/static-fonts\">\n\n<h5>Use static font files to customize your font</h5>\n\nMake a new font available to your app. This tutorial uses static font files to define an alternative font.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/configuration-and-theming/variable-fonts\">\n\n<h5>Use variable font files to customize your font</h5>\n\nMake a new font available to your app. This tutorial uses variable font files to define an alternative font.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart",
    "content": "# Build an LLM app using LangChain\n\n## OpenAI, LangChain, and Streamlit in 18 lines of code\n\nIn this tutorial, you will build a Streamlit LLM app that can generate text from a user-provided prompt. This Python app will use the LangChain framework and Streamlit. Optionally, you can deploy your app to [Streamlit Community Cloud](https://streamlit.io/cloud) when you're done.\n\n_This tutorial is adapted from a blog post by Chanin Nantesanamat: [LangChain tutorial #1: Build an LLM-powered app in 18 lines of code](https://blog.streamlit.io/langchain-tutorial-1-build-an-llm-powered-app-in-18-lines-of-code/)._\n\n<Cloud name=\"doc-tutorial-llm-18-lines-of-code\" height=\"600px\" />\n\n## Objectives\n\n1. Get an OpenAI key from the end user.\n2. Validate the user's OpenAI key.\n3. Get a text prompt from the user.\n4. Authenticate OpenAI with the user's key.\n5. Send the user's prompt to OpenAI's API.\n6. Get a response and display it.\n\nBonus: Deploy the app on Streamlit Community Cloud!\n\n## Prerequisites\n\n- Python 3.9+\n- Streamlit\n- LangChain\n- [OpenAI API key](https://platform.openai.com/account/api-keys?ref=blog.streamlit.io)\n\n## Setup coding environment\n\nIn your IDE (integrated coding environment), open the terminal and install the following two Python libraries:\n\n```python\npip install streamlit langchain-openai\n```\n\nCreate a `requirements.txt` file located in the root of your working directory and save these dependencies. This is necessary for deploying the app to the Streamlit Community Cloud later.\n\n```python\nstreamlit\nopenai\nlangchain\n```\n\n## Building the app\n\nThe app is only 18 lines of code:\n\n```python\nimport streamlit as st\nfrom langchain_openai.chat_models import ChatOpenAI\n\nst.title(\"🦜🔗 Quickstart App\")\n\nopenai_api_key = st.sidebar.text_input(\"OpenAI API Key\", type=\"password\")\n\n\ndef generate_response(input_text):\n    model = ChatOpenAI(temperature=0.7, api_key=openai_api_key)\n    st.info(model.invoke(input_text))\n\n\nwith st.form(\"my_form\"):\n    text = st.text_area(\n        \"Enter text:\",\n        \"What are the three key pieces of advice for learning how to code?\",\n    )\n    submitted = st.form_submit_button(\"Submit\")\n    if not openai_api_key.startswith(\"sk-\"):\n        st.warning(\"Please enter your OpenAI API key!\", icon=\"⚠\")\n    if submitted and openai_api_key.startswith(\"sk-\"):\n        generate_response(text)\n\n```\n\nTo start, create a new Python file and save it as `streamlit_app.py` in the root of your working directory.\n\n1. Import the necessary Python libraries.\n\n   ```python\n   import streamlit as st\n   from langchain_openai.chat_models import ChatOpenAI\n   ```\n\n2. Create the app's title using `st.title`.\n\n   ```python\n   st.title(\"🦜🔗 Quickstart App\")\n   ```\n\n3. Add a text input box for the user to enter their OpenAI API key.\n\n   ```python\n   openai_api_key = st.sidebar.text_input(\"OpenAI API Key\", type=\"password\")\n   ```\n\n4. Define a function to authenticate to OpenAI API with the user's key, send a prompt, and get an AI-generated response. This function accepts the user's prompt as an argument and displays the AI-generated response in a blue box using `st.info`.\n\n   ```python\n   def generate_response(input_text):\n       model = ChatOpenAI(temperature=0.7, api_key=openai_api_key)\n       st.info(model.invoke(input_text))\n   ```\n\n5. Finally, use `st.form()` to create a text box (`st.text_area()`) for user input. When the user clicks `Submit`, the `generate-response()` function is called with the user's input as an argument.\n\n   ```python\n   with st.form(\"my_form\"):\n       text = st.text_area(\n           \"Enter text:\",\n           \"What are the three key pieces of advice for learning how to code?\",\n       )\n       submitted = st.form_submit_button(\"Submit\")\n       if not openai_api_key.startswith(\"sk-\"):\n           st.warning(\"Please enter your OpenAI API key!\", icon=\"⚠\")\n       if submitted and openai_api_key.startswith(\"sk-\"):\n           generate_response(text)\n   ```\n\n6. Remember to save your file!\n7. Return to your computer's terminal to run the app.\n\n   ```bash\n   streamlit run streamlit_app.py\n   ```\n\n## Deploying the app\n\nTo deploy the app to the Streamlit Cloud, follow these steps:\n\n1. Create a GitHub repository for the app. Your repository should contain two files:\n\n   ```\n   your-repository/\n   ├── streamlit_app.py\n   └── requirements.txt\n   ```\n\n1. Go to [Streamlit Community Cloud](http://share.streamlit.io), click the `New app` button from your workspace, then specify the repository, branch, and main file path. Optionally, you can customize your app's URL by choosing a custom subdomain.\n1. Click the `Deploy!` button.\n\nYour app will now be deployed to Streamlit Community Cloud and can be accessed from around the world! 🌎\n\n## Conclusion\n\nCongratulations on building an LLM-powered Streamlit app in 18 lines of code! 🥳 You can use this app to generate text from any prompt that you provide. The app is limited by the capabilities of the OpenAI LLM, but it can still be used to generate some creative and interesting text.\n\nWe hope you found this tutorial helpful! Check out [more examples](https://streamlit.io/generative-ai) to see the power of Streamlit and LLM. 💖\n\nHappy Streamlit-ing! 🎈"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses",
    "content": "# Validate and edit chat responses\n\nAs you train LLM models, you may want users to correct or improve chat responses. With Streamlit, you can build a chat app that lets users improve chat responses.\n\nThis tutorial uses Streamlit's chat commands to build a simple chat app that lets users modify chat responses to improve them.\n\n## Applied concepts\n\n- Use `st.chat_input` and `st.chat_message` to create a chat interface.\n- Use Session State to manage stages of a process.\n\n## Prerequisites\n\n- This tutorial requires the following version of Streamlit:\n\n  ```text\n  streamlit>=1.24.0\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You should have a basic understanding of [Session State](/develop/concepts/architecture/session-state).\n\n## Summary\n\nIn this example, you'll build a chat interface. To avoid API calls, the app will include a generator function to simulate a chat stream object. When the simulated chat assistant responds, a function validates the response and highlights possible \"errors\" for the user to review. The user must accept, correct, or rewrite the response before proceeding.\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete code\" expanded={false}>\n\n```python\nimport streamlit as st\nimport lorem\nfrom random import randint\nimport time\n\nif \"stage\" not in st.session_state:\n    st.session_state.stage = \"user\"\n    st.session_state.history = []\n    st.session_state.pending = None\n    st.session_state.validation = {}\n\n\ndef chat_stream():\n    for i in range(randint(3, 9)):\n        yield lorem.sentence() + \" \"\n        time.sleep(0.2)\n\n\ndef validate(response):\n    response_sentences = response.split(\". \")\n    response_sentences = [\n        sentence.strip(\". \") + \".\"\n        for sentence in response_sentences\n        if sentence.strip(\". \") != \"\"\n    ]\n    validation_list = [\n        True if sentence.count(\" \") > 4 else False for sentence in response_sentences\n    ]\n    return response_sentences, validation_list\n\n\ndef add_highlights(response_sentences, validation_list, bg=\"red\", text=\"red\"):\n    return [\n        f\":{text}[:{bg}-background[\" + sentence + \"]]\" if not is_valid else sentence\n        for sentence, is_valid in zip(response_sentences, validation_list)\n    ]\n\n\nfor message in st.session_state.history:\n    with st.chat_message(message[\"role\"]):\n        st.write(message[\"content\"])\n\nif st.session_state.stage == \"user\":\n    if user_input := st.chat_input(\"Enter a prompt\"):\n        st.session_state.history.append({\"role\": \"user\", \"content\": user_input})\n        with st.chat_message(\"user\"):\n            st.write(user_input)\n        with st.chat_message(\"assistant\"):\n            response = st.write_stream(chat_stream())\n            st.session_state.pending = response\n            st.session_state.stage = \"validate\"\n            st.rerun()\n\nelif st.session_state.stage == \"validate\":\n    st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n    response_sentences, validation_list = validate(st.session_state.pending)\n    highlighted_sentences = add_highlights(response_sentences, validation_list)\n    with st.chat_message(\"assistant\"):\n        st.markdown(\" \".join(highlighted_sentences))\n        st.divider()\n        cols = st.columns(3)\n        if cols[0].button(\n            \"Correct errors\", type=\"primary\", disabled=all(validation_list)\n        ):\n            st.session_state.validation = {\n                \"sentences\": response_sentences,\n                \"valid\": validation_list,\n            }\n            st.session_state.stage = \"correct\"\n            st.rerun()\n        if cols[1].button(\"Accept\"):\n            st.session_state.history.append(\n                {\"role\": \"assistant\", \"content\": st.session_state.pending}\n            )\n            st.session_state.pending = None\n            st.session_state.validation = {}\n            st.session_state.stage = \"user\"\n            st.rerun()\n        if cols[2].button(\"Rewrite answer\", type=\"tertiary\"):\n            st.session_state.stage = \"rewrite\"\n            st.rerun()\n\nelif st.session_state.stage == \"correct\":\n    st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n    response_sentences = st.session_state.validation[\"sentences\"]\n    validation_list = st.session_state.validation[\"valid\"]\n    highlighted_sentences = add_highlights(\n        response_sentences, validation_list, \"gray\", \"gray\"\n    )\n    if not all(validation_list):\n        focus = validation_list.index(False)\n        highlighted_sentences[focus] = \":red[:red\" + highlighted_sentences[focus][11:]\n    else:\n        focus = None\n    with st.chat_message(\"assistant\"):\n        st.markdown(\" \".join(highlighted_sentences))\n        st.divider()\n        if focus is not None:\n            new_sentence = st.text_input(\n                \"Replacement text:\", value=response_sentences[focus]\n            )\n            cols = st.columns(2)\n            if cols[0].button(\n                \"Update\", type=\"primary\", disabled=len(new_sentence.strip()) < 1\n            ):\n                st.session_state.validation[\"sentences\"][focus] = (\n                    new_sentence.strip(\". \") + \".\"\n                )\n                st.session_state.validation[\"valid\"][focus] = True\n                st.session_state.pending = \" \".join(\n                    st.session_state.validation[\"sentences\"]\n                )\n                st.rerun()\n            if cols[1].button(\"Remove\"):\n                st.session_state.validation[\"sentences\"].pop(focus)\n                st.session_state.validation[\"valid\"].pop(focus)\n                st.session_state.pending = \" \".join(\n                    st.session_state.validation[\"sentences\"]\n                )\n                st.rerun()\n        else:\n            cols = st.columns(2)\n            if cols[0].button(\"Accept\", type=\"primary\"):\n                st.session_state.history.append(\n                    {\"role\": \"assistant\", \"content\": st.session_state.pending}\n                )\n                st.session_state.pending = None\n                st.session_state.validation = {}\n                st.session_state.stage = \"user\"\n                st.rerun()\n            if cols[1].button(\"Re-validate\"):\n                st.session_state.validation = {}\n                st.session_state.stage = \"validate\"\n                st.rerun()\n\nelif st.session_state.stage == \"rewrite\":\n    st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n    with st.chat_message(\"assistant\"):\n        new = st.text_area(\"Rewrite the answer\", value=st.session_state.pending)\n        if st.button(\n            \"Update\", type=\"primary\", disabled=new is None or new.strip(\". \") == \"\"\n        ):\n            st.session_state.history.append({\"role\": \"assistant\", \"content\": new})\n            st.session_state.pending = None\n            st.session_state.validation = {}\n            st.session_state.stage = \"user\"\n            st.rerun()\n```\n\n</Collapse>\n\n<Cloud name=\"doc-tutorial-chat-response-revision\" height=\"600px\" />\n\n## Build the example\n\n### Initialize your app\n\n1. In `your_repository`, create a file named `app.py`.\n1. In a terminal, change directories to `your_repository`, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `app.py`, write the following:\n\n   ```python\n   import streamlit as st\n   import lorem\n   from random import randint\n   import time\n   ```\n\n   You'll use `lorem`, `random`, and `time` to build a simulated chat response stream.\n\n1. Save your `app.py` file, and view your running app.\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `app.py`.\n\n1. Return to your code.\n\n### Build a function to simulate a chat response stream\n\nTo begin, you'll define a function to stream a random chat response. The simulated chat stream will use `lorem` to generate three to nine random sentences. You can skip this section if you just want to copy the function.\n\n<Collapse title=\"Complete function to simulate a chat stream\" expanded={false}>\n\n```python\ndef chat_stream():\n    for i in range(randint(3, 9)):\n        yield lorem.sentence() + \" \"\n        time.sleep(0.2)\n```\n\n</Collapse>\n\n1. Define a function for your simulated chat stream:\n\n   ```python\n   def chat_stream():\n   ```\n\n   For this example, the chat stream does not have any arguments. The streamed response will be random and independent of the user's prompt.\n\n1. Create a loop that executes three to nine times:\n\n   ```python\n       for i in range(randint(3, 9)):\n   ```\n\n1. Within the loop, yield a random sentence from `lorem` with a space at the end:\n\n   ```python\n           yield lorem.sentence() + \" \"\n   ```\n\n1. To create a streaming effect, add a small delay with `time.sleep(0.2)` between yields:\n\n   ```python\n           time.sleep(0.2)\n   ```\n\nYou now have a complete generator function to simulate a chat stream object.\n\n### Create a validation function\n\nThe app will validate the streamed responses to assist users in identifying possible errors. To validate a response, you'll first create a list of its sentences. Any sentence with fewer than six words will be marked as a potential error. This is an arbitrary standard for the sake of illustration.\n\n<Collapse title=\"Complete function to validate a response\" expanded={false}>\n\n```python\ndef validate(response):\n    response_sentences = response.split(\". \")\n    response_sentences = [\n        sentence.strip(\". \") + \".\"\n        for sentence in response_sentences\n        if sentence.strip(\". \") != \"\"\n    ]\n    validation_list = [\n        True if sentence.count(\" \") > 4 else False for sentence in response_sentences\n    ]\n    return response_sentences, validation_list\n```\n\n</Collapse>\n\n1. Define a function that accepts a string response and breaks it into sentences:\n\n   ```python\n   def validate(response):\n       response_sentences = response.split(\". \")\n   ```\n\n1. Use list comprehension to clean the list of sentences. For each sentence, strip any leading and trailing spaces and periods, and then restore a period to the end:\n\n   ```python\n       response_sentences = [\n           sentence.strip(\". \") + \".\"\n           for sentence in response_sentences\n           if sentence.strip(\". \") != \"\"\n       ]\n   ```\n\n   Because the user will be modifying responses, whitespaces and punctuation may vary. The code `sentence.strip(\". \") + \".\"` removes leading and trailing spaces and periods. It also ensures that each sentence ends with a single period. Furthermore, the code `if sentence.strip(\". \") != \"\"` discards any empty sentences. This simple example doesn't address other punctuation that may terminate a sentence.\n\n1. Create a Boolean list of sentence validations, using `True` for an approved sentence and `False` for an unapproved sentence:\n\n   ```python\n       validation_list = [\n           True if sentence.count(\" \") > 4 else False for sentence in response_sentences\n       ]\n   ```\n\n   As stated previously, a \"good\" sentence has at least six words (i.e., at least five spaces). This code uses list comprehension to count the spaces in each sentence and saves a Boolean value.\n\n1. Return the sentence and validation lists as a tuple:\n\n   ```python\n       return response_sentences, validation_list\n   ```\n\n### Create a helper function to highlight text\n\nTo show your validation results to your user, you can highlight sentences that are marked as errors. Create a helper function to add text and background color to the detected errors.\n\n<Collapse title=\"Complete function to highlight errors\" expanded={false}>\n\n```python\ndef add_highlights(response_sentences, validation_list, bg=\"red\", text=\"red\"):\n    return [\n        f\":{text}[:{bg}-background[\" + sentence + \"]]\" if not is_valid else sentence\n        for sentence, is_valid in zip(response_sentences, validation_list)\n    ]\n```\n\n</Collapse>\n\n1. Define a function that accepts the lists of sentences and their validations. Include parameters for the text and background colors of the highlight:\n\n   ```python\n   def add_highlights(response_sentences, validation_list, bg=\"red\", text=\"red\"):\n   ```\n\n   For convenience, use a default of `\"red\"` for the highlight colors. You'll use this function to highlight all errors in red when summarizing the validation. If the user chooses to step through the errors individually, you'll highlight all the errors in gray (except the one in focus).\n\n1. Use list comprehension to return a modified list of sentences that include the Markdown highlights where errors were detected:\n\n   ```python\n       return [\n           f\":{text}[:{bg}-background[\" + sentence + \"]]\" if not is_valid else sentence\n           for sentence, is_valid in zip(response_sentences, validation_list)\n       ]\n   ```\n\n### Initialize and display your chat history\n\nYour app will use Session State to track the stages of the validation and correction process.\n\n1. Initialize Session State:\n\n   ```python\n   if \"stage\" not in st.session_state:\n       st.session_state.stage = \"user\"\n       st.session_state.history = []\n       st.session_state.pending = None\n       st.session_state.validation = {}\n   ```\n\n   - `st.session_state.stage` tracks where the user is in the multistage process. `\"user\"` means that the app is waiting for the user to enter a new prompt. The other values are `\"validate\"`, `\"correct\"`, and `\"rewrite\"`, which will be defined later.\n   - `st.session_state.history` stores the conversation history as a list of messages. Each message is a dictionary of message attributes (`\"role\"` and `\"content\"`).\n   - `st.session_state.pending` stores the next response before it is approved.\n   - `st.session_state.validation` stores the validation information for the pending response. This is a dictionary with the keys `\"sentences\"` and `\"valid\"` to store the lists of sentences and their validations, respectively.\n\n1. Iterate through the messages in your chat history and display their contents in chat message containers:\n\n   ```python\n   for message in st.session_state.history:\n       with st.chat_message(message[\"role\"]):\n           st.write(message[\"content\"])\n   ```\n\n### Define the `\"user\"` stage\n\nWhen `st.session_state.stage` is `\"user\"`, the app is waiting for a new prompt.\n\n1. Start a conditional block for the `\"user\"` stage:\n\n   ```python\n   if st.session_state.stage == \"user\":\n   ```\n\n1. Display a chat input widget, and start a nested conditional block from its output:\n\n   ```python\n       if user_input := st.chat_input(\"Enter a prompt\"):\n   ```\n\n   This nested block won't be executed until a user submits a prompt. When the app first loads (or returns to the `\"user\"` stage after finalizing a response), this is effectively the end of the script.\n\n   The `:=` notation is shorthand to assign a variable within an expression.\n\n1. Append the user prompt to the chat history and display it in a chat message container:\n\n   ```python\n           st.session_state.history.append({\"role\": \"user\", \"content\": user_input})\n           with st.chat_message(\"user\"):\n               st.write(user_input)\n   ```\n\n1. Following the user's chat message container, display the chat response in another chat message container. Save the complete streamed response as a pending message in Session State:\n\n   ```python\n           with st.chat_message(\"assistant\"):\n               response = st.write_stream(chat_stream())\n               st.session_state.pending = response\n   ```\n\n1. Update the stage to `\"validate\"`, and rerun the app:\n\n   ```python\n               st.session_state.stage = \"validate\"\n               st.rerun()\n   ```\n\n   When a user submits a new prompt, the app will rerun and execute this conditional block. At the end of this block, the app will rerun again and continue in the `\"validate\"` stage.\n\n### Define the `\"validate\"` stage\n\nWhen `st.session_state.stage` is `\"validate\"`, the app will validate the pending response and display the results to the user. The user will then choose how to proceed (accept, correct, or rewrite the response).\n\n1. Start a conditional block for the `\"validate\"` stage:\n\n   ```python\n   elif st.session_state.stage == \"validate\":\n   ```\n\n   You can use `if` or `elif` for each of the stages. Everywhere you update the stage in Session State, you will immediately rerun the app. Therefore, you'll never execute two different stages in the same script run.\n\n1. For visual consistency, display a disabled chat input:\n\n   ```python\n       st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n   ```\n\n   For the user's clarity, use placeholder text to direct them to review the pending response.\n\n1. Parse the response and highlight any errors using your helper functions:\n\n   ```python\n       response_sentences, validation_list = validate(st.session_state.pending)\n       highlighted_sentences = add_highlights(response_sentences, validation_list)\n   ```\n\n1. Join the highlighted sentences into a single string, and display them in a chat message container. To separate the response from the buttons that follow, add a divider:\n\n   ```python\n       with st.chat_message(\"assistant\"):\n           st.markdown(\" \".join(highlighted_sentences))\n           st.divider()\n   ```\n\n1. To display buttons in a row, create three columns:\n\n   ```python\n           cols = st.columns(3)\n   ```\n\n1. In the first column, start a conditional block, and display a primary-type button labeled \"Correct errors.\" Disable the button if there are no detected errors:\n\n   ```python\n           if cols[0].button(\n               \"Correct errors\", type=\"primary\", disabled=all(validation_list)\n           ):\n   ```\n\n1. Within the conditional block, save the validation information into Session State, update the stage, and then rerun the app:\n\n   ```python\n               st.session_state.validation = {\n                   \"sentences\": response_sentences,\n                   \"valid\": validation_list,\n               }\n               st.session_state.stage = \"correct\"\n               st.rerun()\n   ```\n\n   If the user clicks the \"**Correct errors**\" button, the app will rerun and execute this block. At the end of this block, the app will rerun again and enter the `\"correct\"` stage.\n\n1. In the second column, start a conditional block, and display a button labeled \"Accept:\"\n\n   ```python\n           if cols[1].button(\"Accept\"):\n   ```\n\n1. Within the conditional block, save the pending message into the chat history, and clear the pending and validation information from Session State:\n\n   ```python\n               st.session_state.history.append(\n                   {\"role\": \"assistant\", \"content\": st.session_state.pending}\n               )\n               st.session_state.pending = None\n               st.session_state.validation = {}\n   ```\n\n1. Update the stage to `\"user\"`, and rerun the app:\n\n   ```python\n               st.session_state.stage = \"user\"\n               st.rerun()\n   ```\n\n   If the user clicks the \"**Accept**\" button, the app will rerun and execute this block. At the end of this block, the app will rerun again and return to the `\"user\"` stage.\n\n1. In the third column, start a conditional block, and display a tertiary-type button labeled \"Rewrite answer:\"\n\n   ```python\n           if cols[2].button(\"Rewrite answer\", type=\"tertiary\"):\n   ```\n\n1. Within the conditional block, update the stage to `\"rewrite\"` and rerun the app:\n\n   ```python\n               st.session_state.stage = \"rewrite\"\n               st.rerun()\n   ```\n\n   If the user clicks the \"**Rewrite answer**\" button, the app will rerun and execute this conditional block. At the end of this block, the app will rerun again and enter the `\"rewrite\"` stage.\n\n   You don't need to save any information into `st.session_state.validation` because the `\"rewrite\"` stage does not use this information.\n\n### Define the `\"correct\"` stage\n\nWhen `st.session_state.stage` is `\"correct\"`, the user can correct or accept the errors identified in `st.session_state.validation`. With each script run, the app focuses the user on the first error in the list. When the user addresses an error, the error is removed from the list, and the next error is highlighted in the next script run. This continues until all errors are removed. Then, the user can accept the result, return to the `\"validate\"` stage, or go to the `\"rewrite\"` stage.\n\n1. Start a conditional block for the `\"correct\"` stage:\n\n   ```python\n   elif st.session_state.stage == \"correct\":\n   ```\n\n1. For visual consistency, display a disabled chat input:\n\n   ```python\n       st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n   ```\n\n1. For coding convenience, retrieve the validation information from Session State and save it into variables:\n\n   ```python\n       response_sentences = st.session_state.validation[\"sentences\"]\n       validation_list = st.session_state.validation[\"valid\"]\n   ```\n\n1. Use your helper function to highlight the sentences with errors. Use gray for the highlight:\n\n   ```python\n       highlighted_sentences = add_highlights(\n           response_sentences, validation_list, \"gray\", \"gray\"\n       )\n   ```\n\n   In a following step, to focus the user on one error, you'll change the highlight color for one sentence.\n\n1. Check whether there are any errors in `validation_list`. If there are errors, get the index of the first one, and replace the Markdown highlight for the associated sentence:\n\n   ```python\n       if not all(validation_list):\n           focus = validation_list.index(False)\n           highlighted_sentences[focus] = \":red[:red\" + highlighted_sentences[focus][11:]\n   ```\n\n   `highlighted_sentences[focus]` begins with `\":gray[:gray-background[\"`. Therefore, `highlighted_sentences[focus][11:]` removes the first eleven characters so you can prepend `\":red[:red\"` instead.\n\n1. Set a fallback value for `focus` for when there are no errors:\n\n   ```python\n       else:\n           focus = None\n   ```\n\n1. In a chat message container, display the highlighted response. To separate the response from the buttons that follow, add a divider:\n\n   ```python\n       with st.chat_message(\"assistant\"):\n           st.markdown(\" \".join(highlighted_sentences))\n           st.divider()\n   ```\n\n1. Start a conditional block: if there are errors, display a text input prefilled with the first error. This is the error you highlighted in red:\n\n   ```python\n           if focus is not None:\n               new_sentence = st.text_input(\n                   \"Replacement text:\", value=response_sentences[focus]\n               )\n   ```\n\n   `value=response_sentences[focus]` prefills the text input with the sentence associated to `focus`. The user can edit it or replace the text entirely. You'll also add a button so they can choose to remove it instead.\n\n1. To display buttons in a row, create two columns:\n\n   ```python\n               cols = st.columns(2)\n   ```\n\n1. In the first column, start a conditional block, and display a primary-type button labeled \"Update.\" Disable the button if the text input is empty:\n\n   ```python\n               if cols[0].button(\n                   \"Update\", type=\"primary\", disabled=len(new_sentence.strip()) < 1\n               ):\n   ```\n\n1. Within the conditional block, update the sentence and its validation:\n\n   ```python\n                   st.session_state.validation[\"sentences\"][focus] = (\n                       new_sentence.strip(\". \") + \".\"\n                   )\n                   st.session_state.validation[\"valid\"][focus] = True\n   ```\n\n1. Update the complete response in `st.session_state.pending` with the new, resultant response, and rerun the app:\n\n   ```python\n                   st.session_state.pending = \" \".join(\n                       st.session_state.validation[\"sentences\"]\n                   )\n                   st.rerun()\n   ```\n\n   If the user clicks the \"**Update**\" button, the app will rerun and execute this conditional block. At the end of this block, the app will rerun again and continue in the `\"correct\"` stage with the next error highlighted.\n\n1. In the second column, start a conditional block, and display a button labeled \"Remove.\" Within the conditional block, pop the sentence and validation information out of their lists in Session State:\n\n   ```python\n               if cols[1].button(\"Remove\"):\n                   st.session_state.validation[\"sentences\"].pop(focus)\n                   st.session_state.validation[\"valid\"].pop(focus)\n   ```\n\n1. Update the complete response in `st.session_state.pending` with the new, resultant response, and rerun the app:\n\n   ```python\n                   st.session_state.pending = \" \".join(\n                       st.session_state.validation[\"sentences\"]\n                   )\n                   st.rerun()\n   ```\n\n   If the user clicks the \"**Remove**\" button, the app will rerun and execute this conditional block. At the end of this block, the app will rerun again and continue in the `\"correct\"` stage with the next error highlighted.\n\n1. Start an `else` block for when there are no errors. To display buttons in a row, create two columns:\n\n   ```python\n           else:\n               cols = st.columns(2)\n   ```\n\n   After a user has resolved all the errors, they need to confirm the final result. Instead of \"**Update**\" and \"**Remove**\" buttons, you'll display \"**Accept**\" and \"**Re-validate**\" buttons.\n\n1. In the first column, start a conditional block, and display a primary-type button labeled \"Accept.\" Within the conditional block, save the pending message into the chat history, and clear the pending and validation information from Session State:\n\n   ```python\n               if cols[0].button(\"Accept\", type=\"primary\"):\n                   st.session_state.history.append(\n                       {\"role\": \"assistant\", \"content\": st.session_state.pending}\n                   )\n                   st.session_state.pending = None\n                   st.session_state.validation = {}\n   ```\n\n1. Update the stage to `\"user\"`, and rerun the app:\n\n   ```python\n                   st.session_state.stage = \"user\"\n                   st.rerun()\n   ```\n\n   If the user clicks the \"**Accept**\" button, the app will rerun and execute this block. At the end of this block, the app will rerun again and return to the `\"user\"` stage.\n\n1. In the second column, start a conditional block, and display a button labeled \"Re-validate:\"\n\n   ```python\n               if cols[1].button(\"Re-validate\"):\n   ```\n\n1. Within the conditional block, clear the validation information from Session State, update the stage to `\"validate\"`, and rerun the app:\n\n   ```python\n                   st.session_state.validation = {}\n                   st.session_state.stage = \"validate\"\n                   st.rerun()\n   ```\n\n   If the user clicks the \"**Re-validate**\" button, the app will rerun and execute this conditional block. At the end of this block, the app will rerun again and enter the `\"validate\"` stage.\n\n### Define the `\"rewrite\"` stage\n\nWhen `st.session_state.stage` is `\"rewrite\"`, the user can freely edit the response in a text area.\n\n1. Start a conditional block for the `\"rewrite\"` stage:\n\n   ```python\n   elif st.session_state.stage == \"rewrite\":\n   ```\n\n1. For visual consistency, display a disabled chat input:\n\n   ```python\n       st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n   ```\n\n1. To let the user edit the pending response, in a chat message container, display a text area input:\n\n   ```python\n       with st.chat_message(\"assistant\"):\n           new = st.text_area(\"Rewrite the answer\", value=st.session_state.pending)\n   ```\n\n   `value=st.session_state.pending` prefills the text area input with the pending response. The user can edit it or replace the text entirely.\n\n1. Start a conditional block, and display a primary-type button labeled \"Update.\" Disable the button if text area input is empty:\n\n   ```python\n           if st.button(\n               \"Update\", type=\"primary\", disabled=new is None or new.strip(\". \") == \"\"\n           ):\n   ```\n\n1. Within the conditional block, add the new response to the chat history, and clear the pending and validation information from Session State:\n\n   ```python\n               st.session_state.history.append({\"role\": \"assistant\", \"content\": new})\n               st.session_state.pending = None\n               st.session_state.validation = {}\n   ```\n\n1. Update the stage to `\"user\"`, and rerun the app:\n\n   ```python\n               st.session_state.stage = \"user\"\n               st.rerun()\n   ```\n\n   If the user clicks the \"**Update**\" button, the app will rerun and execute this block. At the end of this block, the app will rerun again and return to the `\"user\"` stage.\n\n1. Save your file and go to your browser to try your new app.\n\n## Improve the example\n\nNow that you have a working app, you can iteratively improve it. Because there are some common elements between stages, you might want to introduce additional functions to reduce duplicate code. You can use callbacks with the buttons so the app doesn't rerun twice in a row. Alternatively, you can handle more edge cases.\n\nThe example includes some protection against saving an empty response, but it isn't comprehensive. If every sentence in a response is marked as an error, a user can remove each of them in the `\"correct\"` stage and accept the empty result. If the response is empty in the `\"correct\"` stage, consider disabling the \"**Accept**\" button or changing it to \"**Rewrite**.\"\n\nTo see another edge case, try this in the running example:\n\n1. Submit a prompt.\n1. Select \"**Rewrite answer**.\"\n1. In the text area, highlight all text, and press `Delete`. Do not click or tab outside of the text area.\n1. Immediately click the \"**Update**\" button.\n\nWhen you click a button with an unsubmitted value in another widget, Streamlit will update that widget's value and the button's value in succession before triggering the rerun. Because there isn't a rerun between updating the text area and updating the button, the \"**Update**\" button doesn't get disabled as expected. To correct this, you can add an extra check for an empty text area within the `\"rewrite\"` stage:\n\n```diff\n-       if st.button(\n-           \"Update\", type=\"primary\", disabled=new is None or new.strip(\". \") == \"\"\n-       ):\n+       is_empty = new is None or new.strip(\". \") == \"\"\n+       if st.button(\"Update\", type=\"primary\", disabled=is_empty) and not is_empty:\n            st.session_state.history.append({\"role\": \"assistant\", \"content\": new})\n            st.session_state.pending = None\n            st.session_state.validation = {}\n            st.session_state.stage = \"user\"\n            st.rerun()\n```\n\nNow, if you repeat the listed steps, when the app reruns, the conditional block won't be executed even though the button triggered the rerun. The button will be disabled and the user can proceed as if they had just clicked or tabbed out of the text area."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps",
    "content": "# Build a basic LLM chat app\n\n## Introduction\n\nThe advent of large language models like GPT has revolutionized the ease of developing chat-based applications. Streamlit offers several [Chat elements](/develop/api-reference/chat), enabling you to build Graphical User Interfaces (GUIs) for conversational agents or chatbots. Leveraging [session state](/develop/concepts/architecture/session-state) along with these elements allows you to construct anything from a basic chatbot to a more advanced, ChatGPT-like experience using purely Python code.\n\nIn this tutorial, we'll start by walking through Streamlit's chat elements, `st.chat_message` and `st.chat_input`. Then we'll proceed to construct three distinct applications, each showcasing an increasing level of complexity and functionality:\n\n1. First, we'll [Build a bot that mirrors your input](#build-a-bot-that-mirrors-your-input) to get a feel for the chat elements and how they work. We'll also introduce [session state](/develop/concepts/architecture/session-state) and how it can be used to store the chat history. This section will serve as a foundation for the rest of the tutorial.\n2. Next, you'll learn how to [Build a simple chatbot GUI with streaming](#build-a-simple-chatbot-gui-with-streaming).\n3. Finally, we'll [Build a ChatGPT-like app](#build-a-chatgpt-like-app) that leverages session state to remember conversational context, all within less than 50 lines of code.\n\nHere's a sneak peek of the LLM-powered chatbot GUI with streaming we'll build in this tutorial:\n\n<Cloud name=\"doc-chat-llm\" height=\"700px\" />\n\nPlay around with the above demo to get a feel for what we'll build in this tutorial. A few things to note:\n\n- There's a chat input at the bottom of the screen that's always visible. It contains some placeholder text. You can type in a message and press Enter or click the run button to send it.\n- When you enter a message, it appears as a chat message in the container above. The container is scrollable, so you can scroll up to see previous messages. A default avatar is displayed to your messages' left.\n- The assistant's responses are streamed to the frontend and are displayed with a different default avatar.\n\nBefore we start building, let's take a closer look at the chat elements we'll use.\n\n## Chat elements\n\nStreamlit offers several commands to help you build conversational apps. These chat elements are designed to be used in conjunction with each other, but you can also use them separately.\n\n[`st.chat_message`](/develop/api-reference/chat/st.chat_message) lets you insert a chat message container into the app so you can display messages from the user or the app. Chat containers can contain other Streamlit elements, including charts, tables, text, and more. [`st.chat_input`](/develop/api-reference/chat/st.chat_input) lets you display a chat input widget so the user can type in a message.\n\nFor an overview of the API, check out this video tutorial by Chanin Nantasenamat ([@dataprofessor](https://www.youtube.com/dataprofessor)), a Senior Developer Advocate at Streamlit.\n\n<YouTube videoId=\"4sPnOqeUDmk\" />\n\n### st.chat_message\n\n`st.chat_message` lets you insert a multi-element chat message container into your app. The returned container can contain any Streamlit element, including charts, tables, text, and more. To add elements to the returned container, you can use `with` notation.\n\n`st.chat_message`'s first parameter is the `name` of the message author, which can be either `\"user\"` or `\"assistant\"` to enable preset styling and avatars, like in the demo above. You can also pass in a custom string to use as the author name. Currently, the name is not shown in the UI but is only set as an accessibility label. For accessibility reasons, you should not use an empty string.\n\nHere's an minimal example of how to use `st.chat_message` to display a welcome message:\n\n```python\nimport streamlit as st\n\nwith st.chat_message(\"user\"):\n    st.write(\"Hello 👋\")\n```\n\n<Image src=\"/images/knowledge-base/chat-message-hello.png\" clean />\n<br />\n\nNotice the message is displayed with a default avatar and styling since we passed in `\"user\"` as the author name. You can also pass in `\"assistant\"` as the author name to use a different default avatar and styling, or pass in a custom name and avatar. See the [API reference](/develop/api-reference/chat/st.chat_message) for more details.\n\n```python\nimport streamlit as st\nimport numpy as np\n\nwith st.chat_message(\"assistant\"):\n    st.write(\"Hello human\")\n    st.bar_chart(np.random.randn(30, 3))\n```\n\n<Cloud name=\"doc-chat-message-user1\" height=\"450px\" />\n\nWhile we've used the preferred `with` notation in the above examples, you can also just call methods directly in the returned objects. The below example is equivalent to the one above:\n\n```python\nimport streamlit as st\nimport numpy as np\n\nmessage = st.chat_message(\"assistant\")\nmessage.write(\"Hello human\")\nmessage.bar_chart(np.random.randn(30, 3))\n```\n\nSo far, we've displayed predefined messages. But what if we want to display messages based on user input?\n\n### st.chat_input\n\n`st.chat_input` lets you display a chat input widget so the user can type in a message. The returned value is the user's input, which is `None` if the user hasn't sent a message yet. You can also pass in a default prompt to display in the input widget. Here's an example of how to use `st.chat_input` to display a chat input widget and show the user's input:\n\n```python\nimport streamlit as st\n\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    st.write(f\"User has sent the following prompt: {prompt}\")\n```\n\n<Cloud name=\"doc-chat-input\" height=\"350px\" />\n\nPretty straightforward, right? Now let's combine `st.chat_message` and `st.chat_input` to build a bot the mirrors or echoes your input.\n\n## Build a bot that mirrors your input\n\nIn this section, we'll build a bot that mirrors or echoes your input. More specifically, the bot will respond to your input with the same message. We'll use `st.chat_message` to display the user's input and `st.chat_input` to accept user input. We'll also use [session state](/develop/concepts/architecture/session-state) to store the chat history so we can display it in the chat message container.\n\nFirst, let's think about the different components we'll need to build our bot:\n\n- Two chat message containers to display messages from the user and the bot, respectively.\n- A chat input widget so the user can type in a message.\n- A way to store the chat history so we can display it in the chat message containers. We can use a list to store the messages, and append to it every time the user or bot sends a message. Each entry in the list will be a dictionary with the following keys: `role` (the author of the message), and `content` (the message content).\n\n```python\nimport streamlit as st\n\nst.title(\"Echo Bot\")\n\n# Initialize chat history\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\n# Display chat messages from history on app rerun\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"]):\n        st.markdown(message[\"content\"])\n```\n\nIn the above snippet, we've added a title to our app and a for loop to iterate through the chat history and display each message in the chat message container (with the author role and message content). We've also added a check to see if the `messages` key is in `st.session_state`. If it's not, we initialize it to an empty list. This is because we'll be adding messages to the list later on, and we don't want to overwrite the list every time the app reruns.\n\nNow let's accept user input with `st.chat_input`, display the user's message in the chat message container, and add it to the chat history.\n\n```python\n# React to user input\nif prompt := st.chat_input(\"What is up?\"):\n    # Display user message in chat message container\n    with st.chat_message(\"user\"):\n        st.markdown(prompt)\n    # Add user message to chat history\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n```\n\nWe used the `:=` operator to assign the user's input to the `prompt` variable and checked if it's not `None` in the same line. If the user has sent a message, we display the message in the chat message container and append it to the chat history.\n\nAll that's left to do is add the chatbot's responses within the `if` block. We'll use the same logic as before to display the bot's response (which is just the user's prompt) in the chat message container and add it to the history.\n\n```python\nresponse = f\"Echo: {prompt}\"\n# Display assistant response in chat message container\nwith st.chat_message(\"assistant\"):\n    st.markdown(response)\n# Add assistant response to chat history\nst.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\n```\n\nPutting it all together, here's the full code for our simple chatbot GUI and the result:\n\n<Collapse title=\"View full code\" expanded={false}>\n\n```python\nimport streamlit as st\n\nst.title(\"Echo Bot\")\n\n# Initialize chat history\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\n# Display chat messages from history on app rerun\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"]):\n        st.markdown(message[\"content\"])\n\n# React to user input\nif prompt := st.chat_input(\"What is up?\"):\n    # Display user message in chat message container\n    st.chat_message(\"user\").markdown(prompt)\n    # Add user message to chat history\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n\n    response = f\"Echo: {prompt}\"\n    # Display assistant response in chat message container\n    with st.chat_message(\"assistant\"):\n        st.markdown(response)\n    # Add assistant response to chat history\n    st.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\n```\n\n</Collapse>\n\n<Cloud name=\"doc-chat-echo\" height=\"700px\" />\n\nWhile the above example is very simple, it's a good starting point for building more complex conversational apps. Notice how the bot responds instantly to your input. In the next section, we'll add a delay to simulate the bot \"thinking\" before responding.\n\n## Build a simple chatbot GUI with streaming\n\nIn this section, we'll build a simple chatbot GUI that responds to user input with a random message from a list of pre-determind responses. In the [next section](#build-a-chatgpt-like-app), we'll convert this simple toy example into a ChatGPT-like experience using OpenAI.\n\nJust like previously, we still require the same components to build our chatbot. Two chat message containers to display messages from the user and the bot, respectively. A chat input widget so the user can type in a message. And a way to store the chat history so we can display it in the chat message containers.\n\nLet's just copy the code from the previous section and add a few tweaks to it.\n\n```python\nimport streamlit as st\nimport random\nimport time\n\nst.title(\"Simple chat\")\n\n# Initialize chat history\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\n# Display chat messages from history on app rerun\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"]):\n        st.markdown(message[\"content\"])\n\n# Accept user input\nif prompt := st.chat_input(\"What is up?\"):\n    # Display user message in chat message container\n    with st.chat_message(\"user\"):\n        st.markdown(prompt)\n    # Add user message to chat history\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n```\n\nThe only difference so far is we've changed the title of our app and added imports for `random` and `time`. We'll use `random` to randomly select a response from a list of responses and `time` to add a delay to simulate the chatbot \"thinking\" before responding.\n\nAll that's left to do is add the chatbot's responses within the `if` block. We'll use a list of responses and randomly select one to display. We'll also add a delay to simulate the chatbot \"thinking\" before responding (or stream its response). Let's make a helper function for this and insert it at the top of our app.\n\n```python\n# Streamed response emulator\ndef response_generator():\n    response = random.choice(\n        [\n            \"Hello there! How can I assist you today?\",\n            \"Hi, human! Is there anything I can help you with?\",\n            \"Do you need help?\",\n        ]\n    )\n    for word in response.split():\n        yield word + \" \"\n        time.sleep(0.05)\n```\n\nBack to writing the response in our chat interface, we'll use `st.write_stream` to write out the streamed response with a typewriter effect.\n\n```python\n# Display assistant response in chat message container\nwith st.chat_message(\"assistant\"):\n    response = st.write_stream(response_generator())\n# Add assistant response to chat history\nst.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\n```\n\nAbove, we've added a placeholder to display the chatbot's response. We've also added a for loop to iterate through the response and display it one word at a time. We've added a delay of 0.05 seconds between each word to simulate the chatbot \"thinking\" before responding. Finally, we append the chatbot's response to the chat history. As you've probably guessed, this is a naive implementation of streaming. We'll see how to implement streaming with OpenAI in the [next section](#build-a-chatgpt-like-app).\n\nPutting it all together, here's the full code for our simple chatbot GUI and the result:\n\n<Collapse title=\"View full code\" expanded={false}>\n\n```python\nimport streamlit as st\nimport random\nimport time\n\n\n# Streamed response emulator\ndef response_generator():\n    response = random.choice(\n        [\n            \"Hello there! How can I assist you today?\",\n            \"Hi, human! Is there anything I can help you with?\",\n            \"Do you need help?\",\n        ]\n    )\n    for word in response.split():\n        yield word + \" \"\n        time.sleep(0.05)\n\n\nst.title(\"Simple chat\")\n\n# Initialize chat history\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\n# Display chat messages from history on app rerun\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"]):\n        st.markdown(message[\"content\"])\n\n# Accept user input\nif prompt := st.chat_input(\"What is up?\"):\n    # Add user message to chat history\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n    # Display user message in chat message container\n    with st.chat_message(\"user\"):\n        st.markdown(prompt)\n\n    # Display assistant response in chat message container\n    with st.chat_message(\"assistant\"):\n        response = st.write_stream(response_generator())\n    # Add assistant response to chat history\n    st.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\n```\n\n</Collapse>\n\n<Cloud name=\"doc-chat-simple\" height=\"700px\" />\n\nPlay around with the above demo to get a feel for what we've built. It's a very simple chatbot GUI, but it has all the components of a more sophisticated chatbot. In the next section, we'll see how to build a ChatGPT-like app using OpenAI.\n\n## Build a ChatGPT-like app\n\nNow that you've understood the basics of Streamlit's chat elements, let's make a few tweaks to it to build our own ChatGPT-like app. You'll need to install the [OpenAI Python library](https://pypi.org/project/openai/) and get an [API key](https://platform.openai.com/account/api-keys) to follow along.\n\n### Install dependencies\n\nFirst let's install the dependencies we'll need for this section:\n\n```bash\npip install openai streamlit\n```\n\n### Add OpenAI API key to Streamlit secrets\n\nNext, let's add our OpenAI API key to [Streamlit secrets](/develop/concepts/connections/secrets-management). We do this by creating `.streamlit/secrets.toml` file in our project directory and adding the following lines to it:\n\n```toml\n# .streamlit/secrets.toml\nOPENAI_API_KEY = \"YOUR_API_KEY\"\n```\n\n### Write the app\n\nNow let's write the app. We'll use the same code as before, but we'll replace the list of responses with a call to the OpenAI API. We'll also add a few more tweaks to make the app more ChatGPT-like.\n\n```python\nimport streamlit as st\nfrom openai import OpenAI\n\nst.title(\"ChatGPT-like clone\")\n\n# Set OpenAI API key from Streamlit secrets\nclient = OpenAI(api_key=st.secrets[\"OPENAI_API_KEY\"])\n\n# Set a default model\nif \"openai_model\" not in st.session_state:\n    st.session_state[\"openai_model\"] = \"gpt-3.5-turbo\"\n\n# Initialize chat history\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\n# Display chat messages from history on app rerun\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"]):\n        st.markdown(message[\"content\"])\n\n# Accept user input\nif prompt := st.chat_input(\"What is up?\"):\n    # Add user message to chat history\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n    # Display user message in chat message container\n    with st.chat_message(\"user\"):\n        st.markdown(prompt)\n```\n\nAll that's changed is that we've added a default model to `st.session_state` and set our OpenAI API key from Streamlit secrets. Here's where it gets interesting. We can replace our emulated stream with the model's responses from OpenAI:\n\n```python\n    # Display assistant response in chat message container\n    with st.chat_message(\"assistant\"):\n        stream = client.chat.completions.create(\n            model=st.session_state[\"openai_model\"],\n            messages=[\n                {\"role\": m[\"role\"], \"content\": m[\"content\"]}\n                for m in st.session_state.messages\n            ],\n            stream=True,\n        )\n        response = st.write_stream(stream)\n    st.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\n```\n\nAbove, we've replaced the list of responses with a call to [`OpenAI().chat.completions.create`](https://platform.openai.com/docs/guides/text-generation/chat-completions-api). We've set `stream=True` to stream the responses to the frontend. In the API call, we pass the model name we hardcoded in session state and pass the chat history as a list of messages. We also pass the `role` and `content` of each message in the chat history. Finally, OpenAI returns a stream of responses (split into chunks of tokens), which we iterate through and display each chunk.\n\nPutting it all together, here's the full code for our ChatGPT-like app and the result:\n\n<Collapse title=\"View full code\" expanded={false}>\n\n```python\nfrom openai import OpenAI\nimport streamlit as st\n\nst.title(\"ChatGPT-like clone\")\n\nclient = OpenAI(api_key=st.secrets[\"OPENAI_API_KEY\"])\n\nif \"openai_model\" not in st.session_state:\n    st.session_state[\"openai_model\"] = \"gpt-3.5-turbo\"\n\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"]):\n        st.markdown(message[\"content\"])\n\nif prompt := st.chat_input(\"What is up?\"):\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n    with st.chat_message(\"user\"):\n        st.markdown(prompt)\n\n    with st.chat_message(\"assistant\"):\n        stream = client.chat.completions.create(\n            model=st.session_state[\"openai_model\"],\n            messages=[\n                {\"role\": m[\"role\"], \"content\": m[\"content\"]}\n                for m in st.session_state.messages\n            ],\n            stream=True,\n        )\n        response = st.write_stream(stream)\n    st.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\n```\n\n<Image src=\"/images/knowledge-base/chatgpt-clone.gif\" clean />\n\n</Collapse>\n\n<Cloud name=\"doc-chat-llm\" height=\"700px\" />\n\nCongratulations! You've built your own ChatGPT-like app in less than 50 lines of code.\n\nWe're very excited to see what you'll build with Streamlit's chat elements. Experiment with different models and tweak the code to build your own conversational apps. If you build something cool, let us know on the [Forum](https://discuss.streamlit.io/c/streamlit-examples/9) or check out some other [Generative AI apps](https://streamlit.io/generative-ai) for inspiration. 🎈"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback",
    "content": "# Collect user feedback about LLM responses\n\nA common task in a chat app is to collect user feedback about an LLM's responses. Streamlit includes `st.feedback` to conveniently collect user sentiment by displaying a group of selectable sentiment icons.\n\nThis tutorial uses Streamlit's chat commands and `st.feedback` to build a simple chat app that collects user feedback about each response.\n\n## Applied concepts\n\n- Use `st.chat_input` and `st.chat_message` to create a chat interface.\n- Use `st.feedback` to collect user sentiment about chat responses.\n\n## Prerequisites\n\n- This tutorial requires the following version of Streamlit:\n\n  ```text\n  streamlit>=1.42.0\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You should have a basic understanding of [Session State](/develop/concepts/architecture/session-state).\n\n## Summary\n\nIn this example, you'll build a chat interface. To avoid API calls, the chat app will echo the user's prompt within a fixed response. Each chat response will be followed by a feedback widget where the user can vote \"thumb up\" or \"thumb down.\" In the following code, a user can't change their feedback after it's given. If you want to let users change their rating, see the optional instructions at the end of this tutorial.\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete code\" expanded={false}>\n\n```python\nimport streamlit as st\nimport time\n\n\ndef chat_stream(prompt):\n    response = f'You said, \"{prompt}\" ...interesting.'\n    for char in response:\n        yield char\n        time.sleep(0.02)\n\n\ndef save_feedback(index):\n    st.session_state.history[index][\"feedback\"] = st.session_state[f\"feedback_{index}\"]\n\n\nif \"history\" not in st.session_state:\n    st.session_state.history = []\n\nfor i, message in enumerate(st.session_state.history):\n    with st.chat_message(message[\"role\"]):\n        st.write(message[\"content\"])\n        if message[\"role\"] == \"assistant\":\n            feedback = message.get(\"feedback\", None)\n            st.session_state[f\"feedback_{i}\"] = feedback\n            st.feedback(\n                \"thumbs\",\n                key=f\"feedback_{i}\",\n                disabled=feedback is not None,\n                on_change=save_feedback,\n                args=[i],\n            )\n\nif prompt := st.chat_input(\"Say something\"):\n    with st.chat_message(\"user\"):\n        st.write(prompt)\n    st.session_state.history.append({\"role\": \"user\", \"content\": prompt})\n    with st.chat_message(\"assistant\"):\n        response = st.write_stream(chat_stream(prompt))\n        st.feedback(\n            \"thumbs\",\n            key=f\"feedback_{len(st.session_state.history)}\",\n            on_change=save_feedback,\n            args=[len(st.session_state.history)],\n        )\n    st.session_state.history.append({\"role\": \"assistant\", \"content\": response})\n```\n\n</Collapse>\n\n<Cloud name=\"doc-tutorial-chat-response-feedback\" height=\"600px\" />\n\n## Build the example\n\n### Initialize your app\n\n1. In `your_repository`, create a file named `app.py`.\n1. In a terminal, change directories to `your_repository`, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `app.py`, write the following:\n\n   ```python\n   import streamlit as st\n   import time\n   ```\n\n   You'll use `time` to build a simulated chat response stream.\n\n1. Save your `app.py` file, and view your running app.\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `app.py`.\n\n1. Return to your code.\n\n### Build a function to simulate a chat response stream\n\nTo begin, you'll define a function to stream a fixed chat response. You can skip this section if you just want to copy the function.\n\n<Collapse title=\"Complete function to simulate a chat stream\" expanded={false}>\n\n```python\ndef chat_stream(prompt):\n    response = f'You said, \"{prompt}\" ...interesting.'\n    for char in response:\n        yield char\n        time.sleep(0.02)\n```\n\n</Collapse>\n\n1. Define a function which accepts a prompt and formulates a response:\n\n   ```python\n   def chat_stream(prompt):\n       response = f'You said, \"{prompt}\" ...interesting.'\n   ```\n\n1. Loop through the characters and yield each one at 0.02-second intervals:\n\n   ```python\n       for char in response:\n           yield char\n           time.sleep(.02)\n   ```\n\nYou now have a complete generator function to simulate a chat stream object.\n\n### Initialize and render your chat history\n\nTo make your chat app stateful, you'll save the conversation history into Session State as a list of messages. Each message is a dictionary of message attributes. The dictionary keys include the following:\n\n- `\"role\"`: Indicates the source of the message (either `\"user\"` or `\"assistant\"`).\n- `\"content\"`: The body of the message as a string.\n- `\"feedback\"`: An integer that indicates a user's feedback. This is only included when the message role is `\"assistant\"` because users do not leave feedback on their own prompts.\n\n1. Initialize the chat history in Session State:\n\n   ```python\n   if \"history\" not in st.session_state:\n       st.session_state.history = []\n   ```\n\n1. Iterate through the messages in your chat history and render their contents in chat message containers:\n\n   ```python\n   for i, message in enumerate(st.session_state.history):\n       with st.chat_message(message[\"role\"]):\n           st.write(message[\"content\"])\n   ```\n\n   In a later step, you'll need a unique key for each assistant message. You can use the index of the message in your chat history to create a unique key. Therefore, use `enumerate()` to get an index along with each message dictionary.\n\n1. For each assistant message, check whether feedback has been saved:\n\n   ```python\n           if message[\"role\"] == \"assistant\":\n               feedback = message.get(\"feedback\", None)\n   ```\n\n   If no feedback is saved for the current message, the `.get()` method will return the specified default of `None`.\n\n1. Save the feedback value into Session State under a unique key for that message:\n\n   ```python\n               st.session_state[f\"feedback_{i}\"] = feedback\n   ```\n\n   Because the message index within the ordered chat history is unique, you can use the index as the key. For readability, you can add a prefix, \"feedback\\_\", to the index. In the next step, to make the feedback widget show this value, you'll assign the same key to the widget.\n\n1. Add a feedback widget to the chat message container:\n\n   ```python\n               st.feedback(\n                   \"thumbs\",\n                   key=f\"feedback_{i}\",\n                   disabled=feedback is not None,\n               )\n   ```\n\n   The code you've written so far will show the chat history. If a user has already rated a message in the chat history, the feedback widget will show the rating and be disabled. The user won't be able to change their rating.\n\n   All unrated messages include an enabled feedback widget. However, if a user interacts with one of those widgets, there is no code to save that information into the chat history yet. To solve this, use a callback as shown in the following steps.\n\n1. At the top of your app, after the definition of `chat_stream()` and before you initialize your chat history, define a function to use as a callback:\n\n   ```python\n   def save_feedback(index):\n       st.session_state.history[index][\"feedback\"] = st.session_state[f\"feedback_{index}\"]\n   ```\n\n   The `save_feedback()` function accepts an index and uses the index to get the associated widget value from Session State. Then, this value is saved into chat history.\n\n1. Add the callback and index argument to your `st.feedback` widget:\n\n   ```diff\n               st.feedback(\n                   \"thumbs\",\n                   key=f\"feedback_{i}\",\n                   disabled=feedback is not None,\n   +               on_change=save_feedback,\n   +               args=[i],\n               )\n   ```\n\n   When a user interacts with the feedback widget, the callback will update the chat history before the app reruns.\n\n### Add chat input\n\n1. Accept the user's prompt from an `st.chat_input` widget, display it in a chat message container, and then save it to the chat history:\n\n   ```python\n   if prompt := st.chat_input(\"Say something\"):\n       with st.chat_message(\"user\"):\n           st.write(prompt)\n       st.session_state.history.append({\"role\": \"user\", \"content\": prompt})\n   ```\n\n   The `st.chat_input` widget acts like a button. When a user enters a prompt and clicks the send icon, it triggers a rerun. During the rerun, the previous code displays the chat history. When this conditional block is executed, the user's new prompt is displayed and then added to the history. On the next rerun, this prompt will be displayed as part of the history.\n\n   The `:=` notation is shorthand to assign a variable within an expression. The following code is equivalent to the previous code in this step:\n\n   ```python\n   prompt = st.chat_input(\"Say something\")\n   if prompt:\n       with st.chat_message(\"user\"):\n           st.write(prompt)\n       st.session_state.history.append({\"role\": \"user\", \"content\": prompt})\n   ```\n\n1. In another chat message container, process the prompt, display the response, add a feedback widget, and append the response to the chat history:\n\n   ```python\n      with st.chat_message(\"assistant\"):\n          response = st.write_stream(chat_stream(prompt))\n          st.feedback(\n              \"thumbs\",\n              key=f\"feedback_{len(st.session_state.history)}\",\n              on_change=save_feedback,\n              args=[len(st.session_state.history)],\n          )\n      st.session_state.history.append({\"role\": \"assistant\", \"content\": response})\n   ```\n\n   This is the same pattern used for the user's prompt. Within the body of the conditional block, the response is displayed and then added to the history. On the next rerun, this response will be displayed as a part of the chat history.\n\n   When Streamlit executes the `st.feedback` command, the response is not yet added to the chat history. Use an index equal to the length of the chat history because that is the index that the response will have when it's added to the chat history on the next line.\n\n1. Save your file and go to your browser to try your new app.\n\n### Optional: Change the feedback behavior\n\nYour app currently allows users to rate any response once. They can submit their rating at any time, but can't change it.\n\nIf you want users to rate only the _most recent_ response, you can remove the widgets from the chat history:\n\n```diff\n  for i, message in enumerate(st.session_state.history):\n      with st.chat_message(message[\"role\"]):\n          st.write(message[\"content\"])\n-         if message[\"role\"] == \"assistant\":\n-             feedback = message.get(\"feedback\", None)\n-             st.session_state[f\"feedback_{i}\"] = feedback\n-             st.feedback(\n-                 \"thumbs\",\n-                 key=f\"feedback_{i}\",\n-                 disabled=feedback is not None,\n-                 on_change=save_feedback,\n-                 args=[i],\n-             )\n```\n\nOr, if you want to allow users to change their responses, you can just remove the `disabled` parameter:\n\n```diff\n  for i, message in enumerate(st.session_state.history):\n      with st.chat_message(message[\"role\"]):\n          st.write(message[\"content\"])\n          if message[\"role\"] == \"assistant\":\n              feedback = message.get(\"feedback\", None)\n              st.session_state[f\"feedback_{i}\"] = feedback\n              st.feedback(\n                  \"thumbs\",\n                  key=f\"feedback_{i}\",\n-                 disabled=feedback is not None,\n                  on_change=save_feedback,\n                  args=[i],\n              )\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps",
    "content": "# Build LLM apps\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/tutorials/llms/build-conversational-apps\">\n\n<h5>Build a basic chat app</h5>\n\nBuild a simple OpenAI chat app to get started with Streamlit's chat elements.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/llms/llm-quickstart\">\n\n<h5>Build an LLM app using LangChain</h5>\n\nBuild a chat app using the LangChain framework with OpenAI.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/chat-and-llm-apps/chat-response-feedback\">\n\n<h5>Get chat response feedback</h5>\n\nBuid a chat app and let users rate the responses.\n(<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>thumb_up</i>\n<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>thumb_down</i>)\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses\">\n\n<h5>Validate and edit chat responses</h5>\n\nBuild a chat app with response validation. Let users correct or edit the responses.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft",
    "content": "# Use Microsoft Entra to authenticate users\n\n[Microsoft Identity Platform](https://learn.microsoft.com/en-us/entra/identity-platform/v2-overview) is a service within Microsoft Entra that lets you build applications to authenticate users. Your applications can use personal, work, and school accounts managed by Microsoft.\n\n## Prerequisites\n\n- This tutorial requires the following Python libraries:\n\n  ```text\n  streamlit>=1.42.0\n  Authlib>=1.3.2\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You must have a Microsoft Azure account, which includes Microsoft Entra ID.\n\n## Summary\n\nIn this tutorial, you'll build an app that users can log in to with their personal Microsoft accounts. When they log in, they'll see a personalized greeting with their name and have the option to log out.\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete code\" expanded={false}>\n\n`.streamlit/secrets.toml`\n\n```toml\n[auth]\nredirect_uri = \"http://localhost:8501/oauth2callback\"\ncookie_secret = \"xxx\"\nclient_id = \"xxx\"\nclient_secret = \"xxx\"\nserver_metadata_url = \"https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration\"\n```\n\n`app.py`\n\n```python\nimport streamlit as st\n\ndef login_screen():\n    st.header(\"This app is private.\")\n    st.subheader(\"Please log in.\")\n    st.button(\"Log in with Microsoft\", on_click=st.login)\n\nif not st.user.is_logged_in:\n    login_screen()\nelse:\n    st.header(f\"Welcome, {st.user.name}!\")\n    st.button(\"Log out\", on_click=st.logout)\n```\n\n</Collapse>\n\n## Create a web application in Microsoft Entra ID\n\nWithin Microsoft Entra ID in Azure, you'll need to register a new application and generate a secret needed to configure your app. In this example, your application will only accept personal Microsoft accounts, but you can optionally accept work and school accounts or restrict the application to your personal tenant. Microsoft Entra also lets you connect other, external identity providers.\n\n### Register a new application\n\n1. Go to [Microsoft Azure](https://portal.azure.com/#home), and sign in to Microsoft.\n\n1. At the top of the page among the services, select \"**Microsoft Entra ID**.\"\n\n1. In the left navigation, select \"**Manage**\" → \"**App registrations**.\"\n\n1. At the top of the screen, select \"**New registration**.\"\n\n1. Fill in a name for your application.\n\n   The application name will be visible to your users within the authentication flow presented by Microsoft.\n\n1. Under \"Supported account types,\" select \"**Personal Microsoft accounts only**.\"\n\n1. Under \"Redirect URI,\" select a \"**Web**\" platform, and enter your app's URL with the pathname `oauth2callback`.\n\n   For example, if you are developing locally, enter `http://localhost:8501/oauth2callback`. If you are using a different port, change `8501` to match your port.\n\n1. At the bottom of the screen, select \"**Register**.\"\n\n   Microsoft will redirect you to your new application, a resource within Azure.\n\n### Gather your application's details\n\n1. To store your app information to use in later steps, open a text editor, or (even better) create a new item in a password locker.\n\n   Always handle your app secrets securely. Remember to label the values as you paste them so you don't mix them up.\n\n1. Under \"Essentials,\" copy the \"Application (client) ID\" into your text editor.\n\n   This is your `client_id`.\n\n1. At the top of the page, select \"**Endpoints**.\"\n\n1. Copy the \"OpenID Connect metadata document\" into your text editor.\n\n   This is your `server_metadata_url`.\n\n1. In the left navigation, select \"**Manage**\" → \"**Certificates & secrets**.\"\n\n1. Near the top, select \"**New client secret**.\"\n\n1. Enter a description, and select an expiration time.\n\n   The description is only used internally. You will use the generated secret to configure your Streamlit app, so choose a description that helps you remember where you use the secret.\n\n1. At the bottom of the dialog, select \"**Add**.\"\n\n   It may take a few seconds for Azure to generate your secret.\n\n1. Copy the \"Value\" into your text editor.\n\n   This is your `client_secret`. Microsoft will hide the value after you leave Azure, so ensure that you securely store it somewhere now. If you lose your secret, you'll need to delete it from your configuration and generate a new one.\n\nYour client is ready to accept users.\n\n## Build the example\n\nTo create an app with user authentication, you'll need to configure your secrets and prompt your users to log in. You'll use secrets management to store the information from your client, and then create a simple app that welcomes your user by name after they log in.\n\n### Configure your secrets\n\n1. In `your_repository`, create a `.streamlit/secrets.toml` file.\n\n1. Add `secrets.toml` to your `.gitignore` file.\n\n   <Important>\n      Never commit secrets to your repository. For more information about `.gitignore`, see [Ignoring files](https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files).\n   </Important>\n\n1. Generate a strong, random secret to use as your cookie secret.\n\n   The cookie secret is used to sign each user's identity cookie, which Streamlit stores when they log in.\n\n1. In `.streamlit/secrets.toml`, add your connection configuration:\n\n   ```toml\n    [auth]\n    redirect_uri = \"http://localhost:8501/oauth2callback\"\n    cookie_secret = \"xxx\"\n    client_id = \"xxx\"\n    client_secret = \"xxx\"\n    server_metadata_url = \"https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration\"\n   ```\n\n   Replace the values of `client_id`, `client_secret`, and `server_metadata_url` with the values you copied into your text editor earlier. Replace the value of `cookie_secret` with the random secret you generated in the previous step.\n\n1. Save your `secrets.toml` file.\n\n### Initialize your app\n\n1. In `your_repository`, create a file named `app.py`.\n1. In a terminal, change directories to `your_repository`, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `app.py`, write the following:\n\n   ```python\n   import streamlit as st\n   ```\n\n1. Save your `app.py` file, and view your running app.\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `app.py`.\n\n1. Return to your code.\n\n### Log the user in and out\n\n1. Define a function that prompts the user to log in:\n\n   ```python\n   def login_screen():\n       st.header(\"This app is private.\")\n       st.subheader(\"Please log in.\")\n       st.button(\"Log in with Microsoft\", on_click=st.login)\n   ```\n\n   This function displays a short message and a button. Streamlit's login command is assigned to the button as a callback.\n\n   <Note>\n      If you don't want to use a callback, you can replace the last line with an equivalent `if` statement:\n      ```diff\n      -  st.button(\"Log in with Microsoft\", on_click=st.login)\n      +  if st.button(\"Log in with Microsoft\"):\n      +     st.login()\n      ```\n   </Note>\n\n1. Conditioned on whether the user is logged in, call your function to prompt the user, or show their information:\n\n   ```python\n   if not st.user.is_logged_in:\n       login_screen()\n   else:\n       st.user\n   ```\n\n   Because `st.user` is a dict-like object in a line by itself, Streamlit magic displays it in your app.\n\n1. Save your `app.py` file, and test your running app.\n\n   In your live preview, when you log in to your app, the login button is replaced with the contents of your identity token. Observe the different values that are available from Microsoft. You can use these values to personalize your app for your users.\n\n1. Return to your code.\n\n1. Replace `st.user` with a personalized greeting:\n\n   ```diff\n   else:\n   -   st.user\n   +   st.header(f\"Welcome, {st.user.name}!\")\n   ```\n\n1. Add a logout button:\n\n   ```python\n       st.button(\"Log out\", on_click=st.logout)\n   ```\n\n1. Save your `app.py` file and test your running app.\n\n   In your live preview, if you log out of your app, it will return to the login prompt.\n\n## Deploy your app on Community Cloud\n\nWhen you are ready to deploy your app, you must update your application in Microsoft Azure and your secrets. The following steps describe how to deploy your app on Community Cloud.\n\n1. Add a `requirements.txt` file to your repository with the following lines:\n\n   ```txt\n   streamlit>=1.42.0\n   Authlib>=1.3.2\n   ```\n\n   This ensures that the correct Python dependencies are installed for your deployed app.\n\n1. Save your `requirements.txt` file.\n\n1. Deploy your app, and copy your app's URL into your text editor.\n\n   You'll use your app's URL to update your secrets and application configuration in the following steps. For more information about deploying an app on Community Cloud, see [Deploy your app](/deploy/streamlit-community-cloud/deploy-your-app).\n\n1. In your [app settings](/deploy/streamlit-community-cloud/manage-your-app/app-settings) in Community Cloud, select \"**Secrets**.\"\n\n1. Copy the contents of your local `secrets.toml` file, and paste them into your app settings.\n\n1. Change your `redirect_uri` to reflect your deployed app's URL.\n\n   For example, if your app is `my_streamlit_app.streamlit.io`, your redirect URI would be `https://my_streamlit_app.streamlit.io/oauth2callback`.\n\n1. Save and close your settings.\n\n1. Return to your application in Microsoft Azure.\n\n   If you've closed Microsoft Azure and need to navigate back to your application, go to your Azure portal → Microsoft Entra ID → App registrations, and select it from the list.\n\n1. In the left navigation, select \"**Authentication**.\"\n\n1. Under \"Platform configurations\" → \"Web,\" add or update a URI to match your new `redirect_uri`.\n\n1. At the bottom of the page, select \"**Save**.\"\n\n1. Open your deployed app, and test it."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/authentication/google",
    "content": "# Use the Google Auth Platform to authenticate users\n\nGoogle is one of the most popular identity providers for social logins. You can use the Google Auth Platform with both private and organizational Google accounts. This tutorial configures authentication for anyone with a Google account. For more information, see Google's overview of the [Google Auth Platform](https://support.google.com/cloud/topic/15540269?hl=en&ref_topic=3473162&sjid=576431444945556851-NC) and [OpenID Connect](https://developers.google.com/identity/openid-connect/openid-connect#discovery).\n\n## Prerequisites\n\n- This tutorial requires the following Python libraries:\n\n  ```text\n  streamlit>=1.42.0\n  Authlib>=1.3.2\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You must have a Google account and accept the terms of [Google Cloud](https://console.cloud.google.com/) to use their authentication service.\n- You must have a project in Google Cloud within which to create your application.\n  For more information about managing your projects in Google Cloud, see [Creating and managing projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects) in Google's documentation.\n\n## Summary\n\nIn this tutorial, you'll build an app that users can log in to with their Google accounts. When they log in, they'll see a personalized greeting with their name and have the option to log out.\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete code\" expanded={false}>\n\n`.streamlit/secrets.toml`\n\n```toml\n[auth]\nredirect_uri = \"http://localhost:8501/oauth2callback\"\ncookie_secret = \"xxx\"\nclient_id = \"xxx\"\nclient_secret = \"xxx\"\nserver_metadata_url = \"https://accounts.google.com/.well-known/openid-configuration\"\n```\n\n`app.py`\n\n```python\nimport streamlit as st\n\ndef login_screen():\n    st.header(\"This app is private.\")\n    st.subheader(\"Please log in.\")\n    st.button(\"Log in with Google\", on_click=st.login)\n\nif not st.user.is_logged_in:\n    login_screen()\nelse:\n    st.header(f\"Welcome, {st.user.name}!\")\n    st.button(\"Log out\", on_click=st.logout)\n```\n\n</Collapse>\n\n## Create a web application in Google Cloud Console\n\nIn this section, you'll complete three steps to create your web application in your project in Google Cloud Console:\n\n- Configure your consent screen.\n- Configure your audience.\n- Configure your client.\n\nThe consent screen is what users see from Google within the authentication flow. The audience settings manage your application's status (_Testing_ or _Published_). Creating a client for your web application generates the ID and secrets needed to configure your Streamlit app. To learn more about consent screens, audience, and clients, see Google's overview of the [Google Auth Platform](https://support.google.com/cloud/topic/15540269?hl=en&ref_topic=3473162&sjid=576431444945556851-NC).\n\n### Configure your consent screen\n\n1. Go to the [Google Auth Platform](https://console.cloud.google.com/auth/overview), and sign in to Google.\n\n1. In the upper-left corner, select your project.\n\n1. In the left navigation menu, select \"**Branding**.\"\n\n1. Fill in the required information for your application's consent screen.\n\n   This information controls what users see within the Google authentication flow. Your \"**App name**\" is displayed to users within Google's prompts. Google asks users to consent to sending their account information to your application. If you are developing locally and/or deploying on Streamlit Community Cloud, in \"**Authorized domain**,\" use `example.com`. For more information about the available fields, see [Setting up your OAuth consent screen](https://support.google.com/cloud/answer/10311615).\n\n1. At the bottom of the branding page, select \"**SAVE**.\"\n\n### Configure your audience\n\n1. In the left navigation menu, select \"**Audience**.\"\n\n1. Below \"OAuth user cap\" → \"Test users,\" select \"**ADD USERS**.\"\n\n1. Enter the email address for a personal Google account, and select \"**SAVE**.\"\n\n   When you create a new application in the Google Auth Platform, its status is _Testing_. While the status is _Testing_, only specific users can authenticate to your application; users can't register themselves. Therefore, add any email address you want to use for testing your app in development. When you're ready to publish your app, you'll return to this section and change the status to _Published_. After an application is published, your application will accept new users.\n\n### Configure your client\n\n1. In the left navigation menu, select \"**Clients**.\"\n\n1. At the top of the client list, select \"**CREATE CLIENT**.\"\n\n1. For the application type, select \"**Web application**.\"\n\n1. Enter a unique name for your application.\n\n   The client name is used internally and not shown to your users.\n\n1. Skip over \"Authorized JavaScript origins.\"\n\n1. Under \"Authorized redirect URIs,\" select \"**ADD URI**.\"\n\n1. Enter your app's URL with the pathname `oauth2callback`.\n\n   For example, if you are developing locally, enter `http://localhost:8501/oauth2callback`. If you are using a different port, change `8501` to match your port.\n\n1. Optional: Add additional authorized redirect URIs.\n\n   If you will host your app from multiple URLs, or if you know a URL you will use in the future, you can add it now. Ensure that each URL includes the `oauth2callback` pathname.\n\n1. At the bottom of the screen, select \"**CREATE**.\"\n\nYou now have a client in Google Cloud that's ready to authenticate your users.\n\n### Gather your application's details\n\n1. From the clients page, select your new client.\n\n1. To store your app information to use in later steps, open a text editor, or (even better) create a new item in a password locker.\n\n   Always handle your app secrets securely. Remember to label the values as you paste them so you don't mix them up.\n\n1. On the right, copy your \"Client ID\" and \"Client secret\" into your text editor.\n\nFor the Google Auth Platform, the server metadata URL is shared between all applications and isn't listed individually in your client. The server metadata URL for the Google Auth Platform is `https://accounts.google.com/.well-known/openid-configuration`. For more information about the server metadata URL, see [The discovery document](https://developers.google.com/identity/openid-connect/openid-connect#discovery) in Google's documentation.\n\n## Build the example\n\nTo create an app with user authentication, you'll need to configure your secrets and prompt your users to log in. You'll use secrets management to store the information from your client, and then create a simple app that welcomes your user by name after they log in.\n\n### Configure your secrets\n\n1. In `your_repository`, create a `.streamlit/secrets.toml` file.\n\n1. Add `secrets.toml` to your `.gitignore` file.\n\n   <Important>\n      Never commit secrets to your repository. For more information about `.gitignore`, see [Ignoring files](https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files).\n   </Important>\n\n1. Generate a strong, random secret to use as your cookie secret.\n\n   The cookie secret is used to sign each user's identity cookie, which Streamlit stores when they log in.\n\n1. In `.streamlit/secrets.toml`, add your connection configuration:\n\n   ```toml\n   [auth]\n   redirect_uri = \"http://localhost:8501/oauth2callback\"\n   cookie_secret = \"xxx\"\n   client_id = \"xxx\"\n   client_secret = \"xxx\"\n   server_metadata_url = \"https://accounts.google.com/.well-known/openid-configuration\"\n   ```\n\n   Replace the values of `client_id` and `client_secret` with the values you copied into your text editor earlier. Replace the value of `cookie_secret` with the random secret you generated in the previous step.\n\n1. Save your `secrets.toml` file.\n\n### Initialize your app\n\n1. In `your_repository`, create a file named `app.py`.\n1. In a terminal, change directories to `your_repository`, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `app.py`, write the following:\n\n   ```python\n   import streamlit as st\n   ```\n\n1. Save your `app.py` file, and view your running app.\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `app.py`.\n\n1. Return to your code.\n\n### Log the user in and out\n\n1. Define a function that prompts the user to log in:\n\n   ```python\n   def login_screen():\n       st.header(\"This app is private.\")\n       st.subheader(\"Please log in.\")\n       st.button(\"Log in with Google\", on_click=st.login)\n   ```\n\n   This function displays a short message and a button. Streamlit's login command is assigned to the button as a callback.\n\n   <Note>\n      If you don't want to use a callback, you can replace the last line with an equivalent `if` statement:\n      ```diff\n      -  st.button(\"Log in with Google\", on_click=st.login)\n      +  if st.button(\"Log in with Google\"):\n      +     st.login()\n      ```\n   </Note>\n\n1. Conditioned on whether the user is logged in, call your function to prompt the user, or show their information:\n\n   ```python\n   if not st.user.is_logged_in:\n       login_screen()\n   else:\n       st.user\n   ```\n\n   Because `st.user` is a dict-like object in a line by itself, Streamlit magic displays it in your app.\n\n1. Save your `app.py` file, and test your running app.\n\n   In your live preview, when you log in to your app, the login button is replaced with the contents of your identity token. Observe the different values that are available from Google. You can use these values to personalize your app for your users.\n\n1. Return to your code.\n\n1. Replace `st.user` with a personalized greeting:\n\n   ```diff\n   else:\n   -   st.user\n   +   st.header(f\"Welcome, {st.user.name}!\")\n   ```\n\n1. Add a logout button:\n\n   ```python\n       st.button(\"Log out\", on_click=st.logout)\n   ```\n\n1. Save your `app.py` file and test your running app.\n\n   In your live preview, if you log out of your app, it will return to the login prompt.\n\n## Deploy your app on Community Cloud\n\nWhen you are ready to deploy your app, you must update your application on Google Cloud and your secrets. The following steps describe how to deploy your app on Community Cloud.\n\n1. Add a `requirements.txt` file to your repository with the following lines:\n\n   ```txt\n   streamlit>=1.42.0\n   Authlib>=1.3.2\n   ```\n\n   This ensures that the correct Python dependencies are installed for your deployed app.\n\n1. Save your `requirements.txt` file.\n\n1. Deploy your app, and copy your app's URL into your text editor.\n\n   You'll use your app's URL to update your secrets and client configuration in the following steps. For more information about deploying an app on Community Cloud, see [Deploy your app](/deploy/streamlit-community-cloud/deploy-your-app).\n\n1. In your [app settings](/deploy/streamlit-community-cloud/manage-your-app/app-settings) in Community Cloud, select \"**Secrets**.\"\n\n1. Copy the contents of your local `secrets.toml` file, and paste them into your app settings.\n\n1. Change your `redirect_uri` to reflect your deployed app's URL, which you copied earlier in this tutorial.\n\n   For example, if your app is `my_streamlit_app.streamlit.io`, your redirect URI would be `https://my_streamlit_app.streamlit.io/oauth2callback`.\n\n1. Save and close your settings.\n\n1. Return to the clients page in the Google Auth Platform, and select your client.\n\n1. Under \"Authorized redirect URIs,\" add or update a URI to match your new `redirect_uri`.\n\n1. At the bottom of the page, select \"**SAVE**.\"\n\n1. Open your deployed app, and test it.\n\n   Your Google Cloud application's status is still _Testing_. You should be able to log in and out of your app with the personal Google account you entered on the \"Audience\" page.\n\n1. When you are ready for others to use your app, return to the \"Audience\" page in the Google Auth Platform, and set your application status to _Published_."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/authentication",
    "content": "# Authenticate users and personalize your app\n\nStreamlit supports user authentication with the OpenID Connect (OIDC) protocol. You can use any OIDC provider. Whether you want to create a social login or manage your enterprise users, Streamlit makes it simple to authenticate your users.\n\n<TileContainer layout=\"list\">\n    <RefCard href=\"/develop/tutorials/authentication/google\">\n        <h5>Google Auth Platform</h5>\n        Google is one of the most popular identity providers for social logins. You can use the Google Auth Platform with any Google account, including personal and organization accounts.\n    </RefCard>\n    <RefCard href=\"/develop/tutorials/authentication/microsoft\">\n        <h5>Microsoft Entra</h5>\n        Microsoft is popular for both social and business logins. You can include personal, school, or work accounts in your integration.\n    </RefCard>\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment",
    "content": "# Trigger a full-script rerun from inside a fragment\n\nStreamlit lets you turn functions into [fragments](/develop/concepts/architecture/fragments), which can rerun independently from the full script. When a user interacts with a widget inside a fragment, only the fragment reruns. Sometimes, you may want to trigger a full-script rerun from inside a fragment. To do this, call [`st.rerun`](/develop/api-reference/execution-flow/st.rerun) inside the fragment.\n\n## Applied concepts\n\n- Use a fragment to rerun part or all of your app, depending on user input.\n\n## Prerequisites\n\n- This tutorial requires the following version of Streamlit:\n\n  ```text\n  streamlit>=1.37.0\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You should have a basic understanding of fragments and `st.rerun`.\n\n## Summary\n\nIn this example, you'll build an app to display sales data. The app has two sets of elements that depend on a date selection. One set of elements displays information for the selected day. The other set of elements displays information for the associated month. If the user changes days within a month, Streamlit only needs to update the first set of elements. If the user selects a day in a different month, Streamlit needs to update all the elements.\n\nYou'll collect the day-specific elements into a fragment to avoid rerunning the full app when a user changes days within the same month. If you want to jump ahead to the fragment function definition, see [Build a function to show daily sales data](#build-a-function-to-show-daily-sales-data).\n\n<div style={{ maxWidth: '60%', margin: 'auto' }}>\n<Image alt=\"Execution flow of example Streamlit app showing daily sales on the left and monthly sales on the right\" src=\"/images/tutorials/fragment-rerun-tutorial-execution-flow.png\" />\n</div>\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete code\" expanded={false}>\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nfrom datetime import date, timedelta\nimport string\nimport time\n\n\n@st.cache_data\ndef get_data():\n    \"\"\"Generate random sales data for Widget A through Widget Z\"\"\"\n\n    product_names = [\"Widget \" + letter for letter in string.ascii_uppercase]\n    average_daily_sales = np.random.normal(1_000, 300, len(product_names))\n    products = dict(zip(product_names, average_daily_sales))\n\n    data = pd.DataFrame({})\n    sales_dates = np.arange(date(2023, 1, 1), date(2024, 1, 1), timedelta(days=1))\n    for product, sales in products.items():\n        data[product] = np.random.normal(sales, 300, len(sales_dates)).round(2)\n    data.index = sales_dates\n    data.index = data.index.date\n    return data\n\n\n@st.fragment\ndef show_daily_sales(data):\n    time.sleep(1)\n    with st.container(height=100):\n        selected_date = st.date_input(\n            \"Pick a day \",\n            value=date(2023, 1, 1),\n            min_value=date(2023, 1, 1),\n            max_value=date(2023, 12, 31),\n            key=\"selected_date\",\n        )\n\n    if \"previous_date\" not in st.session_state:\n        st.session_state.previous_date = selected_date\n    previous_date = st.session_state.previous_date\n    st.session_state.previous_date = selected_date\n    is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1)\n    if is_new_month:\n        st.rerun()\n\n    with st.container(height=510):\n        st.header(f\"Best sellers, {selected_date:%m/%d/%y}\")\n        top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]\n        cols = st.columns([1, 4])\n        cols[0].dataframe(top_ten)\n        cols[1].bar_chart(top_ten)\n\n    with st.container(height=510):\n        st.header(f\"Worst sellers, {selected_date:%m/%d/%y}\")\n        bottom_ten = data.loc[selected_date].sort_values()[0:10]\n        cols = st.columns([1, 4])\n        cols[0].dataframe(bottom_ten)\n        cols[1].bar_chart(bottom_ten)\n\n\ndef show_monthly_sales(data):\n    time.sleep(1)\n    selected_date = st.session_state.selected_date\n    this_month = selected_date.replace(day=1)\n    next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)\n\n    st.container(height=100, border=False)\n    with st.container(height=510):\n        st.header(f\"Daily sales for all products, {this_month:%B %Y}\")\n        monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]\n        st.write(monthly_sales)\n    with st.container(height=510):\n        st.header(f\"Total sales for all products, {this_month:%B %Y}\")\n        st.bar_chart(monthly_sales.sum())\n\n\nst.set_page_config(layout=\"wide\")\n\nst.title(\"Daily vs monthly sales, by product\")\nst.markdown(\"This app shows the 2023 daily sales for Widget A through Widget Z.\")\n\ndata = get_data()\ndaily, monthly = st.columns(2)\nwith daily:\n    show_daily_sales(data)\nwith monthly:\n    show_monthly_sales(data)\n```\n\n</Collapse>\n\n![Example Streamlit app showing daily sales on the left and monthly sales on the right](/images/tutorials/fragment-rerun-tutorial-app.jpg)\n\n[Click here to see the example live on Community Cloud.](https://doc-tutorial-fragment-rerun.streamlit.app/)\n\n## Build the example\n\n### Initialize your app\n\n1. In `your_repository`, create a file named `app.py`.\n1. In a terminal, change directories to `your_repository`, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `app.py`, write the following:\n\n   ```python\n   import streamlit as st\n   import pandas as pd\n   import numpy as np\n   from datetime import date, timedelta\n   import string\n   import time\n   ```\n\n   You'll be using these libraries as follows:\n   - You'll work with sales data in a `pandas.DataFrame`.\n   - You'll generate random sales numbers with `numpy`.\n   - The data will have `datetime.date` index values.\n   - The products sold will be \"Widget A\" through \"Widget Z,\" so you'll use `string` for easy access to an alphabetical string.\n   - Optional: To help add emphasis at the end, you'll use `time.sleep()` to slow things down and see the fragment working.\n\n1. Save your `app.py` file, and view your running app.\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `app.py`.\n\n1. Return to your code.\n\n### Build a function to create random sales data\n\nTo begin with, you'll define a function to randomly generate some sales data. It's okay to skip this section if you just want to copy the function.\n\n<Collapse title=\"Complete function to randomly generate sales data\" expanded={false}>\n\n```python\n@st.cache_data\ndef get_data():\n    \"\"\"Generate random sales data for Widget A through Widget Z\"\"\"\n\n    product_names = [\"Widget \" + letter for letter in string.ascii_uppercase]\n    average_daily_sales = np.random.normal(1_000, 300, len(product_names))\n    products = dict(zip(product_names, average_daily_sales))\n\n    data = pd.DataFrame({})\n    sales_dates = np.arange(date(2023, 1, 1), date(2024, 1, 1), timedelta(days=1))\n    for product, sales in products.items():\n        data[product] = np.random.normal(sales, 300, len(sales_dates)).round(2)\n    data.index = sales_dates\n    data.index = data.index.date\n    return data\n```\n\n</Collapse>\n\n1. Use an `@st.cache_data` decorator and start your function definition.\n\n   ```python\n   @st.cache_data\n   def get_data():\n       \"\"\"Generate random sales data for Widget A through Widget Z\"\"\"\n   ```\n\n   You don't need to keep re-randomizing the data, so the caching decorator will randomly generate the data once and save it in Streamlit's cache. As your app reruns, it will use the cached value instead of recomputing new data.\n\n1. Define the list of product names and assign an average daily sales value to each.\n\n   ```python\n       product_names = [\"Widget \" + letter for letter in string.ascii_uppercase]\n       average_daily_sales = np.random.normal(1_000, 300, len(product_names))\n       products = dict(zip(product_names, average_daily_sales))\n   ```\n\n1. For each product, use its average daily sales to randomly generate daily sales values for an entire year.\n\n   ```python\n       data = pd.DataFrame({})\n       sales_dates = np.arange(date(2023, 1, 1), date(2024, 1, 1), timedelta(days=1))\n       for product, sales in products.items():\n           data[product] = np.random.normal(sales, 300, len(sales_dates)).round(2)\n       data.index = sales_dates\n       data.index = data.index.date\n   ```\n\n   In the last line, `data.index.date` strips away the timestamp, so the index will show clean dates.\n\n1. Return the random sales data.\n\n   ```python\n       return data\n   ```\n\n1. Optional: Test out your function by calling it and displaying the data.\n\n   ```python\n   data = get_data()\n   data\n   ```\n\n   Save your `app.py` file to see the preview. Delete these two lines or keep them at the end of your app to be updated as you continue.\n\n### Build a function to show daily sales data\n\nSince the daily sales data updates with every new date selection, you'll turn this function into a fragment. As a fragment, it can rerun independently from the rest of your app. You'll include an `st.date_input` widget inside this fragment and watch for a date selection that changes the month. When the fragment detects a change in the selected month, it will trigger a full app rerun so everything can update.\n\n<Collapse title=\"Complete function to display daily sales data\" expanded={false}>\n\n```python\n@st.fragment\ndef show_daily_sales(data):\n    time.sleep(1)\n    selected_date = st.date_input(\n        \"Pick a day \",\n        value=date(2023, 1, 1),\n        min_value=date(2023, 1, 1),\n        max_value=date(2023, 12, 31),\n        key=\"selected_date\",\n    )\n\n    if \"previous_date\" not in st.session_state:\n        st.session_state.previous_date = selected_date\n    previous_date = st.session_state.previous_date\n    st.session_state.previous_date = selected_date\n    is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1)\n    if is_new_month:\n        st.rerun()\n\n    st.header(f\"Best sellers, {selected_date:%m/%d/%y}\")\n    top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]\n    cols = st.columns([1, 4])\n    cols[0].dataframe(top_ten)\n    cols[1].bar_chart(top_ten)\n\n    st.header(f\"Worst sellers, {selected_date:%m/%d/%y}\")\n    bottom_ten = data.loc[selected_date].sort_values()[0:10]\n    cols = st.columns([1, 4])\n    cols[0].dataframe(bottom_ten)\n    cols[1].bar_chart(bottom_ten)\n```\n\n</Collapse>\n\n1. Use an [`@st.fragment`](/develop/api-reference/execution-flow/st.fragment) decorator and start your function definition.\n\n   ```python\n   @st.fragment\n   def show_daily_sales(data):\n   ```\n\n   Since your data will not change during a fragment rerun, you can pass the data into the fragment as an argument.\n\n1. Optional: Add `time.sleep(1)` to slow down the function and show off how the fragment works.\n\n   ```python\n       time.sleep(1)\n   ```\n\n1. Add an `st.date_input` widget.\n\n   ```python\n       selected_date = st.date_input(\n           \"Pick a day \",\n           value=date(2023, 1, 1),\n           min_value=date(2023, 1, 1),\n           max_value=date(2023, 12, 31),\n           key=\"selected_date\",\n       )\n   ```\n\n   Your random data is for 2023, so set the minimun and maximum dates to match. Use a key for the widget because elements outside the fragment will need this date value. When working with a fragment, it's best to use Session State to pass information in and out of the fragment.\n\n1. Initialize `\"previous_date\"` in Session State to compare each date selection.\n\n   ```python\n       if \"previous_date\" not in st.session_state:\n           st.session_state.previous_date = selected_date\n   ```\n\n1. Save the previous date selection into a new variable and update `\"previous_date\"` in Session State.\n\n   ```python\n       previous_date = st.session_state.previous_date\n       st.session_state.previous_date = selected_date\n   ```\n\n1. Call `st.rerun()` if the month changed.\n\n   ```python\n       is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1)\n       if is_new_month:\n           st.rerun()\n   ```\n\n1. Show the best sellers from the selected date.\n\n   ```python\n       st.header(f\"Best sellers, {selected_date:%m/%d/%y}\")\n       top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]\n       cols = st.columns([1, 4])\n       cols[0].dataframe(top_ten)\n       cols[1].bar_chart(top_ten)\n   ```\n\n1. Show the worst sellers from the selected date.\n\n   ```python\n       st.header(f\"Worst sellers, {selected_date:%m/%d/%y}\")\n       bottom_ten = data.loc[selected_date].sort_values()[0:10]\n       cols = st.columns([1, 4])\n       cols[0].dataframe(bottom_ten)\n       cols[1].bar_chart(bottom_ten)\n   ```\n\n1. Optional: Test out your function by calling it and displaying the data.\n\n   ```python\n   data = get_data()\n   show_daily_sales(data)\n   ```\n\n   Save your `app.py` file to see the preview. Delete these two lines or keep them at the end of your app to be updated as you continue.\n\n### Build a function to show monthly sales data\n\nFinally, let's build a function to display monthly sales data. It will be similar to your `show_daily_sales` function but doesn't need to be fragment. You only need to rerun this function when the whole app is rerunning.\n\n<Collapse title=\"Complete function to display daily sales data\" expanded={false}>\n\n```python\ndef show_monthly_sales(data):\n    time.sleep(1)\n    selected_date = st.session_state.selected_date\n    this_month = selected_date.replace(day=1)\n    next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)\n\n    st.header(f\"Daily sales for all products, {this_month:%B %Y}\")\n    monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]\n    st.write(monthly_sales)\n\n    st.header(f\"Total sales for all products, {this_month:%B %Y}\")\n    st.bar_chart(monthly_sales.sum())\n```\n\n</Collapse>\n\n1. Start your function definition.\n\n   ```python\n   def show_monthly_sales(data):\n   ```\n\n1. Optional: Add `time.sleep(1)` to slow down the function and show off how the fragment works.\n\n   ```python\n       time.sleep(1)\n   ```\n\n1. Get the selected date from Session State and compute the first days of this and next month.\n\n   ```python\n       selected_date = st.session_state.selected_date\n       this_month = selected_date.replace(day=1)\n       next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)\n   ```\n\n1. Show the daily sales values for all products within the selected month.\n\n   ```python\n       st.header(f\"Daily sales for all products, {this_month:%B %Y}\")\n       monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]\n       st.write(monthly_sales)\n   ```\n\n1. Show the total sales of each product within the selected month.\n\n   ```python\n       st.header(f\"Total sales for all products, {this_month:%B %Y}\")\n       st.bar_chart(monthly_sales.sum())\n   ```\n\n1. Optional: Test out your function by calling it and displaying the data.\n\n   ```python\n   data = get_data()\n   show_daily_sales(data)\n   show_monthly_sales(data)\n   ```\n\n   Save your `app.py` file to see the preview. Delete these three lines when finished.\n\n### Put the functions together together to create an app\n\nLet's show these elements side-by-side. You'll display the daily data on the left and the monthly data on the right.\n\n1. If you added optional lines at the end of your code to test your functions, clear them out now.\n\n1. Give your app a wide layout.\n\n   ```python\n   st.set_page_config(layout=\"wide\")\n   ```\n\n1. Get your data.\n\n   ```python\n   data = get_data()\n   ```\n\n1. Add a title and description for your app.\n\n   ```python\n   st.title(\"Daily vs monthly sales, by product\")\n   st.markdown(\"This app shows the 2023 daily sales for Widget A through Widget Z.\")\n   ```\n\n1. Create columns and call the functions to display data.\n\n   ```python\n   daily, monthly = st.columns(2)\n   with daily:\n       show_daily_sales(data)\n   with monthly:\n       show_monthly_sales(data)\n   ```\n\n### Make it pretty\n\nNow, you have a functioning app that uses a fragment to prevent unnecessarily redrawing the monthly data. However, things aren't aligned on the page, so you can insert a few containers to make it pretty. Add three containers into each of the display functions.\n\n1. Add three containers to fix the height of elements in the `show_daily_sales` function.\n\n   ```python\n   @st.fragment\n   def show_daily_sales(data):\n       time.sleep(1)\n       with st.container(height=100): ### ADD CONTAINER ###\n           selected_date = st.date_input(\n               \"Pick a day \",\n               value=date(2023, 1, 1),\n               min_value=date(2023, 1, 1),\n               max_value=date(2023, 12, 31),\n               key=\"selected_date\",\n           )\n\n       if \"previous_date\" not in st.session_state:\n           st.session_state.previous_date = selected_date\n       previous_date = st.session_state.previous_date\n       st.session_state.previous_date = selected_date\n       is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1)\n       if is_new_month:\n           st.rerun()\n\n       with st.container(height=510): ### ADD CONTAINER ###\n           st.header(f\"Best sellers, {selected_date:%m/%d/%y}\")\n           top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]\n           cols = st.columns([1, 4])\n           cols[0].dataframe(top_ten)\n           cols[1].bar_chart(top_ten)\n\n       with st.container(height=510): ### ADD CONTAINER ###\n           st.header(f\"Worst sellers, {selected_date:%m/%d/%y}\")\n           bottom_ten = data.loc[selected_date].sort_values()[0:10]\n           cols = st.columns([1, 4])\n           cols[0].dataframe(bottom_ten)\n           cols[1].bar_chart(bottom_ten)\n   ```\n\n1. Add three containers to fix the height of elements in the `show_monthly_sales` function.\n\n   ```python\n   def show_monthly_sales(data):\n       time.sleep(1)\n       selected_date = st.session_state.selected_date\n       this_month = selected_date.replace(day=1)\n       next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)\n\n       st.container(height=100, border=False) ### ADD CONTAINER ###\n\n       with st.container(height=510): ### ADD CONTAINER ###\n           st.header(f\"Daily sales for all products, {this_month:%B %Y}\")\n           monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]\n           st.write(monthly_sales)\n\n       with st.container(height=510): ### ADD CONTAINER ###\n           st.header(f\"Total sales for all products, {this_month:%B %Y}\")\n           st.bar_chart(monthly_sales.sum())\n   ```\n\n   The first container creates space to coordinate with the input widget in the `show_daily_sales` function.\n\n## Next steps\n\nContinue beautifying the example. Try using [`st.plotly_chart`](/develop/api-reference/charts/st.plotly_chart) or [`st.altair_chart`](/develop/api-reference/charts/st.altair_chart) to add labels to your charts and adjust their height."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment",
    "content": "# Create a fragment across multiple containers\n\nStreamlit lets you turn functions into [fragments](/develop/concepts/architecture/fragments), which can rerun independently from the full script. If your fragment doesn't write to outside containers, Streamlit will clear and redraw all the fragment elements with each fragment rerun. However, if your fragment _does_ write elements to outside containers, Streamlit will not clear those elements during a fragment rerun. Instead, those elements accumulate with each fragment rerun until the next full-script rerun. If you want a fragment to update multiple containers in your app, use [`st.empty()`](/develop/api-reference/layout/st.empty) containers to prevent accumulating elements.\n\n## Applied concepts\n\n- Use fragments to run two independent processes separately.\n- Distribute a fragment across multiple containers.\n\n## Prerequisites\n\n- This tutorial requires the following version of Streamlit:\n\n  ```text\n  streamlit>=1.37.0\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You should have a basic understanding of fragments and `st.empty()`.\n\n## Summary\n\nIn this toy example, you'll build an app with six containers. Three containers will have orange cats. The other three containers will have black cats. You'll have three buttons in the sidebar: \"**Herd the black cats**,\" \"**Herd the orange cats**,\" and \"**Herd all the cats**.\" Since herding cats is slow, you'll use fragments to help Streamlit run the associated processes efficiently. You'll create two fragments, one for the black cats and one for the orange cats. Since the buttons will be in the sidebar and the fragments will update containers in the main body, you'll use a trick with `st.empty()` to ensure you don't end up with too many cats in your app (if it's even possible to have too many cats). 😻\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete code\" expanded={false}>\n\n```python\nimport streamlit as st\nimport time\n\nst.title(\"Cats!\")\n\nrow1 = st.columns(3)\nrow2 = st.columns(3)\n\ngrid = [col.container(height=200) for col in row1 + row2]\nsafe_grid = [card.empty() for card in grid]\n\n\ndef black_cats():\n    time.sleep(1)\n    st.title(\"🐈‍⬛ 🐈‍⬛\")\n    st.markdown(\"🐾 🐾 🐾 🐾\")\n\n\ndef orange_cats():\n    time.sleep(1)\n    st.title(\"🐈 🐈\")\n    st.markdown(\"🐾 🐾 🐾 🐾\")\n\n\n@st.fragment\ndef herd_black_cats(card_a, card_b, card_c):\n    st.button(\"Herd the black cats\")\n    container_a = card_a.container()\n    container_b = card_b.container()\n    container_c = card_c.container()\n    with container_a:\n        black_cats()\n    with container_b:\n        black_cats()\n    with container_c:\n        black_cats()\n\n\n@st.fragment\ndef herd_orange_cats(card_a, card_b, card_c):\n    st.button(\"Herd the orange cats\")\n    container_a = card_a.container()\n    container_b = card_b.container()\n    container_c = card_c.container()\n    with container_a:\n        orange_cats()\n    with container_b:\n        orange_cats()\n    with container_c:\n        orange_cats()\n\n\nwith st.sidebar:\n    herd_black_cats(grid[0].empty(), grid[2].empty(), grid[4].empty())\n    herd_orange_cats(grid[1].empty(), grid[3].empty(), grid[5].empty())\n    st.button(\"Herd all the cats\")\n```\n\n</Collapse>\n\n<Cloud name=\"doc-tutorial-fragment-multiple-container\" height=\"650px\" />\n\n## Build the example\n\n### Initialize your app\n\n1. In `your_repository`, create a file named `app.py`.\n1. In a terminal, change directories to `your_repository`, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `app.py`, write the following:\n\n   ```python\n   import streamlit as st\n   import time\n   ```\n\n   You'll use `time.sleep()` to slow things down and see the fragments working.\n\n1. Save your `app.py` file, and view your running app.\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `app.py`.\n\n1. Return to your code.\n\n### Frame out your app's containers\n\n1. Add a title to your app and two rows of three containers.\n\n   ```python\n   st.title(\"Cats!\")\n\n   row1 = st.columns(3)\n   row2 = st.columns(3)\n\n   grid = [col.container(height=200) for col in row1 + row2]\n   ```\n\n   Save your file to see your updated preview.\n\n1. Define a helper function to draw two black cats.\n\n   ```python\n   def black_cats():\n       time.sleep(1)\n       st.title(\"🐈‍⬛ 🐈‍⬛\")\n       st.markdown(\"🐾 🐾 🐾 🐾\")\n   ```\n\n   This function represents \"herding two cats\" and uses `time.sleep()` to simulate a slower process. You will use this to draw two cats in one of your grid cards later on.\n\n1. Define another helper function to draw two orange cats.\n\n   ```python\n   def orange_cats():\n       time.sleep(1)\n       st.title(\"🐈 🐈\")\n       st.markdown(\"🐾 🐾 🐾 🐾\")\n   ```\n\n1. Optional: Test out your functions by calling each one within a grid card.\n\n   ```python\n   with grid[0]:\n       black_cats()\n   with grid[1]:\n       orange_cats()\n   ```\n\n   Save your `app.py` file to see the preview. Delete these four lines when finished.\n\n### Define your fragments\n\nSince each fragment will span across the sidebar and three additional containers, you'll use the sidebar to hold the main body of the fragment and pass the three containers as function arguments.\n\n1. Use an [`@st.fragment`](/develop/api-reference/execution-flow/st.fragment) decorator and start your black-cat fragment definition.\n\n   ```python\n   @st.fragment\n   def herd_black_cats(card_a, card_b, card_c):\n   ```\n\n1. Add a button for rerunning this fragment.\n\n   ```python\n       st.button(\"Herd the black cats\")\n   ```\n\n1. Write to each container using your helper function.\n\n   ```python\n       with card_a:\n           black_cats()\n       with card_b:\n           black_cats()\n       with card_c:\n           black_cats()\n   ```\n\n   **This code above will not behave as desired, but you'll explore and correct this in the following steps.**\n\n1. Test out your code. Call your fragment function in the sidebar.\n\n   ```python\n   with st.sidebar:\n       herd_black_cats(grid[0], grid[2], grid[4])\n   ```\n\n   Save your file and try using the button in the sidebar. More and more cats are appear in the cards with each fragment rerun! This is the expected behavior when fragments write to outside containers. To fix this, you will pass `st.empty()` containers to your fragment function.\n\n   ![Example Streamlit app showing accumulating elements when a fragment writes to outside containers](/images/tutorials/fragment-multiple-containers-tutorial-app-duplicates.jpg)\n\n1. Delete the lines of code from the previous two steps.\n\n1. To prepare for using `st.empty()` containers, correct your cat-herding function as follows. After the button, define containers to place in the `st.empty()` cards you'll pass to your fragment.\n\n   ```python\n       container_a = card_a.container()\n       container_b = card_b.container()\n       container_c = card_c.container()\n       with container_a:\n           black_cats()\n       with container_b:\n           black_cats()\n       with container_c:\n           black_cats()\n   ```\n\n   In this new version, `card_a`, `card_b`, and `card_c` will be `st.empty()` containers. You create `container_a`, `container_b`, and `container_c` to allow Streamlit to draw multiple elements on each grid card.\n\n1. Similarly define your orange-cat fragment function.\n\n   ```python\n   @st.fragment\n   def herd_orange_cats(card_a, card_b, card_c):\n       st.button(\"Herd the orange cats\")\n       container_a = card_a.container()\n       container_b = card_b.container()\n       container_c = card_c.container()\n       with container_a:\n           orange_cats()\n       with container_b:\n           orange_cats()\n       with container_c:\n           orange_cats()\n   ```\n\n### Put the functions together together to create an app\n\n1. Call both of your fragments in the sidebar.\n\n   ```python\n   with st.sidebar:\n       herd_black_cats(grid[0].empty(), grid[2].empty(), grid[4].empty())\n       herd_orange_cats(grid[1].empty(), grid[3].empty(), grid[5].empty())\n   ```\n\n   By creating `st.empty()` containers in each card and passing them to your fragments, you prevent elements from accumulating in the cards with each fragment rerun. If you create the `st.empty()` containers earlier in your app, full-script reruns will clear the orange-cat cards while (first) rendering the black-cat cards.\n\n1. Include a button outside of your fragments. When clicked, the button will trigger a full-script rerun since you're calling its widget function outside of any fragment.\n\n   ```python\n       st.button(\"Herd all the cats\")\n   ```\n\n1. Save your file and try out the app! When you click \"**Herd the black cats**\" or \"**Herd the orange cats**,\" Streamlit will only redraw the three related cards. When you click \"**Herd all the cats**,\" Streamlit redraws all six cards."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns",
    "content": "# Start and stop a streaming fragment\n\nStreamlit lets you turn functions into [fragments](/develop/concepts/architecture/fragments), which can rerun independently from the full script. Additionally, you can tell Streamlit to rerun a fragment at a set time interval. This is great for streaming data or monitoring processes. You may want the user to start and stop this live streaming. To do this, programmatically set the `run_every` parameter for your fragment.\n\n## Applied concepts\n\n- Use a fragment to stream live data.\n- Start and stop a fragment from automatically rerunning.\n\n## Prerequisites\n\n- This tutorial requires the following version of Streamlit:\n\n  ```text\n  streamlit>=1.37.0\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You should have a basic understanding of fragments.\n\n## Summary\n\nIn this example, you'll build an app that streams two data series in a line chart. Your app will gather recent data on the first load of a session and statically display the line chart. Two buttons in the sidebar will allow users to start and stop data streaming to update the chart in real time. You'll use a fragment to manage the frequency and scope of the live updates.\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete code\" expanded={false}>\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n\ndef get_recent_data(last_timestamp):\n    \"\"\"Generate and return data from last timestamp to now, at most 60 seconds.\"\"\"\n    now = datetime.now()\n    if now - last_timestamp > timedelta(seconds=60):\n        last_timestamp = now - timedelta(seconds=60)\n    sample_time = timedelta(seconds=0.5)  # time between data points\n    next_timestamp = last_timestamp + sample_time\n    timestamps = np.arange(next_timestamp, now, sample_time)\n    sample_values = np.random.randn(len(timestamps), 2)\n\n    data = pd.DataFrame(sample_values, index=timestamps, columns=[\"A\", \"B\"])\n    return data\n\n\nif \"data\" not in st.session_state:\n    st.session_state.data = get_recent_data(datetime.now() - timedelta(seconds=60))\n\nif \"stream\" not in st.session_state:\n    st.session_state.stream = False\n\n\ndef toggle_streaming():\n    st.session_state.stream = not st.session_state.stream\n\n\nst.title(\"Data feed\")\nst.sidebar.slider(\n    \"Check for updates every: (seconds)\", 0.5, 5.0, value=1.0, key=\"run_every\"\n)\nst.sidebar.button(\n    \"Start streaming\", disabled=st.session_state.stream, on_click=toggle_streaming\n)\nst.sidebar.button(\n    \"Stop streaming\", disabled=not st.session_state.stream, on_click=toggle_streaming\n)\n\nif st.session_state.stream is True:\n    run_every = st.session_state.run_every\nelse:\n    run_every = None\n\n\n@st.fragment(run_every=run_every)\ndef show_latest_data():\n    last_timestamp = st.session_state.data.index[-1]\n    st.session_state.data = pd.concat(\n        [st.session_state.data, get_recent_data(last_timestamp)]\n    )\n    st.session_state.data = st.session_state.data[-100:]\n    st.line_chart(st.session_state.data)\n\n\nshow_latest_data()\n```\n\n</Collapse>\n\n<Cloud name=\"doc-tutorial-fragment-streaming\" height=\"550px\" />\n\n## Build the example\n\n### Initialize your app\n\n1. In `your_repository`, create a file named `app.py`.\n1. In a terminal, change directories to `your_repository`, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `app.py`, write the following:\n\n   ```python\n    import streamlit as st\n    import pandas as pd\n    import numpy as np\n    from datetime import datetime, timedelta\n   ```\n\n   You'll be using these libraries as follows:\n\n   - You'll work with two data series in a `pandas.DataFrame`.\n   - You'll generate random data with `numpy`.\n   - The data will have `datetime.datetime` index values.\n\n1. Save your `app.py` file, and view your running app.\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `app.py`.\n\n1. Return to your code.\n\n### Build a function to generate random, recent data\n\nTo begin with, you'll define a function to randomly generate some data for two time series, which you'll call \"A\" and \"B.\" It's okay to skip this section if you just want to copy the function.\n\n<Collapse title=\"Complete function to randomly generate sales data\" expanded={false}>\n\n```python\ndef get_recent_data(last_timestamp):\n    \"\"\"Generate and return data from last timestamp to now, at most 60 seconds.\"\"\"\n    now = datetime.now()\n    if now - last_timestamp > timedelta(seconds=60):\n        last_timestamp = now - timedelta(seconds=60)\n    sample_time = timedelta(seconds=0.5)  # time between data points\n    next_timestamp = last_timestamp + sample_time\n    timestamps = np.arange(next_timestamp, now, sample_time)\n    sample_values = np.random.randn(len(timestamps), 2)\n\n    data = pd.DataFrame(sample_values, index=timestamps, columns=[\"A\", \"B\"])\n    return data\n```\n\n</Collapse>\n\n1. Start your function definition.\n\n   ```python\n   def get_recent_data(last_timestamp):\n       \"\"\"Generate and return data from last timestamp to now, at most 60 seconds.\"\"\"\n   ```\n\n   You'll pass the timestamp of your most recent datapoint to your data-generating function. Your function will use this to only return new data.\n\n1. Get the current time and adjust the last timestamp if it is over 60 seconds ago.\n\n   ```python\n       now = datetime.now()\n       if now - last_timestamp > timedelta(seconds=60):\n           last_timestamp = now - timedelta(seconds=60)\n   ```\n\n   By updating the last timestamp, you'll ensure the function never returns more than 60 seconds of data.\n\n1. Declare a new variable, `sample_time`, to define the time between datapoints. Calculate the timestamp of the first, new datapoint.\n\n   ```python\n       sample_time = timedelta(seconds=0.5)  # time between data points\n       next_timestamp = last_timestamp + sample_time\n   ```\n\n1. Create a `datetime.datetime` index and generate two data series of the same length.\n\n   ```python\n       timestamps = np.arange(next_timestamp, now, sample_time)\n       sample_values = np.random.randn(len(timestamps), 2)\n   ```\n\n1. Combine the data series with the index into a `pandas.DataFrame` and return the data.\n\n   ```python\n       data = pd.DataFrame(sample_values, index=timestamps, columns=[\"A\", \"B\"])\n       return data\n   ```\n\n1. Optional: Test out your function by calling it and displaying the data.\n\n   ```python\n   data = get_recent_data(datetime.now() - timedelta(seconds=60))\n   data\n   ```\n\n   Save your `app.py` file to see the preview. Delete these two lines when finished.\n\n### Initialize Session State values for your app\n\nSince you will dynamically change the `run_every` parameter of `@st.fragment()`, you'll need to initialize the associated variables and Session State values before defining your fragment function. Your fragment function will also read and update values in Session State, so you can define those now to make the fragment function easier to understand.\n\n1. Initialize your data for the first app load in a session.\n\n   ```python\n   if \"data\" not in st.session_state:\n       st.session_state.data = get_recent_data(datetime.now() - timedelta(seconds=60))\n   ```\n\n   Your app will display this initial data in a static line chart before a user starts streaming data.\n\n1. Initialize `\"stream\"` in Session State to turn streaming on and off. Set the default to off (`False`).\n\n   ```python\n   if \"stream\" not in st.session_state:\n       st.session_state.stream = False\n   ```\n\n1. Create a callback function to toggle `\"stream\"` between `True` and `False`.\n\n   ```python\n   def toggle_streaming():\n       st.session_state.stream = not st.session_state.stream\n   ```\n\n1. Add a title to your app.\n\n   ```python\n   st.title(\"Data feed\")\n   ```\n\n1. Add a slider to the sidebar to set how frequently to check for data while streaming.\n\n   ```python\n   st.sidebar.slider(\n       \"Check for updates every: (seconds)\", 0.5, 5.0, value=1.0, key=\"run_every\"\n   )\n   ```\n\n1. Add buttons to the sidebar to turn streaming on and off.\n\n   ```python\n   st.sidebar.button(\n       \"Start streaming\", disabled=st.session_state.stream, on_click=toggle_streaming\n   )\n   st.sidebar.button(\n       \"Stop streaming\", disabled=not st.session_state.stream, on_click=toggle_streaming\n   )\n   ```\n\n   Both functions use the same callback to toggle `\"stream\"` in Session State. Use the current value `\"stream\"` to disable one of the buttons. This ensures the buttons are always consistent with the current state; \"**Start streaming**\" is only clickable when streaming is off, and \"**Stop streaming**\" is only clickable when streaming is on. The buttons also provide status to the user by highlighting which action is available to them.\n\n1. Create and set a new variable, `run_every`, that will determine whether or not the fragment function will rerun automatically (and how fast).\n\n   ```python\n   if st.session_state.stream is True:\n       run_every = st.session_state.run_every\n   else:\n       run_every = None\n   ```\n\n### Build a fragment function to stream data\n\nTo allow the user to turn data streaming on and off, you must set the `run_every` parameter in the `@st.fragment()` decorator.\n\n<Collapse title=\"Complete function to show and stream data\" expanded={false}>\n\n```python\n@st.fragment(run_every=run_every)\ndef show_latest_data():\n    last_timestamp = st.session_state.data.index[-1]\n    st.session_state.data = pd.concat(\n        [st.session_state.data, get_recent_data(last_timestamp)]\n    )\n    st.session_state.data = st.session_state.data[-100:]\n    st.line_chart(st.session_state.data)\n```\n\n</Collapse>\n\n1. Use an [`@st.fragment`](/develop/api-reference/execution-flow/st.fragment) decorator and start your function definition.\n\n   ```python\n    @st.fragment(run_every=run_every)\n    def show_latest_data():\n   ```\n\n   Use the `run_every` variable declared above to set the parameter of the same name.\n\n1. Retrieve the timestamp of the last datapoint in Session State.\n\n   ```python\n       last_timestamp = st.session_state.data.index[-1]\n   ```\n\n1. Update the data in Session State and trim to keep only the last 100 timestamps.\n\n   ```python\n       st.session_state.data = pd.concat(\n           [st.session_state.data, get_recent_data(last_timestamp)]\n       )\n       st.session_state.data = st.session_state.data[-100:]\n   ```\n\n1. Show the data in a line chart.\n\n   ```python\n       st.line_chart(st.session_state.data)\n   ```\n\n   Your fragment-function definition is complete.\n\n### Call and test out your fragment function\n\n1. Call your function at the bottom of your code.\n\n   ```python\n   show_latest_data()\n   ```\n\n1. Test out your app by clicking \"**Start streaming**.\" Try adjusting the frequency of updates.\n\n## Next steps\n\nTry adjusting the frequency of data generation or how much data is kept in Session State. Within `get_recent_data` try setting `sample_time` with a widget.\n\nTry using [st.plotly_chart](/develop/api-reference/charts/st.plotly_chart) or [st.altair_chart](/develop/api-reference/charts/st.altair_chart) to add labels to your chart."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections-old",
    "content": "# Get dataframe row-selections from users (`streamlit<1.35.0`)\n\nBefore dataframe selections were introduced in Streamlit version 1.35.0, [`st.dataframe`](/api-reference/data/st.dataframe) and [`st.data_editor`](/develop/api-reference/data/st.data_editor) did not natively support passing user-selected rows to the Python backend. If you would like to work with row (or column)selections for dataframes, we recommend upgrading to `streamlit>=1.35.0`. For a newer tutorial, see [Get dataframe row-selections from users](/develop/tutorials/elements/dataframe-row-selections).\n\nHowever, if you need a workaround for an older version of Streamlit, you can effectively get row selections by adding an extra [Checkbox column](/develop/api-reference/data/st.column_config/st.column_config.checkboxcolumn)) to your dataframe using `st.data_editor`. Use this extra column to collect a user's selection(s).\n\n## Example\n\nIn the following example, we define a function which accepts a dataframe and returns the rows selected by a user. Within the function, the dataframe is copied to prevent mutating it. We insert a temporary \"Select\" column into the copied dataframe before passing the copied data into `st.data_editor`. We have disabled editing for all other columns, but you can make them editable if desired. After filtering the dataframe and dropping the temporary column, our function returns the selected rows.\n\n```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"Animal\": [\"Lion\", \"Elephant\", \"Giraffe\", \"Monkey\", \"Zebra\"],\n        \"Habitat\": [\"Savanna\", \"Forest\", \"Savanna\", \"Forest\", \"Savanna\"],\n        \"Lifespan (years)\": [15, 60, 25, 20, 25],\n        \"Average weight (kg)\": [190, 5000, 800, 10, 350],\n    }\n)\n\ndef dataframe_with_selections(df):\n    df_with_selections = df.copy()\n    df_with_selections.insert(0, \"Select\", False)\n\n    # Get dataframe row-selections from user with st.data_editor\n    edited_df = st.data_editor(\n        df_with_selections,\n        hide_index=True,\n        column_config={\"Select\": st.column_config.CheckboxColumn(required=True)},\n        disabled=df.columns,\n    )\n\n    # Filter the dataframe using the temporary column, then drop the column\n    selected_rows = edited_df[edited_df.Select]\n    return selected_rows.drop('Select', axis=1)\n\n\nselection = dataframe_with_selections(df)\nst.write(\"Your selection:\")\nst.write(selection)\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections",
    "content": "# Get dataframe row-selections from users\n\nStreamlit offers two commands for rendering beautiful, interactive dataframes in your app. If you need users to edit data, add rows, or delete rows, use `st.data_editor`. If you don't want users to change the data in your dataframe, use `st.dataframe`. Users can sort and search through data rendered with `st.dataframe`. Additionally, you can activate selections to work with users' row and column selections.\n\nThis tutorial uses row selections, which were introduced in Streamlit version 1.35.0. For an older workaround using `st.data_editor`, see [Get dataframe row-selections (`streamlit<1.35.0`)](/develop/tutorials/elements/dataframe-row-selections-old).\n\n## Applied concepts\n\n- Use dataframe row selections to filter a dataframe.\n\n## Prerequisites\n\n- This tutorial requires the following version of Streamlit:\n\n  ```text\n  streamlit>=1.35.0\n  ```\n\n- You should have a clean working directory called `your-repository`.\n- You should have a basic understanding of caching and `st.dataframe`.\n\n## Summary\n\nIn this example, you'll build an app that displays a table of members and their activity for an imaginary organization. Within the table, a user can select one or more rows to create a filtered view. Your app will show a combined chart that compares the selected employees.\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete code\" expanded={false}>\n\n    ```python\n    import numpy as np\n    import pandas as pd\n    import streamlit as st\n\n    from faker import Faker\n\n    @st.cache_data\n    def get_profile_dataset(number_of_items: int = 20, seed: int = 0) -> pd.DataFrame:\n        new_data = []\n\n        fake = Faker()\n        np.random.seed(seed)\n        Faker.seed(seed)\n\n        for i in range(number_of_items):\n            profile = fake.profile()\n            new_data.append(\n                {\n                    \"name\": profile[\"name\"],\n                    \"daily_activity\": np.random.rand(25),\n                    \"activity\": np.random.randint(2, 90, size=12),\n                }\n            )\n\n        profile_df = pd.DataFrame(new_data)\n        return profile_df\n\n\n    column_configuration = {\n        \"name\": st.column_config.TextColumn(\n            \"Name\", help=\"The name of the user\", max_chars=100, width=\"medium\"\n        ),\n        \"activity\": st.column_config.LineChartColumn(\n            \"Activity (1 year)\",\n            help=\"The user's activity over the last 1 year\",\n            width=\"large\",\n            y_min=0,\n            y_max=100,\n        ),\n        \"daily_activity\": st.column_config.BarChartColumn(\n            \"Activity (daily)\",\n            help=\"The user's activity in the last 25 days\",\n            width=\"medium\",\n            y_min=0,\n            y_max=1,\n        ),\n    }\n\n    select, compare = st.tabs([\"Select members\", \"Compare selected\"])\n\n    with select:\n        st.header(\"All members\")\n\n        df = get_profile_dataset()\n\n        event = st.dataframe(\n            df,\n            column_config=column_configuration,\n            use_container_width=True,\n            hide_index=True,\n            on_select=\"rerun\",\n            selection_mode=\"multi-row\",\n        )\n\n        st.header(\"Selected members\")\n        people = event.selection.rows\n        filtered_df = df.iloc[people]\n        st.dataframe(\n            filtered_df,\n            column_config=column_configuration,\n            use_container_width=True,\n        )\n\n    with compare:\n        activity_df = {}\n        for person in people:\n            activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"activity\"]\n        activity_df = pd.DataFrame(activity_df)\n\n        daily_activity_df = {}\n        for person in people:\n            daily_activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"daily_activity\"]\n        daily_activity_df = pd.DataFrame(daily_activity_df)\n\n        if len(people) > 0:\n            st.header(\"Daily activity comparison\")\n            st.bar_chart(daily_activity_df)\n            st.header(\"Yearly activity comparison\")\n            st.line_chart(activity_df)\n        else:\n            st.markdown(\"No members selected.\")\n    ```\n\n</Collapse>\n\n<Cloud name=\"doc-tutorial-dataframe-row-selections\" height=\"600px\" />\n\n## Build the example\n\n### Initialize your app\n\n1. In `your_repository`, create a file named `app.py`.\n1. In a terminal, change directories to `your_repository`, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `app.py`, write the following:\n\n   ```python\n   import numpy as np\n   import pandas as pd\n   import streamlit as st\n\n   from faker import Faker\n   ```\n\n   You'll be using these libraries as follows:\n\n   - You'll generate random member names with `faker`.\n   - You'll generate random activity data with `numpy`.\n   - You'll manipulate the data with `pandas`.\n\n1. Save your `app.py` file, and view your running app.\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `app.py`.\n\n1. Return to your code.\n\n### Build a function to create random member data\n\nTo begin with, you'll define a function to randomly generate some member data. It's okay to skip this section if you just want to copy the function.\n\n<Collapse title=\"Complete function to randomly generate member data\" expanded={false}>\n\n    ```python\n    @st.cache_data\n    def get_profile_dataset(number_of_items: int = 20, seed: int = 0) -> pd.DataFrame:\n        new_data = []\n\n        fake = Faker()\n        np.random.seed(seed)\n        Faker.seed(seed)\n\n        for i in range(number_of_items):\n            profile = fake.profile()\n            new_data.append(\n                {\n                    \"name\": profile[\"name\"],\n                    \"daily_activity\": np.random.rand(25),\n                    \"activity\": np.random.randint(2, 90, size=12),\n                }\n            )\n\n        profile_df = pd.DataFrame(new_data)\n        return profile_df\n    ```\n\n</Collapse>\n\n1. Use an `@st.cache_data` decorator and start your function definition.\n\n   ```python\n   @st.cache_data\n   def get_profile_dataset(number_of_items: int = 20, seed: int = 0) -> pd.DataFrame:\n   ```\n\n   The `@st.cache_data` decorator turns `get_profile_dataset()` into a cached function. Streamlit saves the output of a cached function to reuse when the cached function is called again with the same inputs. This keeps your app performant when rerunning as part of Streamlit's execution model. For more information, see [Caching](/develop/concepts/architecture/caching).\n\n   The `get_profile_dataset` function has two parameters to configure the size of the data set and the seed for random generation. This example will use the default values (20 members in the set with a seed of 0). The function will return a `pandas.DataFrame`.\n\n1. Initialize an empty list to store data.\n\n   ```python\n       new_data = []\n   ```\n\n1. Initialize the random generators.\n\n   ```python\n       fake = Faker()\n       random.seed(seed)\n       Faker.seed(seed)\n   ```\n\n1. Iterate through a range to generate new member data as a dictionary and append it to your list.\n\n   ```python\n       for i in range(number_of_items):\n           profile = fake.profile()\n           new_data.append(\n               {\n                   \"name\": profile[\"name\"],\n                   \"daily_activity\": np.random.rand(25),\n                   \"activity\": np.random.randint(2, 90, size=12),\n               }\n           )\n   ```\n\n   For `daily_activity`, you're generating an array of length 25. These values are floats in the interval `[0,1)`. For `activity`, you're generating an array of length 12. These values are integers in the interval `[2,90)`.\n\n1. Convert your list of dictionaries to a single `pandas.DataFrame` and return it.\n\n   ```python\n       profile_df = pd.DataFrame(new_data)\n       return profile_df\n   ```\n\n1. Optional: Test out your function by calling it and displaying the data.\n\n   ```python\n   st.dataframe(get_profile_dataset())\n   ```\n\n   Save your `app.py` file to see the preview. Delete this line before you continue.\n\n### Display your data with multi-row selections enabled\n\n1. Define your column configuration to format your data.\n\n   ```python\n   column_configuration = {\n       \"name\": st.column_config.TextColumn(\n           \"Name\", help=\"The name of the user\", max_chars=100, width=\"medium\"\n       ),\n       \"activity\": st.column_config.LineChartColumn(\n           \"Activity (1 year)\",\n           help=\"The user's activity over the last 1 year\",\n           width=\"large\",\n           y_min=0,\n           y_max=100,\n       ),\n       \"daily_activity\": st.column_config.BarChartColumn(\n           \"Activity (daily)\",\n           help=\"The user's activity in the last 25 days\",\n           width=\"medium\",\n           y_min=0,\n           y_max=1,\n       ),\n   }\n   ```\n\n   For each column of your dataframe, this defines nicely formatted column name, tooltip, and column width. You'll use a line chart to show yearly activity, and a bar chart to show daily activity.\n\n1. Insert a header to identify the data you will display.\n\n   ```python\n   st.header(\"All members\")\n   ```\n\n1. Store your data in a convenient variable.\n\n   ```python\n   df = get_profile_dataset()\n   ```\n\n1. Display your dataframe with selections activated.\n\n   ```python\n   event = st.dataframe(\n       df,\n       column_config=column_configuration,\n       use_container_width=True,\n       hide_index=True,\n       on_select=\"rerun\",\n       selection_mode=\"multi-row\",\n   )\n   ```\n\n   By setting `on_selection=\"rerun\"`, you've activated selections for the dataframe. `selection_mode=\"multi_row\"` specifies the type of selections allowed (multiple rows, no columns). `event` stores the selection data from the user. Selections can be accessed from the `event.selection` attribute.\n\n### Display the selected data\n\n1. Insert a header to identify the subset of data you will display.\n\n   ```python\n   st.header(\"Selected members\")\n   ```\n\n1. Get the list of selected rows and filter your dataframe.\n\n   ```python\n   people = event.selection.rows\n   filtered_df = df.iloc[people]\n   ```\n\n   Row selections are returned by positional index. You should use pandas methods `.iloc[]` or `.iat[]` to retrieve rows.\n\n1. Display the selected rows in a new dataframe.\n\n   ```python\n       st.dataframe(\n           filtered_df,\n           column_config=column_configuration,\n           use_container_width=True,\n       )\n   ```\n\n   For consistency, reuse the existing column configuration.\n\n1. Optional: Save your file and test it out. Try selecting some rows in your app, and then return to your code.\n\n### Combine activity data for the selected rows\n\n1. Create an empty dictionary to store (yearly) activity data.\n\n   ```python\n   activity_df = {}\n   ```\n\n1. Iterate through selected rows and save each member's activity in the dictionary indexed by their name.\n\n   ```python\n   for person in people:\n       activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"activity\"]\n   ```\n\n1. Convert the activity dictionary into a `pandas.DataFrame`.\n\n   ```python\n   activity_df = pd.DataFrame(activity_df)\n   ```\n\n1. Repeat the previous three steps similarly for daily activity.\n\n   ```python\n   daily_activity_df = {}\n   for person in people:\n       daily_activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"daily_activity\"]\n   daily_activity_df = pd.DataFrame(daily_activity_df)\n   ```\n\n1. Optional: Test out your combined data by displaying it.\n\n   ```python\n   st.dataframe(activity_df)\n   st.dataframe(daily_activity_df)\n   ```\n\n   Save your `app.py` file to see the preview. Delete these two lines before you continue.\n\n### Use charts to visualize the activity comparison\n\n1. Start a conditional block to check if anyone is currently selected.\n\n   ```python\n   if len(people) > 0:\n   ```\n\n   Since no members are selected when the app loads, this check will prevent empty charts from being displayed.\n\n1. Add a header to identify your first chart.\n\n   ```python\n       st.header(\"Daily activity comparison\")\n   ```\n\n1. Show the daily activity comparison in a bar chart.\n\n   ```python\n       st.bar_chart(daily_activity_df)\n   ```\n\n1. Similarly, for yearly activity, add a header and line chart.\n\n   ```python\n       st.header(\"Yearly activity comparison\")\n       st.line_chart(activity_df)\n   ```\n\n1. Complete the conditional block with a default message to show when no members are selected.\n\n   ```python\n   else:\n       st.markdown(\"No members selected.\")\n   ```\n\n### Make it pretty\n\nYou should have a functioning app at this point. Now you can beautify it. In this section, you'll separate the selection UI from the comparison by using `st.tabs`.\n\n1. Immediately after the column configuration definition, insert two tabs.\n\n   ```python\n   select, compare = st.tabs([\"Select members\", \"Compare selected\"])\n   ```\n\n1. Indent the code following the line in the previous step and group it into the two new tabs.\n\n   ```python\n   with select: # Add select tab #############################################\n       st.header(\"All members\")\n\n       df = get_profile_dataset()\n\n       event = st.dataframe(\n           df,\n           column_config=column_configuration,\n           use_container_width=True,\n           hide_index=True,\n           on_select=\"rerun\",\n           selection_mode=\"multi-row\",\n       )\n\n       st.header(\"Selected members\")\n       people = event.selection.rows\n       filtered_df = df.iloc[people]\n       st.dataframe(\n           filtered_df,\n           column_config=column_configuration,\n           use_container_width=True,\n       )\n\n   with compare: # Add compare tab ###########################################\n       activity_df = {}\n       for person in people:\n           activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"activity\"]\n       activity_df = pd.DataFrame(activity_df)\n\n       daily_activity_df = {}\n       for person in people:\n           daily_activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"daily_activity\"]\n       daily_activity_df = pd.DataFrame(daily_activity_df)\n\n       if len(people) > 0:\n           st.header(\"Daily activity comparison\")\n           st.bar_chart(daily_activity_df)\n           st.header(\"Yearly activity comparison\")\n           st.line_chart(activity_df)\n       else:\n           st.markdown(\"No members selected.\")\n   ```\n\n1. Save your file and try out your completed example."
  },
  {
    "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart",
    "content": "# Annotate an Altair chart\n\nAltair allows you to annotate your charts with text, images, and emojis. You can do this by overlaying two charts to create a [layered chart](https://altair-viz.github.io/user_guide/compound_charts.html#layered-charts).\n\n## Applied concepts\n\n- Use layered charts in Altair to create annotations.\n\n## Prerequisites\n\n- This tutorial requires the following Python libraries:\n\n  ```txt\n  streamlit\n  altair>=4.0.0\n  vega_datasets\n  ```\n\n- This tutorial assumes you have a clean working directory called `your-repository`.\n- You should have a basic understanding of the Vega-Altair charting library.\n\n## Summary\n\nIn this example, you will create a time-series chart to track the evolution of stock prices. The chart will have two layers: a data layer and an\nannotation layer. Each layer is an `altair.Chart` object. You will combine the two charts with the `+` opterator to create a layered chart.\n\nWithin the data layer, you'll add a multi-line tooltip to show information about datapoints. To learn more about multi-line tooltips, see this [example](https://altair-viz.github.io/gallery/multiline_tooltip.html) in Vega-Altair's documentation. You'll add another tooltip to the annotation layer.\n\nHere's a look at what you'll build:\n\n<Collapse title=\"Complete code\" expanded={false}>\n\n```python\nimport streamlit as st\nimport altair as alt\nimport pandas as pd\nfrom vega_datasets import data\n\n\n@st.cache_data\ndef get_data():\n    source = data.stocks()\n    source = source[source.date.gt(\"2004-01-01\")]\n    return source\n\n\nstock_data = get_data()\n\nhover = alt.selection_single(\n    fields=[\"date\"],\n    nearest=True,\n    on=\"mouseover\",\n    empty=\"none\",\n)\n\nlines = (\n    alt.Chart(stock_data, title=\"Evolution of stock prices\")\n    .mark_line()\n    .encode(\n        x=\"date\",\n        y=\"price\",\n        color=\"symbol\",\n    )\n)\n\npoints = lines.transform_filter(hover).mark_circle(size=65)\n\ntooltips = (\n    alt.Chart(stock_data)\n    .mark_rule()\n    .encode(\n        x=\"yearmonthdate(date)\",\n        y=\"price\",\n        opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),\n        tooltip=[\n            alt.Tooltip(\"date\", title=\"Date\"),\n            alt.Tooltip(\"price\", title=\"Price (USD)\"),\n        ],\n    )\n    .add_selection(hover)\n)\n\ndata_layer = lines + points + tooltips\n\nANNOTATIONS = [\n    (\"Sep 01, 2007\", 450, \"🙂\", \"Something's going well for GOOG & AAPL.\"),\n    (\"Nov 01, 2008\", 220, \"🙂\", \"The market is recovering.\"),\n    (\"Dec 01, 2007\", 750, \"😱\", \"Something's going wrong for GOOG & AAPL.\"),\n    (\"Dec 01, 2009\", 680, \"😱\", \"A hiccup for GOOG.\"),\n]\nannotations_df = pd.DataFrame(\n    ANNOTATIONS, columns=[\"date\", \"price\", \"marker\", \"description\"]\n)\nannotations_df.date = pd.to_datetime(annotations_df.date)\n\nannotation_layer = (\n    alt.Chart(annotations_df)\n    .mark_text(size=20, dx=-10, dy=0, align=\"left\")\n    .encode(x=\"date:T\", y=alt.Y(\"price:Q\"), text=\"marker\", tooltip=\"description\")\n)\n\ncombined_chart = data_layer + annotation_layer\nst.altair_chart(combined_chart, use_container_width=True)\n```\n\n</Collapse>\n\n<Cloud name=\"doc-annotate-altair\" height=\"450px\" />\n\n## Build the example\n\n### Initialize your app\n\n1. In `your_repository`, create a file named `app.py`.\n1. In a terminal, change directories to `your_repository`, and start your app:\n\n   ```bash\n   streamlit run app.py\n   ```\n\n   Your app will be blank because you still need to add code.\n\n1. In `app.py`, write the following:\n\n   ```python\n    import streamlit as st\n    import altair as alt\n    import pandas as pd\n    from vega_datasets import data\n   ```\n\n   You'll be using these libraries as follows:\n\n   - You'll download a dataset using [`vega_datasets`](https://pypi.org/project/vega-datasets/).\n   - You'll maniputate the data using `pandas`.\n   - You'll define a chart using `altair`.\n\n1. Save your `app.py` file, and view your running app.\n1. In your app, select \"**Always rerun**\", or press the \"**A**\" key.\n\n   Your preview will be blank but will automatically update as you save changes to `app.py`.\n\n1. Return to your code.\n\n### Build the data layer\n\nYou'll build an interactive time-series chart of the stock prices with a multi-line tooltip. The x-axis represents the date, and the y-axis represents the stock price.\n\n1. Import data from `vega_datasets`.\n\n   ```python\n   @st.cache_data\n   def get_data():\n       source = data.stocks()\n       source = source[source.date.gt(\"2004-01-01\")]\n       return source\n\n   stock_data = get_data()\n   ```\n\n   The `@st.cache_data` decorator turns `get_data()` into a cahced function. Streamlit will only download the data once since the data will be saved in a cache. For more information about caching, see [Caching overview](/develop/concepts/architecture/caching).\n\n1. Define a mouseover selection event in Altair.\n\n   ```python\n   hover = alt.selection_single(\n       fields=[\"date\"],\n       nearest=True,\n       on=\"mouseover\",\n       empty=\"none\",\n   )\n   ```\n\n   This defines a mouseover selection for points. `fields=[\"date\"]` allows Altair to identify other points with the same date. You will use this to create a vertical line highlight when a user hovers over a point.\n\n1. Define a basic line chart to graph the five series in your data set.\n\n   ```python\n   lines = (\n       alt.Chart(stock_data, title=\"Evolution of stock prices\")\n       .mark_line()\n       .encode(\n           x=\"date\",\n           y=\"price\",\n           color=\"symbol\",\n       )\n   )\n   ```\n\n1. Draw points on the lines and highlight them based on the mouseover selection.\n\n   ```python\n   points = lines.transform_filter(hover).mark_circle(size=65)\n   ```\n\n   Since the mouseover selection includes `fields=[\"date\"]`, Altair will draw circles on each series at the same date.\n\n1. Draw a vertical rule at the location of the mouseover selection.\n\n   ```python\n   tooltips = (\n       alt.Chart(stock_data)\n       .mark_rule()\n       .encode(\n           x=\"yearmonthdate(date)\",\n           y=\"price\",\n           opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),\n           tooltip=[\n               alt.Tooltip(\"date\", title=\"Date\"),\n               alt.Tooltip(\"price\", title=\"Price (USD)\"),\n           ],\n       )\n       .add_selection(hover)\n   )\n   ```\n\n   The `opacity` parameter ensures each vertical line is only visible when it's part of a mouseover selection. Each `alt.Tooltip` adds a line to your multi-line tooltip.\n\n1. Combine the lines, points, and tooltips into a single chart.\n\n   ```python\n   data_layer = lines + points + tooltips\n   ```\n\n1. Optional: Test out your code by rendering your data layer.\n\n   ```python\n   st.altair_chart(data_layer, use_container_width=True)\n   ```\n\n   Save your file and examine the chart in your app. Use your mouse to hover over points. Observe the circle marks, vertical line, and tooltip as you hover over a point. Delete the line or keep it at the end of your app to be updated as you continue.\n\n### Build the annotation layer\n\nNow that you have the first chart that shows the data, you can annotate it with text and an emoji. In this section, you'll add some emojis and tooltips to mark specifc points of interest.\n\n1. Create a list of annotations.\n\n   ```python\n   ANNOTATIONS = [\n       (\"Sep 01, 2007\", 450, \"🙂\", \"Something's going well for GOOG & AAPL.\"),\n       (\"Nov 01, 2008\", 220, \"🙂\", \"The market is recovering.\"),\n       (\"Dec 01, 2007\", 750, \"😱\", \"Something's going wrong for GOOG & AAPL.\"),\n       (\"Dec 01, 2009\", 680, \"😱\", \"A hiccup for GOOG.\"),\n   ]\n   annotations_df = pd.DataFrame(\n       ANNOTATIONS, columns=[\"date\", \"price\", \"marker\", \"description\"]\n   )\n   annotations_df.date = pd.to_datetime(annotations_df.date)\n   ```\n\n   The first two columns (\"date\" and \"price\") determine where Altair will place the marker. The third column (\"marker\") determines what icon Altair will place. The last column (\"description\") will fill in the associated tooltip.\n\n1. Create a scatter plot with the x-axis representing the date and the y-axis representing the height (\"price\") of each annotation.\n\n   ```python\n   annotation_layer = (\n       alt.Chart(annotations_df)\n       .mark_text(size=20, dx=-10, dy=0, align=\"left\")\n       .encode(x=\"date:T\", y=alt.Y(\"price:Q\"), text=\"marker\", tooltip=\"description\")\n   )\n   ```\n\n   The `dx=-10, dy=0` inside of `.mark_text()` offsets the icons so they are centered at the coordinate in your annotations dataframe. The four columns are passed to the chart through the `.encode()` method. If you want to use the same marker for all points, you can remove `text=\"marker\"` from the `.encode()` method and add the marker to `.mark_text()`. For example, `.mark_text(text=\"🥳\")` would make all the icons be \"🥳\". For more information about `.mark_text()`, see Altair's [documentation](https://altair-viz.github.io/user_guide/marks.html).\n\n### Combine the chart layers\n\n1. Define the combined chart.\n\n   ```python\n   combined_chart = data_layer + annotation_layer\n   ```\n\n1. Display the chart in Streamlit.\n\n   ```python\n   st.altair_chart(combined_chart, use_container_width=True)\n   ```\n\n## Next steps\n\nPlay around with your new app.\n\n- If you want to use custom images instead of text or emojis to annotation your chart, you can replace the line containing `.mark_text()` with `.mark_image()`. For some URL string stored in a variable `IMAGE_URL`, you could do something like this:\n\n  ```python\n  .mark_image(\n      width=12,\n      height=12,\n      url=IMAGE_URL,\n  )\n  ```\n\n- If you want to enable panning and zooming for your chart, add `.interactive()` when you define your combined chart:\n\n  ```python\n  combined_chart = (data_layer + annotation_layer).interactive()\n  ```"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/configuration/serving-static-files",
    "content": "# Static file serving\n\nStreamlit apps can host and serve small, static media files to support media embedding use cases that\nwon't work with the normal [media elements](/develop/api-reference/media).\n\nTo enable this feature, set `enableStaticServing = true` under `[server]` in your config file,\nor environment variable `STREAMLIT_SERVER_ENABLE_STATIC_SERVING=true`.\n\nMedia stored in the folder `./static/` relative to the running app file is served at path\n`app/static/[filename]`, such as `http://localhost:8501/app/static/cat.png`.\n\n## Details on usage\n\n- Files with the following extensions will be served normally:\n  - Common image types: `.jpg`, `.jpeg`, `.png`, `.gif`\n  - Common font types: `.otf`, `.ttf`, `.woff`, `.woff2`\n  - Other types: `.pdf`, `.xml`, `.json`\n    Any other file will be sent with header `Content-Type:text/plain` which will cause browsers to render in plain text.\n    This is included for security - other file types that need to render should be hosted outside the app.\n- Streamlit also sets `X-Content-Type-Options:nosniff` for all files rendered from the static directory.\n- For apps running on Streamlit Community Cloud:\n  - Files available in the Github repo will always be served. Any files generated while the app is running,\n    such as based on user interaction (file upload, etc), are not guaranteed to persist across user sessions.\n  - Apps which store and serve many files, or large files, may run into resource limits and be shut down.\n\n## Example usage\n\n- Put an image `cat.png` in the folder `./static/`\n- Add `enableStaticServing = true` under `[server]` in your `.streamlit/config.toml`\n- Any media in the `./static/` folder is served at the relative URL like `app/static/cat.png`\n\n```toml\n# .streamlit/config.toml\n\n[server]\nenableStaticServing = true\n```\n\n```python\n# app.py\nimport streamlit as st\n\nwith st.echo():\n    st.title(\"CAT\")\n\n    st.markdown(\"[![Click me](app/static/cat.png)](https://streamlit.io)\")\n\n```\n\nAdditional resources:\n\n- [https://docs.streamlit.io/develop/concepts/configuration](https://docs.streamlit.io/develop/concepts/configuration)\n- [https://static-file-serving.streamlit.app/](https://static-file-serving.streamlit.app/)\n\n<Cloud name=\"static-file-serving\" height=\"1000px\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/configuration/theming",
    "content": "# Theming overview\n\nIn this guide, we provide an overview of theming and visual customization of Streamlit apps. Streamlit themes are defined using configuration options, which are most commonly defined in a `.streamlit/config.toml` file. For more information about setting configuration options, see [Working with configuration options](/develop/concepts/configuration/options). For a complete list of configuration options and definitions, see the API reference for [config.toml](/develop/api-reference/configuration/config.toml#theme).\n\nThe following options can be set once for your whole app:\n\n- **Base color scheme**: Set your custom theme to inherit from Streamlit's light or dark theme.\n- **Font size**: Set the base font size for your app.\n\nThe following options can be configured separately for the main body of your app and the sidebar:\n\n- **Font**: Set the font family for body text, headers, and code.\n- **Text color**: Set the color of body text and links.\n- **Primary color**: Set the color of interactive elements and highlights.\n- **Background color**: Set the color of app, widget, and code block backgrounds.\n- **Border radius**: Set the roundness of elements and widgets.\n- **Border color**: Set the color and visibility of element, widget, and sidebar borders.\n\n## Example themes\n\nThe following light theme is inspired by [Anthropic](https://docs.anthropic.com/en/home).\n<Cloud name=\"doc-theming-overview-anthropic-light-inspired\" height=\"500px\" />\n\nThe following dark theme is inspired by [Spotify](https://open.spotify.com/).\n<Cloud name=\"doc-theming-overview-spotify-inspired\" height=\"500px\" />\n\n## Working with theme configuration during development\n\nMost theme configuration options can be updated while an app is running. This makes it easy to iterate on your custom theme. If you change your app's primary color, save your `config.toml` file, and rerun your app, you will immediately see the new color. However, some configuration options (like `[[theme.fontFace]]`) require you to restart the Streamlit server to reflect the updates. If in doubt, when updating your app's configuration, stop the Streamlit server in your terminal and restart your app with the `streamlit run` command."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/configuration/https-support",
    "content": "# HTTPS support\n\nMany apps need to be accessed with SSL / [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security) protocol or `https://`.\n\nWe recommend performing SSL termination in a reverse proxy or load balancer for self-hosted and production use cases, not directly in the app. [Streamlit Community Cloud](/deploy/streamlit-community-cloud) uses this approach, and every major cloud and app hosting platform should allow you to configure it and provide extensive documentation. You can find some of these platforms in our [Deployment tutorials](/deploy/tutorials).\n\nTo terminate SSL in your Streamlit app, you must configure `server.sslCertFile` and `server.sslKeyFile`. Learn how to set config options in [Configuration](/develop/concepts/configuration).\n\n## Details on usage\n\n- The configuration value should be a local file path to a cert file and key file. These must be available at the time the app starts.\n- Both `server.sslCertFile` and `server.sslKeyFile` must be specified. If only one is specified, your app will exit with an error.\n- This feature will not work in Community Cloud. Community Cloud already serves your app with TLS.\n\n<Warning>\n\nIn a production environment, we recommend performing SSL termination by the load balancer or the reverse proxy, not using this option. The use of this option in Streamlit has not gone through extensive security audits or performance tests.\n\n</Warning>\n\n## Example usage\n\n```toml\n# .streamlit/config.toml\n\n[server]\nsslCertFile = '/path/to/certchain.pem'\nsslKeyFile = '/path/to/private.key'\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts",
    "content": "# Customize fonts in your Streamlit app\n\nStreamlit lets you change and customize the fonts in your app. You can load font files from a public URL or host them with your app using [static file serving](/develop/concepts/configuration/serving-static-files).\n\n## Default Streamlit fonts\n\nStreamlit comes with [Source Sans](https://fonts.adobe.com/fonts/source-sans), [Source Serif](https://fonts.adobe.com/fonts/source-serif), and [Source Code](https://fonts.adobe.com/fonts/source-code-pro) fonts. These font files are included with the Streamlit library so clients don't download them from a third party. By default, Streamlit uses Source Sans for all text except inline code and code blocks, which use Source Code instead.\n\nTo use these default faults, you can set each of the following configuration options to `\"sans-serif\"` (Source Sans), `\"serif\"` (Source Serif), or `\"monospace\"` (Source Code) in `config.toml`:\n\n```toml\n[theme]\nfont = \"sans-serif\"\nheadingFont = \"sans-serif\"\ncodeFont = \"monospace\"\n[theme.sidebar]\nfont = \"sans-serif\"\nheadingFont = \"sans-serif\"\ncodeFont = \"monospace\"\n```\n\nThe following configuration options can be set separately for the sidebar by using the `[theme.sidebar]` table instead of the `[theme]` table in `config.toml`:\n\n- `theme.font` sets the default font for all text in the app (except inline code and code blocks). This is `\"sans-serif\"` (Source Sans) by default.\n- `theme.headingFont` sets the default font for all headings in the app. If this is not set, Streamlit uses `theme.font` instead.\n- `theme.codeFont` sets the default font for all inline code and code blocks. This is `\"monospace\"` (Source Code) by default.\n\nWhen fonts are not declared in `[theme.sidebar]`, Streamlit will inherit each option from `[theme]` before defaulting to less specific options. For example, if `theme.sidebar.headingFont` is not set, Streamlit uses (in order of precedence) `theme.headingFont`, `theme.sidebar.font`, or `theme.font` instead.\n\nIn the following `config.toml` example, Streamlit uses Source Serif in the main body of the app and Source Sans in the sidebar.\n\n```toml\n[theme]\nfont = \"serif\"\n[theme.sidebar]\nfont = \"sans-serif\"\n```\n\n## Loading alternative fonts\n\nTo use an alternative font in your app, you must declare the font in `config.toml` under `[[theme.fontFaces]]`. For multiple alternative fonts, declare multiple `[[theme.fontFaces]]` tables in your configuration file. You can self-host your font by using Streamlit static file serving, or you can point to a publicly hosted font file.\n\n<Important>\n\nStreamlit supports self-hosting for OTF, TTF, WOFF, and WOFF2 font file formats. Other font file formats must be hosted externally.\n\n</Important>\n\nFonts are defined with the following attributes in their `[[theme.fontFaces]]` tables:\n\n- `family`: This is the name of the font and is used to identify the font for use by other configuration options.\n- `url`: This is the location of the font file. If you are self-hosting the font file with your app, the value will be similar to `\"app/static/font_file.woff\"`.\n- `weight` (optional): This declares the weight of the font within the font file (e.g., `400`, `\"200 800\"`, or `\"bold\"`). For more information, see the [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-weight) CSS `@font-face` descriptor.\n- `style` (optional): This declares the style of the font within the font file (e.g., `\"normal\"`, `\"italic\"`, or `\"oblique\"`). For more information, see the [`font-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-style) CSS `@font-face` descriptor.\n- `unicodeRange` (optional): This declares the specific range of characters within the font file (e.g. `\"U+0025-00FF, U+4??\"`) For more information, see the [`unicode-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) CSS `@font-face descriptor.\n\n<Note>\n\nFont files can be static or variable. A static font file contains a single weight and style of font. If you use static font files, it is common to load multiple files to fully support the font across different weights (normal, bold) and styles (normal, italic). Variable font files parameterize one or more font attributes, which means a single font file can support multiple weights and styles.\n\n</Note>\n\n### Example 1: Define an alternative font with variable font files\n\nThe following example uses static file serving to host Google's [Noto Sans](https://fonts.google.com/noto/specimen/Noto+Sans) and [Noto Sans Mono](https://fonts.google.com/noto/specimen/Noto+Sans+Mono) fonts and configures the app to use them. Both of these fonts are defined with variable font files that include a parameterized weight. However, because font style is not parameterized, Noto Sans requires two files to define the normal and italic styles separately. Noto Sans Mono does not include a separate file for its italic style. Per [CSS rules](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style#italic), if no italic style is explicitly provided, it will be simulated by skewing the normal-style font.\n\nA line-by-line explanation of this example is available in a [tutorial](/develop/tutorials/configuration-and-theming/variable-fonts).\n\n`.streamlit/config.toml`:\n\n```toml\n[server]\nenableStaticServing = true\n\n[[theme.fontFaces]]\nfamily=\"noto-sans\"\nurl=\"app/static/NotoSans-Italic-VariableFont_wdth,wght.ttf\"\nstyle=\"italic\"\n[[theme.fontFaces]]\nfamily=\"noto-sans\"\nurl=\"app/static/NotoSans-VariableFont_wdth,wght.ttf\"\nstyle=\"normal\"\n[[theme.fontFaces]]\nfamily=\"noto-mono\"\nurl=\"app/static/NotoSansMono-VariableFont_wdth,wght.ttf\"\n\n[theme]\nfont=\"noto-sans\"\ncodeFont=\"noto-mono\"\n```\n\nDirectory structure:\n\n```none\nproject_directory/\n├── .streamlit/\n│   └── config.toml\n├── static/\n│   ├── NotoSans-Italic-VariableFont_wdth,wght.ttf\n│   ├── NotoSans-VariableFont_wdth,wght.ttf\n│   └── NotoSansMono-VariableFont_wdth,wght.ttf\n└── streamlit_app.py\n```\n\n### Example 2: Define an alternative font with static font files\n\nIn this configuration example, an alternative font is declared with multiple static font files. For each font, four static files are needed to define the following weight-style pairs:\n\n- normal normal\n- normal bold\n- italic normal\n- italic bold\n\nIf one of the files is missing and you try to use its associated weight and style in your app, the user's browser will use the closest font that is available. The following example uses [Tuffy](https://fonts.google.com/specimen/Tuffy) font. The font has four static font files that cover the four weight-style pairs.\n\nA line-by-line explanation of this example is available in a [tutorial](/develop/tutorials/configuration-and-theming/static-fonts).\n\n`.streamlit/config.toml`:\n\n```toml\n[server]\nenableStaticServing = true\n\n[[theme.fontFaces]]\nfamily=\"tuffy\"\nurl=\"app/static/Tuffy-Regular.ttf\"\nstyle=\"normal\"\nweight=400\n[[theme.fontFaces]]\nfamily=\"tuffy\"\nurl=\"app/static/Tuffy-Bold.ttf\"\nstyle=\"normal\"\nweight=700\n[[theme.fontFaces]]\nfamily=\"tuffy\"\nurl=\"app/static/Tuffy-Italic.ttf\"\nstyle=\"italic\"\nweight=400\n[[theme.fontFaces]]\nfamily=\"tuffy\"\nurl=\"app/static/Tuffy-BoldItalic.ttf\"\nstyle=\"italic\"\nweight=700\n\n[theme]\nfont=\"tuffy\"\n```\n\nDirectory structure:\n\n```none\nproject_directory/\n├── .streamlit/\n│   └── config.toml\n├── static/\n│   ├── Tuffy-Bold.ttf\n│   ├── Tuffy-BoldItalic.ttf\n│   ├── Tuffy-Italic.ttf\n│   └── Tuffy-Regular.ttf\n└── streamlit_app.py\n```\n\n### Example 3: Define an alternative font with fallbacks\n\nIf you don't want to download and host your font files with your app, you can point to externally hosted font files. If your files aren't hosted with your app, it's recommended to declare fallback fonts.\n\n<Important>\n\nIf you configure your app to include any third-party integrations, including externally hosted fonts, your app may transmit user data (for example, IP addresses) to external servers. As the app developer, you are solely responsible for notifying your users about these third-party integrations, providing access to relevant privacy policies, and ensuring compliance with all applicable data protection laws and regulations.\n\n</Important>\n\nIn your configuration file, wherever you declare a default font, you can use a comma-separated list of fonts instead. You can always include one of Streamlit's default fonts as a final fallback.\n\n- To specify a fallback font in Example 1, in `.streamlit/config.toml`, change the `[theme]` table to the following text:\n\n  ```toml\n  [theme]\n  font=\"noto-sans, sans-serif\"\n  codeFont=\"noto-mono, monospace\"\n  ```\n\n  This is the same configuration as in Example 1 except that Source Sans and Source Mono are declared as fallback fonts. You can define more than one fallback. When you declare a default font, the font (or comma-separated list of fonts) is passed to the CSS [`font-family`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property.\n\n<Tip>\n\nIf any of your font family names contain spaces and you are declaring a fallback sequence, use inner quotes around the names. For example, if you name the font `\"Noto Sans\"`, use `font=\"'Noto Sans', sans-serif\"` instead.\n\n</Tip>\n\n## Font size\n\nYou can set the base font size for your app in pixels. You must specify the base font size as an integer. The following configuration is equivalent to the default base font size of 16 pixels:\n\n```toml\n[theme]\nbaseFontSize=16\n```\n\nAdditionally, you can set the font size for code blocks. The font size can be declared in pixels or rem. The following configuration is equivalent to the default code font size of 0.875rem.\n\n```toml\n[theme]\ncodeFontSize=\"0.875rem\"\n```\n\n<Note>\n\nInline code in Markdown is not impacted by `theme.codeFontSize`. Inline code is set at 0.75em.\n\n</Note>\n\n## Font colors\n\nFont color options are described in [Customize colors and borders in your Streamlit app](/develop/concepts/configuration/theming-customize-colors-and-borders#textcolor-and-linkcolor).\n\n## Design tips\n\nWhen using alternative fonts in your Streamlit app, keep good design practices in mind. The legibility of a font is strongly influenced by its size, contrast with its background, and shape. Streamlit lets you declare a different font for your headers from the rest of your text. If you introduce a more elaborate font, limit it to your headers. Because `theme.font` and `theme.sidebar.font` are used to set the font in widget labels, tooltips, column headers, and dataframe cells, they should always be a highly readable font.\n\nFor inspiration, see [Fonts in Use](https://fontsinuse.com/)."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/configuration/options",
    "content": "# Working with configuration options\n\nStreamlit provides four different ways to set configuration options. This list is in reverse order of precedence, i.e. command line flags take precedence over environment variables when the same configuration option is provided multiple times.\n\n<Note>\n\nIf you change theme settings in `.streamlit/config.toml` _while_ the app is running, these changes will reflect immediately. If you change non-theme settings in `.streamlit/config.toml` _while_ the app is running, the server needs to be restarted for changes to be reflected in the app.\n\n</Note>\n\n1. In a **global config file** at `~/.streamlit/config.toml` for macOS/Linux or `%userprofile%/.streamlit/config.toml` for Windows:\n\n   ```toml\n   [server]\n   port = 80\n   ```\n\n2. In a **per-project config file** at `$CWD/.streamlit/config.toml`, where\n   `$CWD` is the folder you're running Streamlit from.\n\n3. Through `STREAMLIT_*` **environment variables**, such as:\n\n   ```bash\n   export STREAMLIT_SERVER_PORT=80\n   export STREAMLIT_SERVER_COOKIE_SECRET=dontforgottochangeme\n   ```\n\n4. As **flags on the command line** when running `streamlit run`:\n\n   ```bash\n   streamlit run your_script.py --server.port 80\n   ```\n\n## Available options\n\nAll available configuration options are documented in [`config.toml`](/develop/api-reference/configuration/config.toml). These options may be declared in a TOML file, as environment variables, or as command line options.\n\nWhen using environment variables to override `config.toml`, convert the variable (including its section header) to upper snake case and add a `STREAMLIT_` prefix. For example, `STREAMLIT_CLIENT_SHOW_ERROR_DETAILS` is equivalent to the following in TOML:\n\n```toml\n[client]\nshowErrorDetails = true\n```\n\nWhen using command line options to override `config.toml` and environment variables, use the same case as you would in the TOML file and include the section header as a period-separated prefix. For example, the command line option `--server.enableStaticServing true` is equivalent to the following:\n\n```toml\n[server]\nenableStaticServing = true\n```\n\n## Telemetry\n\nAs mentioned during the installation process, Streamlit collects usage statistics. You can find out\nmore by reading our [Privacy Notice](https://streamlit.io/privacy-policy), but the high-level\nsummary is that although we collect telemetry data we cannot see and do not store information\ncontained in Streamlit apps.\n\nIf you'd like to opt out of usage statistics, add the following to your config file:\n\n```toml\n[browser]\ngatherUsageStats = false\n```\n\n## Theming\n\nYou can change the base colors of your app using the `[theme]` section of the configuration system.\nTo learn more, see [Theming.](/develop/concepts/configuration/theming)\n\n## View all configuration options\n\nAs described in [Command-line options](/develop/api-reference/cli), you can\nview all available configuration options using:\n\n```bash\nstreamlit config show\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders",
    "content": "# Customize colors and borders in your Streamlit app\n\n## Color values\n\nFor all configuration options that accept a color, you can specify the value with one of the following strings:\n\n- A CSS [`<named-color>`](https://developer.mozilla.org/en-US/docs/Web/CSS/named-color) like `\"darkBlue\"` or `\"maroon\"`.\n- A HEX string like `\"#483d8b\"` or `\"#6A5ACD\"`.\n- An RGB string like `\"rgb(106, 90, 205)\"` or `\"RGB(70, 130, 180)\"`.\n- An HSL string like `\"hsl(248, 53%, 58%)\"` or `\"HSL(147, 50%, 47%)\"`.\n\n<Tip>\n\nAlthough you can specify an alpha value for your colors, this isn't recommended. Streamlit adjusts the alpha value of colors to ensure contextually appropriate shading between background and foreground.\n\n</Tip>\n\n## Default Streamlit colors\n\nStreamlit comes with two preconfigured themes: light and dark. If you don't specify any theme configuration options, Streamlit will attempt to use the preconfigured theme that best matches each user's browser settings.\n\n## Color and border configuration options\n\nMost theme configuration options can be set for your whole app, but you can override some with a different value for the sidebar. For example, your app's primary color (`primaryColor`) is used to highlight interactive elements and show focus. If you set `theme.primaryColor`, this will change the primary color for your whole app. However, if you set `theme.sidebar.primaryColor`, this will override `theme.primaryColor` in the sidebar, allowing you to use two different primary colors.\n\nThe following two configuration options can only be applied to the whole app:\n\n- `theme.base` sets the default colors for your app's theme to match one of Streamlit's two default themes (`\"light\"` or `\"dark\"`). If any theme configuation option is used and `theme.base` is not set, then Streamlit will use `\"light\"`.\n- `theme.showSidebarBorder` sets the visibility of the border between the sidebar and the main body of your app.\n\nThe following configuration options can be set separately for the sidebar by using the `[theme.sidebar]` table instead of the `[theme]` table in `config.toml`:\n\n- `theme.primaryColor`\n- `theme.backgroundColor`\n- `theme.secondaryBackgroundColor`\n- `theme.textColor`\n- `theme.linkColor`\n- `theme.codeBackgroundColor`\n- `theme.baseRadius`\n- `theme.buttonRadius`\n- `theme.borderColor`\n- `theme.dataframeBorderColor`\n- `theme.showWidgetBorder`\n\nFor brevity, on the rest of this page, theming configuration options will not include the `theme.` or `theme.sidebar.` prefix.\n\n### `primaryColor`\n\n`primaryColor` defines the accent color most often used throughout your Streamlit\napp. The following features and effects use your primary color:\n\n- Button hover effects\n- Elements in focus\n- Selected elements\n\n<Tip>\n\nWhen your primary color is used as a background, Streamlit changes the text color to white. For example, this happens for `type=\"primary\"` buttons and for selected items in `st.multiselect`.\n\nFor legibility, always choose a primary color that is dark enough to contrast well with white text.\n\n</Tip>\n\n#### Example 1: Primary color\n\nThe following configuration example has a `\"forestGreen\"` primary color. In the sidebar, the configuration overrides the primary color to `\"darkGoldenrod\"`. If you click inside a widget to give it focus, Streamlit displays a primary-color border around the widget. Additionally, if you hover over the secondary and tertiary buttons, the hover color matches the primary color.\n\n```toml\n[theme]\nbase=\"dark\"\nprimaryColor=\"forestGreen\"\n\n[theme.sidebar]\nprimaryColor=\"darkGoldrod\"\n```\n\n<Cloud name=\"doc-theming-color-primarycolor\" height=\"350px\" />\n\n### `backgroundColor`, `secondaryBackgroundColor`, and `codeBackgroundColor`\n\n`backgroundColor` defines the background color of your app.\n\n`secondaryBackgroundColor` is used for contrast in the following places:\n\n- The background of input or selection regions for widgets\n- Headers within elements like `st.dataframe` and `st.help`\n- Code blocks and inline code (if `codeBackgroundColor` is not set)\n\n`codeBackgroundColor` sets the background for code blocks and line code. If `codeBackgroundColor` is not set, Streamlit uses `secondaryBackgroundColor` instead.\n\n<Note>\n\nIf you do not define background colors for the sidebar, Streamlit will swap `backgroundColor` and `secondaryBackgroundColor` in the sidebar:\n\n- If `theme.sidebar.backgroundColor` is not defined, Streamlit uses `theme.secondaryBackgroundColor`.\n- If `theme.sidebar.secondaryBackgroundColor` is not defined, Streamlit uses `theme.backgroundColor`.\n\n</Note>\n\n#### Example 2: Background colors\n\nThe following configuration example has a `\"white\"` background, with a lavender-tinted `\"ghostWhite\"` sidebar background. The secondary color for the whole app is `\"lavender\"` and the code background color is `\"powderBlue\"`. The code background color is configured once in `[theme]` and inherited in the sidebar. However, because Streamlit swaps background colors when the sidebar inherits them, the secondary background color is set in both `[theme]` and `[theme.sidebar]`. To see the secondary color used for a hover effect, hover over a dataframe cell or open the multiselect drop-down menu.\n\n```toml\n[theme]\nbase=\"light\"\nbackgroundColor=\"white\"\nsecondaryBackgroundColor=\"lavender\"\ncodeBackgroundColor=\"powderBlue\"\n\n[theme.sidebar]\nbackgroundColor=\"ghostWhite\"\nsecondaryBackgroundColor=\"lavender\"\n```\n\n<Cloud name=\"doc-theming-color-backgroundcolor\" height=\"450px\" />\n\n### `textColor` and `linkColor`\n\nYou can configure the color of body text and links.\n\n`textColor` sets the default text color for all text in the app except language-highlighting in code blocks, inline code, and links. `linkColor` sets the default font color for all Markdown links in the app.\n\nThe following elements are impacted by `textColor`:\n\n- Markdown text, except links\n- Text in code blocks that's not colored otherwise from language highlighting\n- App-chrome and sidebar menu icons\n- Widget labels, icons, option text, and placeholder text\n- Dataframe and table text\n- Non-Markdown links, like `st.page_link`, `st.link_button`, and the navigation menu\n\nAs noted previously, Streamlit changes the text color to white when text is displayed against your primary color.\n\n#### Example 3: Text colors\n\nThe following configuration example has `\"darkGoldenrod\"` text and `\"darkOrchid\"` links on a `\"dark\"` base. Buttons (including `st.link_button`) use the `\"darkGoldenrod\"` text color. In the multiselect widget, the placeholder text, drop-down menu, and tooltip all have `\"darkGoldenrod\"` text. If you hover over the sidebar, the scrollbar and collapse icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>chevron_left</i>) are `\"darkGoldenrod\"`.\n\n```toml\n[theme]\nbase=\"dark\"\ntextColor=\"darkGoldenrod\"\nlinkColor=\"darkOrchid\"\n```\n\n<Cloud name=\"doc-theming-color-textcolor\" height=\"400px\" />\n\n### `baseRadius` and `buttonRadius`\n\n`baseRadius` defines the radius of borders and backgrounds for the following elements:\n\n- Buttons and input areas on widgets\n- Selected items, including items in `st.multiselect` and the navigation menu\n- Code blocks and inline code\n- Dataframes (exterior)\n- Badges and Markdown-text backgrounds\n- Containers with borders, including expanders, forms, dialogs, popovers, and toasts\n- Tooltips, including tooltips within charts\n- Status and exception message blocks\n- Images, including `st.graphviz` and `st.pyplot`, which display as static images\n\n`buttonRadius` overrides `baseRadius` for buttons and `st.segmented_control`.\n\nA few elements are notably not fully affected by `baseRadius`. Interactive charts and videos, which have a more complex underlying HTML, will always have square corners. This includes `st.video`, `st.map`, and `st.pydeck_chart`. Conversely, `st.chat_input` and `st.audio_input` will always be fully rounded. Sub-elements like tooltips are still affected by `baseRadius`.\n\n#### Example 4: Border radius\n\nIn the following configuration example, the main body of the app uses a `\"full\"` (1rem) base radius, and the sidebar uses `\"none\"` (0rem). To better highlight this difference, the example includes contrasting primary and background colors.\n\n```toml\n[theme]\nbase=\"light\"\nprimaryColor=\"slateBlue\"\nbackgroundColor=\"mintCream\"\nsecondaryBackgroundColor=\"darkSeaGreen\"\nbaseRadius=\"full\"\n\n[theme.sidebar]\nbackgroundColor=\"aliceBlue\"\nsecondaryBackgroundColor=\"skyBlue\"\nbaseRadius=\"none\"\n```\n\n<Cloud name=\"doc-theming-color-baseradius\" height=\"500px\" />\n\n### `borderColor`, `dataframeBorderColor`, and `showWidgetBorder`\n\nStreamlit does not display borders for unfocused widgets by default (except for buttons). When a user focuses on a widget, Streamlit displays a border around the input area in your `primaryColor`. When the user removes focus, Streamlit hides the border.\n\nIf you set `showWidgetBorder=true`, Streamlit will display widget borders when the widget is not in focus. For those widgets, the border color is set by `borderColor`. If `borderColor` is not set, Streamlit infers a color by adding transparency to your `textColor`.\n\nThe following elements have borders that you can modify:\n\n- Containers with borders, including expanders, forms, dialogs, popovers, and toasts\n- The sidebar, including the right edge and the boundary below the navigation menu\n- Dataframes and tables\n- `st.tabs` (bottom border)\n- Buttons, including `st.button`, `st.pills`, and `st.segmented_control`\n- Borders on input regions\n\n`dataframeBorderColor` overrides `borderColor` for dataframes and tables.\n\n#### Example 5: Border color and visibility\n\nThe following configuration example uses a `\"mediumSlateBlue\"` border color throughout the app. In the sidebar, widget borders are shown. In the main body of the app, widget borders are not shown, and there is no border around the multiselect, text, or chat input regions except when they are in focus. However, many other elements, like buttons and dataframes, have always-visible borders.\n\n```toml\n[theme]\nbase=\"dark\"\nborderColor=\"mediumSlateBlue\"\nshowWidgetBorder=false\n\n[theme.sidebar]\nshowWidgetBorder=true\n```\n\n<Cloud name=\"doc-theming-color-bordercolor\" height=\"420px\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/configuration",
    "content": "# Configure and customize your app\n\n<TileContainer>\n\n<RefCard href=\"/develop/concepts/configuration/options\">\n\n<h5>Configuration options</h5>\n\nUnderstand the types of options available to you through Streamlit configuration.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/configuration/https-support\">\n\n<h5>HTTPS support</h5>\n\nUnderstand how to configure SSL and TLS for your Streamlit app.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/configuration/serving-static-files\">\n\n<h5>Static file serving</h5>\n\nUnderstand how to host files alongside your app to make them accessible by URL. Use this if you want to point to files with raw HTML.\n\n</RefCard>\n\n</TileContainer>\n\n## Theming\n\n<TileContainer>\n\n<RefCard href=\"/develop/concepts/configuration/theming\">\n\n<h5>Theming</h5>\n\nUnderstand how you can use theming configuration options to customize the appearance of your app.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/configuration/theming-customize-colors-and-borders\">\n\n<h5>Customize colors and borders</h5>\n\nUnderstand the configuration options for customizing your app's color scheme.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/configuration/theming-customize-fonts\">\n\n<h5>Customize fonts</h5>\n\nUnderstand the configuration options for customizing your app's font.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview",
    "content": "# Overview of multipage apps\n\nStreamlit provides two built-in mechanisms for creating multipage apps. The simplest method is to use a `pages/` directory. However, the preferred and more customizable method is to use `st.navigation`.\n\n## `st.Page` and `st.navigation`\n\nIf you want maximum flexibility in defining your multipage app, we recommend using `st.Page` and `st.navigation`. With `st.Page` you can declare any Python file or `Callable` as a page in your app. Furthermore, you can define common elements for your pages in your entrypoint file (the file you pass to `streamlit run`). With these methods, your entrypoint file becomes like a picture frame shared by all your pages.\n\nYou must include `st.navigation` in your entrypoint file to configure your app's navigation menu. This is also how your entrypoint file serves as the router between your pages.\n\n## `pages/` directory\n\nIf you're looking for a quick and simple solution, just place a `pages/` directory next to your entrypoint file. For every Python file in your `pages/` directory, Streamlit will create an additional page for your app. Streamlit determines the page labels and URLs from the file name and automatically populates a navigation menu at the top of your app's sidebar.\n\n```\nyour_working_directory/\n├── pages/\n│   ├── a_page.py\n│   └── another_page.py\n└── your_homepage.py\n```\n\nStreamlit determines the page order in navigation from the filenames. You can use numerical prefixes in the filenames to adjust page order. For more information, see [How pages are sorted in the sidebar](/develop/concepts/multipage-apps/pages-directory#how-pages-are-sorted-in-the-sidebar). If you want to customize your navigation menu with this option, you can deactivate the default navigation through [configuration](/develop/api-reference/configuration/config.toml) (`client.showSidebarNavigation = false`). Then, you can use `st.page_link` to manually contruct a custom navigation menu. With `st.page_link`, you can change the page label and icon in your navigation menu, but you can't change the URLs of your pages.\n\n## Page terminology\n\nA page has four identifying pieces as follows:\n\n- **Page source**: This is a Python file or callable function with the page's source code.\n- **Page label**: This is how the page is identified within the navigation menu. See <i style={{ verticalAlign: \"-.25em\" }} class=\"material-icons-sharp\">looks_one</i>.\n- **Page title**: This is the content of the HTML `<title>` element and how the page is identified within a browser tab. See <i style={{ verticalAlign: \"-.25em\" }} class=\"material-icons-sharp\">looks_two</i>.\n- **Page URL pathname**: This is the relative path of the page from the root URL of the app. See <i style={{ verticalAlign: \"-.25em\" }} class=\"material-icons-sharp\">looks_3</i>.\n\nAdditionly, a page can have two icons as follows:\n\n- **Page favicon**: This is the icon next to your page title within a browser tab. See <i style={{ verticalAlign: \"-.25em\" }} class=\"material-icons-sharp\">looks_4</i>.\n- **Page icon**: This is the icon next to your page label in the navigation menu. See <i style={{ verticalAlign: \"-.25em\" }} class=\"material-icons-sharp\">looks_5</i>.\n\nTypically, the page icon and favicon are the same, but it's possible make them different.\n\n<div style={{ maxWidth: '564px', margin: 'auto' }}>\n<Image caption=\"1. Page label, 2.Page titles, 3. Page URL pathname, 4.Page favicon, 5. Page icon\" src=\"/images/page_parts.jpg\" frame />\n</div>\n\n## Automatic page labels and URLs\n\nIf you use `st.Page` without declaring the page title or URL pathname, Streamlit falls back on automatically determining the page label, title, and URL pathname in the same manner as when you use a `pages/` directory with the default navigation menu. This section describes this naming convention which is shared between the two approaches to multipage apps.\n\n### Parts of filenames and callables\n\nFilenames are composed of four different parts as follows (in order):\n\n1. `number`: A non-negative integer.\n2. `separator`: Any combination of underscore (`\"_\"`), dash (`\"-\"`), and space (`\" \"`).\n3. `identifier`: Everything up to, but not including, `\".py\"`.\n4. `\".py\"`\n\nFor callables, the function name is the `identifier`, including any leading or trailing underscores.\n\n### How Streamlit converts filenames into labels and titles\n\nWithin the navigation menu, Streamlit displays page labels and titles as follows:\n\n1. If your page has an `identifier`, Streamlit displays the `identifier`. Any underscores within the page's `identifier` are treated as spaces. Therefore, leading and trailing underscores are not shown. Sequential underscores appear as a single space.\n2. Otherwise, if your page has a `number` but does not have an `identifier`, Streamlit displays the `number`, unmodified. Leading zeros are included, if present.\n3. Otherwise, if your page only has a `separator` with no `number` and no `identifier`, Streamlit will not display the page in the sidebar navigation.\n\nThe following filenames and callables would all display as \"Awesome page\" in the sidebar navigation.\n\n- `\"Awesome page.py\"`\n- `\"Awesome_page.py\"`\n- `\"02Awesome_page.py\"`\n- `\"--Awesome_page.py\"`\n- `\"1_Awesome_page.py\"`\n- `\"33 - Awesome page.py\"`\n- `Awesome_page()`\n- `_Awesome_page()`\n- `__Awesome_page__()`\n\n### How Streamlit converts filenames into URL pathnames\n\nYour app's homepage is associated to the root URL of app. For all other pages, their `identifier` or `number` becomes their URL pathname as follows:\n\n- If your page has an `identifier` that came from a filename, Streamlit uses the `identifier` with one modification. Streamlit condenses each consecutive grouping of spaces (`\" \"`) and underscores (`\"_\"`) to a single underscore.\n- Otherwise, if your page has an `identifier` that came from the name of a callable, Streamlit uses the `identifier` unmodified.\n- Otherwise, if your page has a `number` but does not have an `identifier`, Streamlit uses the `number`. Leading zeros are included, if present.\n\nFor each filename in the list above, the URL pathname would be \"Awesome_page\" relative to the root URL of the app. For example, if your app was running on `localhost` port `8501`, the full URL would be `localhost:8501/awesome_page`. For the last two callables, however, the pathname would include the leading and trailing underscores to match the callable name exactly.\n\n## Navigating between pages\n\nThe primary way users navigate between pages is through the navigation widget. Both methods for defining multipage apps include a default navigation menu that appears in the sidebar. When a user clicks this navigation widget, the app reruns and loads the selected page. Optionally, you can hide the default navigation UI and build your own with [`st.page_link`](/develop/api-reference/widgets/st.page_link). For more information, see [Build a custom navigation menu with `st.page_link`](/develop/tutorials/multipage/st.page_link-nav).\n\nIf you need to programmatically switch pages, use [`st.switch_page`](/develop/api-reference/navigation/st.switch_page).\n\nUsers can also navigate between pages using URLs as noted above. When multiple files have the same URL pathname, Streamlit picks the first one (based on the ordering in the navigation menu. Users can view a specific page by visiting the page's URL.\n\n<Important>\n    Navigating between pages by URL creates a new browser session. In particular, clicking markdown links to other pages resets ``st.session_state``. In order to retain values in ``st.session_state``, handle page switching through Streamlit navigation commands and widgets, like ``st.navigation``, ``st.switch_page``, ``st.page_link``, and the built-in navigation menu.\n</Important>\n\nIf a user tries to access a URL for a page that does not exist, they will see a modal like the one below, saying \"Page not found.\"\n\n<div style={{ maxWidth: '75%', margin: 'auto' }}>\n<Image alt=\"Page not found\" src=\"/images/mpa-page-not-found.png\" />\n</div>"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/widgets",
    "content": "# Working with widgets in multipage apps\n\nWhen you create a widget in a Streamlit app, Streamlit generates a widget ID and uses it to make your widget stateful. As your app reruns with user interaction, Streamlit keeps track of the widget's value by associating its value to its ID. In particular, a widget's ID depends on the page where it's created. If you define an identical widget on two different pages, then the widget will reset to its default value when you switch pages.\n\nThis guide explains three strategies to deal with the behavior if you'd like to have a widget remain stateful across all pages. If don't want a widget to appear on all pages, but you do want it to remain stateful when you navigate away from its page (and then back), Options 2 and 3 can be used. For detailed information about these strategies, see [Understanding widget behavior](/develop/concepts/architecture/widget-behavior).\n\n## Option 1 (preferred): Execute your widget command in your entrypoint file\n\nWhen you define your multipage app with `st.Page` and `st.navigation`, your entrypoint file becomes a frame of common elements around your pages. When you execute a widget command in your entrypoint file, Streamlit associates the widget to your entrypoint file instead of a particular page. Since your entrypoint file is executed in every app rerun, any widget in your entrypoint file will remain stateful as your users switch between pages.\n\nThis method does not work if you define your app with the `pages/` directory.\n\nThe following example includes a selectbox and slider in the sidebar that are rendered and stateful on all pages. The widgets each have an assigned key so you can access their values through Session State within a page.\n\n**Directory structure:**\n\n```\nyour-repository/\n├── page_1.py\n├── page_2.py\n└── streamlit_app.py\n```\n\n**`streamlit_app.py`:**\n\n```python\nimport streamlit as st\n\npg = st.navigation([st.Page(\"page_1.py\"), st.Page(\"page_2.py\")])\n\nst.sidebar.selectbox(\"Group\", [\"A\",\"B\",\"C\"], key=\"group\")\nst.sidebar.slider(\"Size\", 1, 5, key=\"size\")\n\npg.run()\n```\n\n## Option 2: Save your widget values into a dummy key in Session State\n\nIf you want to navigate away from a widget and return to it while keeping its value, or if you want to use the same widget on multiple pages, use a separate key in `st.session_state` to save the value independently from the widget. In this example, a temporary key is used with a widget. The temporary key uses an underscore prefix. Hence, `\"_my_key\"` is used as the widget key, but the data is copied to `\"my_key\"` to preserve it between pages.\n\n```python\nimport streamlit as st\n\ndef store_value():\n    # Copy the value to the permanent key\n    st.session_state[\"my_key\"] = st.session_state[\"_my_key\"]\n\n# Copy the saved value to the temporary key\nst.session_state[\"_my_key\"] = st.session_state[\"my_key\"]\nst.number_input(\"Number of filters\", key=\"_my_key\", on_change=store_value)\n```\n\nIf this is functionalized to work with multiple widgets, it could look something like this:\n\n```python\nimport streamlit as st\n\ndef store_value(key):\n    st.session_state[key] = st.session_state[\"_\"+key]\ndef load_value(key):\n    st.session_state[\"_\"+key] = st.session_state[key]\n\nload_value(\"my_key\")\nst.number_input(\"Number of filters\", key=\"_my_key\", on_change=store_value, args=[\"my_key\"])\n```\n\n## Option 3: Interrupt the widget clean-up process\n\nWhen Streamlit gets to the end of an app run, it will delete the data for any widgets that were not rendered. This includes data for any widget not associated to the current page. However, if you re-save a key-value pair in an app run, Streamlit will not associate the key-value pair to any widget until you execute a widget command again with that key.\n\nAs a result, if you have the following code at the top of every page, any widget with the key `\"my_key\"` will retain its value wherever it's rendered (or not). Alternatively, if you are using `st.navigation` and `st.Page`, you can include this once in your entrypoint file before executing your page.\n\n```python\nif \"my_key\" in st.session_state:\n    st.session_state.my_key = st.session_state.my_key\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/page-and-navigation",
    "content": "# Define multipage apps with `st.Page` and `st.navigation`\n\n`st.Page` and `st.navigation` are the preferred commands for defining multipage apps. With these commands, you have flexibility to organize your project files and customize your navigation menu. Simply initialize `StreamlitPage` objects with `st.Page`, then pass those `StreamlitPage` objects to `st.navigation` in your entrypoint file (i.e. the file you pass to `streamlit run`).\n\nThis page assumes you understand the [Page terminology](/develop/concepts/multipage-apps/overview#page-terminology) presented in the overview.\n\n## App structure\n\nWhen using `st.navigation`, your entrypoint file acts like a page router. Each page is a script executed from your entrypoint file. You can define a page from a Python file or function. If you include elements or widgets in your entrypoint file, they become common elements between your pages. In this case, you can think of your entrypoint file like a picture frame around each of your pages.\n\nYou can only call `st.navigation` once per app run and you must call it from your entrypoint file. When a user selects a page in navigation (or is routed through a command like `st.switch_page`), `st.navigation` returns the selected page. You must manually execute that page with the `.run()` method. The following example is a two-page app where each page is defined by a Python file.\n\n**Directory structure:**\n\n```\nyour-repository/\n├── page_1.py\n├── page_2.py\n└── streamlit_app.py\n```\n\n**`streamlit_app.py`:**\n\n```python\nimport streamlit as st\n\npg = st.navigation([st.Page(\"page_1.py\"), st.Page(\"page_2.py\")])\npg.run()\n```\n\n## Defining pages\n\n`st.Page` lets you define a page. The first and only required argument defines your page source, which can be a Python file or function. When using Python files, your pages may be in a subdirectory (or superdirectory). The path to your page file must always be relative to the entrypoint file. Once you create your page objects, pass them to `st.navigation` to register them as pages in your app.\n\nIf you don't define your page title or URL pathname, Streamlit will infer them from the file or function name as described in the multipage apps [Overview](/develop/concepts/multipage-apps/overview#automatic-page-labels-and-urls). However, `st.Page` lets you configure them manually. Within `st.Page`, Streamlit uses `title` to set the page label and title. Additionaly, Streamlit uses `icon` to set the page icon and favicon. If you want to have a different page title and label, or different page icon and favicon, you can use `st.set_page_config` to change the page title and/or favicon. Just call `st.set_page_config` in your entrypoint file or in your page script. You can call `st.set_page_config` multiple times to additively configure your page. Use `st.set_page_config` in your entrypoint file to declare a default configuration, and call it within page scripts to override that default.\n\nThe following example uses `st.set_page_config` to set a page title and favicon consistently across pages. Each page will have its own label and icon in the navigation menu, but the browser tab will show a consistent title and favicon on all pages.\n\n**Directory structure:**\n\n```\nyour-repository/\n├── create.py\n├── delete.py\n└── streamlit_app.py\n```\n\n**`streamlit_app.py`:**\n\n```python\nimport streamlit as st\n\ncreate_page = st.Page(\"create.py\", title=\"Create entry\", icon=\":material/add_circle:\")\ndelete_page = st.Page(\"delete.py\", title=\"Delete entry\", icon=\":material/delete:\")\n\npg = st.navigation([create_page, delete_page])\nst.set_page_config(page_title=\"Data manager\", page_icon=\":material/edit:\")\npg.run()\n```\n\n<div style={{ maxWidth: '564px', margin: 'auto' }}>\n<Image src=\"/images/mpa-v2-use-set-page-config.jpg\" frame />\n</div>\n\n## Customizing navigation\n\nYou can display your navigation menu in the sidebar or along the top of your app using the `position` parameter in `st.navigation`. If you want to group your pages into sections, `st.navigation` lets you insert headers in the sidebar navigation or drop-down groups in the top navigation. Alternatively, you can disable the default navigation widget and build a custom navigation menu with `st.page_link`.\n\nAdditionally, you can dynamically change which pages you pass to `st.navigation`. However, only the page returned by `st.navigation` accepts the `.run()` method. If a user enters a URL with a pathname, and that pathname is not associated to a page in `st.navigation` (on first run), Streamlit will throw a \"Page not found\" error and redirect them to the default page.\n\n### Adding section headers\n\nThe simplest way to customize your navigation menu is to organize the pages within `st.navigation`. You can sort or group pages, as well as remove any pages you don't want the user to access. This is a convenient way to handle user permissions. However, you can't hide a page in navigation while keeping it accessible through a direct URL. If you need to hide a page while keeping it accessible, you'll need to hide the default navigation menu and build a navigation menu with commands like `st.page_link`.\n\nThe following example creates two menu states. When a user starts a new session, they are not logged in. In this case, the only available page is the login page. If a user tries to access another page by URL, it will create a new session and Streamlit will not recognize the page. The user will be diverted to the login page. However, after a user logs in, they will see a navigation menu with three sections and be directed to the dashboard as the app's default page (i.e. homepage).\n\n**Directory structure:**\n\n```\nyour-repository/\n├── reports\n│   ├── alerts.py\n│   ├── bugs.py\n│   └── dashboard.py\n├── tools\n│   ├── history.py\n│   └── search.py\n└── streamlit_app.py\n```\n\n**`streamlit_app.py`:**\n\n```python\nimport streamlit as st\n\nif \"logged_in\" not in st.session_state:\n    st.session_state.logged_in = False\n\ndef login():\n    if st.button(\"Log in\"):\n        st.session_state.logged_in = True\n        st.rerun()\n\ndef logout():\n    if st.button(\"Log out\"):\n        st.session_state.logged_in = False\n        st.rerun()\n\nlogin_page = st.Page(login, title=\"Log in\", icon=\":material/login:\")\nlogout_page = st.Page(logout, title=\"Log out\", icon=\":material/logout:\")\n\ndashboard = st.Page(\n    \"reports/dashboard.py\", title=\"Dashboard\", icon=\":material/dashboard:\", default=True\n)\nbugs = st.Page(\"reports/bugs.py\", title=\"Bug reports\", icon=\":material/bug_report:\")\nalerts = st.Page(\n    \"reports/alerts.py\", title=\"System alerts\", icon=\":material/notification_important:\"\n)\n\nsearch = st.Page(\"tools/search.py\", title=\"Search\", icon=\":material/search:\")\nhistory = st.Page(\"tools/history.py\", title=\"History\", icon=\":material/history:\")\n\nif st.session_state.logged_in:\n    pg = st.navigation(\n        {\n            \"Account\": [logout_page],\n            \"Reports\": [dashboard, bugs, alerts],\n            \"Tools\": [search, history],\n        }\n    )\nelse:\n    pg = st.navigation([login_page])\n\npg.run()\n```\n\n<div style={{ maxWidth: '564px', margin: 'auto' }}>\n<Image src=\"/images/mpa-v2-page-sections.jpg\" frame />\n</div>\n\n### Dynamically changing the available pages\n\nYou can change what pages are available to a user by updating the list of pages in `st.navigation`. This is a convenient way to handle role-based or user-based access to certain pages. For more information, check out our tutorial, [Create a dynamic navigation menu](/develop/tutorials/multipage/dynamic-navigation).\n\n### Building a custom navigation menu\n\nIf you want more control over your navigation menu, you can hide the default navigation and build your own. You can hide the default navigation by including `position=\"hidden\"` in your `st.navigation` command. If you want a page to be available to a user without showing it in the navigation menu, you must use this method. A user can't be routed to a page if the page isn't included in `st.navigation`. This applies to navigation by URL as well as commands like `st.switch_page` and `st.page_link`."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/pages-directory",
    "content": "# Creating multipage apps using the `pages/` directory\n\nThe most customizable method for declaring multipage apps is using [Page and navigation](/develop/concepts/multipage-apps/page-and-navigation). However, Streamlit also provides a frictionless way to create multipage apps where pages are automatically recognized and shown in a navigation widget inside your app's sidebar. This method uses the `pages/` directory.\n\nThis page assumes you understand the [Page terminology](/develop/concepts/multipage-apps/overview#page-terminology) presented in the overview.\n\n## App structure\n\nWhen you use the `pages/` directory, Streamlit identifies pages in your multipage app by directory structure and filenames. Your entrypoint file (the file you pass to `streamlit run`), is your app's homepage. When you have a `pages/` directory next to your entrypoint file, Streamlit will identify each Python file within it as a page. The following example has three pages. `your_homepage.py` is the entrypoint file and homepage.\n\n```\nyour_working_directory/\n├── pages/\n│   ├── a_page.py\n│   └── another_page.py\n└── your_homepage.py\n```\n\nRun your multipage app just like you would for a single-page app. Pass your entrypoint file to `streamlit run`.\n\n```\nstreamlit run your_homepage.py\n```\n\nOnly `.py` files in the `pages/` directory will be identified as pages. Streamlit ignores all other files in the `pages/` directory and its subdirectories. Streamlit also ignores Python files in subdirectories of `pages/`.\n\n<Important>\n\nIf you call `st.navigation` in your app (in any session), Streamlit will switch to using the newer, Page-and-navigation multipage structure. In this case, the `pages/` directory will be ignored across all sessions. You will not be able to revert back to the `pages/` directory unless you restart you app.\n\n</Important>\n\n### How pages are sorted in the sidebar\n\nSee the overview to understand how Streamlit assigns [Automatic page labels and URLs](/develop/concepts/multipage-apps/overview#automatic-page-labels-and-urls) based on the `number`, `separator`, `identifier`, and `\".py\"` extension that constitute a filename.\n\nThe entrypoint file is always displayed first. The remaining pages are sorted as follows:\n\n- Files that have a `number` appear before files without a `number`.\n- Files are sorted based on the `number` (if any), followed by the `label` (if any).\n- When files are sorted, Streamlit treats the `number` as an actual number rather than a string. So `03` is the same as `3`.\n\nThis table shows examples of filenames and their corresponding labels, sorted by the order in which they appear in the sidebar.\n\n**Examples**:\n\n| **Filename**              | **Rendered label** |\n| :------------------------ | :----------------- |\n| `1 - first page.py`       | first page         |\n| `12 monkeys.py`           | monkeys            |\n| `123.py`                  | 123                |\n| `123_hello_dear_world.py` | hello dear world   |\n| `_12 monkeys.py`          | 12 monkeys         |\n\n<Tip>\n\nEmojis can be used to make your page names more fun! For example, a file named `🏠_Home.py` will create a page titled \"🏠 Home\" in the sidebar. When adding emojis to filenames, it’s best practice to include a numbered prefix to make autocompletion in your terminal easier. Terminal-autocomplete can get confused by unicode (which is how emojis are represented).\n\n</Tip>\n\n## Notes and limitations\n\n- Pages support run-on-save.\n  - When you update a page while your app is running, this causes a rerun for users currently viewing that exact page.\n  - When you update a page while your app is running, the app will not automatically rerun for users currently viewing a different page.\n- While your app is running, adding or deleting a page updates the sidebar navigation immediately.\n- [`st.set_page_config`](/develop/api-reference/configuration/st.set_page_config) works at the page level.\n  - When you set `title` or `favicon` using `st.set_page_config`, this applies to the current page only.\n  - When you set `layout` using `st.set_page_config`, the setting will remain for the session until changed by another call to `st.set_page_config`. If you use `st.set_page_config` to set `layout`, it's recommended to call it on _all_ pages.\n- Pages share the same Python modules globally:\n\n  ```python\n  # page1.py\n  import foo\n  foo.hello = 123\n\n  # page2.py\n  import foo\n  st.write(foo.hello)  # If page1 already executed, this writes 123\n  ```\n\n- Pages share the same [st.session_state](/develop/concepts/architecture/session-state):\n\n  ```python\n  # page1.py\n  import streamlit as st\n  if \"shared\" not in st.session_state:\n     st.session_state[\"shared\"] = True\n\n  # page2.py\n  import streamlit as st\n  st.write(st.session_state[\"shared\"]) # If page1 already executed, this writes True\n  ```\n\nYou now have a solid understanding of multipage apps. You've learned how to structure apps, define pages, and navigate between pages in the user interface. It's time to [create your first multipage app](/get-started/tutorials/create-a-multipage-app)! 🥳"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/multipage-apps",
    "content": "# Multipage apps\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/concepts/multipage-apps/overview\">\n\n<h5>Overview of multipage apps</h5>\n\nStreamlit provides multiple ways to define multipage apps. Understand the terminology and basic comparison between methods.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/multipage-apps/page-and-navigation\">\n\n<h5>Define multipage apps with <code>st.Page</code> and <code>st.navigation</code></h5>\n\nLearn about the preferred method for defining multipage apps. `st.Page` and `st.navigation` give you flexibility to organize your project directory and label your pages as you please.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/multipage-apps/pages-directory\">\n\n<h5>Creating multipage apps using the <code>pages/</code> directory</h5>\n\nDefine your multipage apps through directory structure. Place additional Python files in a `pages/` directory alongside your entrypoint file and pages are automatically shown in a navigation widget inside your app's sidebar.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/multipage-apps/widgets\">\n\n<h5>Working with widgets in multipage apps</h5>\n\nUnderstand how widget identity is tied to pages. Learn strategies to get the behavior you want out of widgets.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/custom-components/limitations",
    "content": "# Limitations of custom components\n\n## How do Streamlit Components differ from functionality provided in the base Streamlit package?\n\n- Streamlit Components are wrapped up in an iframe, which gives you the ability to do whatever you want (within the iframe) using any web technology you like.\n\n## What types of things aren't possible with Streamlit Components?\n\nBecause each Streamlit Component gets mounted into its own sandboxed iframe, this implies a few limitations on what is possible with Components:\n\n- **Can't communicate with other Components**: Components can’t contain (or otherwise communicate with) other components, so Components cannot be used to build something like a grid layout.\n- **Can't modify CSS**: A Component can’t modify the CSS that the rest of the Streamlit app uses, so you can't create something to put the app in dark mode, for example.\n- **Can't add/remove elements**: A Component can’t add or remove other elements of a Streamlit app, so you couldn't make something to remove the app menu, for example.\n\n## My Component seems to be blinking/stuttering...how do I fix that?\n\nCurrently, no automatic debouncing of Component updates is performed within Streamlit. The Component creator themselves can decide to rate-limit the updates they send back to Streamlit."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/custom-components/publish",
    "content": "# Publish a Component\n\n## Publish to PyPI\n\nPublishing your Streamlit Component to [PyPI](https://pypi.org/) makes it easily accessible to Python users around the world. This step is completely optional, so if you won’t be releasing your component publicly, you can skip this section!\n\n<Note>\n\nFor [static Streamlit Components](/develop/concepts/custom-components/intro#create-a-static-component), publishing a Python package to PyPI follows the same steps as the\n[core PyPI packaging instructions](https://packaging.python.org/tutorials/packaging-projects/). A static Component likely contains only Python code, so once you have your\n[setup.py](https://packaging.python.org/tutorials/packaging-projects/#creating-setup-py) file correct and\n[generate your distribution files](https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives), you're ready to\n[upload to PyPI](https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives).\n\n[Bi-directional Streamlit Components](/develop/concepts/custom-components/intro#create-a-bi-directional-component) at minimum include both Python and JavaScript code, and as such, need a bit more preparation before they can be published on PyPI. The remainder of this page focuses on the bi-directional Component preparation process.\n\n</Note>\n\n### Prepare your Component\n\nA bi-directional Streamlit Component varies slightly from a pure Python library in that it must contain pre-compiled frontend code. This is how base Streamlit works as well; when you `pip install streamlit`, you are getting a Python library where the HTML and frontend code contained within it have been compiled into static assets.\n\nThe [component-template](https://github.com/streamlit/component-template) GitHub repo provides the folder structure necessary for PyPI publishing. But before you can publish, you'll need to do a bit of housekeeping:\n\n1. Give your Component a name, if you haven't already\n   - Rename the `template/my_component/` folder to `template/<component name>/`\n   - Pass your component's name as the the first argument to `declare_component()`\n2. Edit `MANIFEST.in`, change the path for recursive-include from `package/frontend/build *` to `<component name>/frontend/build *`\n3. Edit `setup.py`, adding your component's name and other relevant info\n4. Create a release build of your frontend code. This will add a new directory, `frontend/build/`, with your compiled frontend in it:\n\n   ```bash\n   cd frontend\n   npm run build\n   ```\n\n5. Pass the build folder's path as the `path` parameter to `declare_component`. (If you're using the template Python file, you can set `_RELEASE = True` at the top of the file):\n\n   ```python\n      import streamlit.components.v1 as components\n\n      # Change this:\n      # component = components.declare_component(\"my_component\", url=\"http://localhost:3001\")\n\n      # To this:\n      parent_dir = os.path.dirname(os.path.abspath(__file__))\n      build_dir = os.path.join(parent_dir, \"frontend/build\")\n      component = components.declare_component(\"new_component_name\", path=build_dir)\n   ```\n\n### Build a Python wheel\n\nOnce you've changed the default `my_component` references, compiled the HTML and JavaScript code and set your new component name in `components.declare_component()`, you're ready to build a Python wheel:\n\n1. Make sure you have the latest versions of setuptools, wheel, and twine\n\n2. Create a wheel from the source code:\n\n   ```bash\n    # Run this from your component's top-level directory; that is,\n    # the directory that contains `setup.py`\n    python setup.py sdist bdist_wheel\n   ```\n\n### Upload your wheel to PyPI\n\nWith your wheel created, the final step is to upload to PyPI. The instructions here highlight how to upload to [Test PyPI](https://test.pypi.org/), so that you can learn the mechanics of the process without worrying about messing anything up. Uploading to PyPI follows the same basic procedure.\n\n1. Create an account on [Test PyPI](https://test.pypi.org/) if you don't already have one\n\n   - Visit [https://test.pypi.org/account/register/](https://test.pypi.org/account/register/) and complete the steps\n\n   - Visit [https://test.pypi.org/manage/account/#api-tokens](https://test.pypi.org/manage/account/#api-tokens) and create a new API token. Don’t limit the token scope to a particular project, since you are creating a new project. Copy your token before closing the page, as you won’t be able to retrieve it again.\n\n2. Upload your wheel to Test PyPI. `twine` will prompt you for a username and password. For the username, use **\\_\\_token\\_\\_**. For the password, use your token value from the previous step, including the `pypi-` prefix:\n\n   ```bash\n   python -m twine upload --repository testpypi dist/*\n   ```\n\n3. Install your newly-uploaded package in a new Python project to make sure it works:\n\n   ```bash\n    python -m pip install --index-url https://test.pypi.org/simple/ --no-deps example-pkg-YOUR-USERNAME-HERE\n   ```\n\nIf all goes well, you're ready to upload your library to PyPI by following the instructions at [https://packaging.python.org/tutorials/packaging-projects/#next-steps](https://packaging.python.org/tutorials/packaging-projects/#next-steps).\n\nCongratulations, you've created a publicly-available Streamlit Component!\n\n## Promote your Component!\n\nWe'd love to help you share your Component with the Streamlit Community! To share it:\n\n1. If you host your code on GitHub, add the tag `streamlit-component`, so that it's listed in the [GitHub **streamlit-component** topic](https://github.com/topics/streamlit-component):\n\n   <Image caption=\"Add the streamlit-component tag to your GitHub repo\" src=\"/images/component-tag.gif\" />\n\n2. Post on the Streamlit Forum in [Show the Community!](https://discuss.streamlit.io/c/streamlit-examples/9). Use a post title similar to \"New Component: `<your component name>`, a new way to do X\".\n3. Add your component to the [Community Component Tracker](https://discuss.streamlit.io/t/streamlit-components-community-tracker/4634).\n4. Tweet us at [@streamlit](https://twitter.com/streamlit) so that we can retweet your announcement for you.\n\nOur [Components Gallery](https://streamlit.io/components) is updated approximately every month. Follow the above recommendations to maximize the liklihood of your component landing in our Components Gallery. Community Components featured in our docs are hand-curated on a less-regular basis. Popular components with many stars and good documentation are more likely to be selected."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro",
    "content": "# Intro to custom components\n\nThe first step in developing a Streamlit Component is deciding whether to create a static component (i.e. rendered once, controlled by Python) or to create a bi-directional component that can communicate from Python to JavaScript and back.\n\n## Create a static component\n\nIf your goal in creating a Streamlit Component is solely to display HTML code or render a chart from a Python visualization library, Streamlit provides two methods that greatly simplify the process: `components.html()` and `components.iframe()`.\n\nIf you are unsure whether you need bi-directional communication, **start here first**!\n\n### Render an HTML string\n\nWhile [`st.text`](/develop/api-reference/text/st.text), [`st.markdown`](/develop/api-reference/text/st.markdown) and [`st.write`](/develop/api-reference/write-magic/st.write) make it easy to write text to a Streamlit app, sometimes you'd rather implement a custom piece of HTML. Similarly, while Streamlit natively supports [many charting libraries](/develop/api-reference/charts#chart-elements), you may want to implement a specific HTML/JavaScript template for a new charting library. [`components.html`](/develop/api-reference/custom-components/st.components.v1.html) works by giving you the ability to embed an iframe inside of a Streamlit app that contains your desired output.\n\n**Example**\n\n```python\nimport streamlit as st\nimport streamlit.components.v1 as components\n\n# bootstrap 4 collapse example\ncomponents.html(\n    \"\"\"\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script>\n    <div id=\"accordion\">\n      <div class=\"card\">\n        <div class=\"card-header\" id=\"headingOne\">\n          <h5 class=\"mb-0\">\n            <button class=\"btn btn-link\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n            Collapsible Group Item #1\n            </button>\n          </h5>\n        </div>\n        <div id=\"collapseOne\" class=\"collapse show\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">\n          <div class=\"card-body\">\n            Collapsible Group Item #1 content\n          </div>\n        </div>\n      </div>\n      <div class=\"card\">\n        <div class=\"card-header\" id=\"headingTwo\">\n          <h5 class=\"mb-0\">\n            <button class=\"btn btn-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n            Collapsible Group Item #2\n            </button>\n          </h5>\n        </div>\n        <div id=\"collapseTwo\" class=\"collapse\" aria-labelledby=\"headingTwo\" data-parent=\"#accordion\">\n          <div class=\"card-body\">\n            Collapsible Group Item #2 content\n          </div>\n        </div>\n      </div>\n    </div>\n    \"\"\",\n    height=600,\n)\n```\n\n### Render an iframe URL\n\n[`components.iframe`](/develop/api-reference/custom-components/st.components.v1.iframe) is similar in features to `components.html`, with the difference being that `components.iframe` takes a URL as its input. This is used for situations where you want to include an entire page within a Streamlit app.\n\n**Example**\n\n```python\nimport streamlit as st\nimport streamlit.components.v1 as components\n\n# embed streamlit docs in a streamlit app\ncomponents.iframe(\"https://example.com\", height=500)\n```\n\n## Create a bi-directional component\n\nA bi-directional Streamlit Component has two parts:\n\n1. A **frontend**, which is built out of HTML and any other web tech you like (JavaScript, React, Vue, etc.), and gets rendered in Streamlit apps via an iframe tag.\n2. A **Python API**, which Streamlit apps use to instantiate and talk to that frontend\n\nTo make the process of creating bi-directional Streamlit Components easier, we've created a React template and a TypeScript-only template in the [Streamlit Component-template GitHub repo](https://github.com/streamlit/component-template). We also provide some [example Components](https://github.com/streamlit/component-template/tree/master/examples) in the same repo.\n\n### Development Environment Setup\n\nTo build a Streamlit Component, you need the following installed in your development environment:\n\n- Python 3.9 - Python 3.13\n- Streamlit\n- [nodejs](https://nodejs.org/en/)\n- [npm](https://www.npmjs.com/) or [yarn](https://yarnpkg.com/)\n\nClone the [component-template GitHub repo](https://github.com/streamlit/component-template), then decide whether you want to use the React.js ([\"template\"](https://github.com/streamlit/component-template/tree/master/template)) or plain TypeScript ([\"template-reactless\"](https://github.com/streamlit/component-template/tree/master/template-reactless)) template.\n\n1. Initialize and build the component template frontend from the terminal:\n\n   ```bash\n   # React template\n   template/my_component/frontend\n   npm install    # Initialize the project and install npm dependencies\n   npm run start  # Start the Vite dev server\n\n   # or\n\n   # TypeScript-only template\n   template-reactless/my_component/frontend\n   npm install    # Initialize the project and install npm dependencies\n   npm run start  # Start the Vite dev server\n   ```\n\n2. _From a separate terminal_, run the Streamlit app (Python) that declares and uses the component:\n\n   ```bash\n   # React template\n   cd template\n   . venv/bin/activate # or similar to activate the venv/conda environment where Streamlit is installed\n   pip install -e . # install template as editable package\n   streamlit run my_component/example.py # run the example\n\n   # or\n\n   # TypeScript-only template\n   cd template-reactless\n   . venv/bin/activate # or similar to activate the venv/conda environment where Streamlit is installed\n   pip install -e . # install template as editable package\n   streamlit run my_component/example.py # run the example\n   ```\n\nAfter running the steps above, you should see a Streamlit app in your browser that looks like this:\n\n![Streamlit Component Example App](/images/component_demo_example.png)\n\nThe example app from the template shows how bi-directional communication is implemented. The Streamlit Component displays a button (`Python → JavaScript`), and the end-user can click the button. Each time the button is clicked, the JavaScript front-end increments the counter value and passes it back to Python (`JavaScript → Python`), which is then displayed by Streamlit (`Python → JavaScript`).\n\n### Frontend\n\nBecause each Streamlit Component is its own webpage that gets rendered into an `iframe`, you can use just about any web tech you'd like to create that web page. We provide two templates to get started with in the Streamlit [Components-template GitHub repo](https://github.com/streamlit/component-template/); one of those templates uses [React](https://reactjs.org/) and the other does not.\n\n<Note>\n\nEven if you're not already familiar with React, you may still want to check out the React-based\ntemplate. It handles most of the boilerplate required to send and receive data from Streamlit, and\nyou can learn the bits of React you need as you go.\n\nIf you'd rather not use React, please read this section anyway! It explains the fundamentals of\nStreamlit ↔ Component communication.\n</Note>\n\n#### React\n\nThe React-based template is in `template/my_component/frontend/src/MyComponent.tsx`.\n\n- `MyComponent.render()` is called automatically when the component needs to be re-rendered (just like in any React app)\n- Arguments passed from the Python script are available via the `this.props.args` dictionary:\n\n```python\n# Send arguments in Python:\nresult = my_component(greeting=\"Hello\", name=\"Streamlit\")\n```\n\n```javascript\n// Receive arguments in frontend:\nlet greeting = this.props.args[\"greeting\"]; // greeting = \"Hello\"\nlet name = this.props.args[\"name\"]; // name = \"Streamlit\"\n```\n\n- Use `Streamlit.setComponentValue()` to return data from the component to the Python script:\n\n```javascript\n// Set value in frontend:\nStreamlit.setComponentValue(3.14);\n```\n\n```python\n# Access value in Python:\nresult = my_component(greeting=\"Hello\", name=\"Streamlit\")\nst.write(\"result = \", result) # result = 3.14\n```\n\nWhen you call `Streamlit.setComponentValue(new_value)`, that new value is sent to Streamlit, which then _re-executes the Python script from top to bottom_. When the script is re-executed, the call to `my_component(...)` will return the new value.\n\nFrom a _code flow_ perspective, it appears that you're transmitting data synchronously with the frontend: Python sends the arguments to JavaScript, and JavaScript returns a value to Python, all in a single function call! But in reality this is all happening _asynchronously_, and it's the re-execution of the Python script that achieves the sleight of hand.\n\n- Use `Streamlit.setFrameHeight()` to control the height of your component. By default, the React template calls this automatically (see `StreamlitComponentBase.componentDidUpdate()`). You can override this behavior if you need more control.\n- There's a tiny bit of magic in the last line of the file: `export default withStreamlitConnection(MyComponent)` - this does some handshaking with Streamlit, and sets up the mechanisms for bi-directional data communication.\n\n#### TypeScript-only\n\nThe TypeScript-only template is in `template-reactless/my_component/frontend/src/MyComponent.tsx`.\n\nThis template has much more code than its React sibling, in that all the mechanics of handshaking, setting up event listeners, and updating the component's frame height are done manually. The React version of the template handles most of these details automatically.\n\n- Towards the bottom of the source file, the template calls `Streamlit.setComponentReady()` to tell Streamlit it's ready to start receiving data. (You'll generally want to do this after creating and loading everything that the Component relies on.)\n- It subscribes to `Streamlit.RENDER_EVENT` to be notified of when to redraw. (This event won't be fired until `setComponentReady` is called)\n- Within its `onRender` event handler, it accesses the arguments passed in the Python script via `event.detail.args`\n- It sends data back to the Python script in the same way that the React template does—clicking on the \"Click Me!\" button calls `Streamlit.setComponentValue()`\n- It informs Streamlit when its height may have changed via `Streamlit.setFrameHeight()`\n\n#### Working with Themes\n\n<Note>\n\nCustom component theme support requires streamlit-component-lib version 1.2.0 or higher.\n\n</Note>\n\nAlong with sending an `args` object to your component, Streamlit also sends\na `theme` object defining the active theme so that your component can adjust\nits styling in a compatible way. This object is sent in the same message as\n`args`, so it can be accessed via `this.props.theme` (when using the React\ntemplate) or `event.detail.theme` (when using the plain TypeScript template).\n\nThe `theme` object has the following shape:\n\n```json\n{\n  \"base\": \"lightORdark\",\n  \"primaryColor\": \"someColor1\",\n  \"backgroundColor\": \"someColor2\",\n  \"secondaryBackgroundColor\": \"someColor3\",\n  \"textColor\": \"someColor4\",\n  \"font\": \"someFont\"\n}\n```\n\nThe `base` option allows you to specify a preset Streamlit theme that your custom theme inherits from. Any theme config options not defined in your theme settings have their values set to those of the base theme. Valid values for `base` are `\"light\"` and `\"dark\"`.\n\nNote that the theme object has fields with the same names and semantics as the\noptions in the \"theme\" section of the config options printed with the command\n`streamlit config show`.\n\nWhen using the React template, the following CSS variables are also set\nautomatically.\n\n```css\n--base\n--primary-color\n--background-color\n--secondary-background-color\n--text-color\n--font\n```\n\nIf you're not familiar with\n[CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties),\nthe TLDR version is that you can use them like this:\n\n```css\n.mySelector {\n  color: var(--text-color);\n}\n```\n\nThese variables match the fields defined in the `theme` object above, and\nwhether to use CSS variables or the theme object in your component is a matter\nof personal preference.\n\n#### Other frontend details\n\n- Because you're hosting your component from a dev server (via `npm run start`), any changes you make should be automatically reflected in the Streamlit app when you save.\n- If you want to add more packages to your component, run `npm add` to add them from within your component's `frontend/` directory.\n\n```bash\nnpm add baseui\n```\n\n- To build a static version of your component, run `npm run export`. See [Prepare your Component](publish#prepare-your-component) for more information\n\n### Python API\n\n`components.declare_component()` is all that's required to create your Component's Python API:\n\n```python\n  import streamlit.components.v1 as components\n  my_component = components.declare_component(\n    \"my_component\",\n    url=\"http://localhost:3001\"\n  )\n```\n\nYou can then use the returned `my_component` function to send and receive data with your frontend code:\n\n```python\n# Send data to the frontend using named arguments.\nreturn_value = my_component(name=\"Blackbeard\", ship=\"Queen Anne's Revenge\")\n\n# `my_component`'s return value is the data returned from the frontend.\nst.write(\"Value = \", return_value)\n```\n\nWhile the above is all you need to define from the Python side to have a working Component, we recommend creating a \"wrapper\" function with named arguments and default values, input validation and so on. This will make it easier for end-users to understand what data values your function accepts and allows for defining helpful docstrings.\n\nPlease see [this example](https://github.com/streamlit/component-template/blob/master/template/my_component/__init__.py#L41-L77) from the Components-template for an example of creating a wrapper function.\n\n### Data serialization\n\n#### Python → Frontend\n\nYou send data from Python to the frontend by passing keyword args to your Component's invoke function (that is, the function returned from `declare_component`). You can send the following types of data from Python to the frontend:\n\n- Any JSON-serializable data\n- `numpy.array`\n- `pandas.DataFrame`\n\nAny JSON-serializable data gets serialized to a JSON string, and deserialized to its JavaScript equivalent. `numpy.array` and `pandas.DataFrame` get serialized using [Apache Arrow](https://arrow.apache.org/) and are deserialized as instances of `ArrowTable`, which is a custom type that wraps Arrow structures and provides a convenient API on top of them.\n\nCheck out the [CustomDataframe](https://github.com/streamlit/component-template/tree/master/examples/CustomDataframe) and [SelectableDataTable](https://github.com/streamlit/component-template/tree/master/examples/SelectableDataTable) Component example code for more context on how to use `ArrowTable`.\n\n#### Frontend → Python\n\nYou send data from the frontend to Python via the `Streamlit.setComponentValue()` API (which is part of the template code). Unlike arg-passing from Python → frontend, **this API takes a single value**. If you want to return multiple values, you'll need to wrap them in an `Array` or `Object`.\n\nCustom Components can send JSON-serializable data from the frontend to Python, as well as [Apache Arrow](http://arrow.apache.org/) `ArrowTable`s to represent dataframes."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/custom-components/create",
    "content": "# Create a Component\n\n<Note>\n\nIf you are only interested in **using Streamlit Components**, then you can skip this section and\nhead over to the [Streamlit Components Gallery](https://streamlit.io/components) to find and install\ncomponents created by the community!\n\n</Note>\n\nDevelopers can write JavaScript and HTML \"components\" that can be rendered in Streamlit apps. Streamlit Components can receive data from, and also send data to, Streamlit Python scripts.\n\nStreamlit Components let you expand the functionality provided in the base Streamlit package. Use Streamlit Components to create the needed functionality for your use-case, then wrap it up in a Python package and share with the broader Streamlit community!\n\n**With Streamlit Components you can add new features to your app in the following ways:**\n\n- Create your own components to use in place of existing Streamlit elements and widgets.\n- Create completely new Streamlit elements and widgets by wrapping existing React.js, Vue.js, or other JavaScript widget toolkits.\n- Render Python objects by constructing HTML representations and styling them to fit your app's theme.\n- Create convenience functions to embed commonly-used web features like [GitHub gists and Pastebin](https://github.com/randyzwitch/streamlit-embedcode).\n\nCheck out these Streamlit Components tutorial videos by Streamlit engineer Tim Conkling to get started:\n\n## Part 1: Setup and Architecture\n\n<YouTube videoId=\"BuD3gILJW-Q\" />\n\n## Part 2: Make a Slider Widget\n\n<YouTube videoId=\"QjccJl_7Jco\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/custom-components",
    "content": "# Custom Components\n\nComponents are third-party Python modules that extend what's possible with Streamlit.\n\n## How to use a Component\n\nComponents are super easy to use:\n\n1. Start by finding the Component you'd like to use. Two great resources for this are:\n\n   - The [Component gallery](https://streamlit.io/components)\n   - [This thread](https://discuss.streamlit.io/t/streamlit-components-community-tracker/4634),\n     by Fanilo A. from our forums.\n\n2. Install the Component using your favorite Python package manager. This step and all following\n   steps are described in your component's instructions.\n\n   For example, to use the fantastic [AgGrid\n   Component](https://github.com/PablocFonseca/streamlit-aggrid), you first install it with:\n\n   ```python\n   pip install streamlit-aggrid\n   ```\n\n3. In your Python code, import the Component as described in its instructions. For AgGrid, this step\n   is:\n\n   ```python\n   from st_aggrid import AgGrid\n   ```\n\n4. ...now you're ready to use it! For AgGrid, that's:\n\n   ```python\n   AgGrid(my_dataframe)\n   ```\n\n## Making your own Component\n\nIf you're interested in making your own component, check out the following resources:\n\n- [Create a Component](/develop/concepts/custom-components/create)\n- [Publish a Component](/develop/concepts/custom-components/publish)\n- [Components API](/develop/concepts/custom-components/intro)\n- [Blog post for when we launched Components!](https://blog.streamlit.io/introducing-streamlit-components/)\n\nAlternatively, if you prefer to learn using videos, our engineer Tim Conkling has put together some\namazing tutorials:\n\n##### Video tutorial, part 1\n\n<YouTube videoId=\"BuD3gILJW-Q\" />\n\n##### Video tutorial, part 2\n\n<YouTube videoId=\"QjccJl_7Jco\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/connections/authentication",
    "content": "# User authentication and information\n\nPersonalizing your app for your users is a great way to make your app more engaging.\n\nUser authentication and personalization unlocks a plethora of use cases for developers, including controls for admins, a personalized stock ticker, or a chatbot app with a saved history between sessions.\n\nBefore reading this guide, you should have a basic understanding of [secrets management](/develop/concepts/connections/secrets-management).\n\n## OpenID Connect\n\nStreamlit supports user authentication with OpenID Connect (OIDC), which is an authentication protocol built on top of OAuth 2.0. OIDC supports authentication, but not authorization: that is, OIDC connections tell you _who_ a user is (authentication), but don't give you the authority to _impersonate_ them (authorization). If you need to connect with a generic OAuth 2.0 provider or have your app to act on behalf of a user, consider using or creating a custom component.\n\nSome popular OIDC providers are:\n\n- [Google Identity](https://developers.google.com/identity/openid-connect/openid-connect)\n- [Microsoft Entra ID](https://learn.microsoft.com/en-us/power-pages/security/authentication/openid-settings)\n- [Okta](https://help.okta.com/en-us/content/topics/apps/apps_app_integration_wizard_oidc.htm)\n- [Auth0](https://auth0.com/docs/get-started/auth0-overview/create-applications/regular-web-apps)\n\n## `st.login()`, `st.user`, and `st.logout()`\n\nThere are three commands involved with user authentication:\n\n- [`st.login()`](/develop/api-reference/user/st.login) redirects the user to your identity provider. After they log in, Streamlit stores an identity cookie and then redirects them to the homepage of your app in a new session.\n- [`st.user`](/develop/api-reference/user/st.user) is a dict-like object for accessing user information. It has a persistent attribute, `.is_logged_in`, which you can check for the user's login status. When they are logged in, other attributes are available per your identity provider's configuration.\n- [`st.logout()`](/develop/api-reference/user/st.logout) removes the identity cookie from the user's browser and redirects them to the homepage of your app in a new session.\n\n## User cookies and logging out\n\nStreamlit checks for the identity cookie at the beginning of each new session. If a user logs in to your app in one tab and then opens a new tab, they will automatically be logged in to your app in the new tab. When you call `st.logout()` in a user session, Streamlit removes the identity cookie and starts a new session. This logs the user out from the current session. However, if they were logged in to other sessions already, they will remain logged in within those sessions. The information in `st.user` is updated at the beginning of a session (which is why `st.login()` and `st.logout()` both start new sessions after saving or deleting the identity cookie).\n\nIf a user closes your app without logging out, the identity cookie will expire after 30 days. This expiration time is not configurable and is not tied to any expiration time that may be returned in your user's identity token. If you need to prevent persistent authentication in your app, check the expiration information returned by the identity provider in `st.user` and manually call `st.logout()` when needed.\n\nStreamlit does not modify or delete any cookies saved directly by your identity provider. For example, if you use Google as your identity provider and a user logs in to your app with Google, they will remain logged in to their Google account after they log out of your app with `st.logout()`.\n\n## Setting up an identity provider\n\nIn order to use an identity provider, you must first configure your identity provider through an admin account. This typically involves setting up a client or application within the identity provider's system. Follow the documentation for your identity provider. As a general overview, an identity-provider client typically does the following:\n\n- Manages the list of your users.\n- Optional: Allows users to add themselves to your user list.\n- Declares the set of attributes passed from each user account to the client (which is then passed to your Streamlit app).\n- Only allows authentication requests to come from your Streamlit app.\n- Redirects users back to your Streamlit app after they authenticate.\n\nTo configure your app, you'll need the following:\n\n- Your app's URL\n  For example, use `http://localhost:8501` for most local development cases.\n- A redirect URL, which is your app's URL with the pathname `oauth2callback`\n  For example, `http://localhost:8501/oauth2callback` for most local development cases.\n- A cookie secret, which should be a strong, randomly generated string\n\nAfter you use this information to configure your identity-provider client, you'll receive the following information from your identity provider:\n\n- Client ID\n- Client secret\n- Server metadata URL\n\nExamples for popular OIDC provider configurations are listed in the API reference for `st.login()`.\n\n## Configure your OIDC connection in Streamlit\n\nAfter you've configured your identity-provider client, you'll need to configure your Streamlit app, too. `st.login()` uses your app's `secrets.toml` file to configure your connection, similar to how `st.connection()` works.\n\nWhether you have one OIDC provider or many, you'll need to have an `[auth]` dictionary in `secrets.toml`. You must declare `redirect_uri` and `cookie_secret` in the `[auth]` dictionary. These two values are shared between all OIDC providers in your app.\n\nIf you are only using one OIDC provider, you can put the remaining three properties (`client_id`, `client_secret`, and `server_metadata_url`) in `[auth]`. However, if you are using multiple providers, they should each have a unique name so you can declare their unique values in their own dictionaries. For example, if you name your connections `\"connection_1\"` and `\"connection_2\"`, put their remaining properties in dictionaries named `[auth.connection_1]` and `[auth.connection_2]`, respectively.\n\n## A simple example\n\nIf you use Google Identity as your identity provider, a basic configuration for local development will look like the following TOML file:\n\n`.streamlit/secrets.toml`:\n\n```toml\n[auth]\nredirect_uri = \"http://localhost:8501/oauth2callback\"\ncookie_secret = \"xxx\"\nclient_id = \"xxx\"\nclient_secret = \"xxx\"\nserver_metadata_url = \"https://accounts.google.com/.well-known/openid-configuration\"\n```\n\nMake sure the port in `redirect_uri` matches the port you are using. The `cookie_secret` should be a strong, randomly generated secret. Both the `redirect_uri` and `cookie_secret` should have been entered into your client configuration on Google Cloud. You must copy the `client_id` and `client_secret` from Google Cloud after you create your client. For some identity providers, `server_metadata_url` may be unique to your client. However, for Google Cloud, a single URL is shared for OIDC clients.\n\nIn your app, create a simple login flow:\n\n```python\nimport streamlit as st\n\nif not st.user.is_logged_in:\n    if st.button(\"Log in with Google\"):\n        st.login()\n    st.stop()\n\nif st.button(\"Log out\"):\n    st.logout()\nst.markdown(f\"Welcome! {st.user.name}\")\n```\n\nWhen you use `st.stop()`, your script run ends as soon as the login button is displayed. This lets you avoid nesting your entire page within a conditional block. Additionally, you can use callbacks to simplify the code further:\n\n```python\nimport streamlit as st\n\nif not st.user.is_logged_in:\n    st.button(\"Log in with Google\", on_click=st.login)\n    st.stop()\n\nst.button(\"Log out\", on_click=st.logout)\nst.markdown(f\"Welcome! {st.user.name}\")\n```\n\n## Using multiple OIDC providers\n\nIf you use more than one OIDC provider, you'll need to declare a unique name for each. If you want to use Google Identity and Microsoft Entra ID as two providers for the same app, your configuration for local development will look like the following TOML file:\n\n`.streamlit/secrets.toml`:\n\n```toml\n[auth]\nredirect_uri = \"http://localhost:8501/oauth2callback\"\ncookie_secret = \"xxx\"\n\n[auth.google]\nclient_id = \"xxx\"\nclient_secret = \"xxx\"\nserver_metadata_url = \"https://accounts.google.com/.well-known/openid-configuration\"\n\n[auth.microsoft]\nclient_id = \"xxx\"\nclient_secret = \"xxx\"\nserver_metadata_url = \"https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration\"\n```\n\nMicrosoft's server metadata URL varies slightly depending on how your client is scoped. Replace `{tenant}` with the appropriate value described in Microsoft's documentation for [OpenID configuration](https://learn.microsoft.com/en-us/entra/identity-platform/v2-protocols-oidc#find-your-apps-openid-configuration-document-uri).\n\nYour app code:\n\n```python\nimport streamlit as st\n\nif not st.user.is_logged_in:\n    if st.button(\"Log in with Google\"):\n        st.login(\"google\")\n    if st.button(\"Log in with Microsoft\"):\n        st.login(\"microsoft\")\n    st.stop()\n\nif st.button(\"Log out\"):\n    st.logout()\nst.markdown(f\"Welcome! {st.user.name}\")\n```\n\nUsing callbacks, this would look like:\n\n```python\nimport streamlit as st\n\nif not st.user.is_logged_in:\n    st.button(\"Log in with Google\", on_click=st.login, args=[\"google\"])\n    st.button(\"Log in with Microsoft\", on_click=st.login, args=[\"microsoft\"])\n    st.stop()\n\nst.button(\"Log out\", on_click=st.logout)\nst.markdown(f\"Welcome! {st.user.name}\")\n```\n\n## Passing keywords to your identity provider\n\nTo customize the behavior of your identity provider, you may need to declare additional keywords. For a complete list of OIDC parameters, see [OpenID Connect Core](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest) and your provider's documentation. By default, Streamlit sets `scope=\"openid profile email\"` and `prompt=\"select_account\"`. You can change these and other OIDC parameters by passing a dictionary of settings to `client_kwargs`. `state` and `nonce`, which are used for security, are handled automatically and don't need to be specified.\n\nFor example,if you are using Auth0 and need to force users to log in every time, use `prompt=\"login\"` as described in Auth0's [Customize Signup and Login Prompts](https://auth0.com/docs/customize/login-pages/universal-login/customize-signup-and-login-prompts). Your configuration will look like this:\n\n```toml\n[auth]\nredirect_uri = \"http://localhost:8501/oauth2callback\"\ncookie_secret = \"xxx\"\n\n[auth.auth0]\nclient_id = \"xxx\"\nclient_secret = \"xxx\"\nserver_metadata_url = \"https://{account}.{region}.auth0.com/.well-known/openid-configuration\"\nclient_kwargs = { \"prompt\" = \"login\" }\n```\n\n<Note>\n  Hosted Code environments such as GitHub Codespaces have additional security controls in place preventing the login redirect to be handled properly.\n</Note>"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data",
    "content": "# Connecting to data\n\nMost Streamlit apps need some kind of data or API access to be useful - either retrieving data to view or saving the results of some user action. This data or API is often part of some remote service, database, or other data source.\n\n**Anything you can do with Python, including data connections, will generally work in Streamlit**. Streamlit's [tutorials](/develop/tutorials/databases) are a great starting place for many data sources. However:\n\n- Connecting to data in a Python application is often tedious and annoying.\n- There are specific considerations for connecting to data from streamlit apps, such as caching and secrets management.\n\n**Streamlit provides [`st.connection()`](/develop/api-reference/connections/st.connection) to more easily connect your Streamlit apps to data and APIs with just a few lines of code**. This page provides a basic example of using the feature and then focuses on advanced usage.\n\nFor a comprehensive overview of this feature, check out this video tutorial by Joshua Carroll, Streamlit's Product Manager for Developer Experience. You'll learn about the feature's utility in creating and managing data connections within your apps by using real-world examples.\n\n<YouTube videoId=\"xQwDfW7UHMo\" />\n\n## Basic usage\n\nFor basic startup and usage examples, read up on the relevant [data source tutorial](/develop/tutorials/databases). Streamlit has built-in connections to SQL dialects and Snowflake. We also maintain installable connections for [Cloud File Storage](https://github.com/streamlit/files-connection) and [Google Sheets](https://github.com/streamlit/gsheets-connection).\n\nIf you are just starting, the best way to learn is to pick a data source you can access and get a minimal example working from one of the pages above 👆. Here, we will provide an ultra-minimal usage example for using a SQLite database. From there, the rest of this page will focus on advanced usage.\n\n### A simple starting point - using a local SQLite database\n\nA [local SQLite database](https://sqlite.org/index.html) could be useful for your app's semi-persistent data storage.\n\n<Note>\n\nCommunity Cloud apps do not guarantee the persistence of local file storage, so the platform may delete data stored using this technique at any time.\n\n</Note>\n\nTo see the example below running live, check out the interactive demo below:\n\n<Cloud name=\"experimental-connection\" path=\"SQL\" height=\"600px\" />\n\n#### Step 1: Install prerequisite library - SQLAlchemy\n\nAll SQLConnections in Streamlit use SQLAlchemy. For most other SQL dialects, you also need to install the driver. But the [SQLite driver ships with python3](https://docs.python.org/3/develop/sqlite3.html), so it isn't necessary.\n\n```bash\npip install SQLAlchemy==1.4.0\n```\n\n#### Step 2: Set a database URL in your Streamlit secrets.toml file\n\nCreate a directory and file `.streamlit/secrets.toml` in the same directory your app will run from. Add the following to the file.\n\n```toml\n# .streamlit/secrets.toml\n\n[connections.pets_db]\nurl = \"sqlite:///pets.db\"\n```\n\n#### Step 3: Use the connection in your app\n\nThe following app creates a connection to the database, uses it to create a table and insert some data, then queries the data back and displays it in a data frame.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\n\n# Create the SQL connection to pets_db as specified in your secrets file.\nconn = st.connection('pets_db', type='sql')\n\n# Insert some data with conn.session.\nwith conn.session as s:\n    s.execute('CREATE TABLE IF NOT EXISTS pet_owners (person TEXT, pet TEXT);')\n    s.execute('DELETE FROM pet_owners;')\n    pet_owners = {'jerry': 'fish', 'barbara': 'cat', 'alex': 'puppy'}\n    for k in pet_owners:\n        s.execute(\n            'INSERT INTO pet_owners (person, pet) VALUES (:owner, :pet);',\n            params=dict(owner=k, pet=pet_owners[k])\n        )\n    s.commit()\n\n# Query and display the data you inserted\npet_owners = conn.query('select * from pet_owners')\nst.dataframe(pet_owners)\n```\n\nIn this example, we didn't set a `ttl=` value on the call to [`conn.query()`](/develop/api-reference/connections/st.connections.sqlconnection#sqlconnectionquery), meaning Streamlit caches the result indefinitely as long as the app server runs.\n\nNow, on to more advanced topics! 🚀\n\n## Advanced topics\n\n### Global secrets, managing multiple apps and multiple data stores\n\nStreamlit [supports a global secrets file](/develop/concepts/connections/secrets-management) specified in the user's home directory, such as `~/.streamlit/secrets.toml`. If you build or manage multiple apps, we recommend using a global credential or secret file for local development across apps. With this approach, you only need to set up and manage your credentials in one place, and connecting a new app to your existing data sources is effectively a one-liner. It also reduces the risk of accidentally checking in your credentials to git since they don't need to exist in the project repository.\n\nFor cases where you have multiple similar data sources that you connect to during local development (such as a local vs. staging database), you can define different connection sections in your secrets or credentials file for different environments and then decide which to use at runtime. `st.connection` supports this with the _`name=env:<MY_NAME_VARIABLE>`_ syntax.\n\nE.g., say I have a local and a staging MySQL database and want to connect my app to either at different times. I could create a global secrets file like this:\n\n```toml\n# ~/.streamlit/secrets.toml\n\n[connections.local]\nurl = \"mysql://me:****@localhost:3306/local_db\"\n\n[connections.staging]\nurl = \"mysql://jdoe:******@staging.acmecorp.com:3306/staging_db\"\n```\n\nThen I can configure my app connection to take its name from a specified environment variable\n\n```python\n# streamlit_app.py\nimport streamlit as st\n\nconn = st.connection(\"env:DB_CONN\", \"sql\")\ndf = conn.query(\"select * from mytable\")\n# ...\n```\n\nNow I can specify whether to connect to local or staging at runtime by setting the `DB_CONN` environment variable.\n\n```bash\n# connect to local\nDB_CONN=local streamlit run streamlit_app.py\n\n# connect to staging\nDB_CONN=staging streamlit run streamlit_app.py\n```\n\n### Advanced SQLConnection configuration\n\nThe [SQLConnection](/develop/api-reference/connections/st.connections.sqlconnection) configuration uses SQLAlchemy `create_engine()` function. It will take a single URL argument or attempt to construct a URL from several parts (username, database, host, and so on) using [`SQLAlchemy.engine.URL.create()`](https://docs.sqlalchemy.org/en/20/core/engines.html#sqlalchemy.engine.URL.create).\n\nSeveral popular SQLAlchemy dialects, such as Snowflake and Google BigQuery, can be configured using additional arguments to `create_engine()` besides the URL. These can be passed as `**kwargs` to the [st.connection](/develop/api-reference/connections/st.connection) call directly or specified in an additional secrets section called `create_engine_kwargs`.\n\nE.g. snowflake-sqlalchemy takes an additional [`connect_args`](https://docs.sqlalchemy.org/en/20/core/engines.html#sqlalchemy.create_engine.params.connect_args) argument as a dictionary for configuration that isn’t supported in the URL. These could be specified as follows:\n\n```toml\n# .streamlit/secrets.toml\n\n[connections.snowflake]\nurl = \"snowflake://<user_login_name>@<account_identifier>/\"\n\n[connections.snowflake.create_engine_kwargs.connect_args]\nauthenticator = \"externalbrowser\"\nwarehouse = \"xxx\"\nrole = \"xxx\"\n```\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\n\n# url and connect_args from secrets.toml above are picked up and used here\nconn = st.connection(\"snowflake\", \"sql\")\n# ...\n```\n\nAlternatively, this could be specified entirely in `**kwargs`.\n\n```python\n# streamlit_app.py\n\nimport streamlit as st\n\n# secrets.toml is not needed\nconn = st.connection(\n    \"snowflake\",\n    \"sql\",\n    url = \"snowflake://<user_login_name>@<account_identifier>/\",\n    connect_args = dict(\n        authenticator = \"externalbrowser\",\n        warehouse = \"xxx\",\n        role = \"xxx\",\n    )\n)\n# ...\n```\n\nYou can also provide both kwargs and secrets.toml values, and they will be merged (typically, kwargs take precedence).\n\n### Connection considerations in frequently used or long-running apps\n\nBy default, connection objects are cached without expiration using [`st.cache_resource`](/develop/api-reference/caching-and-state/st.cache_resource). In most cases this is desired. You can do `st.connection('myconn', type=MyConnection, ttl=<N>)` if you want the connection object to expire after some time.\n\nMany connection types are expected to be long-running or completely stateless, so expiration is unnecessary. Suppose a connection becomes stale (such as a cached token expiring or a server-side connection being closed). In that case, every connection has a `reset()` method, which will invalidate the cached version and cause Streamlit to recreate the connection the next time it is retrieved\n\nConvenience methods like `query()` and `read()` will typically cache results by default using [`st.cache_data`](/develop/api-reference/caching-and-state/st.cache_data) without an expiration. When an app can run many different read operations with large results, it can cause high memory usage over time and results to become stale in a long-running app, the same as with any other usage of `st.cache_data`. For production use cases, we recommend setting an appropriate `ttl` on these read operations, such as `conn.read('path/to/file', ttl=\"1d\")`. Refer to [Caching](/develop/concepts/architecture/caching) for more information.\n\nFor apps that could get significant concurrent usage, ensure that you understand any thread safety implications of your connection, particularly when using a connection built by a third party. Connections built by Streamlit should provide thread-safe operations by default.\n\n### Build your own connection\n\nBuilding your own basic connection implementation using an existing driver or SDK is quite straightforward in most cases. However, you can add more complex functionality with further effort. This custom implementation can be a great way to extend support to a new data source and contribute to the Streamlit ecosystem.\n\nMaintaining a tailored internal Connection implementation across many apps can be a powerful practice for organizations with frequently used access patterns and data sources.\n\nCheck out the [Build your own Connection page](https://experimental-connection.streamlit.app/Build_your_own) in the st.experimental connection demo app below for a quick tutorial and working implementation. This demo builds a minimal but very functional Connection on top of DuckDB.\n\n<Cloud name=\"experimental-connection\" path=\"Build_your_own\" height=\"600px\" />\n\nThe typical steps are:\n\n1. Declare the Connection class, extending [`ExperimentalBaseConnection`](/develop/api-reference/connections/st.connections.experimentalbaseconnection) with the type parameter bound to the underlying connection object:\n\n   ```python\n   from streamlit.connections import ExperimentalBaseConnection\n   import duckdb\n\n   class DuckDBConnection(ExperimentalBaseConnection[duckdb.DuckDBPyConnection])\n   ```\n\n2. Implement the `_connect` method that reads any kwargs, external config/credential locations, and Streamlit secrets to initialize the underlying connection:\n\n   ```python\n   def _connect(self, **kwargs) -> duckdb.DuckDBPyConnection:\n       if 'database' in kwargs:\n           db = kwargs.pop('database')\n       else:\n           db = self._secrets['database']\n       return duckdb.connect(database=db, **kwargs)\n   ```\n\n3. Add useful helper methods that make sense for your connection (wrapping them in `st.cache_data` where caching is desired)\n\n### Connection-building best practices\n\nWe recommend applying the following best practices to make your Connection consistent with the Connections built into Streamlit and the wider Streamlit ecosystem. These practices are especially important for Connections that you intend to distribute publicly.\n\n1. **Extend existing drivers or SDKs, and default to semantics that makes sense for their existing users.**\n\n   You should rarely need to implement complex data access logic from scratch when building a Connection. Use existing popular Python drivers and clients whenever possible. Doing so makes your Connection easier to maintain, more secure, and enables users to get the latest features. E.g. [SQLConnection](/develop/api-reference/connections/st.connections.sqlconnection) extends SQLAlchemy, [FileConnection](https://github.com/streamlit/files-connection) extends [fsspec](https://filesystem-spec.readthedocs.io/en/latest/), [GsheetsConnection](https://github.com/streamlit/gsheets-connection) extends [gspread](https://docs.gspread.org/en/latest/), etc.\n\n   Consider using access patterns, method/argument naming, and return values that are consistent with the underlying package and familiar to existing users of that package.\n\n2. **Intuitive, easy to use read methods.**\n\n   Much of the power of st.connection is providing intuitive, easy-to-use read methods that enable app developers to get started quickly. Most connections should expose at least one read method that is:\n\n   - Named with a simple verb, like `read()`, `query()`, or `get()`\n   - Wrapped by `st.cache_data` by default, with at least `ttl=` argument supported\n   - If the result is in a tabular format, it returns a pandas DataFrame\n   - Provides commonly used keyword arguments (such as paging or formatting) with sensible defaults - ideally, the common case requires only 1-2 arguments.\n\n3. **Config, secrets, and precedence in `_connect` method.**\n\n   Every Connection should support commonly used connection parameters provided via Streamlit secrets and keyword arguments. The names should match the ones used when initializing or configuring the underlying package.\n\n   Additionally, where relevant, Connections should support data source specific configuration through existing standard environment variables or config / credential files. In many cases, the underlying package provides constructors or factory functions that already handle this easily.\n\n   When you can specify the same connection parameters in multiple places, we recommend using the following precedence order when possible (highest to lowest):\n\n   - Keyword arguments specified in the code\n   - Streamlit secrets\n   - data source specific configuration (if relevant)\n\n4. **Handling thread safety and stale connections.**\n\n   Connections should provide thread-safe operations when practical (which should be most of the time) and clearly document any considerations around this. Most underlying drivers or SDKs should provide thread-safe objects or methods - use these when possible.\n\n   If the underlying driver or SDK has a risk of stateful connection objects becoming stale or invalid, consider building a low impact health check or reset/retry pattern into the access methods. The SQLConnection built into Streamlit has a good example of this pattern using [tenacity](https://tenacity.readthedocs.io/) and the built-in [Connection.reset()](/develop/api-reference/connections/st.connections.sqlconnection#sqlconnectionreset) method. An alternate approach is to encourage developers to set an appropriate TTL on the `st.connection()` call to ensure it periodically reinitializes the connection object."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/connections/security-reminders",
    "content": "# Security reminders\n\n## Protect your secrets\n\nNever save usernames, passwords, or security keys directly in your code or commit them to your repository.\n\n### Use environment variables\n\nAvoid putting sensitve information in your code by using environment variables. Be sure to check out [`st.secrets`](/develop/concepts/connections/secrets-management). Research any platform you use to follow their security best practices. If you use Streamlit Community Cloud, [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management) allows you save environment variables and store secrets outside of your code.\n\n### Keep `.gitignore` updated\n\nIf you use any sensitive or private information during development, make sure that information is saved in separate files from your code. Ensure `.gitignore` is properly configured to prevent saving private information to your repository.\n\n## Pickle warning\n\nStreamlit's [`st.cache_data`](/develop/concepts/architecture/caching#stcache_data) and [`st.session_state`](/develop/concepts/architecture/session-state#serializable-session-state) implicitly use the `pickle` module, which is known to be insecure. It is possible to construct malicious pickle data that will execute arbitrary code during unpickling. Never load data that could have come from an untrusted source in an unsafe mode or that could have been tampered with. **Only load data you trust**.\n\n- When using `st.cache_data`, anything your function returns is pickled and stored, then unpickled on retrieval. Ensure your cached functions return trusted values. This warning also applies to [`st.cache`](/develop/api-reference/caching-and-state/st.cache) (deprecated).\n- When the `runner.enforceSerializableSessionState` [configuration option](<(/develop/concepts/configuration#runner)>) is set to `true`, ensure all data saved and retrieved from Session State is trusted."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/connections",
    "content": "# Working with connections, secrets, and user authentication\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/concepts/connections/connecting-to-data\">\n\n<h5>Connecting to data</h5>\n\nConnect your app to remote data or a third-party API.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/connections/secrets-management\">\n\n<h5>Secrets managements</h5>\n\nSet up your development environement and design your app to handle secrets securely.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/connections/authentication\">\n\n<h5>Authentication and user information</h5>\n\nUse an OpenID Connect provider to authenticate users and personalize your app.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/connections/security-reminders\">\n\n<h5>Security reminders</h5>\n\nCheck out a few reminders to follow best practices and avoid security mistakes.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/connections/secrets-management",
    "content": "# Secrets management\n\nStoring unencrypted secrets in a git repository is a bad practice. For applications that require access to sensitive credentials, the recommended solution is to store those credentials outside the repository - such as using a credentials file not committed to the repository or passing them as environment variables.\n\nStreamlit provides native file-based secrets management to easily store and securely access your secrets in your Streamlit app.\n\n<Note>\n\nExisting secrets management tools, such as [dotenv files](https://pypi.org/project/python-dotenv/), [AWS credentials files](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#configuring-credentials), [Google Cloud Secret Manager](https://pypi.org/project/google-cloud-secret-manager/), or [Hashicorp Vault](https://www.vaultproject.io/use-cases/secrets-management), will work fine in Streamlit. We just add native secrets management for times when it's useful.\n\n</Note>\n\n## How to use secrets management\n\n### Develop locally and set up secrets\n\nStreamlit provides two ways to set up secrets locally using [TOML](https://toml.io/en/latest) format:\n\n1. In a **global secrets file** at `~/.streamlit/secrets.toml` for macOS/Linux or `%userprofile%/.streamlit/secrets.toml` for Windows:\n\n   ```toml\n   # Everything in this section will be available as an environment variable\n   db_username = \"Jane\"\n   db_password = \"mypassword\"\n\n   # You can also add other sections if you like.\n   # The contents of sections as shown below will not become environment variables,\n   # but they'll be easily accessible from within Streamlit anyway as we show\n   # later in this doc.\n   [my_other_secrets]\n   things_i_like = [\"Streamlit\", \"Python\"]\n   ```\n\n   If you use the global secrets file, you don't have to duplicate secrets across several project-level files if multiple Streamlit apps share the same secrets.\n\n2. In a **per-project secrets file** at `$CWD/.streamlit/secrets.toml`, where `$CWD` is the folder you're running Streamlit from. If both a global secrets file and a per-project secrets file exist, _secrets in the per-project file overwrite those defined in the global file_.\n\n<Important>\n\nAdd this file to your `.gitignore` so you don't commit your secrets!\n\n</Important>\n\n### Use secrets in your app\n\nAccess your secrets by querying the `st.secrets` dict, or as environment variables. For example, if you enter the secrets from the section above, the code below shows you how to access them within your Streamlit app.\n\n```python\nimport streamlit as st\n\n# Everything is accessible via the st.secrets dict:\n\nst.write(\"DB username:\", st.secrets[\"db_username\"])\nst.write(\"DB password:\", st.secrets[\"db_password\"])\n\n# And the root-level secrets are also accessible as environment variables:\n\nimport os\n\nst.write(\n    \"Has environment variables been set:\",\n    os.environ[\"db_username\"] == st.secrets[\"db_username\"],\n)\n```\n\n<Tip>\n\nYou can access `st.secrets` via attribute notation (e.g. `st.secrets.key`), in addition to key notation (e.g. `st.secrets[\"key\"]`) — like [st.session_state](/develop/api-reference/caching-and-state/st.session_state).\n\n</Tip>\n\nYou can even compactly use TOML sections to pass multiple secrets as a single attribute. Consider the following secrets:\n\n```toml\n[db_credentials]\nusername = \"my_username\"\npassword = \"my_password\"\n```\n\nRather than passing each secret as attributes in a function, you can more compactly pass the section to achieve the same result. See the notional code below, which uses the secrets above:\n\n```python\n# Verbose version\nmy_db.connect(username=st.secrets.db_credentials.username, password=st.secrets.db_credentials.password)\n\n# Far more compact version!\nmy_db.connect(**st.secrets.db_credentials)\n```\n\n### Error handling\n\nHere are some common errors you might encounter when using secrets management.\n\n- If a `.streamlit/secrets.toml` is created _while_ the app is running, the server needs to be restarted for changes to be reflected in the app.\n- If you try accessing a secret, but no `secrets.toml` file exists, Streamlit will raise a `FileNotFoundError` exception:\n  <Image alt=\"Secrets management FileNotFoundError\" src=\"/images/secrets-filenotfounderror.png\" clean />\n- If you try accessing a secret that doesn't exist, Streamlit will raise a `KeyError` exception:\n\n  ```python\n  import streamlit as st\n\n  st.write(st.secrets[\"nonexistent_key\"])\n  ```\n\n    <Image alt=\"Secrets management KeyError\" src=\"/images/secrets-keyerror.png\" clean />\n\n### Use secrets on Streamlit Community Cloud\n\nWhen you deploy your app to [Streamlit Community Cloud](https://streamlit.io/cloud), you can use the same secrets management workflow as you would locally. However, you'll need to also set up your secrets in the Community Cloud Secrets Management console. Learn how to do so via the Cloud-specific [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management) documentation."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state",
    "content": "# Add statefulness to apps\n\n## What is State?\n\nWe define access to a Streamlit app in a browser tab as a **session**. For each browser tab that connects to the Streamlit server, a new session is created. Streamlit reruns your script from top to bottom every time you interact with your app. Each reruns takes place in a blank slate: no variables are shared between runs.\n\nSession State is a way to share variables between reruns, for each user session. In addition to the ability to store and persist state, Streamlit also exposes the ability to manipulate state using Callbacks. Session state also persists across pages inside a [multipage app](/develop/concepts/multipage-apps).\n\nIn this guide, we will illustrate the usage of **Session State** and **Callbacks** as we build a stateful Counter app.\n\nFor details on the Session State and Callbacks API, please refer to our [Session State API Reference Guide](/develop/api-reference/caching-and-state/st.session_state).\n\nAlso, check out this Session State basics tutorial video by Streamlit Developer Advocate Dr. Marisa Smith to get started:\n\n<YouTube videoId=\"92jUAXBmZyU\" />\n\n## Build a Counter\n\nLet's call our script `counter.py`. It initializes a `count` variable and has a button to increment the value stored in the `count` variable:\n\n```python\nimport streamlit as st\n\nst.title('Counter Example')\ncount = 0\n\nincrement = st.button('Increment')\nif increment:\n    count += 1\n\nst.write('Count = ', count)\n```\n\nNo matter how many times we press the **_Increment_** button in the above app, the `count` remains at 1. Let's understand why:\n\n- Each time we press the **_Increment_** button, Streamlit reruns `counter.py` from top to bottom, and with every run, `count` gets initialized to `0` .\n- Pressing **_Increment_** subsequently adds 1 to 0, thus `count=1` no matter how many times we press **_Increment_**.\n\nAs we'll see later, we can avoid this issue by storing `count` as a Session State variable. By doing so, we're indicating to Streamlit that it should maintain the value stored inside a Session State variable across app reruns.\n\nLet's learn more about the API to use Session State.\n\n### Initialization\n\nThe Session State API follows a field-based API, which is very similar to Python dictionaries:\n\n```python\nimport streamlit as st\n\n# Check if 'key' already exists in session_state\n# If not, then initialize it\nif 'key' not in st.session_state:\n    st.session_state['key'] = 'value'\n\n# Session State also supports the attribute based syntax\nif 'key' not in st.session_state:\n    st.session_state.key = 'value'\n```\n\n### Reads and updates\n\nRead the value of an item in Session State by passing the item to `st.write` :\n\n```python\nimport streamlit as st\n\nif 'key' not in st.session_state:\n    st.session_state['key'] = 'value'\n\n# Reads\nst.write(st.session_state.key)\n\n# Outputs: value\n```\n\nUpdate an item in Session State by assigning it a value:\n\n```python\nimport streamlit as st\n\nif 'key' not in st.session_state:\n    st.session_state['key'] = 'value'\n\n# Updates\nst.session_state.key = 'value2'     # Attribute API\nst.session_state['key'] = 'value2'  # Dictionary like API\n```\n\nStreamlit throws an exception if an uninitialized variable is accessed:\n\n```python\nimport streamlit as st\n\nst.write(st.session_state['value'])\n\n# Throws an exception!\n```\n\n![state-uninitialized-exception](/images/state_uninitialized_exception.png)\n\nLet's now take a look at a few examples that illustrate how to add Session State to our Counter app.\n\n### Example 1: Add Session State\n\nNow that we've got a hang of the Session State API, let's update our Counter app to use Session State:\n\n```python\nimport streamlit as st\n\nst.title('Counter Example')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n\nincrement = st.button('Increment')\nif increment:\n    st.session_state.count += 1\n\nst.write('Count = ', st.session_state.count)\n```\n\nAs you can see in the above example, pressing the **_Increment_** button updates the `count` each time.\n\n### Example 2: Session State and Callbacks\n\nNow that we've built a basic Counter app using Session State, let's move on to something a little more complex. The next example uses Callbacks with Session State.\n\n**Callbacks**: A callback is a Python function which gets called when an input widget changes. Callbacks can be used with widgets using the parameters `on_change` (or `on_click`), `args`, and `kwargs`. The full Callbacks API can be found in our [Session State API Reference Guide](/develop/api-reference/caching-and-state/st.session_state#use-callbacks-to-update-session-state).\n\n```python\nimport streamlit as st\n\nst.title('Counter Example using Callbacks')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n\ndef increment_counter():\n    st.session_state.count += 1\n\nst.button('Increment', on_click=increment_counter)\n\nst.write('Count = ', st.session_state.count)\n```\n\nNow, pressing the **_Increment_** button updates the count each time by calling the `increment_counter()` function.\n\n### Example 3: Use args and kwargs in Callbacks\n\nCallbacks also support passing arguments using the `args` parameter in a widget:\n\n```python\nimport streamlit as st\n\nst.title('Counter Example using Callbacks with args')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n\nincrement_value = st.number_input('Enter a value', value=0, step=1)\n\ndef increment_counter(increment_value):\n    st.session_state.count += increment_value\n\nincrement = st.button('Increment', on_click=increment_counter,\n    args=(increment_value, ))\n\nst.write('Count = ', st.session_state.count)\n```\n\nAdditionally, we can also use the `kwargs` parameter in a widget to pass named arguments to the callback function as shown below:\n\n```python\nimport streamlit as st\n\nst.title('Counter Example using Callbacks with kwargs')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n\ndef increment_counter(increment_value=0):\n    st.session_state.count += increment_value\n\ndef decrement_counter(decrement_value=0):\n    st.session_state.count -= decrement_value\n\nst.button('Increment', on_click=increment_counter,\n\tkwargs=dict(increment_value=5))\n\nst.button('Decrement', on_click=decrement_counter,\n\tkwargs=dict(decrement_value=1))\n\nst.write('Count = ', st.session_state.count)\n```\n\n### Example 4: Forms and Callbacks\n\nSay we now want to not only increment the `count`, but also store when it was last updated. We illustrate doing this using Callbacks and `st.form`:\n\n```python\nimport streamlit as st\nimport datetime\n\nst.title('Counter Example')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n    st.session_state.last_updated = datetime.time(0,0)\n\ndef update_counter():\n    st.session_state.count += st.session_state.increment_value\n    st.session_state.last_updated = st.session_state.update_time\n\nwith st.form(key='my_form'):\n    st.time_input(label='Enter the time', value=datetime.datetime.now().time(), key='update_time')\n    st.number_input('Enter a value', value=0, step=1, key='increment_value')\n    submit = st.form_submit_button(label='Update', on_click=update_counter)\n\nst.write('Current Count = ', st.session_state.count)\nst.write('Last Updated = ', st.session_state.last_updated)\n```\n\n## Advanced concepts\n\n### Session State and Widget State association\n\nSession State provides the functionality to store variables across reruns. Widget state (i.e. the value of a widget) is also stored in a session.\n\nFor simplicity, we have _unified_ this information in one place. i.e. the Session State. This convenience feature makes it super easy to read or write to the widget's state anywhere in the app's code. Session State variables mirror the widget value using the `key` argument.\n\nWe illustrate this with the following example. Let's say we have an app with a slider to represent temperature in Celsius. We can **set** and **get** the value of the temperature widget by using the Session State API, as follows:\n\n```python\nimport streamlit as st\n\nif \"celsius\" not in st.session_state:\n    # set the initial default value of the slider widget\n    st.session_state.celsius = 50.0\n\nst.slider(\n    \"Temperature in Celsius\",\n    min_value=-100.0,\n    max_value=100.0,\n    key=\"celsius\"\n)\n\n# This will get the value of the slider widget\nst.write(st.session_state.celsius)\n```\n\nThere is a limitation to setting widget values using the Session State API.\n\n<Important>\n\nStreamlit **does not allow** setting widget values via the Session State API for `st.button` and `st.file_uploader`.\n\n</Important>\n\nThe following example will raise a `StreamlitAPIException` on trying to set the state of `st.button` via the Session State API:\n\n```python\nimport streamlit as st\n\nif 'my_button' not in st.session_state:\n    st.session_state.my_button = True\n    # Streamlit will raise an Exception on trying to set the state of button\n\nst.button('Submit', key='my_button')\n```\n\n<Image alt=\"state-button-exception\" src=\"/images/state_button_exception.png\" clean />\n\n### Serializable Session State\n\nSerialization refers to the process of converting an object or data structure into a format that can be persisted and shared, and allowing you to recover the data’s original structure. Python’s built-in [pickle](https://docs.python.org/3/library/pickle.html) module serializes Python objects to a byte stream (\"pickling\") and deserializes the stream into an object (\"unpickling\").\n\nBy default, Streamlit’s [Session State](/develop/concepts/architecture/session-state) allows you to persist any Python object for the duration of the session, irrespective of the object’s pickle-serializability. This property lets you store Python primitives such as integers, floating-point numbers, complex numbers and booleans, dataframes, and even [lambdas](https://docs.python.org/3/reference/expressions.html#lambda) returned by functions. However, some execution environments may require serializing all data in Session State, so it may be useful to detect incompatibility during development, or when the execution environment will stop supporting it in the future.\n\nTo that end, Streamlit provides a `runner.enforceSerializableSessionState` [configuration option](/develop/concepts/configuration) that, when set to `true`, only allows pickle-serializable objects in Session State. To enable the option, either create a global or project config file with the following or use it as a command-line flag:\n\n```toml\n# .streamlit/config.toml\n[runner]\nenforceSerializableSessionState = true\n```\n\nBy \"_pickle-serializable_\", we mean calling `pickle.dumps(obj)` should not raise a [`PicklingError`](https://docs.python.org/3/library/pickle.html#pickle.PicklingError) exception. When the config option is enabled, adding unserializable data to session state should result in an exception. E.g.,\n\n```python\nimport streamlit as st\n\ndef unserializable_data():\n\t\treturn lambda x: x\n\n#👇 results in an exception when enforceSerializableSessionState is on\nst.session_state.unserializable = unserializable_data()\n```\n\n<Image alt=\"UnserializableSessionStateError\" src=\"/images/unserializable-session-state-error.png\" clean />\n\n<Warning>\n\nWhen `runner.enforceSerializableSessionState` is set to `true`, Session State implicitly uses the `pickle` module, which is known to be insecure. Ensure all data saved and retrieved from Session State is trusted because it is possible to construct malicious pickle data that will execute arbitrary code during unpickling. Never load data that could have come from an untrusted source in an unsafe mode or that could have been tampered with. **Only load data you trust**.\n\n</Warning>\n\n### Caveats and limitations\n\nHere are some limitations to keep in mind when using Session State:\n\n- Session State exists for as long as the tab is open and connected to the Streamlit server. As soon as you close the tab, everything stored in Session State is lost.\n- Session State is not persisted. If the Streamlit server crashes, then everything stored in Session State gets wiped\n- For caveats and limitations with the Session State API, please see the [API limitations](/develop/api-reference/caching-and-state/st.session_state#caveats-and-limitations)."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/architecture/architecture",
    "content": "# Understanding Streamlit's client-server architecture\n\nStreamlit apps have a client-server structure. The Python backend of your app is the server. The frontend you view through a browser is the client. When you develop an app locally, your computer runs both the server and the client. If someone views your app across a local or global network, the server and client run on different machines. If you intend to share or deploy your app, it's important to understand this client-server structure to avoid common pitfalls.\n\n## Python backend (server)\n\nWhen you execute the command `streamlit run your_app.py`, your computer uses Python to start up a Streamlit server. This server is the brains of your app and performs the computations for all users who view your app. Whether users view your app across a local network or the internet, the Streamlit server runs on the one machine where the app was initialized with `streamlit run`. The machine running your Streamlit server is also called a host.\n\n## Browser frontend (client)\n\nWhen someone views your app through a browser, their device is a Streamlit client. When you view your app from the same computer where you are running or developing your app, then server and client are coincidentally running on the same machine. However, when users view your app across a local network or the internet, the client runs on a different machine from the server.\n\n## Server-client impact on app design\n\nKeep in mind the following considerations when building your Streamlit app:\n\n- The computer running or hosting your Streamlit app is responsible for providing the compute and storage necessary to run your app for all users and must be sized appropriately to handle concurrent users.\n- Your app will not have access to a user's files, directories, or OS. Your app can only work with specific files a user has uploaded to your app through a widget like `st.file_uploader`.\n- If your app communicates with any peripheral devices (like cameras), you must use Streamlit commands or custom components that will access those devices _through the user's browser_ and correctly communicate between the client (frontend) and server (backend).\n- If your app opens or uses any program or process outside of Python, they will run on the server. For example, you may want to use `webrowser` to open a browser for the user, but this will not work as expected when viewing your app over a network; it will open a browser on the Streamlit server, unseen by the user."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/architecture/forms",
    "content": "# Using forms\n\nWhen you don't want to rerun your script with each input made by a user, [`st.form`](/develop/api-reference/execution-flow/st.form) is here to help! Forms make it easy to batch user input into a single rerun. This guide to using forms provides examples and explains how users interact with forms.\n\n## Example\n\nIn the following example, a user can set multiple parameters to update the map. As the user changes the parameters, the script will not rerun and the map will not update. When the user submits the form with the button labeled \"**Update map**\", the script reruns and the map updates.\n\nIf at any time the user clicks \"**Generate new points**\" which is outside of the form, the script will rerun. If the user has any unsubmitted changes within the form, these will _not_ be sent with the rerun. All changes made to a form will only be sent to the Python backend when the form itself is submitted.\n\n<Collapse title=\"View source code\" expanded={false} >\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndef get_data():\n    df = pd.DataFrame({\n        \"lat\": np.random.randn(200) / 50 + 37.76,\n        \"lon\": np.random.randn(200) / 50 + -122.4,\n        \"team\": ['A','B']*100\n    })\n    return df\n\nif st.button('Generate new points'):\n    st.session_state.df = get_data()\nif 'df' not in st.session_state:\n    st.session_state.df = get_data()\ndf = st.session_state.df\n\nwith st.form(\"my_form\"):\n    header = st.columns([1,2,2])\n    header[0].subheader('Color')\n    header[1].subheader('Opacity')\n    header[2].subheader('Size')\n\n    row1 = st.columns([1,2,2])\n    colorA = row1[0].color_picker('Team A', '#0000FF')\n    opacityA = row1[1].slider('A opacity', 20, 100, 50, label_visibility='hidden')\n    sizeA = row1[2].slider('A size', 50, 200, 100, step=10, label_visibility='hidden')\n\n    row2 = st.columns([1,2,2])\n    colorB = row2[0].color_picker('Team B', '#FF0000')\n    opacityB = row2[1].slider('B opacity', 20, 100, 50, label_visibility='hidden')\n    sizeB = row2[2].slider('B size', 50, 200, 100, step=10, label_visibility='hidden')\n\n    st.form_submit_button('Update map')\n\nalphaA = int(opacityA*255/100)\nalphaB = int(opacityB*255/100)\n\ndf['color'] = np.where(df.team=='A',colorA+f'{alphaA:02x}',colorB+f'{alphaB:02x}')\ndf['size'] = np.where(df.team=='A',sizeA, sizeB)\n\nst.map(df, size='size', color='color')\n```\n\n</Collapse>\n\n<Cloud name=\"doc-forms-overview\" height=\"800px\"/>\n\n## User interaction\n\nIf a widget is not in a form, that widget will trigger a script rerun whenever a user changes its value. For widgets with keyed input (`st.number_input`, `st.text_input`, `st.text_area`), a new value triggers a rerun when the user clicks or tabs out of the widget. A user can also submit a change by pressing `Enter` while their cursor is active in the widget.\n\nOn the other hand if a widget is inside of a form, the script will not rerun when a user clicks or tabs out of that widget. For widgets inside a form, the script will rerun when the form is submitted and all widgets within the form will send their updated values to the Python backend.\n\n![Forms](/images/forms.gif)\n\nA user can submit a form using **Enter** on their keyboard if their cursor active in a widget that accepts keyed input. Within `st.number_input` and `st.text_input` a user presses **Enter** to submit the form. Within `st.text_area` a user presses **Ctrl+Enter**/**⌘+Enter** to submit the form.\n\n![Keyboard-submit forms](/images/form-submit-keyboard.png)\n\n## Widget values\n\nBefore a form is submitted, all widgets within that form will have default values, just like widgets outside of a form have default values.\n\n```python\nimport streamlit as st\n\nwith st.form(\"my_form\"):\n   st.write(\"Inside the form\")\n   my_number = st.slider('Pick a number', 1, 10)\n   my_color = st.selectbox('Pick a color', ['red','orange','green','blue','violet'])\n   st.form_submit_button('Submit my picks')\n\n# This is outside the form\nst.write(my_number)\nst.write(my_color)\n```\n\n<Cloud name=\"doc-forms-default\" height=\"450px\"/>\n\n## Forms are containers\n\nWhen `st.form` is called, a container is created on the frontend. You can write to that container like you do with other [container elements](/develop/api-reference/layout). That is, you can use Python's `with` statement as shown in the example above, or you can assign the form container to a variable and call methods on it directly. Additionally, you can place `st.form_submit_button` anywhere in the form container.\n\n```python\nimport streamlit as st\n\nanimal = st.form('my_animal')\n\n# This is writing directly to the main body. Since the form container is\n# defined above, this will appear below everything written in the form.\nsound = st.selectbox('Sounds like', ['meow','woof','squeak','tweet'])\n\n# These methods called on the form container, so they appear inside the form.\nsubmit = animal.form_submit_button(f'Say it with {sound}!')\nsentence = animal.text_input('Your sentence:', 'Where\\'s the tuna?')\nsay_it = sentence.rstrip('.,!?') + f', {sound}!'\nif submit:\n    animal.subheader(say_it)\nelse:\n    animal.subheader('&nbsp;')\n```\n\n<Cloud name=\"doc-forms-container\" height=\"375px\"/>\n\n## Processing form submissions\n\nThe purpose of a form is to override the default behavior of Streamlit which reruns a script as soon as the user makes a change. For widgets outside of a form, the logical flow is:\n\n1. The user changes a widget's value on the frontend.\n2. The widget's value in `st.session_state` and in the Python backend (server) is updated.\n3. The script rerun begins.\n4. If the widget has a callback, it is executed as a prefix to the page rerun.\n5. When the updated widget's function is executed during the rerun, it outputs the new value.\n\nFor widgets inside a form, any changes made by a user (step 1) do not get passed to the Python backend (step 2) until the form is submitted. Furthermore, the only widget inside a form that can have a callback function is the `st.form_submit_button`. If you need to execute a process using newly submitted values, you have three major patterns for doing so.\n\n### Execute the process after the form\n\nIf you need to execute a one-time process as a result of a form submission, you can condition that process on the `st.form_submit_button` and execute it after the form. If you need results from your process to display above the form, you can use containers to control where the form displays relative to your output.\n\n```python\nimport streamlit as st\n\ncol1,col2 = st.columns([1,2])\ncol1.title('Sum:')\n\nwith st.form('addition'):\n    a = st.number_input('a')\n    b = st.number_input('b')\n    submit = st.form_submit_button('add')\n\nif submit:\n    col2.title(f'{a+b:.2f}')\n```\n\n<Cloud name=\"doc-forms-process1\" height=\"400px\"/>\n\n### Use a callback with session state\n\nYou can use a callback to execute a process as a prefix to the script rerunning.\n\n<Important>\n\nWhen processing newly updated values within a callback, do not pass those values to the callback directly through the `args` or `kwargs` parameters. You need to assign a key to any widget whose value you use within the callback. If you look up the value of that widget from `st.session_state` within the body of the callback, you will be able to access the newly submitted value. See the example below.\n\n</Important>\n\n```python\nimport streamlit as st\n\nif 'sum' not in st.session_state:\n    st.session_state.sum = ''\n\ndef sum():\n    result = st.session_state.a + st.session_state.b\n    st.session_state.sum = result\n\ncol1,col2 = st.columns(2)\ncol1.title('Sum:')\nif isinstance(st.session_state.sum, float):\n    col2.title(f'{st.session_state.sum:.2f}')\n\nwith st.form('addition'):\n    st.number_input('a', key = 'a')\n    st.number_input('b', key = 'b')\n    st.form_submit_button('add', on_click=sum)\n```\n\n<Cloud name=\"doc-forms-process2\" height=\"400px\"/>\n\n### Use `st.rerun`\n\nIf your process affects content above your form, another alternative is using an extra rerun. This can be less resource-efficient though, and may be less desirable that the above options.\n\n```python\nimport streamlit as st\n\nif 'sum' not in st.session_state:\n    st.session_state.sum = ''\n\ncol1,col2 = st.columns(2)\ncol1.title('Sum:')\nif isinstance(st.session_state.sum, float):\n    col2.title(f'{st.session_state.sum:.2f}')\n\nwith st.form('addition'):\n    a = st.number_input('a')\n    b = st.number_input('b')\n    submit = st.form_submit_button('add')\n\n# The value of st.session_state.sum is updated at the end of the script rerun,\n# so the displayed value at the top in col2 does not show the new sum. Trigger\n# a second rerun when the form is submitted to update the value above.\nst.session_state.sum = a + b\nif submit:\n    st.rerun()\n```\n\n<Cloud name=\"doc-forms-process3\" height=\"400px\"/>\n\n## Limitations\n\n- Every form must contain a `st.form_submit_button`.\n- `st.button` and `st.download_button` cannot be added to a form.\n- `st.form` cannot be embedded inside another `st.form`.\n- Callback functions can only be assigned to `st.form_submit_button` within a form; no other widgets in a form can have a callback.\n- Interdependent widgets within a form are unlikely to be particularly useful. If you pass `widget1`'s value into `widget2` when they are both inside a form, then `widget2` will only update when the form is submitted."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/architecture/caching",
    "content": "# Caching overview\n\nStreamlit runs your script from top to bottom at every user interaction or code change. This execution model makes development super easy. But it comes with two major challenges:\n\n1. Long-running functions run again and again, which slows down your app.\n2. Objects get recreated again and again, which makes it hard to persist them across reruns or sessions.\n\nBut don't worry! Streamlit lets you tackle both issues with its built-in caching mechanism. Caching stores the results of slow function calls, so they only need to run once. This makes your app much faster and helps with persisting objects across reruns. Cached values are available to all users of your app. If you need to save results that should only be accessible within a session, use [Session State](/develop/concepts/architecture/session-state) instead.\n\n<Collapse title=\"Table of contents\" expanded={true}>\n\n1. [Minimal example](#minimal-example)\n2. [Basic usage](#basic-usage)\n3. [Advanced usage](#advanced-usage)\n4. [Migrating from st.cache](#migrating-from-stcache)\n\n</Collapse>\n\n## Minimal example\n\nTo cache a function in Streamlit, you must decorate it with one of two decorators (`st.cache_data` or `st.cache_resource`):\n\n```python\n@st.cache_data\ndef long_running_function(param1, param2):\n    return …\n```\n\nIn this example, decorating `long_running_function` with `@st.cache_data` tells Streamlit that whenever the function is called, it checks two things:\n\n1. The values of the input parameters (in this case, `param1` and `param2`).\n2. The code inside the function.\n\nIf this is the first time Streamlit sees these parameter values and function code, it runs the function and stores the return value in a cache. The next time the function is called with the same parameters and code (e.g., when a user interacts with the app), Streamlit will skip executing the function altogether and return the cached value instead. During development, the cache updates automatically as the function code changes, ensuring that the latest changes are reflected in the cache.\n\nAs mentioned, there are two caching decorators:\n\n- `st.cache_data` is the recommended way to cache computations that return data: loading a DataFrame from CSV, transforming a NumPy array, querying an API, or any other function that returns a serializable data object (str, int, float, DataFrame, array, list, …). It creates a new copy of the data at each function call, making it safe against [mutations and race conditions](#mutation-and-concurrency-issues). The behavior of `st.cache_data` is what you want in most cases – so if you're unsure, start with `st.cache_data` and see if it works!\n- `st.cache_resource` is the recommended way to cache global resources like ML models or database connections – unserializable objects that you don't want to load multiple times. Using it, you can share these resources across all reruns and sessions of an app without copying or duplication. Note that any mutations to the cached return value directly mutate the object in the cache (more details below).\n\n<Image src=\"/images/caching-high-level-diagram.png\" caption=\"Streamlit's two caching decorators and their use cases.\" alt=\"Streamlit's two caching decorators and their use cases. Use st.cache_data for anything you'd store in a database. Use st.cache_resource for anything you can't store in a database, like a connection to a database or a machine learning model.\" />\n\n## Basic usage\n\n### st.cache_data\n\n`st.cache_data` is your go-to command for all functions that return data – whether DataFrames, NumPy arrays, str, int, float, or other serializable types. It's the right command for almost all use cases! Within each user session, an `@st.cache_data`-decorated function returns a _copy_ of the cached return value (if the value is already cached).\n\n#### Usage\n\n<br />\n\nLet's look at an example of using `st.cache_data`. Suppose your app loads the [Uber ride-sharing dataset](https://github.com/plotly/datasets/blob/master/uber-rides-data1.csv) – a CSV file of 50 MB – from the internet into a DataFrame:\n\n```python\ndef load_data(url):\n    df = pd.read_csv(url)  # 👈 Download the data\n    return df\n\ndf = load_data(\"https://github.com/plotly/datasets/raw/master/uber-rides-data1.csv\")\nst.dataframe(df)\n\nst.button(\"Rerun\")\n```\n\nRunning the `load_data` function takes 2 to 30 seconds, depending on your internet connection. (Tip: if you are on a slow connection, use [this 5 MB dataset instead](https://github.com/plotly/datasets/blob/master/26k-consumer-complaints.csv)). Without caching, the download is rerun each time the app is loaded or with user interaction. Try it yourself by clicking the button we added! Not a great experience… 😕\n\nNow let's add the `@st.cache_data` decorator on `load_data`:\n\n```python\n@st.cache_data  # 👈 Add the caching decorator\ndef load_data(url):\n    df = pd.read_csv(url)\n    return df\n\ndf = load_data(\"https://github.com/plotly/datasets/raw/master/uber-rides-data1.csv\")\nst.dataframe(df)\n\nst.button(\"Rerun\")\n```\n\nRun the app again. You'll notice that the slow download only happens on the first run. Every subsequent rerun should be almost instant! 💨\n\n#### Behavior\n\n<br />\n\nHow does this work? Let's go through the behavior of `st.cache_data` step by step:\n\n- On the first run, Streamlit recognizes that it has never called the `load_data` function with the specified parameter value (the URL of the CSV file) So it runs the function and downloads the data.\n- Now our caching mechanism becomes active: the returned DataFrame is serialized (converted to bytes) via [pickle](https://docs.python.org/3/library/pickle.html) and stored in the cache (together with the value of the `url` parameter).\n- On the next run, Streamlit checks the cache for an entry of `load_data` with the specific `url`. There is one! So it retrieves the cached object, deserializes it to a DataFrame, and returns it instead of re-running the function and downloading the data again.\n\nThis process of serializing and deserializing the cached object creates a copy of our original DataFrame. While this copying behavior may seem unnecessary, it's what we want when caching data objects since it effectively prevents mutation and concurrency issues. Read the section “[Mutation and concurrency issues](#mutation-and-concurrency-issues)\" below to understand this in more detail.\n\n<Warning>\n\n`st.cache_data` implicitly uses the `pickle` module, which is known to be insecure. Anything your cached function returns is pickled and stored, then unpickled on retrieval. Ensure your cached functions return trusted values because it is possible to construct malicious pickle data that will execute arbitrary code during unpickling. Never load data that could have come from an untrusted source in an unsafe mode or that could have been tampered with. **Only load data you trust**.\n\n</Warning>\n\n#### Examples\n\n<br/>\n\n**DataFrame transformations**\n\nIn the example above, we already showed how to cache loading a DataFrame. It can also be useful to cache DataFrame transformations such as `df.filter`, `df.apply`, or `df.sort_values`. Especially with large DataFrames, these operations can be slow.\n\n```python\n@st.cache_data\ndef transform(df):\n    df = df.filter(items=['one', 'three'])\n    df = df.apply(np.sum, axis=0)\n\treturn df\n```\n\n**Array computations**\n\nSimilarly, it can make sense to cache computations on NumPy arrays:\n\n```python\n@st.cache_data\ndef add(arr1, arr2):\n\treturn arr1 + arr2\n```\n\n**Database queries**\n\nYou usually make SQL queries to load data into your app when working with databases. Repeatedly running these queries can be slow, cost money, and degrade the performance of your database. We strongly recommend caching any database queries in your app. See also [our guides on connecting Streamlit to different databases](/develop/tutorials/databases) for in-depth examples.\n\n```python\nconnection = database.connect()\n\n@st.cache_data\ndef query():\n    return pd.read_sql_query(\"SELECT * from table\", connection)\n```\n\n<Tip>\n\nYou should set a `ttl` (time to live) to get new results from your database. If you set `st.cache_data(ttl=3600)`, Streamlit invalidates any cached values after 1 hour (3600 seconds) and runs the cached function again. See details in [Controlling cache size and duration](#controlling-cache-size-and-duration).\n\n</Tip>\n\n**API calls**\n\nSimilarly, it makes sense to cache API calls. Doing so also avoids rate limits.\n\n```python\n@st.cache_data\ndef api_call():\n    response = requests.get('https://jsonplaceholder.typicode.com/posts/1')\n    return response.json()\n```\n\n**Running ML models (inference)**\n\nRunning complex machine learning models can use significant time and memory. To avoid rerunning the same computations over and over, use caching.\n\n```python\n@st.cache_data\ndef run_model(inputs):\n    return model(inputs)\n```\n\n### st.cache_resource\n\n`st.cache_resource` is the right command to cache “resources\" that should be available globally across all users, sessions, and reruns. It has more limited use cases than `st.cache_data`, especially for caching database connections and ML models. Within each user session, an `@st.cache_resource`-decorated function returns the cached instance of the return value (if the value is already cached). Therefore, objects cached by `st.cache_resource` act like singletons and can mutate.\n\n#### Usage\n\nAs an example for `st.cache_resource`, let's look at a typical machine learning app. As a first step, we need to load an ML model. We do this with [Hugging Face's transformers library](https://huggingface.co/docs/transformers/index):\n\n```python\nfrom transformers import pipeline\nmodel = pipeline(\"sentiment-analysis\")  # 👈 Load the model\n```\n\nIf we put this code into a Streamlit app directly, the app will load the model at each rerun or user interaction. Repeatedly loading the model poses two problems:\n\n- Loading the model takes time and slows down the app.\n- Each session loads the model from scratch, which takes up a huge amount of memory.\n\nInstead, it would make much more sense to load the model once and use that same object across all users and sessions. That's exactly the use case for `st.cache_resource`! Let's add it to our app and process some text the user entered:\n\n```python\nfrom transformers import pipeline\n\n@st.cache_resource  # 👈 Add the caching decorator\ndef load_model():\n    return pipeline(\"sentiment-analysis\")\n\nmodel = load_model()\n\nquery = st.text_input(\"Your query\", value=\"I love Streamlit! 🎈\")\nif query:\n    result = model(query)[0]  # 👈 Classify the query text\n    st.write(result)\n```\n\nIf you run this app, you'll see that the app calls `load_model` only once – right when the app starts. Subsequent runs will reuse that same model stored in the cache, saving time and memory!\n\n#### Behavior\n\n<br />\n\nUsing `st.cache_resource` is very similar to using `st.cache_data`. But there are a few important differences in behavior:\n\n- `st.cache_resource` does **not** create a copy of the cached return value but instead stores the object itself in the cache. All mutations on the function's return value directly affect the object in the cache, so you must ensure that mutations from multiple sessions do not cause problems. In short, the return value must be thread-safe.\n\n    <Warning>\n\n  Using `st.cache_resource` on objects that are not thread-safe might lead to crashes or corrupted data. Learn more below under [Mutation and concurrency issues](#mutation-and-concurrency-issues).\n  </Warning>\n\n- Not creating a copy means there's just one global instance of the cached return object, which saves memory, e.g. when using a large ML model. In computer science terms, we create a [singleton](https://en.wikipedia.org/wiki/Singleton_pattern).\n- Return values of functions do not need to be serializable. This behavior is great for types not serializable by nature, e.g., database connections, file handles, or threads. Caching these objects with `st.cache_data` is not possible.\n\n#### Examples\n\n<br />\n\n**Database connections**\n\n`st.cache_resource` is useful for connecting to databases. Usually, you're creating a connection object that you want to reuse globally for every query. Creating a new connection object at each run would be inefficient and might lead to connection errors. That's exactly what `st.cache_resource` can do, e.g., for a Postgres database:\n\n```python\n@st.cache_resource\ndef init_connection():\n    host = \"hh-pgsql-public.ebi.ac.uk\"\n    database = \"pfmegrnargs\"\n    user = \"reader\"\n    password = \"NWDMCE5xdipIjRrp\"\n    return psycopg2.connect(host=host, database=database, user=user, password=password)\n\nconn = init_connection()\n```\n\nOf course, you can do the same for any other database. Have a look at [our guides on how to connect Streamlit to databases](/develop/tutorials/databases) for in-depth examples.\n\n**Loading ML models**\n\nYour app should always cache ML models, so they are not loaded into memory again for every new session. See the [example](#usage-1) above for how this works with 🤗 Hugging Face models. You can do the same thing for PyTorch, TensorFlow, etc. Here's an example for PyTorch:\n\n```python\n@st.cache_resource\ndef load_model():\n    model = torchvision.models.resnet50(weights=ResNet50_Weights.DEFAULT)\n    model.eval()\n    return model\n\nmodel = load_model()\n```\n\n### Deciding which caching decorator to use\n\n<br />\n\nThe sections above showed many common examples for each caching decorator. But there are edge cases for which it's less trivial to decide which caching decorator to use. Eventually, it all comes down to the difference between “data\" and “resource\":\n\n- Data are serializable objects (objects that can be converted to bytes via [pickle](https://docs.python.org/3/library/pickle.html)) that you could easily save to disk. Imagine all the types you would usually store in a database or on a file system – basic types like str, int, and float, but also arrays, DataFrames, images, or combinations of these types (lists, tuples, dicts, and so on).\n- Resources are unserializable objects that you usually would not save to disk or a database. They are often more complex, non-permanent objects like database connections, ML models, file handles, threads, etc.\n\nFrom the types listed above, it should be obvious that most objects in Python are “data.\" That's also why `st.cache_data` is the correct command for almost all use cases. `st.cache_resource` is a more exotic command that you should only use in specific situations.\n\nOr if you're lazy and don't want to think too much, look up your use case or return type in the table below 😉:\n\n| Use case                             |                                                                                                       Typical return types |                                                                                                                                            Caching decorator |\n| :----------------------------------- | -------------------------------------------------------------------------------------------------------------------------: | -----------------------------------------------------------------------------------------------------------------------------------------------------------: |\n| Reading a CSV file with pd.read_csv  |                                                                                                           pandas.DataFrame |                                                                                                                                                st.cache_data |\n| Reading a text file                  |                                                                                                           str, list of str |                                                                                                                                                st.cache_data |\n| Transforming pandas dataframes       |                                                                                            pandas.DataFrame, pandas.Series |                                                                                                                                                st.cache_data |\n| Computing with numpy arrays          |                                                                                                              numpy.ndarray |                                                                                                                                                st.cache_data |\n| Simple computations with basic types |                                                                                                         str, int, float, … |                                                                                                                                                st.cache_data |\n| Querying a database                  |                                                                                                           pandas.DataFrame |                                                                                                                                                st.cache_data |\n| Querying an API                      |                                                                                                pandas.DataFrame, str, dict |                                                                                                                                                st.cache_data |\n| Running an ML model (inference)      |                                                                                     pandas.DataFrame, str, int, dict, list |                                                                                                                                                st.cache_data |\n| Creating or processing images        |                                                                                             PIL.Image.Image, numpy.ndarray |                                                                                                                                                st.cache_data |\n| Creating charts                      |                                                        matplotlib.figure.Figure, plotly.graph_objects.Figure, altair.Chart | st.cache_data (but some libraries require st.cache_resource, since the chart object is not serializable – make sure not to mutate the chart after creation!) |\n| Lazy computations                    |                                                                                                           polars.LazyFrame |                                                                          st.cache_resource (but may be better to use st.cache_data on the collected results) |\n| Loading ML models                    |                                                             transformers.Pipeline, torch.nn.Module, tensorflow.keras.Model |                                                                                                                                            st.cache_resource |\n| Initializing database connections    | pyodbc.Connection, sqlalchemy.engine.base.Engine, psycopg2.connection, mysql.connector.MySQLConnection, sqlite3.Connection |                                                                                                                                            st.cache_resource |\n| Opening persistent file handles      |                                                                                                         \\_io.TextIOWrapper |                                                                                                                                            st.cache_resource |\n| Opening persistent threads           |                                                                                                           threading.thread |                                                                                                                                            st.cache_resource |\n\n## Advanced usage\n\n### Controlling cache size and duration\n\nIf your app runs for a long time and constantly caches functions, you might run into two problems:\n\n1. The app runs out of memory because the cache is too large.\n2. Objects in the cache become stale, e.g. because you cached old data from a database.\n\nYou can combat these problems with the `ttl` and `max_entries` parameters, which are available for both caching decorators.\n\n**The `ttl` (time-to-live) parameter**\n\n`ttl` sets a time to live on a cached function. If that time is up and you call the function again, the app will discard any old, cached values, and the function will be rerun. The newly computed value will then be stored in the cache. This behavior is useful for preventing stale data (problem 2) and the cache from growing too large (problem 1). Especially when pulling data from a database or API, you should always set a `ttl` so you are not using old data. Here's an example:\n\n```python\n@st.cache_data(ttl=3600)  # 👈 Cache data for 1 hour (=3600 seconds)\ndef get_api_data():\n    data = api.get(...)\n    return data\n```\n\n<Tip>\n\nYou can also set `ttl` values using `timedelta`, e.g., `ttl=datetime.timedelta(hours=1)`.\n\n</Tip>\n\n**The `max_entries` parameter**\n\n`max_entries` sets the maximum number of entries in the cache. An upper bound on the number of cache entries is useful for limiting memory (problem 1), especially when caching large objects. The oldest entry will be removed when a new entry is added to a full cache. Here's an example:\n\n```python\n@st.cache_data(max_entries=1000)  # 👈 Maximum 1000 entries in the cache\ndef get_large_array(seed):\n    np.random.seed(seed)\n    arr = np.random.rand(100000)\n    return arr\n```\n\n### Customizing the spinner\n\nBy default, Streamlit shows a small loading spinner in the app when a cached function is running. You can modify it easily with the `show_spinner` parameter, which is available for both caching decorators:\n\n```python\n@st.cache_data(show_spinner=False)  # 👈 Disable the spinner\ndef get_api_data():\n    data = api.get(...)\n    return data\n\n@st.cache_data(show_spinner=\"Fetching data from API...\")  # 👈 Use custom text for spinner\ndef get_api_data():\n    data = api.get(...)\n    return data\n```\n\n### Excluding input parameters\n\nIn a cached function, all input parameters must be hashable. Let's quickly explain why and what it means. When the function is called, Streamlit looks at its parameter values to determine if it was cached before. Therefore, it needs a reliable way to compare the parameter values across function calls. Trivial for a string or int – but complex for arbitrary objects! Streamlit uses [hashing](https://en.wikipedia.org/wiki/Hash_function) to solve that. It converts the parameter to a stable key and stores that key. At the next function call, it hashes the parameter again and compares it with the stored hash key.\n\nUnfortunately, not all parameters are hashable! E.g., you might pass an unhashable database connection or ML model to your cached function. In this case, you can exclude input parameters from caching. Simply prepend the parameter name with an underscore (e.g., `_param1`), and it will not be used for caching. Even if it changes, Streamlit will return a cached result if all the other parameters match up.\n\nHere's an example:\n\n```python\n@st.cache_data\ndef fetch_data(_db_connection, num_rows):  # 👈 Don't hash _db_connection\n    data = _db_connection.fetch(num_rows)\n    return data\n\nconnection = init_connection()\nfetch_data(connection, 10)\n```\n\nBut what if you want to cache a function that takes an unhashable parameter? For example, you might want to cache a function that takes an ML model as input and returns the layer names of that model. Since the model is the only input parameter, you cannot exclude it from caching. In this case you can use the `hash_funcs` parameter to specify a custom hashing function for the model.\n\n### The `hash_funcs` parameter\n\nAs described above, Streamlit's caching decorators hash the input parameters and cached function's signature to determine whether the function has been run before and has a return value stored (\"cache hit\") or needs to be run (\"cache miss\"). Input parameters that are not hashable by Streamlit's hashing implementation can be ignored by prepending an underscore to their name. But there two rare cases where this is undesirable. i.e. where you want to hash the parameter that Streamlit is unable to hash:\n\n1. When Streamlit's hashing mechanism fails to hash a parameter, resulting in a `UnhashableParamError` being raised.\n2. When you want to override Streamlit's default hashing mechanism for a parameter.\n\nLet's discuss each of these cases in turn with examples.\n\n#### Example 1: Hashing a custom class\n\nStreamlit does not know how to hash custom classes. If you pass a custom class to a cached function, Streamlit will raise a `UnhashableParamError`. For example, let's define a custom class `MyCustomClass` that accepts an initial integer score. Let's also define a cached function `multiply_score` that multiplies the score by a multiplier:\n\n```python\nimport streamlit as st\n\nclass MyCustomClass:\n    def __init__(self, initial_score: int):\n        self.my_score = initial_score\n\n@st.cache_data\ndef multiply_score(obj: MyCustomClass, multiplier: int) -> int:\n    return obj.my_score * multiplier\n\ninitial_score = st.number_input(\"Enter initial score\", value=15)\n\nscore = MyCustomClass(initial_score)\nmultiplier = 2\n\nst.write(multiply_score(score, multiplier))\n```\n\nIf you run this app, you'll see that Streamlit raises a `UnhashableParamError` since it does not know how to hash `MyCustomClass`:\n\n```python\nUnhashableParamError: Cannot hash argument 'obj' (of type __main__.MyCustomClass) in 'multiply_score'.\n```\n\nTo fix this, we can use the `hash_funcs` parameter to tell Streamlit how to hash `MyCustomClass`. We do this by passing a dictionary to `hash_funcs` that maps the name of the parameter to a hash function. The choice of hash function is up to the developer. In this case, let's define a custom hash function `hash_func` that takes the custom class as input and returns the score. We want the score to be the unique identifier of the object, so we can use it to deterministically hash the object:\n\n```python\nimport streamlit as st\n\nclass MyCustomClass:\n    def __init__(self, initial_score: int):\n        self.my_score = initial_score\n\ndef hash_func(obj: MyCustomClass) -> int:\n    return obj.my_score  # or any other value that uniquely identifies the object\n\n@st.cache_data(hash_funcs={MyCustomClass: hash_func})\ndef multiply_score(obj: MyCustomClass, multiplier: int) -> int:\n    return obj.my_score * multiplier\n\ninitial_score = st.number_input(\"Enter initial score\", value=15)\n\nscore = MyCustomClass(initial_score)\nmultiplier = 2\n\nst.write(multiply_score(score, multiplier))\n```\n\nNow if you run the app, you'll see that Streamlit no longer raises a `UnhashableParamError` and the app runs as expected.\n\nLet's now consider the case where `multiply_score` is an attribute of `MyCustomClass` and we want to hash the entire object:\n\n```python\nimport streamlit as st\n\nclass MyCustomClass:\n    def __init__(self, initial_score: int):\n        self.my_score = initial_score\n\n    @st.cache_data\n    def multiply_score(self, multiplier: int) -> int:\n        return self.my_score * multiplier\n\ninitial_score = st.number_input(\"Enter initial score\", value=15)\n\nscore = MyCustomClass(initial_score)\nmultiplier = 2\n\nst.write(score.multiply_score(multiplier))\n```\n\nIf you run this app, you'll see that Streamlit raises a `UnhashableParamError` since it cannot hash the argument `'self' (of type __main__.MyCustomClass) in 'multiply_score'`. A simple fix here could be to use Python's `hash()` function to hash the object:\n\n```python\nimport streamlit as st\n\nclass MyCustomClass:\n    def __init__(self, initial_score: int):\n        self.my_score = initial_score\n\n    @st.cache_data(hash_funcs={\"__main__.MyCustomClass\": lambda x: hash(x.my_score)})\n    def multiply_score(self, multiplier: int) -> int:\n        return self.my_score * multiplier\n\ninitial_score = st.number_input(\"Enter initial score\", value=15)\n\nscore = MyCustomClass(initial_score)\nmultiplier = 2\n\nst.write(score.multiply_score(multiplier))\n```\n\nAbove, the hash function is defined as `lambda x: hash(x.my_score)`. This creates a hash based on the `my_score` attribute of the `MyCustomClass` instance. As long as `my_score` remains the same, the hash remains the same. Thus, the result of `multiply_score` can be retrieved from the cache without recomputation.\n\nAs an astute Pythonista, you may have been tempted to use Python's `id()` function to hash the object like so:\n\n```python\nimport streamlit as st\n\nclass MyCustomClass:\n    def __init__(self, initial_score: int):\n        self.my_score = initial_score\n\n    @st.cache_data(hash_funcs={\"__main__.MyCustomClass\": id})\n    def multiply_score(self, multiplier: int) -> int:\n        return self.my_score * multiplier\n\ninitial_score = st.number_input(\"Enter initial score\", value=15)\n\nscore = MyCustomClass(initial_score)\nmultiplier = 2\n\nst.write(score.multiply_score(multiplier))\n```\n\nIf you run the app, you'll notice that Streamlit recomputes `multiply_score` each time even if `my_score` hasn't changed! Puzzled? In Python, `id()` returns the identity of an object, which is unique and constant for the object during its lifetime. This means that even if the `my_score` value is the same between two instances of `MyCustomClass`, `id()` will return different values for these two instances, leading to different hash values. As a result, Streamlit considers these two different instances as needing separate cached values, thus it recomputes the `multiply_score` each time even if `my_score` hasn't changed.\n\nThis is why we discourage using it as hash func, and instead encourage functions that return deterministic, true hash values. That said, if you know what you're doing, you can use `id()` as a hash function. Just be aware of the consequences. For example, `id` is often the _correct_ hash func when you're passing the result of an `@st.cache_resource` function as the input param to another cached function. There's a whole class of object types that aren’t otherwise hashable.\n\n#### Example 2: Hashing a Pydantic model\n\nLet's consider another example where we want to hash a Pydantic model:\n\n```python\nimport streamlit as st\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n\n@st.cache_data\ndef identity(person: Person):\n    return person\n\nperson = identity(Person(name=\"Lee\"))\nst.write(f\"The person is {person.name}\")\n```\n\nAbove, we define a custom class `Person` using Pydantic's `BaseModel` with a single attribute name. We also define an `identity` function which accepts an instance of `Person` as an arg and returns it without modification. This function is intended to cache the result, therefore, if called multiple times with the same `Person` instance, it won't recompute but return the cached instance.\n\nIf you run the app, however, you'll run into a `UnhashableParamError: Cannot hash argument 'person' (of type __main__.Person) in 'identity'.` error. This is because Streamlit does not know how to hash the `Person` class. To fix this, we can use the `hash_funcs` kwarg to tell Streamlit how to hash `Person`.\n\nIn the version below, we define a custom hash function `hash_func` that takes the `Person` instance as input and returns the name attribute. We want the name to be the unique identifier of the object, so we can use it to deterministically hash the object:\n\n```python\nimport streamlit as st\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n\n@st.cache_data(hash_funcs={Person: lambda p: p.name})\ndef identity(person: Person):\n    return person\n\nperson = identity(Person(name=\"Lee\"))\nst.write(f\"The person is {person.name}\")\n```\n\n#### Example 3: Hashing a ML model\n\nThere may be cases where you want to pass your favorite machine learning model to a cached function. For example, let's say you want to pass a TensorFlow model to a cached function, based on what model the user selects in the app. You might try something like this:\n\n```python\nimport streamlit as st\nimport tensorflow as tf\n\n@st.cache_resource\ndef load_base_model(option):\n    if option == 1:\n        return tf.keras.applications.ResNet50(include_top=False, weights=\"imagenet\")\n    else:\n        return tf.keras.applications.MobileNetV2(include_top=False, weights=\"imagenet\")\n\n@st.cache_resource\ndef load_layers(base_model):\n    return [layer.name for layer in base_model.layers]\n\noption = st.radio(\"Model 1 or 2\", [1, 2])\n\nbase_model = load_base_model(option)\n\nlayers = load_layers(base_model)\n\nst.write(layers)\n```\n\nIn the above app, the user can select one of two models. Based on the selection, the app loads the corresponding model and passes it to `load_layers`. This function then returns the names of the layers in the model. If you run the app, you'll see that Streamlit raises a `UnhashableParamError` since it cannot hash the argument `'base_model' (of type keras.engine.functional.Functional) in 'load_layers'`.\n\nIf you disable hashing for `base_model` by prepending an underscore to its name, you'll observe that regardless of which base model is chosen, the layers displayed are same. This subtle bug is due to the fact that the `load_layers` function is not re-run when the base model changes. This is because Streamlit does not hash the `base_model` argument, so it does not know that the function needs to be re-run when the base model changes.\n\nTo fix this, we can use the `hash_funcs` kwarg to tell Streamlit how to hash the `base_model` argument. In the version below, we define a custom hash function `hash_func`: `Functional: lambda x: x.name`. Our choice of hash func is informed by our knowledge that the `name` attribute of a `Functional` object or model uniquely identifies it. As long as the `name` attribute remains the same, the hash remains the same. Thus, the result of `load_layers` can be retrieved from the cache without recomputation.\n\n```python\nimport streamlit as st\nimport tensorflow as tf\nfrom keras.engine.functional import Functional\n\n@st.cache_resource\ndef load_base_model(option):\n    if option == 1:\n        return tf.keras.applications.ResNet50(include_top=False, weights=\"imagenet\")\n    else:\n        return tf.keras.applications.MobileNetV2(include_top=False, weights=\"imagenet\")\n\n@st.cache_resource(hash_funcs={Functional: lambda x: x.name})\ndef load_layers(base_model):\n    return [layer.name for layer in base_model.layers]\n\noption = st.radio(\"Model 1 or 2\", [1, 2])\n\nbase_model = load_base_model(option)\n\nlayers = load_layers(base_model)\n\nst.write(layers)\n```\n\nIn the above case, we could also have used `hash_funcs={Functional: id}` as the hash function. This is because `id` is often the _correct_ hash func when you're passing the result of an `@st.cache_resource` function as the input param to another cached function.\n\n#### Example 4: Overriding Streamlit's default hashing mechanism\n\nLet's consider another example where we want to override Streamlit's default hashing mechanism for a pytz-localized datetime object:\n\n```python\nfrom datetime import datetime\nimport pytz\nimport streamlit as st\n\ntz = pytz.timezone(\"Europe/Berlin\")\n\n@st.cache_data\ndef load_data(dt):\n    return dt\n\nnow = datetime.now()\nst.text(load_data(dt=now))\n\nnow_tz = tz.localize(datetime.now())\nst.text(load_data(dt=now_tz))\n```\n\nIt may be surprising to see that although `now` and `now_tz` are of the same `<class 'datetime.datetime'>` type, Streamlit does not how to hash `now_tz` and raises a `UnhashableParamError`. In this case, we can override Streamlit's default hashing mechanism for `datetime` objects by passing a custom hash function to the `hash_funcs` kwarg:\n\n```python\nfrom datetime import datetime\n\nimport pytz\nimport streamlit as st\n\ntz = pytz.timezone(\"Europe/Berlin\")\n\n@st.cache_data(hash_funcs={datetime: lambda x: x.strftime(\"%a %d %b %Y, %I:%M%p\")})\ndef load_data(dt):\n    return dt\n\nnow = datetime.now()\nst.text(load_data(dt=now))\n\nnow_tz = tz.localize(datetime.now())\nst.text(load_data(dt=now_tz))\n```\n\nLet's now consider a case where we want to override Streamlit's default hashing mechanism for NumPy arrays. While Streamlit natively hashes Pandas and NumPy objects, there may be cases where you want to override Streamlit's default hashing mechanism for these objects.\n\nFor example, let's say we create a cache-decorated `show_data` function that accepts a NumPy array and returns it without modification. In the bellow app, `data = df[\"str\"].unique()` (which is a NumPy array) is passed to the `show_data` function.\n\n```python\nimport time\nimport numpy as np\nimport pandas as pd\nimport streamlit as st\n\n@st.cache_data\ndef get_data():\n    df = pd.DataFrame({\"num\": [112, 112, 2, 3], \"str\": [\"be\", \"a\", \"be\", \"c\"]})\n    return df\n\n@st.cache_data\ndef show_data(data):\n    time.sleep(2)  # This makes the function take 2s to run\n    return data\n\ndf = get_data()\ndata = df[\"str\"].unique()\n\nst.dataframe(show_data(data))\nst.button(\"Re-run\")\n```\n\nSince `data` is always the same, we expect the `show_data` function to return the cached value. However, if you run the app, and click the `Re-run` button, you'll notice that the `show_data` function is re-run each time. We can assume this behavior is a consequence of Streamlit's default hashing mechanism for NumPy arrays.\n\nTo work around this, let's define a custom hash function `hash_func` that takes a NumPy array as input and returns a string representation of the array:\n\n```python\nimport time\nimport numpy as np\nimport pandas as pd\nimport streamlit as st\n\n@st.cache_data\ndef get_data():\n    df = pd.DataFrame({\"num\": [112, 112, 2, 3], \"str\": [\"be\", \"a\", \"be\", \"c\"]})\n    return df\n\n@st.cache_data(hash_funcs={np.ndarray: str})\ndef show_data(data):\n    time.sleep(2)  # This makes the function take 2s to run\n    return data\n\ndf = get_data()\ndata = df[\"str\"].unique()\n\nst.dataframe(show_data(data))\nst.button(\"Re-run\")\n```\n\nNow if you run the app, and click the `Re-run` button, you'll notice that the `show_data` function is no longer re-run each time. It's important to note here that our choice of hash function was very naive and not necessarily the best choice. For example, if the NumPy array is large, converting it to a string representation may be expensive. In such cases, it is up to you as the developer to define what a good hash function is for your use case.\n\n#### Static elements\n\nSince version 1.16.0, cached functions can contain Streamlit commands! For example, you can do this:\n\n```python\n@st.cache_data\ndef get_api_data():\n    data = api.get(...)\n    st.success(\"Fetched data from API!\")  # 👈 Show a success message\n    return data\n```\n\nAs we know, Streamlit only runs this function if it hasn't been cached before. On this first run, the `st.success` message will appear in the app. But what happens on subsequent runs? It still shows up! Streamlit realizes that there is an `st.` command inside the cached function, saves it during the first run, and replays it on subsequent runs. Replaying static elements works for both caching decorators.\n\nYou can also use this functionality to cache entire parts of your UI:\n\n```python\n@st.cache_data\ndef show_data():\n    st.header(\"Data analysis\")\n    data = api.get(...)\n    st.success(\"Fetched data from API!\")\n    st.write(\"Here is a plot of the data:\")\n    st.line_chart(data)\n    st.write(\"And here is the raw data:\")\n    st.dataframe(data)\n```\n\n#### Input widgets\n\nYou can also use [interactive input widgets](/develop/api-reference/widgets) like `st.slider` or `st.text_input` in cached functions. Widget replay is an experimental feature at the moment. To enable it, you need to set the `experimental_allow_widgets` parameter:\n\n```python\n@st.cache_data(experimental_allow_widgets=True)  # 👈 Set the parameter\ndef get_data():\n    num_rows = st.slider(\"Number of rows to get\")  # 👈 Add a slider\n    data = api.get(..., num_rows)\n    return data\n```\n\nStreamlit treats the slider like an additional input parameter to the cached function. If you change the slider position, Streamlit will see if it has already cached the function for this slider value. If yes, it will return the cached value. If not, it will rerun the function using the new slider value.\n\nUsing widgets in cached functions is extremely powerful because it lets you cache entire parts of your app. But it can be dangerous! Since Streamlit treats the widget value as an additional input parameter, it can easily lead to excessive memory usage. Imagine your cached function has five sliders and returns a 100 MB DataFrame. Then we'll add 100 MB to the cache for _every permutation_ of these five slider values – even if the sliders do not influence the returned data! These additions can make your cache explode very quickly. Please be aware of this limitation if you use widgets in cached functions. We recommend using this feature only for isolated parts of your UI where the widgets directly influence the cached return value.\n\n<Warning>\n\nSupport for widgets in cached functions is experimental. We may change or remove it anytime without warning. Please use it with care!\n</Warning>\n\n<Note>\n\nTwo widgets are currently not supported in cached functions: `st.file_uploader` and `st.camera_input`. We may support them in the future. Feel free to [open a GitHub issue](https://github.com/streamlit/streamlit/issues) if you need them!\n</Note>\n\n### Dealing with large data\n\nAs we explained, you should cache data objects with `st.cache_data`. But this can be slow for extremely large data, e.g., DataFrames or arrays with >100 million rows. That's because of the [copying behavior](#copying-behavior) of `st.cache_data`: on the first run, it serializes the return value to bytes and deserializes it on subsequent runs. Both operations take time.\n\nIf you're dealing with extremely large data, it can make sense to use `st.cache_resource` instead. It does not create a copy of the return value via serialization/deserialization and is almost instant. But watch out: any mutation to the function's return value (such as dropping a column from a DataFrame or setting a value in an array) directly manipulates the object in the cache. You must ensure this doesn't corrupt your data or lead to crashes. See the section on [Mutation and concurrency issues](#mutation-and-concurrency-issues) below.\n\nWhen benchmarking `st.cache_data` on pandas DataFrames with four columns, we found that it becomes slow when going beyond 100 million rows. The table shows runtimes for both caching decorators at different numbers of rows (all with four columns):\n\n|                   |                 | 10M rows | 50M rows | 100M rows | 200M rows |\n| ----------------- | --------------- | :------: | :------: | :-------: | :-------: |\n| st.cache_data     | First run\\*     |  0.4 s   |   3 s    |   14 s    |   28 s    |\n|                   | Subsequent runs |  0.2 s   |   1 s    |    2 s    |    7 s    |\n| st.cache_resource | First run\\*     |  0.01 s  |  0.1 s   |   0.2 s   |    1 s    |\n|                   | Subsequent runs |   0 s    |   0 s    |    0 s    |    0 s    |\n\n|                                                                                                                                                              |\n| :----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _\\*For the first run, the table only shows the overhead time of using the caching decorator. It does not include the runtime of the cached function itself._ |\n\n### Mutation and concurrency issues\n\nIn the sections above, we talked a lot about issues when mutating return objects of cached functions. This topic is complicated! But it's central to understanding the behavior differences between `st.cache_data` and `st.cache_resource`. So let's dive in a bit deeper.\n\nFirst, we should clearly define what we mean by mutations and concurrency:\n\n- By **mutations**, we mean any changes made to a cached function's return value _after_ that function has been called. I.e. something like this:\n\n  ```python\n  @st.cache_data\n  def create_list():\n      l = [1, 2, 3]\n\n  l = create_list()  # 👈 Call the function\n  l[0] = 2  # 👈 Mutate its return value\n  ```\n\n- By **concurrency**, we mean that multiple sessions can cause these mutations at the same time. Streamlit is a web framework that needs to handle many users and sessions connecting to an app. If two people view an app at the same time, they will both cause the Python script to rerun, which may manipulate cached return objects at the same time – concurrently.\n\nMutating cached return objects can be dangerous. It can lead to exceptions in your app and even corrupt your data (which can be worse than a crashed app!). Below, we'll first explain the copying behavior of `st.cache_data` and show how it can avoid mutation issues. Then, we'll show how concurrent mutations can lead to data corruption and how to prevent it.\n\n#### Copying behavior\n\n`st.cache_data` creates a copy of the cached return value each time the function is called. This avoids most mutations and concurrency issues. To understand it in detail, let's go back to the [Uber ridesharing example](#usage) from the section on `st.cache_data` above. We are making two modifications to it:\n\n1. We are using `st.cache_resource` instead of `st.cache_data`. `st.cache_resource` does **not** create a copy of the cached object, so we can see what happens without the copying behavior.\n2. After loading the data, we manipulate the returned DataFrame (in place!) by dropping the column `\"Lat\"`.\n\nHere's the code:\n\n```python\n@st.cache_resource   # 👈 Turn off copying behavior\ndef load_data(url):\n    df = pd.read_csv(url)\n    return df\n\ndf = load_data(\"https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data1.csv\")\nst.dataframe(df)\n\ndf.drop(columns=['Lat'], inplace=True)  # 👈 Mutate the dataframe inplace\n\nst.button(\"Rerun\")\n```\n\nLet's run it and see what happens! The first run should work fine. But in the second run, you see an exception: `KeyError: \"['Lat'] not found in axis\"`. Why is that happening? Let's go step by step:\n\n- On the first run, Streamlit runs `load_data` and stores the resulting DataFrame in the cache. Since we're using `st.cache_resource`, it does **not** create a copy but stores the original DataFrame.\n- Then we drop the column `\"Lat\"` from the DataFrame. Note that this is dropping the column from the _original_ DataFrame stored in the cache. We are manipulating it!\n- On the second run, Streamlit returns that exact same manipulated DataFrame from the cache. It does not have the column `\"Lat\"` anymore! So our call to `df.drop` results in an exception. Pandas cannot drop a column that doesn't exist.\n\nThe copying behavior of `st.cache_data` prevents this kind of mutation error. Mutations can only affect a specific copy and not the underlying object in the cache. The next rerun will get its own, unmutated copy of the DataFrame. You can try it yourself, just replace `st.cache_resource` with `st.cache_data` above, and you'll see that everything works.\n\nBecause of this copying behavior, `st.cache_data` is the recommended way to cache data transforms and computations – anything that returns a serializable object.\n\n#### Concurrency issues\n\nNow let's look at what can happen when multiple users concurrently mutate an object in the cache. Let's say you have a function that returns a list. Again, we are using `st.cache_resource` to cache it so that we are not creating a copy:\n\n```python\n@st.cache_resource\ndef create_list():\n    l = [1, 2, 3]\n    return l\n\nl = create_list()\nfirst_list_value = l[0]\nl[0] = first_list_value + 1\n\nst.write(\"l[0] is:\", l[0])\n```\n\nLet's say user A runs the app. They will see the following output:\n\n```python\nl[0] is: 2\n```\n\nLet's say another user, B, visits the app right after. In contrast to user A, they will see the following output:\n\n```python\nl[0] is: 3\n```\n\nNow, user A reruns the app immediately after user B. They will see the following output:\n\n```python\nl[0] is: 4\n```\n\nWhat is happening here? Why are all outputs different?\n\n- When user A visits the app, `create_list()` is called, and the list `[1, 2, 3]` is stored in the cache. This list is then returned to user A. The first value of the list, `1`, is assigned to `first_list_value` , and `l[0]` is changed to `2`.\n- When user B visits the app, `create_list()` returns the mutated list from the cache: `[2, 2, 3]`. The first value of the list, `2`, is assigned to `first_list_value` and `l[0]` is changed to `3`.\n- When user A reruns the app, `create_list()` returns the mutated list again: `[3, 2, 3]`. The first value of the list, `3`, is assigned to `first_list_value,` and `l[0]` is changed to 4.\n\nIf you think about it, this makes sense. Users A and B use the same list object (the one stored in the cache). And since the list object is mutated, user A's change to the list object is also reflected in user B's app.\n\nThis is why you must be careful about mutating objects cached with `st.cache_resource`, especially when multiple users access the app concurrently. If we had used `st.cache_data` instead of `st.cache_resource`, the app would have copied the list object for each user, and the above example would have worked as expected – users A and B would have both seen:\n\n```python\nl[0] is: 2\n```\n\n<Note>\n\nThis toy example might seem benign. But data corruption can be extremely dangerous! Imagine we had worked with the financial records of a large bank here. You surely don't want to wake up with less money on your account just because someone used the wrong caching decorator 😉\n\n</Note>\n\n## Migrating from st.cache\n\nWe introduced the caching commands described above in Streamlit 1.18.0. Before that, we had one catch-all command `st.cache`. Using it was often confusing, resulted in weird exceptions, and was slow. That's why we replaced `st.cache` with the new commands in 1.18.0 (read more in this [blog post](https://blog.streamlit.io/introducing-two-new-caching-commands-to-replace-st-cache/)). The new commands provide a more intuitive and efficient way to cache your data and resources and are intended to replace `st.cache` in all new development.\n\nIf your app is still using `st.cache`, don't despair! Here are a few notes on migrating:\n\n- Streamlit will show a deprecation warning if your app uses `st.cache`.\n- We will not remove `st.cache` soon, so you don't need to worry about your 2-year-old app breaking. But we encourage you to try the new commands going forward – they will be way less annoying!\n- Switching code to the new commands should be easy in most cases. To decide whether to use `st.cache_data` or `st.cache_resource`, read [Deciding which caching decorator to use](#deciding-which-caching-decorator-to-use). Streamlit will also recognize common use cases and show hints right in the deprecation warnings.\n- Most parameters from `st.cache` are also present in the new commands, with a few exceptions:\n  - `allow_output_mutation` does not exist anymore. You can safely delete it. Just make sure you use the right caching command for your use case.\n  - `suppress_st_warning` does not exist anymore. You can safely delete it. Cached functions can now contain Streamlit commands and will replay them. If you want to use widgets inside cached functions, set `experimental_allow_widgets=True`. See [Input widgets](#input-widgets) for an example.\n\nIf you have any questions or issues during the migration process, please contact us on the [forum](https://discuss.streamlit.io/), and we will be happy to assist you. 🎈"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments",
    "content": "# Working with fragments\n\nReruns are a central part of every Streamlit app. When users interact with widgets, your script reruns from top to bottom, and your app's frontend is updated. Streamlit provides several features to help you develop your app within this execution model. Streamlit version 1.37.0 introduced fragments to allow rerunning a portion of your code instead of your full script. As your app grows larger and more complex, these fragment reruns help your app be efficient and performant. Fragments give you finer, easy-to-understand control over your app's execution flow.\n\nBefore you read about fragments, we recommend having a basic understanding of [caching](/develop/concepts/architecture/caching), [Session State](/concepts/architecture/session-state), and [forms](/develop/concepts/architecture/forms).\n\n## Use cases for fragments\n\nFragments are versatile and applicable to a wide variety of circumstances. Here are just a few, common scenarios where fragments are useful:\n\n- Your app has multiple visualizations and each one takes time to load, but you have a filter input that only updates one of them.\n- You have a dynamic form that doesn't need to update the rest of your app (until the form is complete).\n- You want to automatically update a single component or group of components to stream data.\n\n## Defining and calling a fragment\n\nStreamlit provides a decorator ([`st.fragment`](/develop/api-reference/execution-flow/st.fragment)) to turn any function into a fragment function. When you call a fragment function that contains a widget function, a user triggers a _fragment rerun_ instead of a full rerun when they interact with that fragment's widget. During a fragment rerun, only your fragment function is re-executed. Anything within the main body of your fragment is updated on the frontend, while the rest of your app remains the same. We'll describe fragments written across multiple containers later on.\n\nHere is a basic example of defining and calling a fragment function. Just like with caching, remember to call your function after defining it.\n\n```python\nimport streamlit as st\n\n@st.fragment\ndef fragment_function():\n    if st.button(\"Hi!\"):\n        st.write(\"Hi back!\")\n\nfragment_function()\n```\n\nIf you want the main body of your fragment to appear in the sidebar or another container, call your fragment function inside a context manager.\n\n```python\nwith st.sidebar:\n    fragment_function()\n```\n\n### Fragment execution flow\n\nConsider the following code with the explanation and diagram below.\n\n```python\nimport streamlit as st\n\nst.title(\"My Awesome App\")\n\n@st.fragment()\ndef toggle_and_text():\n    cols = st.columns(2)\n    cols[0].toggle(\"Toggle\")\n    cols[1].text_area(\"Enter text\")\n\n@st.fragment()\ndef filter_and_file():\n    cols = st.columns(2)\n    cols[0].checkbox(\"Filter\")\n    cols[1].file_uploader(\"Upload image\")\n\ntoggle_and_text()\ncols = st.columns(2)\ncols[0].selectbox(\"Select\", [1,2,3], None)\ncols[1].button(\"Update\")\nfilter_and_file()\n```\n\nWhen a user interacts with an input widget inside a fragment, only the fragment reruns instead of the full script. When a user interacts with an input widget outside a fragment, the full script reruns as usual.\n\nIf you run the code above, the full script will run top to bottom on your app's initial load. If you flip the toggle button in your running app, the first fragment (`toggle_and_text()`) will rerun, redrawing the toggle and text area while leaving everything else unchanged. If you click the checkbox, the second fragment (`filter_and_file()`) will rerun and consequently redraw the checkbox and file uploader. Everything else remains unchanged. Finally, if you click the update button, the full script will rerun, and Streamlit will redraw everything.\n\n![Diagram of fragment execution flow](/images/concepts/fragment_diagram.png)\n\n## Fragment return values and interacting with the rest of your app\n\nStreamlit ignores fragment return values during fragment reruns, so defining return values for your fragment functions is not recommended. Instead, if your fragment needs to share data with the rest of your app, use Session State. Fragments are just functions in your script, so they can access Session State, imported modules, and other Streamlit elements like containers. If your fragment writes to any container created outside of itself, note the following difference in behavior:\n\n- Elements drawn in the main body of your fragment are cleared and redrawn in place during a fragment rerun. Repeated fragment reruns will not cause additional elements to appear.\n- Elements drawn to containers outside the main body of fragment will not be cleared with each fragment rerun. Instead, Streamlit will draw them additively and these elements will accumulate until the next full-script rerun.\n- A fragment can't draw widgets in containers outside of the main body of the fragment. Widgets can only go in the main body of a fragment.\n\nTo prevent elements from accumulating in outside containers, use [`st.empty`](/develop/api-reference/layout/st.empty) containers. For a related tutorial, see [Create a fragment across multiple containers](/develop/tutorials/execution-flow/create-a-multiple-container-fragment).\n\nIf you need to trigger a full-script rerun from inside a fragment, call [`st.rerun`](/develop/api-reference/execution-flow/st.rerun). For a related tutorial, see [Trigger a full-script rerun from inside a fragment](/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment).\n\n## Automate fragment reruns\n\n`st.fragment` includes a convenient `run_every` parameter that causes the fragment to rerun automatically at the specified time interval. These reruns are in addition to any reruns (fragment or full-script) triggered by your user. The automatic fragment reruns will continue even if your user is not interacting with your app. This is a great way to show a live data stream or status on a running background job, efficiently updating your rendered data and _only_ your rendered data.\n\n```python\n@st.fragment(run_every=\"10s\")\ndef auto_function():\n\t\t# This will update every 10 seconds!\n\t\tdf = get_latest_updates()\n\t\tst.line_chart(df)\n\nauto_function()\n```\n\nFor a related tutorial, see [Start and stop a streaming fragment](/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns).\n\n## Compare fragments to other Streamlit features\n\n### Fragments vs forms\n\nHere is a comparison between fragments and forms:\n\n- **Forms** allow users to interact with widgets without rerunning your app. Streamlit does not send user actions within a form to your app's Python backend until the form is submitted. Widgets within a form can not dynamically update other widgets (in or out of the form) in real-time.\n- **Fragments** run independently from the rest of your code. As your users interact with fragment widgets, their actions are immediately processed by your app's Python backend and your fragment code is rerun. Widgets within a fragment can dynamically update other widgets within the same fragment in real-time.\n\nA form batches user input without interaction between any widgets. A fragment immediately processes user input but limits the scope of the rerun.\n\n### Fragments vs callbacks\n\nHere is a comparison between fragments and callbacks:\n\n- **Callbacks** allow you to execute a function at the beginning of a script rerun. A callback is a _single prefix_ to your script rerun.\n- **Fragments** allow you to rerun a portion of your script. A fragment is a _repeatable postfix_ to your script, running each time a user interacts with a fragment widget, or automatically in sequence when `run_every` is set.\n\nWhen callbacks render elements to your page, they are rendered before the rest of your page elements. When fragments render elements to your page, they are updated with each fragment rerun (unless they are written to containers outside of the fragment, in which case they accumulate there).\n\n### Fragments vs custom components\n\nHere is a comparison between fragments and custom components:\n\n- **Components** are custom frontend code that can interact with the Python code, native elements, and widgets in your Streamlit app. Custom components extend what’s possible with Streamlit. They follow the normal Streamlit execution flow.\n- **Fragments** are parts of your app that can rerun independently of the full app. Fragments can be composed of multiple Streamlit elements, widgets, or any Python code.\n\nA fragment can include one or more custom components. A custom component could not easily include a fragment!\n\n### Fragments vs caching\n\nHere is a comparison between fragments and caching:\n\n- **Caching:** allows you to skip over a function and return a previously computed value. When you use caching, you execute everything except the cached function (if you've already run it before).\n- **Fragments:** allow you to freeze most of your app and just execute the fragment. When you use fragments, you execute only the fragment (when triggering a fragment rerun).\n\nCaching saves you from unnecessarily running a piece of your app while the rest runs. Fragments save you from running your full app when you only want to run one piece.\n\n## Limitations and unsupported behavior\n\n- Fragments can't detect a change in input values. It is best to use Session State for dynamic input and output for fragment functions.\n- Using caching and fragments on the same function is unsupported.\n- Fragments can't render widgets in externally-created containers; widgets can only be in the main body of a fragment."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome",
    "content": "# The app chrome\n\nYour Streamlit app has a few widgets in the top right to help you as you develop. These widgets also help your viewers as they use your app. We call this things “the app chrome”. The chrome includes a status area, toolbar, and app menu.\n\nYour app menu is configurable. By default, you can access developer options from the app menu when viewing an app locally or on Streamlit Community Cloud while logged into an account with administrative access. While viewing an app, click the icon in the upper-right corner to access the menu.\n\n![App menu](/images/app-menu/app-menu-developer.png)\n\n## Menu options\n\nThe menu is split into two sections. The upper section contains options available to all viewers and the lower section contains options for developers. Read more about [customizing this menu](#customize-the-menu) at the end of this page.\n\n### Rerun\n\nYou can manually trigger a rerun of your app by clicking \"**Rerun**\" from the app menu. This rerun will not reset your session. Your widget states and values stored in [`st.session_state`](/develop/concepts/architecture/session-state) will be preserved. As a shortcut, without opening the app menu, you can rerun your app by pressing \"**R**\" on your keyboard (if you aren't currently focused on an input element).\n\n### Settings\n\nWith the \"**Settings**\" option, you can control the appearance of your app while it is running. If viewing the app locally, you can set how your app responds to changes in your source code. See more about development flow in [Basic concepts](/get-started/fundamentals/main-concepts#development-flow). You can also force your app to appear in wide mode, even if not set within the script using [`st.set_page_config`](/develop/api-reference/configuration/st.set_page_config).\n\n#### Theme settings\n\nAfter clicking \"**Settings**\" from the app menu, you can choose between \"**Light**\", \"**Dark**\", or \"**Use system setting**\" for the app's base theme. Click \"**Edit active theme**\" to modify the theme, color-by-color.\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/app-menu-settings-modal.png\" alt=\"Settings\" clean />\n</div>\n\n<br />\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/app-menu-settings-theme.png\" alt=\"Theme\" clean />\n</div>\n\n### Print\n\nClick \"**Print**\" or use keyboard shortcuts (`⌘+P` or `Ctrl+P`) to open a print dialog. This option uses your browser's built-in print-to-pdf function. To modify the appearance of your print, you can do the following:\n\n- Expand or collapse the sidebar before printing to respectively include or exclude it from the print.\n- Resize the sidebar in your app by clicking and dragging its right border to achieve your desired width.\n- You may need to enable \"**Background graphics**\" in your print dialog if you are printing in dark mode.\n- You may need to disable wide mode in [Settings](#settings) or adjust the print scale to prevent elements from clipping off the page.\n\n### Record a screencast\n\nYou can easily make screen recordings right from your app! Screen recording is supported in the latest versions of Chrome, Edge, and Firefox. Ensure your browser is up-to-date for compatibility. Depending on your current settings, you may need to grant permission to your browser to record your screen or to use your microphone if recording a voiceover.\n\n1. While viewing your app, open the app menu from the upper-right corner.\n2. Click \"**Record a screencast**.\"\n3. If you want to record audio through your microphone, check \"**Also record audio**.\"\n4. Click \"**Start recording**.\" (You may be prompted by your OS to permit your browser to record your screen or use your microphone.)\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/app-menu-record-2.png\" alt=\"Record\" />\n</div>\n\n5. Select which tab, window, or monitor you want to record from the listed options. The interface will vary depending on your browser.\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/app-menu-record-3.png\" alt=\"Record\" />\n</div>\n\n6. Click \"**Share**.\"\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/app-menu-record-4.png\" alt=\"Record\" />\n</div>\n\n7. While recording, you will see a red circle on your app's tab and on the app menu icon. If you want to cancel the recording, click \"**Stop sharing**\" at the bottom of your app.\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/app-menu-record-5.png\" alt=\"Record\" />\n</div>\n\n8. When you are done recording, press \"**Esc**\" on your keyboard or click \"**Stop recording**\" from your app's menu.\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/app-menu-record-6.png\" alt=\"Record\" />\n</div>\n\n9. Follow your browser's instructions to save your recording. Your saved recording will be available where your browser saves downloads.\n\nThe whole process looks like this:\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/app-menu-record.gif\" alt=\"Record\" />\n</div>\n\n### About\n\nYou can conveniently check what version of Streamlit is running from the \"**About**\" option. Developers also have the option to customize the message shown here using [`st.set_page_config`](/develop/api-reference/configuration/st.set_page_config).\n\n## Developer options\n\nBy default, developer options only show when viewing an app locally or when viewing a Community Cloud app while logged in with administrative permission. You can [customize the menu](#customize-the-menu) if you want to make these options available for all users.\n\n### Clear cache\n\nReset your app's cache by clicking \"**Clear cache**\" from the app's menu or by pressing \"**C**\" on your keyboard while not focused on an input element. This will remove all cached entries for [`@st.cache_data`](/develop/api-reference/caching-and-state/st.cache_data) and [`@st.cache_resource`](/develop/api-reference/caching-and-state/st.cache_resource).\n\n### Deploy this app\n\nIf you are running an app locally from within a git repo, you can deploy your app to Streamlit Community Cloud in a few easy clicks! Make sure your work has been pushed to your online GitHub repository before beginning. For the greatest convenience, make sure you have already created your [Community Cloud account](/deploy/streamlit-community-cloud/get-started/create-your-account) and are signed in.\n\n1. Click \"**Deploy**\" next to the app menu icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>).\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/app-menu-deploy.png\" alt=\"Settings\" />\n</div>\n\n2. Click \"**Deploy now**.\"\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/app-menu-deploy-1.png\" alt=\"Settings\" />\n</div>\n\n3. You will be taken to Community Cloud's \"Deploy an app\" page. Your app's repository, branch, and file name will be prefilled to match your current app! Learn more about [deploying an app](/deploy/streamlit-community-cloud/deploy-your-app) on Streamlit Community Cloud.\n\nThe whole process looks like this:\n\n<div style={{ maxWidth: '90%', margin: '0 2em 0 2em' }}>\n    <Image src=\"/images/app-menu/deploy-from-local.gif\" alt=\"Settings\" />\n</div>\n\n## Customize the menu\n\nUsing `client.toolbarMode` in your app's [configuration](/develop/concepts/configuration), you can make the app menu appear in the following ways:\n\n- `\"developer\"` &mdash; Show the developer options to all viewers.\n- `\"viewer\"` &mdash; Hide the developer options from all viewers.\n- `\"minimal\"` &mdash; Show only those options set externally. These options can be declared through [`st.set_page_config`](/develop/api-reference/configuration/st.set_page_config) or populated through Streamlit Community Cloud.\n- `\"auto\"` &mdash; This is the default and will show the developer options when accessed through localhost or through Streamlit Community Cloud when logged into an administrative account for the app. Otherwise, the developer options will not show."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/architecture/run-your-app",
    "content": "# Run your Streamlit app\n\nWorking with Streamlit is simple. First you sprinkle a few Streamlit commands into a normal Python script, and then you run it. We list few ways to run your script, depending on your use case.\n\n## Use streamlit run\n\nOnce you've created your script, say `your_script.py`, the easiest way to run it is with `streamlit run`:\n\n```bash\nstreamlit run your_script.py\n```\n\nAs soon as you run the script as shown above, a local Streamlit server will spin up and your app will open in a new tab in your default web browser.\n\n### Pass arguments to your script\n\nWhen passing your script some custom arguments, they must be passed after two dashes. Otherwise the arguments get interpreted as arguments to Streamlit itself:\n\n```bash\nstreamlit run your_script.py [-- script args]\n```\n\n### Pass a URL to streamlit run\n\nYou can also pass a URL to `streamlit run`! This is great when your script is hosted remotely, such as a GitHub Gist. For example:\n\n```bash\nstreamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py\n```\n\n## Run Streamlit as a Python module\n\nAnother way of running Streamlit is to run it as a Python module. This is useful when configuring an IDE like PyCharm to work with Streamlit:\n\n```bash\n# Running\npython -m streamlit run your_script.py\n```\n\n```bash\n# is equivalent to:\nstreamlit run your_script.py\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/architecture",
    "content": "# Working with Streamlit's execution model\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/concepts/architecture/run-your-app\">\n\n<h5>Run your app</h5>\n\nUnderstand how to start your Streamlit app.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/architecture\">\n\n<h5>Streamlit's architecture</h5>\n\nUnderstand Streamlit's client-server architecture and related considerations.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/app-chrome\">\n\n<h5>The app chrome</h5>\n\nEvery Streamlit app has a few widgets in the top right to help you as you develop your app and help your users as they view your app. This is called the app chrome.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/caching\">\n\n<h5>Caching</h5>\n\nMake your app performant by caching results to avoid unecessary recomputation with each rerun.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/session-state\">\n\n<h5>Session State</h5>\n\nManage your app's statefulness with Session State.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/forms\">\n\n<h5>Forms</h5>\n\nUse forms to isolate user input and prevent unnecessary app reruns.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/widget-behavior\">\n\n<h5>Widget behavior</h5>\n\nUnderstand how widgets work in detail.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior",
    "content": "# Understanding widget behavior\n\nWidgets (like `st.button`, `st.selectbox`, and `st.text_input`) are at the heart of Streamlit apps. They are the interactive elements of Streamlit that pass information from your users into your Python code. Widgets are magical and often work how you want, but they can have surprising behavior in some situations. Understanding the different parts of a widget and the precise order in which events occur helps you achieve your desired results.\n\nThis guide covers advanced concepts about widgets. Generally, it begins with simpler concepts and increases in complexity. For most beginning users, these details won't be important to know right away. When you want to dynamically change widgets or preserve widget information between pages, these concepts will be important to understand. We recommend having a basic understanding of [Session State](/develop/api-reference/caching-and-state/st.session_state) before reading this guide.\n\n<Collapse title=\"🎈 TL;DR\" expanded={false}>\n\n1. The actions of one user do not affect the widgets of any other user.\n2. A widget function call returns the widget's current value, which is a simple Python type. (e.g. `st.button` returns a boolean value.)\n3. Widgets return their default values on their first call before a user interacts with them.\n4. A widget's identity depends on the arguments passed to the widget function. Changing a widget's label, min or max value, default value, placeholder text, help text, or key will cause it to reset.\n5. If you don't call a widget function in a script run, Streamlit will delete the widget's information&mdash;_including its key-value pair in Session State_. If you call the same widget function later, Streamlit treats it as a new widget.\n\nThe last two points (widget identity and widget deletion) are the most relevant when dynamically changing widgets or working with multi-page applications. This is covered in detail later in this guide: [Statefulness of widgets](#statefulness-of-widgets) and [Widget life cycle](#widget-life-cycle).\n\n</Collapse>\n\n## Anatomy of a widget\n\nThere are four parts to keep in mind when using widgets:\n\n1. The frontend component as seen by the user.\n2. The backend value or value as seen through `st.session_state`.\n3. The key of the widget used to access its value via `st.session_state`.\n4. The return value given by the widget's function.\n\n### Widgets are session dependent\n\nWidget states are dependent on a particular session (browser connection). The actions of one user do not affect the widgets of any other user. Furthermore, if a user opens up multiple tabs to access an app, each tab will be a unique session. Changing a widget in one tab will not affect the same widget in another tab.\n\n### Widgets return simple Python data types\n\nThe value of a widget as seen through `st.session_state` and returned by the widget function are of simple Python types. For example, `st.button` returns a boolean value and will have the same boolean value saved in `st.session_state` if using a key. The first time a widget function is called (before a user interacts with it), it will return its default value. (e.g. `st.selectbox` returns the first option by default.) Default values are configurable for all widgets with a few special exceptions like `st.button` and `st.file_uploader`.\n\n### Keys help distinguish widgets and access their values\n\nWidget keys serve two purposes:\n\n1. Distinguishing two otherwise identical widgets.\n2. Creating a means to access and manipulate the widget's value through `st.session_state`.\n\nWhenever possible, Streamlit updates widgets incrementally on the frontend instead of rebuilding them with each rerun. This means Streamlit assigns an ID to each widget from the arguments passed to the widget function. A widget's ID is based on parameters such as label, min or max value, default value, placeholder text, help text, and key. The page where the widget appears also factors into a widget's ID. If you have two widgets of the same type with the same arguments on the same page, you will get a `DuplicateWidgetID` error. In this case, assign unique keys to the two widgets.\n\n#### Streamlit can't understand two identical widgets on the same page\n\n```python\n# This will cause a DuplicateWidgetID error.\nst.button(\"OK\")\nst.button(\"OK\")\n```\n\n#### Use keys to distinguish otherwise identical widgets\n\n```python\nst.button(\"OK\", key=\"privacy\")\nst.button(\"OK\", key=\"terms\")\n```\n\n## Order of operations\n\nWhen a user interacts with a widget, the order of logic is:\n\n1. Its value in `st.session_state` is updated.\n2. The callback function (if any) is executed.\n3. The page reruns with the widget function returning its new value.\n\nIf the callback function writes anything to the screen, that content will appear above the rest of the page. A callback function runs as a _prefix_ to the script rerunning. Consequently, that means anything written via a callback function will disappear as soon as the user performs their next action. Other widgets should generally not be created within a callback function.\n\n<Note>\n\nIf a callback function is passed any args or kwargs, those arguments will be established when the widget is rendered. In particular, if you want to use a widget's new value in its own callback function, you cannot pass that value to the callback function via the `args` parameter; you will have to assign a key to the widget and look up its new value using a call to `st.session_state` _within the callback function_.\n\n</Note>\n\n### Using callback functions with forms\n\nUsing a callback function with a form requires consideration of this order of operations.\n\n```python\nimport streamlit as st\n\nif \"attendance\" not in st.session_state:\n    st.session_state.attendance = set()\n\n\ndef take_attendance():\n    if st.session_state.name in st.session_state.attendance:\n        st.info(f\"{st.session_state.name} has already been counted.\")\n    else:\n        st.session_state.attendance.add(st.session_state.name)\n\n\nwith st.form(key=\"my_form\"):\n    st.text_input(\"Name\", key=\"name\")\n    st.form_submit_button(\"I'm here!\", on_click=take_attendance)\n```\n\n<Cloud name=\"doc-guide-widgets-form-callbacks\" height=\"250px\"/>\n\n## Statefulness of widgets\n\nAs long as the defining parameters of a widget remain the same and that widget is continuously rendered on the frontend, then it will be stateful and remember user input.\n\n### Changing parameters of a widget will reset it\n\nIf any of the defining parameters of a widget change, Streamlit will see it as a new widget and it will reset. The use of manually assigned keys and default values is particularly important in this case. _Note that callback functions, callback args and kwargs, label visibility, and disabling a widget do not affect a widget's identity._\n\nIn this example, we have a slider whose min and max values are changed. Try interacting with each slider to change its value then change the min or max setting to see what happens.\n\n```python\nimport streamlit as st\n\ncols = st.columns([2, 1, 2])\nminimum = cols[0].number_input(\"Minimum\", 1, 5)\nmaximum = cols[2].number_input(\"Maximum\", 6, 10, 10)\n\nst.slider(\"No default, no key\", minimum, maximum)\nst.slider(\"No default, with key\", minimum, maximum, key=\"a\")\nst.slider(\"With default, no key\", minimum, maximum, value=5)\nst.slider(\"With default, with key\", minimum, maximum, value=5, key=\"b\")\n```\n\n<Cloud name=\"doc-guide-widgets-change-parameters\" height=\"550px\"/>\n\n#### Updating a slider with no default value\n\nFor the first two sliders above, as soon as the min or max value is changed, the sliders reset to the min value. The changing of the min or max value makes them \"new\" widgets from Streamlit's perspective and so they are recreated from scratch when the app reruns with the changed parameters. Since no default value is defined, each widget will reset to its min value. This is the same with or without a key since it's seen as a new widget either way. There is a subtle point to understand about pre-existing keys connecting to widgets. This will be explained further down in [Widget life cycle](#widget-life-cycle).\n\n#### Updating a slider with a default value\n\nFor the last two sliders above, a change to the min or max value will result in the widgets being seen as \"new\" and thus recreated like before. Since a default value of 5 is defined, each widget will reset to 5 whenever the min or max is changed. This is again the same (with or without a key).\n\nA solution to [Retain statefulness when changing a widget's parameters](#retain-statefulness-when-changing-a-widgets-parameters) is provided further on.\n\n### Widgets do not persist when not continually rendered\n\nIf a widget's function is not called during a script run, then none of its parts will be retained, including its value in `st.session_state`. If a widget has a key and you navigate away from that widget, its key and associated value in `st.session_state` will be deleted. Even temporarily hiding a widget will cause it to reset when it reappears; Streamlit will treat it like a new widget. You can either interrupt the [Widget clean-up process](#widget-clean-up-process) (described at the end of this page) or save the value to another key.\n\n#### Save widget values in Session State to preserve them between pages\n\nIf you want to navigate away from a widget and return to it while keeping its value, use a separate key in `st.session_state` to save the information independently from the widget. In this example, a temporary key is used with a widget. The temporary key uses an underscore prefix. Hence, `\"_my_key\"` is used as the widget key, but the data is copied to `\"my_key\"` to preserve it between pages.\n\n```python\nimport streamlit as st\n\ndef store_value():\n    # Copy the value to the permanent key\n    st.session_state[\"my_key\"] = st.session_state[\"_my_key\"]\n\n# Copy the saved value to the temporary key\nst.session_state[\"_my_key\"] = st.session_state[\"my_key\"]\nst.number_input(\"Number of filters\", key=\"_my_key\", on_change=store_value)\n```\n\nIf this is functionalized to work with multiple widgets, it could look something like this:\n\n```python\nimport streamlit as st\n\ndef store_value(key):\n    st.session_state[key] = st.session_state[\"_\"+key]\ndef load_value(key):\n    st.session_state[\"_\"+key] = st.session_state[key]\n\nload_value(\"my_key\")\nst.number_input(\"Number of filters\", key=\"_my_key\", on_change=store_value, args=[\"my_key\"])\n```\n\n## Widget life cycle\n\nWhen a widget function is called, Streamlit will check if it already has a widget with the same parameters. Streamlit will reconnect if it thinks the widget already exists. Otherwise, it will make a new one.\n\nAs mentioned earlier, Streamlit determines a widget's ID based on parameters such as label, min or max value, default value, placeholder text, help text, and key. The page name also factors into a widget's ID. On the other hand, callback functions, callback args and kwargs, label visibility, and disabling a widget do not affect a widget's identity.\n\n### Calling a widget function when the widget doesn't already exist\n\nIf your script rerun calls a widget function with changed parameters or calls a widget function that wasn't used on the last script run:\n\n1. Streamlit will build the frontend and backend parts of the widget, using its default value.\n2. If the widget has been assigned a key, Streamlit will check if that key already exists in Session State.  \n   a. If it exists and is not currently associated with another widget, Streamlit will assign that key's value to the widget.\n   b. Otherwise, it will assign the default value to the key in `st.session_state` (creating a new key-value pair or overwriting an existing one).\n3. If there are args or kwargs for a callback function, they are computed and saved at this point in time.\n4. The widget value is then returned by the function.\n\nStep 2 can be tricky. If you have a widget:\n\n```python\nst.number_input(\"Alpha\",key=\"A\")\n```\n\nand you change it on a page rerun to:\n\n```python\nst.number_input(\"Beta\",key=\"A\")\n```\n\nStreamlit will see that as a new widget because of the label change. The key `\"A\"` will be considered part of the widget labeled `\"Alpha\"` and will not be attached as-is to the new widget labeled `\"Beta\"`. Streamlit will destroy `st.session_state.A` and recreate it with the default value.\n\nIf a widget attaches to a pre-existing key when created and is also manually assigned a default value, you will get a warning if there is a disparity. If you want to control a widget's value through `st.session_state`, initialize the widget's value through `st.session_state` and avoid the default value argument to prevent conflict.\n\n### Calling a widget function when the widget already exists\n\nWhen rerunning a script without changing a widget's parameters:\n\n1. Streamlit will connect to the existing frontend and backend parts.\n2. If the widget has a key that was deleted from `st.session_state`, then Streamlit will recreate the key using the current frontend value. (e.g Deleting a key will not revert the widget to a default value.)\n3. It will return the current value of the widget.\n\n### Widget clean-up process\n\nWhen Streamlit gets to the end of a script run, it will delete the data for any widgets it has in memory that were not rendered on the screen. Most importantly, that means Streamlit will delete all key-value pairs in `st.session_state` associated with a widget not currently on screen.\n\n## Additional examples\n\nAs promised, let's address how to retain the statefulness of widgets when changing pages or modifying their parameters. There are two ways to do this.\n\n1. Use dummy keys to duplicate widget values in `st.session_state` and protect the data from being deleted along with the widget.\n2. Interrupt the widget clean-up process.\n\nThe first method was shown above in [Save widget values in Session State to preserve them between pages](#save-widget-values-in-session-state-to-preserve-them-between-pages)\n\n### Interrupting the widget clean-up process\n\nTo retain information for a widget with `key=\"my_key\"`, just add this to the top of every page:\n\n```python\nst.session_state.my_key = st.session_state.my_key\n```\n\nWhen you manually save data to a key in `st.session_state`, it will become detached from any widget as far as the clean-up process is concerned. If you navigate away from a widget with some key `\"my_key\"` and save data to `st.session_state.my_key` on the new page, you will interrupt the widget clean-up process and prevent the key-value pair from being deleted or overwritten if another widget with the same key exists.\n\n### Retain statefulness when changing a widget's parameters\n\nHere is a solution to our earlier example of changing a slider's min and max values. This solution interrupts the clean-up process as described above.\n\n```python\nimport streamlit as st\n\n# Set default value\nif \"a\" not in st.session_state:\n    st.session_state.a = 5\n\ncols = st.columns(2)\nminimum = cols[0].number_input(\"Min\", 1, 5, key=\"min\")\nmaximum = cols[1].number_input(\"Max\", 6, 10, 10, key=\"max\")\n\n\ndef update_value():\n    # Helper function to ensure consistency between widget parameters and value\n    st.session_state.a = min(st.session_state.a, maximum)\n    st.session_state.a = max(st.session_state.a, minimum)\n\n\n# Validate the slider value before rendering\nupdate_value()\nst.slider(\"A\", minimum, maximum, key=\"a\")\n```\n\n<Cloud name=\"doc-guide-widgets-change-parameters-solution\" height=\"250px\"/>\n\nThe `update_value()` helper function is actually doing two things. On the surface, it's making sure there are no inconsistent changes to the parameters values as described. Importantly, it's also interrupting the widget clean-up process. When the min or max value of the widget changes, Streamlit sees it as a new widget on rerun. Without saving a value to `st.session_state.a`, the value would be thrown out and replaced by the \"new\" widget's default value."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/app-testing/examples",
    "content": "# App testing example\n\n## Testing a login page\n\nLet's consider a login page. In this example, `secrets.toml` is not present. We'll manually declare dummy secrets directly in the tests. To avoid [timing attacks](https://en.wikipedia.org/wiki/Timing_attack), the login script uses `hmac` to compare a user's password to the secret value as a security best practice.\n\n### Project summary\n\n#### Login page behavior\n\nBefore diving into the app's code, let's think about what this page is supposed to do. Whether you use test-driven development or you write unit tests after your code, it's a good idea to think about the functionality that needs to be tested. The login page should behave as follows:\n\n- Before a user interacts with the app:\n  - Their status is \"unverified.\"\n  - A password prompt is displayed.\n- If a user types an incorrect password:\n  - Their status is \"incorrect.\"\n  - An error message is displayed.\n  - The password attempt is cleared from the input.\n- If a user types a correct password:\n  - Their status is \"verified.\"\n  - A confirmation message is displayed.\n  - A logout button is displayed (without a login prompt).\n- If a logged-in user clicks the **Log out** button:\n  - Their status is \"unverified.\"\n  - A password prompt is displayed.\n\n#### Login page project structure\n\n```none\nmyproject/\n├── app.py\n└── tests/\n    └── test_app.py\n```\n\n#### Login page Python file\n\nThe user's status mentioned in the page's specifications are encoded in `st.session_state.status`. This value is initialized at the beginning of the script as \"unverified\" and is updated through a callback when the password prompt receives a new entry.\n\n```python\n\"\"\"app.py\"\"\"\nimport streamlit as st\nimport hmac\n\nst.session_state.status = st.session_state.get(\"status\", \"unverified\")\nst.title(\"My login page\")\n\n\ndef check_password():\n    if hmac.compare_digest(st.session_state.password, st.secrets.password):\n        st.session_state.status = \"verified\"\n    else:\n        st.session_state.status = \"incorrect\"\n    st.session_state.password = \"\"\n\ndef login_prompt():\n    st.text_input(\"Enter password:\", key=\"password\", on_change=check_password)\n    if st.session_state.status == \"incorrect\":\n        st.warning(\"Incorrect password. Please try again.\")\n\ndef logout():\n    st.session_state.status = \"unverified\"\n\ndef welcome():\n    st.success(\"Login successful.\")\n    st.button(\"Log out\", on_click=logout)\n\n\nif st.session_state.status != \"verified\":\n    login_prompt()\n    st.stop()\nwelcome()\n```\n\n#### Login page test file\n\nThese tests closely follow the app's specifications above. In each test, a dummy secret is set before running the app and proceeding with further simulations and checks.\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\ndef test_no_interaction():\n    at = AppTest.from_file(\"app.py\")\n    at.secrets[\"password\"] = \"streamlit\"\n    at.run()\n    assert at.session_state[\"status\"] == \"unverified\"\n    assert len(at.text_input) == 1\n    assert len(at.warning) == 0\n    assert len(at.success) == 0\n    assert len(at.button) == 0\n    assert at.text_input[0].value == \"\"\n\ndef test_incorrect_password():\n    at = AppTest.from_file(\"app.py\")\n    at.secrets[\"password\"] = \"streamlit\"\n    at.run()\n    at.text_input[0].input(\"balloon\").run()\n    assert at.session_state[\"status\"] == \"incorrect\"\n    assert len(at.text_input) == 1\n    assert len(at.warning) == 1\n    assert len(at.success) == 0\n    assert len(at.button) == 0\n    assert at.text_input[0].value == \"\"\n    assert \"Incorrect password\" in at.warning[0].value\n\ndef test_correct_password():\n    at = AppTest.from_file(\"app.py\")\n    at.secrets[\"password\"] = \"streamlit\"\n    at.run()\n    at.text_input[0].input(\"streamlit\").run()\n    assert at.session_state[\"status\"] == \"verified\"\n    assert len(at.text_input) == 0\n    assert len(at.warning) == 0\n    assert len(at.success) == 1\n    assert len(at.button) == 1\n    assert \"Login successful\" in at.success[0].value\n    assert at.button[0].label == \"Log out\"\n\ndef test_log_out():\n    at = AppTest.from_file(\"app.py\")\n    at.secrets[\"password\"] = \"streamlit\"\n    at.session_state[\"status\"] = \"verified\"\n    at.run()\n    at.button[0].click().run()\n    assert at.session_state[\"status\"] == \"unverified\"\n    assert len(at.text_input) == 1\n    assert len(at.warning) == 0\n    assert len(at.success) == 0\n    assert len(at.button) == 0\n    assert at.text_input[0].value == \"\"\n```\n\nSee how Session State was modified in the last test? Instead of fully simulating a user logging in, the test jumps straight to a logged-in state by setting `at.session_state[\"status\"] = \"verified\"`. After running the app, the test proceeds to simulate the user logging out.\n\n### Automating your tests\n\nIf `myproject/` was pushed to GitHub as a repository, you could add GitHub Actions test automation with [Streamlit App Action](https://github.com/marketplace/actions/streamlit-app-action). This is as simple as adding a workflow file at `myproject/.github/workflows/`:\n\n```yaml\n# .github/workflows/streamlit-app.yml\nname: Streamlit app\n\non:\n  push:\n    branches: [\"main\"]\n  pull_request:\n    branches: [\"main\"]\n\npermissions:\n  contents: read\n\njobs:\n  streamlit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n      - uses: streamlit/streamlit-app-action@v0.0.3\n        with:\n          app-path: app.py\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/app-testing/cheat-sheet",
    "content": "# App testing cheat sheet\n\n## Text elements\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# Headers\nassert \"My app\" in at.title[0].value\nassert \"New topic\" in at.header[0].value\nassert \"Interesting sub-topic\" in at.subheader[0].value\nassert len(at.divider) == 2\n\n# Body / code\nassert \"Hello, world!\" in at.markdown[0].value\nassert \"import streamlit as st\" in at.code[0].value\nassert \"A cool diagram\" in at.caption[0].value\nassert \"Hello again, world!\" in at.text[0].value\nassert \"\\int a x^2 \\,dx\" in at.latex[0].value\n```\n\n## Input widgets\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# button\nassert at.button[0].value == False\nat.button[0].click().run()\nassert at.button[0].value == True\n\n# checkbox\nassert at.checkbox[0].value == False\nat.checkbox[0].check().run() # uncheck() is also supported\nassert at.checkbox[0].value == True\n\n# color_picker\nassert at.color_picker[0].value == \"#FFFFFF\"\nat.color_picker[0].pick(\"#000000\").run()\n\n# date_input\nassert at.date_input[0].value == datetime.date(2019, 7, 6)\nat.date_input[0].set_value(datetime.date(2022, 12, 21)).run()\n\n# form_submit_button - shows up just like a button\nassert at.button[0].value == False\nat.button[0].click().run()\nassert at.button[0].value == True\n\n# multiselect\nassert at.multiselect[0].value == [\"foo\", \"bar\"]\nat.multiselect[0].select(\"baz\").unselect(\"foo\").run()\n\n# number_input\nassert at.number_input[0].value == 5\nat.number_input[0].increment().run()\n\n# radio\nassert at.radio[0].value == \"Bar\"\nassert at.radio[0].index == 3\nat.radio[0].set_value(\"Foo\").run()\n\n# selectbox\nassert at.selectbox[0].value == \"Bar\"\nassert at.selectbox[0].index == 3\nat.selectbox[0].set_value(\"Foo\").run()\n\n# select_slider\nassert at.select_slider[0].value == \"Feb\"\nat.select_slider[0].set_value(\"Mar\").run()\nat.select_slider[0].set_range(\"Apr\", \"Jun\").run()\n\n# slider\nassert at.slider[0].value == 2\nat.slider[0].set_value(3).run()\nat.slider[0].set_range(4, 6).run()\n\n# text_area\nassert at.text_area[0].value == \"Hello, world!\"\nat.text_area[0].set_value(\"Hello, yourself!\").run()\n\n# text_input\nassert at.text_input[0].value == \"Hello, world!\")\nat.text_input[0].set_value(\"Hello, yourself!\").run()\n\n# time_input\nassert at.time_input[0].value == datetime.time(8, 45)\nat.time_input[0].set_value(datetime.time(12, 30))\n\n# toggle\nassert at.toggle[0].value == False\nassert at.toggle[0].label == \"Debug mode\"\nat.toggle[0].set_value(True).run()\nassert at.toggle[0].value == True\n```\n\n## Data elements\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# dataframe\nexpected_df = pd.DataFrame([1, 2, 3])\nassert at.dataframe[0].value.equals(expected_df)\n\n# metric\nassert at.metric[0].value == \"9500\"\nassert at.metric[0].delta == \"1000\"\n\n# json\nassert at.json[0].value == '[\"hi\", {\"foo\": \"bar\"}]'\n\n# table\ntable_df = pd.DataFrame([1, 2, 3])\nassert at.table[0].value.equals(table_df)\n```\n\n## Layouts and containers\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# sidebar\nat.sidebar.text_input[0].set_value(\"Jane Doe\")\n\n# columns\nat.columns[1].markdown[0].value == \"Hello, world!\"\n\n# tabs\nat.tabs[2].markdown[0].value == \"Hello, yourself!\"\n```\n\n## Chat elements\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# chat_input\nat.chat_input[0].set_value(\"Do you know any jokes?\").run()\n# Note: chat_input value clears after every re-run (like in a real app)\n\n# chat_message\nassert at.chat_message[0].markdown[0].value == \"Do you know any jokes?\"\nassert at.chat_message[0].avatar == \"user\"\n```\n\n## Status elements\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# exception\nassert len(at.exception) == 1\nassert \"TypeError\" in at.exception[0].value\n\n# Other in-line alerts: success, info, warning, error\nassert at.success[0].value == \"Great job!\"\nassert at.info[0].value == \"Please enter an API key to continue\"\nassert at.warning[0].value == \"Sorry, the passwords didn't match\"\nassert at.error[0].value == \"Something went wrong :(\"\n\n# toast\nassert at.toast[0].value == \"That was lit!\" and at.toast[0].icon == \"🔥\"\n```\n\n## Limitations\n\nAs of Streamlit 1.28, the following Streamlit features are not natively supported by `AppTest`. However, workarounds are possible for many of them by inspecting the underlying proto directly using `AppTest.get()`. We plan to regularly add support for missing elements until all features are supported.\n\n- Chart elements (`st.bar_chart`, `st.line_chart`, etc)\n- Media elements (`st.image`, `st.video`, `st.audio`)\n- `st.file_uploader`\n- `st.data_editor`\n- `st.expander`\n- `st.status`\n- `st.camera_input`\n- `st.download_button`\n- `st.link_button`"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/app-testing/beyond-the-basics",
    "content": "# Beyond the basics of app testing\n\nNow that you're comfortable with executing a basic test for a Streamlit app let's cover the mutable attributes of [`AppTest`](/develop/api-reference/app-testing/st.testing.v1.apptest):\n\n- `AppTest.secrets`\n- `AppTest.session_state`\n- `AppTest.query_params`\n\nYou can read and update values using dict-like syntax for all three attributes. For `.secrets` and `.query_params`, you can use key notation but not attribute notation. For example, the `.secrets` attribute for `AppTest` accepts `at.secrets[\"my_key\"]` but **_not_** `at.secrets.my_key`. This differs from how you can use the associated command in the main library. On the other hand, `.session_state` allows both key notation and attribute notation.\n\nFor these attributes, the typical pattern is to declare any values before executing the app's first run. Values can be inspected at any time in a test. There are a few extra considerations for secrets and Session State, which we'll cover now.\n\n## Using secrets with app testing\n\nBe careful not to include secrets directly in your tests. Consider this simple project with `pytest` executed in the project's root directory:\n\n```none\nmyproject/\n├── .streamlit/\n│   ├── config.toml\n│   └── secrets.toml\n├── app.py\n└── tests/\n    └── test_app.py\n```\n\n```bash\ncd myproject\npytest tests/\n```\n\nIn the above scenario, your simulated app will have access to your `secrets.toml` file. However, since you don't want to commit your secrets to your repository, you may need to write tests where you securely pull your secrets into memory or use dummy secrets.\n\n### Example: declaring secrets in a test\n\nWithin a test, declare each secret after initializing your `AppTest` instance but before the first run. (A missing secret may result in an app that doesn't run!) For example, consider the following secrets file and corresponding test initialization to assign the same secrets manually:\n\nSecrets file:\n\n```toml\ndb_username = \"Jane\"\ndb_password = \"mypassword\"\n\n[my_other_secrets]\nthings_i_like = [\"Streamlit\", \"Python\"]\n```\n\nTesting file with equivalent secrets:\n\n```python\n# Initialize an AppTest instance.\nat = AppTest.from_file(\"app.py\")\n# Declare the secrets.\nat.secrets[\"db_username\"] = \"Jane\"\nat.secrets[\"db_password\"] = \"mypassword\"\nat.secrets[\"my_other_secrets.things_i_like\"] = [\"Streamlit\", \"Python\"]\n# Run the app.\nat.run()\n```\n\nGenerally, you want to avoid typing your secrets directly into your test. If you don't need your real secrets for your test, you can declare dummy secrets as in the example above. If your app uses secrets to connect to an external service like a database or API, consider mocking that service in your app tests. If you need to use the real secrets and actually connect, you should use an API to pass them securely and anonymously. If you are automating your tests with GitHub actions, check out their [Security guide](https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions).\n\n```python\nat.secrets[\"my_key\"] = <value provided through API>\n```\n\n## Working with Session State in app testing\n\nThe `.session_state` attribute for `AppTest` lets you read and update Session State values using key notation (`at.session_state[\"my_key\"]`) and attribute notation (`at.session_state.my_key`). By manually declaring values in Session State, you can directly jump to a specific state instead of simulating many steps to get there. Additionally, the testing framework does not provide native support for multipage apps. An instance of `AppTest` can only test one page. You must manually declare Session State values to simulate a user carrying data from another page.\n\n### Example: testing a multipage app\n\nConsider a simple multipage app where the first page can modify a value in Session State. To test the second page, set Session State manually and run the simulated app within the test:\n\nProject structure:\n\n```none\nmyproject/\n├── pages/\n│   └── second.py\n├── first.py\n└── tests/\n    └── test_second.py\n```\n\nFirst app page:\n\n```python\n\"\"\"first.py\"\"\"\nimport streamlit as st\n\nst.session_state.magic_word = st.session_state.get(\"magic_word\", \"Streamlit\")\n\nnew_word = st.text_input(\"Magic word:\")\n\nif st.button(\"Set the magic word\"):\n    st.session_state.magic_word = new_word\n```\n\nSecond app page:\n\n```python\n\"\"\"second.py\"\"\"\nimport streamlit as st\n\nst.session_state.magic_word = st.session_state.get(\"magic_word\", \"Streamlit\")\n\nif st.session_state.magic_word == \"Balloons\":\n    st.markdown(\":balloon:\")\n```\n\nTesting file:\n\n```python\n\"\"\"test_second.py\"\"\"\nfrom streamlit.testing.v1 import AppTest\n\ndef test_balloons():\n    at = AppTest.from_file(\"pages/second.py\")\n    at.session_state[\"magic_word\"] = \"Balloons\"\n    at.run()\n    assert at.markdown[0].value == \":balloon:\"\n```\n\nBy setting the value `at.session_state[\"magic_word\"] = \"Balloons\"` within the test, you can simulate a user navigating to `second.py` after entering and saving \"Balloons\" on `first.py`."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests",
    "content": "# Automate your tests with CI\n\nOne of the key benefits of app testing is that tests can be automated using Continuous Integration (CI). By running tests automatically during development, you can validate that changes to your app don't break existing functionality. You can verify app code as you commit, catch bugs early, and prevent accidental breaks before deployment.\n\nThere are many popular CI tools, including GitHub Actions, Jenkins, GitLab CI, Azure DevOps, and Circle CI. Streamlit app testing will integrate easily with any of them similar to any other Python tests.\n\n## GitHub Actions\n\nSince many Streamlit apps (and all Community Cloud apps) are built in GitHub, this page uses examples from [GitHub Actions](https://docs.github.com/en/actions). For more information about GitHub Actions, see:\n\n- [Quickstart for GitHub Actions](https://docs.github.com/en/actions/quickstart)\n- [GitHub Actions: About continuous integration](https://docs.github.com/en/actions/automating-builds-and-tests/about-continuous-integration)\n- [GitHub Actions: Build & test Python](https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python)\n\n## Streamlit App Action\n\n[Streamlit App Action](https://github.com/marketplace/actions/streamlit-app-action) provides an easy way to add automated testing to your app repository in GitHub. It also includes basic smoke testing for each page of your app without you writing any test code.\n\nTo install Streamlit App Action, add a workflow `.yml` file to your repository's `.github/workflows/` folder. For example:\n\n```yaml\n# .github/workflows/streamlit-app.yml\nname: Streamlit app\n\non:\n  push:\n    branches: [\"main\"]\n  pull_request:\n    branches: [\"main\"]\n\npermissions:\n  contents: read\n\njobs:\n  streamlit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n      - uses: streamlit/streamlit-app-action@v0.0.3\n        with:\n          app-path: streamlit_app.py\n```\n\nLet's take a look in more detail at what this action workflow is doing.\n\n### Triggering the workflow\n\n```yaml\non:\n  push:\n    branches: [\"main\"]\n  pull_request:\n    branches: [\"main\"]\n```\n\nThis workflow will be triggered and execute tests on pull requests targeting the `main` branch, as well as any new commits pushed to the `main` branch. Note that it will also execute the tests on subsequent commits to any open pull requests. See [GitHub Actions: Triggering a workflow](https://docs.github.com/en/actions/using-workflows/triggering-a-workflow) for more information and examples.\n\n### Setting up the test environment\n\n```yaml\njobs:\n  streamlit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n```\n\nThe workflow has a `streamlit` job that executes a series of steps. The job runs on a Docker container with the `ubuntu-latest` image.\n\n- `actions/checkout@v4` checks out the current repository code from GitHub and copies the code to the job environment.\n- `actions/setup-python@v5` installs Python version 3.11.\n\n### Running the app tests\n\n```yaml\n- uses: streamlit/streamlit-app-action@v0.0.3\n  with:\n    app-path: streamlit_app.py\n```\n\nStreamlit App Action does the following:\n\n- Install `pytest` and install any dependencies specified in `requirements.txt`.\n- Run the built-in app smoke tests.\n- Run any other Python tests found in the repository.\n\n<Tip>\n\nIf your app doesn't include `requirements.txt` in the repository root directory, you will need to add a step to install dependencies with your chosen package manager before running Streamlit App Action.\n\n</Tip>\n\nThe built-in smoke tests have the following behavior:\n\n- Run the app specified at `app-path` as an AppTest.\n- Validate that it completes successfully and does not result in an uncaught exception.\n- Do the same for any additional `pages/` of the app relative to `app-path`.\n\nIf you want to run Streamlit App Action without the smoke tests, you can set `skip-smoke: true`.\n\n### Linting your app code\n\nLinting is the automated checking of source code for programmatic and stylistic errors. This is done by using a lint tool (otherwise known as a linter). Linting is important to reduce errors and improve the overall quality of your code, especially for repositories with multiple developers or public repositories.\n\nYou can add automated linting with [Ruff](https://docs.astral.sh/ruff/) by passing `ruff: true` to Streamlit App Action.\n\n```yaml\n- uses: streamlit/streamlit-app-action@v0.0.3\n  with:\n    app-path: streamlit_app.py\n    ruff: true\n```\n\n<Tip>\n\nYou may want to add a pre-commit hook like [ruff-pre-commit](https://github.com/astral-sh/ruff-pre-commit) in your local development environment to fix linting errors before they get to CI.\n\n</Tip>\n\n### Viewing results\n\nIf tests fail, the CI workflow will fail and you will see the results in GitHub. Console logs are available by clicking into the workflow run [as described here](https://docs.github.com/en/actions/using-workflows/about-workflows#viewing-the-activity-for-a-workflow-run).\n\n![](/images/test-results-logs.png)\n\nFor higher-level test results, you can use [pytest-results-action](https://github.com/marketplace/actions/pytest-results-actions). You can combine this with Streamlit App Action as follows:\n\n```yaml\n# ... setup as above ...\n- uses: streamlit/streamlit-app-action@v0.0.3\n  with:\n    app-path: streamlit_app.py\n    # Add pytest-args to output junit xml\n    pytest-args: -v --junit-xml=test-results.xml\n- if: always()\n  uses: pmeier/pytest-results-action@v0.6.0\n  with:\n    path: test-results.xml\n    summary: true\n    display-options: fEX\n```\n\n![](/images/test-results-summary.png)\n\n## Writing your own actions\n\nThe above is just provided as an example. Streamlit App Action is a quick way to get started. Once you learn the basics of your CI tool of choice, it's easy to build and customize your own automated workflows. This is a great way to improve your overall productivity as a developer and the quality of your apps.\n\n## Working example\n\nAs a final working example example, take a look at our [`streamlit/llm-examples` Actions](https://github.com/streamlit/llm-examples/actions), defined in [this workflow file](https://github.com/streamlit/llm-examples/blob/main/.github/workflows/app-testing.yml)."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started",
    "content": "# Get started with app testing\n\nThis guide will cover a simple example of how tests are structured within a project and how to execute them with `pytest`. After seeing the big picture, keep reading to learn about the [Fundamentals of app testing](#fundamentals-of-app-testing):\n\n- Initializing and running a simulated app\n- Retrieving elements\n- Manipulating widgets\n- Inspecting the results\n\nStreamlit's app testing framework is not tied to any particular testing tool, but we'll use `pytest` for our examples since it is one of the most common Python test frameworks. To try out the examples in this guide, be sure to install `pytest` into your Streamlit development environment before you begin:\n\n```bash\npip install pytest\n```\n\n## A simple testing example with `pytest`\n\nThis section explains how a simple test is structured and executed with `pytest`. For a comprehensive introduction to `pytest`, check out Real Python's guide to [Effective Python testing with pytest](https://realpython.com/pytest-python-testing/).\n\n### How `pytest` is structured\n\n`pytest` uses a naming convention for files and functions to execute tests conveniently. Name your test scripts of the form `test_<name>.py` or `<name>_test.py`. For example, you can use `test_myapp.py` or `myapp_test.py`. Within your test scripts, each test is written as a function. Each function is named to begin or end with `test`. We will prefix all our test scripts and test functions with `test_` for our examples in this guide.\n\nYou can write as many tests (functions) within a single test script as you want. When calling `pytest` in a directory, all `test_<name>.py` files within it will be used for testing. This includes files within subdirectories. Each `test_<something>` function within those files will be executed as a test. You can place test files anywhere in your project directory, but it is common to collect tests into a designated `tests/` directory. For other ways to structure and execute tests, check out [How to invoke pytest](https://docs.pytest.org/how-to/usage.html) in the `pytest` docs.\n\n### Example project with app testing\n\nConsider the following project:\n\n```none\nmyproject/\n├── app.py\n└── tests/\n    └── test_app.py\n```\n\nMain app file:\n\n```python\n\"\"\"app.py\"\"\"\nimport streamlit as st\n\n# Initialize st.session_state.beans\nst.session_state.beans = st.session_state.get(\"beans\", 0)\n\nst.title(\"Bean counter :paw_prints:\")\n\naddend = st.number_input(\"Beans to add\", 0, 10)\nif st.button(\"Add\"):\n    st.session_state.beans += addend\nst.markdown(f\"Beans counted: {st.session_state.beans}\")\n```\n\nTesting file:\n\n```python\n\"\"\"test_app.py\"\"\"\nfrom streamlit.testing.v1 import AppTest\n\ndef test_increment_and_add():\n    \"\"\"A user increments the number input, then clicks Add\"\"\"\n    at = AppTest.from_file(\"app.py\").run()\n    at.number_input[0].increment().run()\n    at.button[0].click().run()\n    assert at.markdown[0].value == \"Beans counted: 1\"\n```\n\nLet's take a quick look at what's in this app and test before we run it. The main app file (`app.py`) contains four elements when rendered: `st.title`, `st.number_input`, `st.button`, and `st.markdown`. The test script (`test_app.py`) includes a single test (the function named `test_increment_and_add`). We'll cover test syntax in more detail in the latter half of this guide, but here's a brief explanation of what this test does:\n\n1. Initialize the simulated app and execute the first script run.\n   ```python\n   at = AppTest.from_file(\"app.py\").run()\n   ```\n2. Simulate a user clicking the plus icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>add</i>) to increment the number input (and the resulting script rerun).\n   ```python\n   at.number_input[0].increment().run()\n   ```\n3. Simulate a user clicking the \"**Add**\" button (and the resulting script rerun).\n   ```python\n   at.button[0].click().run()\n   ```\n4. Check if the correct message is displayed at the end.\n   ```python\n   assert at.markdown[0].value == \"Beans counted: 1\"\n   ```\n\nAssertions are the heart of tests. When the assertion is true, the test passes. When the assertion is false, the test fails. A test can have multiple assertions, but keeping tests tightly focused is good practice. When tests focus on a single behavior, it is easier to understand and respond to failure.\n\n### Try out a simple test with `pytest`\n\n1. Copy the files above into a new \"myproject\" directory.\n2. Open a terminal and change directory to your project.\n   ```bash\n   cd myproject\n   ```\n3. Execute `pytest`:\n   ```bash\n   pytest\n   ```\n\nThe test should execute successfully. Your terminal should show something like this:\n\n![A successfully completed test using pytest](/images/app-testing-pytest-intro.png)\n\nBy executing `pytest` at the root of your project directory, all Python files with the test prefix (`test_<name>.py`) will be scanned for test functions. Within each test file, each function with the test prefix will be executed as a test. `pytest` then counts successes and itemizes failures. You can also direct `pytest` to only scan your testing directory. For example, from the root of your project directory, execute:\n\n```bash\npytest tests/\n```\n\n### Handling file paths and imports with `pytest`\n\nImports and paths within a test script should be relative to the directory where `pytest` is called. That is why the test function uses the path `app.py` instead of `../app.py` even though the app file is one directory up from the test script. You'll usually call `pytest` from the directory containing your main app file. This is typically the root of your project directory.\n\nAdditionally, if `.streamlit/` is present in the directory where you call `pytest`, any `config.toml` and `secrets.toml` within it will be accessible to your simulated app. For example, your simulated app will have access to the `config.toml` and `secrets.toml` files in this common setup:\n\nProject structure:\n\n```none\nmyproject/\n├── .streamlit/\n│   ├── config.toml\n│   └── secrets.toml\n├── app.py\n└── tests/\n    └── test_app.py\n```\n\nInitialization within `test_app.py`:\n\n```python\n# Path to app file is relative to myproject/\nat = AppTest.from_file(\"app.py\").run()\n```\n\nCommand to execute tests:\n\n```bash\ncd myproject\npytest tests/\n```\n\n## Fundamentals of app testing\n\nNow that you understand the basics of `pytest` let's dive into using Streamlit's app testing framework. Every test begins with initializing and running your simulated app. Additional commands are used to retrieve, manipulate, and inspect elements.\n\nOn the next page, we'll go [Beyond the basics](/develop/concepts/app-testing/beyond-the-basics) and cover more advanced scenarios like working with secrets, Session State, or multipage apps.\n\n### How to initialize and run a simulated app\n\nTo test a Streamlit app, you must first initialize an instance of [`AppTest`](/develop/api-reference/app-testing/st.testing.v1.apptest) with the code for one page of your app. There are three methods for initializing a simulated app. These are provided as class methods to `AppTest`. We will focus on `AppTest.from_file()` which allows you to provide a path to a page of your app. This is the most common scenario for building automated tests during app development. `AppTest.from_string()` and `AppTest.from_function()` may be helpful for some simple or experimental scenarios.\n\nLet's continue with the [example from above](#example-project-with-app-testing).\n\nRecall the testing file:\n\n```python\n\"\"\"test_app.py\"\"\"\nfrom streamlit.testing.v1 import AppTest\n\ndef test_increment_and_add():\n    \"\"\"A user increments the number input, then clicks Add\"\"\"\n    at = AppTest.from_file(\"app.py\").run()\n    at.number_input[0].increment().run()\n    at.button[0].click().run()\n    assert at.markdown[0].value == \"Beans counted: 1\"\n```\n\nLook at the first line in the test function:\n\n```python\nat = AppTest.from_file(\"app.py\").run()\n```\n\nThis is doing two things and is equivalent to:\n\n```python\n# Initialize the app.\nat = AppTest.from_file(\"app.py\")\n# Run the app.\nat.run()\n```\n\n`AppTest.from_file()` returns an instance of `AppTest`, initialized with the contents of `app.py`. The `.run()` method is used to run the app for the first time. Looking at the test, notice that the `.run()` method manually executes each script run. A test must explicitly run the app each time. This applies to the app's first run and any rerun resulting from simulated user input.\n\n### How to retrieve elements\n\nThe attributes of the `AppTest` class return sequences of elements. The elements are sorted according to display order in the rendered app. Specific elements can be retrieved by index. Additionally, widgets with keys can be retrieved by key.\n\n#### Retrieve elements by index\n\nEach attribute of `AppTest` returns a sequence of the associated element type. Specific elements can be retrieved by index. In the above example, `at.number_input` returns a sequence of all `st.number_input` elements in the app. Thus, `at.number_input[0]` is the first such element in the app. Similarly, `at.markdown` returns a collection of all `st.markdown` elements where `at.markdown[0]` is the first such element.\n\nCheck out the current list of supported elements in the \"Attributes\" section of the [`AppTest`](/develop/api-reference/app-testing/st.testing.v1.apptest) class or the [App testing cheat sheet](/develop/concepts/app-testing/cheat-sheet). You can also use the `.get()` method and pass the attribute's name. `at.get(\"number_input\")` and `at.get(\"markdown\")` are equivalent to `at.number_input` and `at.markdown`, respectively.\n\nThe returned sequence of elements is ordered by appearance on the page. If containers are used to insert elements in a different order, these sequences may not match the order within your code. Consider the following example where containers are used to switch the order of two buttons on the page:\n\n```python\nimport streamlit as st\n\nfirst = st.container()\nsecond = st.container()\n\nsecond.button(\"A\")\nfirst.button(\"B\")\n```\n\nIf the above app was tested, the first button (`at.button[0]`) would be labeled \"B\" and the second button (`at.button[1]`) would be labeled \"A.\" As true assertions, these would be:\n\n```python\nassert at.button[0].label == \"B\"\nassert at.button[1].label == \"A\"\n```\n\n#### Retrieve widgets by key\n\nYou can retrieve keyed widgets by their keys instead of their order on the page. The key of the widget is passed as either an arg or kwarg. For example, look at this app and the following (true) assertions:\n\n```python\nimport streamlit as st\n\nst.button(\"Next\", key=\"submit\")\nst.button(\"Back\", key=\"cancel\")\n```\n\n```python\nassert at.button(key=\"submit\").label == \"Next\"\nassert at.button(\"cancel\").label == \"Back\"\n```\n\n#### Retrieve containers\n\nYou can also narrow down your sequences of elements by retrieving specific containers. Each retrieved container has the same attributes as `AppTest`. For example, `at.sidebar.checkbox` returns a sequence of all checkboxes in the sidebar. `at.main.selectbox` returns the sequence of all selectboxes in the main body of the app (not in the sidebar).\n\nFor `AppTest.columns` and `AppTest.tabs`, a sequence of containers is returned. So `at.columns[0].button` would be the sequence of all buttons in the first column appearing in the app.\n\n### How to manipulate widgets\n\nAll widgets have a universal `.set_value()` method. Additionally, many widgets have specific methods for manipulating their value. The names of [Testing element classes](/develop/api-reference/app-testing/testing-element-classes) closely match the names of the `AppTest` attributes. For example, look at the return type of [`AppTest.button`](/develop/api-reference/app-testing/st.testing.v1.apptest#apptestbutton) to see the corresponding class of [`Button`](/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treebutton). Aside from setting the value of a button with `.set_value()`, you can also use `.click()`. Check out each testing element class for its specific methods.\n\n### How to inspect elements\n\nAll elements, including widgets, have a universal `.value` property. This returns the contents of the element. For widgets, this is the same as the return value or value in Session State. For non-input elements, this will be the value of the primary contents argument. For example, `.value` returns the value of `body` for `st.markdown` or `st.error`. It returns the value of `data` for `st.dataframe` or `st.table`.\n\nAdditionally, you can check many other details for widgets like labels or disabled status. Many parameters are available for inspection, but not all. Use linting software to see what is currently supported. Here's an example:\n\n```python\nimport streamlit as st\n\nst.selectbox(\"A\", [1,2,3], None, help=\"Pick a number\", placeholder=\"Pick me\")\n```\n\n```python\nassert at.selectbox[0].value == None\nassert at.selectbox[0].label == \"A\"\nassert at.selectbox[0].options == [\"1\",\"2\",\"3\"]\nassert at.selectbox[0].index == None\nassert at.selectbox[0].help == \"Pick a number\"\nassert at.selectbox[0].placeholder == \"Pick me\"\nassert at.selectbox[0].disabled == False\n```\n\n<Tip>\n\nNote that the `options` for `st.selectbox` were declared as integers but asserted as strings. As noted in the documentation for [`st.selectbox`](/develop/api-reference/widgets/st.selectbox), options are cast internally to strings. If you ever find yourself getting unexpected results, check the documentation carefully for any notes about recasting types internally.\n\n</Tip>"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/app-testing",
    "content": "# Streamlit's native app testing framework\n\nStreamlit app testing enables developers to build and run automated tests. Bring your favorite test automation software and enjoy simple syntax to simulate user input and inspect rendered output.\n\nThe provided class, AppTest, simulates a running app and provides methods to set up, manipulate, and inspect the app contents via API instead of a browser UI. AppTest provides similar functionality to browser automation tools like Selenium or Playwright, but with less overhead to write and execute tests. Use our testing framework with a tool like [pytest](https://docs.pytest.org/) to execute or automate your tests. A typical pattern is to build a suite of tests for an app to ensure consistent functionality as the app evolves. The tests run locally and/or in a CI environment like GitHub Actions.\n\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"science\"\n        bold=\"Get started\"\n        href=\"/develop/concepts/app-testing/get-started\"\n    >introduces you to the app testing framework and how to execute tests using <code>pytest</code>. Learn how to initialize and run simulated apps, including how to retrieve, manipulate, and inspect app elements.</InlineCallout>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"password\"\n        bold=\"Beyond the basics\"\n        href=\"/develop/concepts/app-testing/beyond-the-basics\"\n    >explains how to work with secrets and Session State within app tests, including how to test multipage apps.</InlineCallout>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"play_circle\"\n        bold=\"Automate your tests\"\n        href=\"/develop/concepts/app-testing/automate-tests\"\n    >with Continuous Integration (CI) to validate app changes over time.</InlineCallout>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"quiz\"\n        bold=\"Example\"\n        href=\"/develop/concepts/app-testing/examples\"\n    >puts together the concepts explained above. Check out an app with multiple tests in place.</InlineCallout>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"saved_search\"\n        bold=\"Cheat sheet\"\n        href=\"/develop/concepts/app-testing/cheat-sheet\"\n    >is a compact reference summarizing the available syntax.</InlineCallout>\n</InlineCalloutContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/design/timezone-handling",
    "content": "# Working with timezones\n\nIn general, working with timezones can be tricky. Your Streamlit app users are not necessarily in the same timezone as the server running your app. It is especially true of public apps, where anyone in the world (in any timezone) can access your app. As such, it is crucial to understand how Streamlit handles timezones, so you can avoid unexpected behavior when displaying `datetime` information.\n\n## How Streamlit handles timezones\n\nStreamlit always shows `datetime` information on the frontend with the same information as its corresponding `datetime` instance in the backend. I.e., date or time information does not automatically adjust to the users' timezone. We distinguish between the following two cases:\n\n### **`datetime` instance without a timezone (naive)**\n\nWhen you provide a `datetime` instance _without specifying a timezone_, the frontend shows the `datetime` instance without timezone information. For example (this also applies to other widgets like [`st.dataframe`](/develop/api-reference/data/st.dataframe)):\n\n```python\nimport streamlit as st\nfrom datetime import datetime\n\nst.write(datetime(2020, 1, 10, 10, 30))\n# Outputs: 2020-01-10 10:30:00\n```\n\nUsers of the above app always see the output as `2020-01-10 10:30:00`.\n\n### **`datetime` instance with a timezone**\n\nWhen you provide a `datetime` instance _and specify a timezone_, the frontend shows the `datetime` instance in that same timezone. For example (this also applies to other widgets like [`st.dataframe`](/develop/api-reference/data/st.dataframe)):\n\n```python\nimport streamlit as st\nfrom datetime import datetime\nimport pytz\n\nst.write(datetime(2020, 1, 10, 10, 30, tzinfo=pytz.timezone(\"EST\")))\n# Outputs: 2020-01-10 10:30:00-05:00\n```\n\nUsers of the above app always see the output as `2020-01-10 10:30:00-05:00`.\n\nIn both cases, neither the date nor time information automatically adjusts to the users' timezone on the frontend. What users see is identical to the corresponding `datetime` instance in the backend. It is currently not possible to automatically adjust the date or time information to the timezone of the users viewing the app.\n\n<Note>\n\nThe legacy version of the `st.dataframe` has issues with timezones. We do not plan to roll out additional fixes or enhancements for the legacy dataframe. If you need stable timezone support, please consider switching to the arrow serialization by changing the [config setting](/develop/concepts/configuration), _config.dataFrameSerialization = \"arrow\"_.\n\n</Note>"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/design/multithreading",
    "content": "# Multithreading in Streamlit\n\nMultithreading is a type of concurrency, which improves the efficiency of computer programs. It's a way for processors to multitask. Streamlit uses threads within its architecture, which can make it difficult for app developers to include their own multithreaded processes. Streamlit does not officially support multithreading in app code, but this guide provides information on how it can be accomplished.\n\n## Prerequisites\n\n- You should have a basic understanding of Streamlit's [architecture](/develop/concepts/architecture/architecture).\n\n## When to use multithreading\n\nMultithreading is just one type of concurrency. Multiprocessing and coroutines are other forms of concurrency. You need to understand how your code is bottlenecked to choose the correct kind of concurrency.\n\nMultiprocessing is inherently parallel, meaning that resources are split and multiple tasks are performed simultaneously. Therefore, multiprocessing is helpful with compute-bound operations. In contrast, multithreading and coroutines are not inherently parallel and instead allow resource switching. This makes them good choices when your code is stuck _waiting_ for something, like an IO operation. AsyncIO uses coroutines and may be preferable with very slow IO operations. Threading may be preferable with faster IO operations. For a helpful guide to using AsyncIO with Streamlit, see this [Medium article by Sehmi-Conscious Thoughts](https://sehmi-conscious.medium.com/got-that-asyncio-feeling-f1a7c37cab8b).\n\nDon't forget that Streamlit has [fragments](/develop/concepts/architecture/fragments) and [caching](/develop/concepts/architecture/caching), too! Use caching to avoid unnecessarily repeating computations or IO operations. Use fragments to isolate a bit of code you want to update separately from the rest of the app. You can set fragments to rerun at a specified interval, so they can be used to stream updates to a chart or table.\n\n## Threads created by Streamlit\n\nStreamlit creates two types of threads in Python:\n\n- The **server thread** runs the Tornado web (HTTP + WebSocket) server.\n- A **script thread** runs page code &mdash; one thread for each script run in a session.\n\nWhen a user connects to your app, this creates a new session and runs a script thread to initialize the app for that user. As the script thread runs, it renders elements in the user's browser tab and reports state back to the server. When the user interacts with the app, another script thread runs, re-rendering the elements in the browser tab and updating state on the server.\n\nThis is a simplifed illustration to show how Streamlit works:\n\n![Each user session uses script threads to communicate between the user's front end and the Streamlit server.](/images/concepts/Streamlit-threading.svg)\n\n## `streamlit.errors.NoSessionContext`\n\nMany Streamlit commands, including `st.session_state`, expect to be called from a script thread. When Streamlit is running as expected, such commands use the `ScriptRunContext` attached to the script thread to ensure they work within the intended session and update the correct user's view. When those Streamlit commands can't find any `ScriptRunContext`, they raise a `streamlit.errors.NoSessionContext` exception. Depending on your logger settings, you may also see a console message identifying a thread by name and warning, \"missing ScriptRunContext!\"\n\n## Creating custom threads\n\nWhen you work with IO-heavy operations like remote query or data loading, you may need to mitigate delays. A general programming strategy is to create threads and let them work concurrently. However, if you do this in a Streamlit app, these custom threads may have difficulty interacting with your Streamlit server.\n\nThis section introduces two patterns to let you create custom threads in your Streamlit app. These are only patterns to provide a starting point rather than complete solutions.\n\n### Option 1: Do not use Streamlit commands within a custom thread\n\nIf you don't call Streamlit commands from a custom thread, you can avoid the problem entirely. Luckily Python threading provides ways to start a thread and collect its result from another thread.\n\nIn the following example, five custom threads are created from the script thread. After the threads are finished running, their results are displayed in the app.\n\n```python\nimport streamlit as st\nimport time\nfrom threading import Thread\n\n\nclass WorkerThread(Thread):\n    def __init__(self, delay):\n        super().__init__()\n        self.delay = delay\n        self.return_value = None\n\n    def run(self):\n        start_time = time.time()\n        time.sleep(self.delay)\n        end_time = time.time()\n        self.return_value = f\"start: {start_time}, end: {end_time}\"\n\n\ndelays = [5, 4, 3, 2, 1]\nthreads = [WorkerThread(delay) for delay in delays]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nfor i, thread in enumerate(threads):\n    st.header(f\"Thread {i}\")\n    st.write(thread.return_value)\n\nst.button(\"Rerun\")\n```\n\n<Cloud name=\"doc-multithreading-no-st-commands-batched\" height=\"700px\" />\n\nIf you want to display results in your app as various custom threads finish running, use containers. In the following example, five custom threads are created similarly to the previous example. However, five containers are initialized before running the custom threads and a `while` loop is used to display results as they become available. Since the Streamlit `write` command is called outside of the custom threads, this does not raise an exception.\n\n```python\nimport streamlit as st\nimport time\nfrom threading import Thread\n\n\nclass WorkerThread(Thread):\n    def __init__(self, delay):\n        super().__init__()\n        self.delay = delay\n        self.return_value = None\n\n    def run(self):\n        start_time = time.time()\n        time.sleep(self.delay)\n        end_time = time.time()\n        self.return_value = f\"start: {start_time}, end: {end_time}\"\n\n\ndelays = [5, 4, 3, 2, 1]\nresult_containers = []\nfor i, delay in enumerate(delays):\n    st.header(f\"Thread {i}\")\n    result_containers.append(st.container())\n\nthreads = [WorkerThread(delay) for delay in delays]\nfor thread in threads:\n    thread.start()\nthread_lives = [True] * len(threads)\n\nwhile any(thread_lives):\n    for i, thread in enumerate(threads):\n        if thread_lives[i] and not thread.is_alive():\n            result_containers[i].write(thread.return_value)\n            thread_lives[i] = False\n    time.sleep(0.5)\n\nfor thread in threads:\n    thread.join()\n\nst.button(\"Rerun\")\n```\n\n<Cloud name=\"doc-multithreading-no-st-commands-iterative\" height=\"700px\" />\n\n### Option 2: Expose `ScriptRunContext` to the thread\n\nIf you want to call Streamlit commands from within your custom threads, you must attach the correct `ScriptRunContext` to the thread.\n\n<Warning>\n\n- This is not officially supported and may change in a future version of Streamlit.\n- This may not work with all Streamlit commands.\n- Ensure custom threads do not outlive the script thread owning the `ScriptRunContext`. Leaking of `ScriptRunContext` may cause security vulnerabilities, fatal errors, or unexpected behavior.\n\n</Warning>\n\nIn the following example, a custom thread with `ScriptRunContext` attached can call `st.write` without a warning.\n\n```python\nimport streamlit as st\nfrom streamlit.runtime.scriptrunner import add_script_run_ctx, get_script_run_ctx\nimport time\nfrom threading import Thread\n\n\nclass WorkerThread(Thread):\n    def __init__(self, delay, target):\n        super().__init__()\n        self.delay = delay\n        self.target = target\n\n    def run(self):\n        # runs in custom thread, but can call Streamlit APIs\n        start_time = time.time()\n        time.sleep(self.delay)\n        end_time = time.time()\n        self.target.write(f\"start: {start_time}, end: {end_time}\")\n\n\ndelays = [5, 4, 3, 2, 1]\nresult_containers = []\nfor i, delay in enumerate(delays):\n    st.header(f\"Thread {i}\")\n    result_containers.append(st.container())\n\nthreads = [\n    WorkerThread(delay, container)\n    for delay, container in zip(delays, result_containers)\n]\nfor thread in threads:\n    add_script_run_ctx(thread, get_script_run_ctx())\n    thread.start()\n\nfor thread in threads:\n    thread.join()\n\nst.button(\"Rerun\")\n```\n\n<Cloud name=\"doc-multithreading-expose-context\" height=\"700px\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/design/dataframes",
    "content": "# Dataframes\n\nDataframes are a great way to display and edit data in a tabular format. Working with Pandas DataFrames and other tabular data structures is key to data science workflows. If developers and data scientists want to display this data in Streamlit, they have multiple options: `st.dataframe` and `st.data_editor`. If you want to solely display data in a table-like UI, [st.dataframe](/develop/api-reference/data/st.dataframe) is the way to go. If you want to interactively edit data, use [st.data_editor](/develop/api-reference/data/st.data_editor). We explore the use cases and advantages of each option in the following sections.\n\n## Display dataframes with st.dataframe\n\nStreamlit can display dataframes in a table-like UI via `st.dataframe` :\n\n```python\nimport streamlit as st\nimport pandas as pd\n\ndf = pd.DataFrame(\n    [\n        {\"command\": \"st.selectbox\", \"rating\": 4, \"is_widget\": True},\n        {\"command\": \"st.balloons\", \"rating\": 5, \"is_widget\": False},\n        {\"command\": \"st.time_input\", \"rating\": 3, \"is_widget\": True},\n    ]\n)\n\nst.dataframe(df, use_container_width=True)\n```\n\n<Cloud name=\"doc-dataframe-basic\" height=\"300px\"/>\n\n## `st.dataframe` UI features\n\n`st.dataframe` provides additional functionality by using [glide-data-grid](https://github.com/glideapps/glide-data-grid) under the hood:\n\n- **Column sorting**: To sort columns, select their headers, or select \"**Sort ascending**\" or \"**Sort descending**\" from the header menu (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>more_vert</i>).\n- **Column resizing**: To resize columns, drag and drop column header borders, or select \"**Autosize**\" from the header menu.\n- **Column hiding**: To hide columns, select \"**Hide column**\" from the header menu.\n- **Reorder and pin columns**: To reorder columns or pin them on the left, drag and drop column headers or select \"**Pin column**\" from the header menu, respectively.\n- **Format numbers, dates, and times**: To change the format of numeric columns, select an option under \"**Format**\" in the header menu.\n- **Dataframe resizing**: To resize dataframes, drag and drop the bottom right corner.\n- **Fullscreen view**: To enlarge dataframes to fullscreen, select the fullscreen icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>fullscreen</i>) in the toolbar.\n- **Search**: To search through the data, select the search icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>search</i>) in the toolbar or use hotkeys (`⌘+F` or `Ctrl+F`).\n- **Download**: To download the data as a CSV file, select the download icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>download</i>) in the toolbar.\n- **Copy to clipboard**: To copy the data to the clipboard, select one or multiple cells, use the hotkeys (`⌘+C` or `Ctrl+C`), and paste them into your favorite spreadsheet software.\n\n<YouTube videoId=\"nauAnULRG1c\" loop autoplay />\n\nTry out all the UI features using the embedded app from the prior section.\n\nIn addition to Pandas DataFrames, `st.dataframe` also supports other common Python types, e.g., list, dict, or numpy array. It also supports [Snowpark](https://docs.snowflake.com/en/developer-guide/snowpark/index) and [PySpark](https://spark.apache.org/docs/latest/api/python/) DataFrames, which allow you to lazily evaluate and pull data from databases. This can be useful for working with large datasets.\n\n## Edit data with st.data_editor\n\nStreamlit supports editable dataframes via the `st.data_editor` command. Check out its API in [st.data_editor](/develop/api-reference/data/st.data_editor). It shows the dataframe in a table, similar to `st.dataframe`. But in contrast to `st.dataframe`, this table isn't static! The user can click on cells and edit them. The edited data is then returned on the Python side. Here's an example:\n\n```python\ndf = pd.DataFrame(\n    [\n        {\"command\": \"st.selectbox\", \"rating\": 4, \"is_widget\": True},\n        {\"command\": \"st.balloons\", \"rating\": 5, \"is_widget\": False},\n        {\"command\": \"st.time_input\", \"rating\": 3, \"is_widget\": True},\n    ]\n)\n\nedited_df = st.data_editor(df) # 👈 An editable dataframe\n\nfavorite_command = edited_df.loc[edited_df[\"rating\"].idxmax()][\"command\"]\nst.markdown(f\"Your favorite command is **{favorite_command}** 🎈\")\n```\n\n<Cloud name=\"doc-data-editor\" height=\"300px\"/>\n\nTry it out by double-clicking on any cell. You'll notice you can edit all cell values. Try editing the values in the rating column and observe how the text output at the bottom changes:\n\n## `st.data_editor` UI features\n\n`st.data_editor` also supports a few additional things:\n\n- [**Add and delete rows**](#add-and-delete-rows): You can do this by setting `num_rows= \"dynamic\"` when calling `st.data_editor`. This will allow users to add and delete rows as needed.\n- [**Copy and paste support**](#copy-and-paste-support): Copy and paste both between `st.data_editor` and spreadsheet software like Google Sheets and Excel.\n- [**Access edited data**](#access-edited-data): Access only the individual edits instead of the entire edited data structure via Session State.\n- [**Bulk edits**](#bulk-edits): Similar to Excel, just drag a handle to edit neighboring cells.\n- [**Automatic input validation**](#automatic-input-validation): Column Configuration provides strong data type support and other configurable options. For example, there's no way to enter letters into a number cell. Number cells can have a designated min and max.\n- [**Edit common data structures**](#edit-common-data-structures): `st.data_editor` supports lists, dicts, NumPy ndarray, and more!\n\n<YouTube videoId=\"6tah69LkfxE\" loop autoplay />\n\n### Add and delete rows\n\nWith `st.data_editor`, viewers can add or delete rows via the table UI. This mode can be activated by setting the `num_rows` parameter to `\"dynamic\"`:\n\n```python\nedited_df = st.data_editor(df, num_rows=\"dynamic\")\n```\n\n- To add new rows, click the plus icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>add</i>) in the toolbar. Alternatively, click inside a shaded cell below the bottom row of the table.\n- To delete rows, select one or more rows using the checkboxes on the left. Click the delete icon (<i style={{ verticalAlign: \"-.25em\" }} className={{ class: \"material-icons-sharp\" }}>delete</i>) or press the `delete` key on your keyboard.\n\n<Cloud name=\"doc-data-editor-clipboard\" height=\"400px\"/>\n\n### Copy and paste support\n\nThe data editor supports pasting in tabular data from Google Sheets, Excel, Notion, and many other similar tools. You can also copy-paste data between `st.data_editor` instances. This functionality, powered by the [Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API), can be a huge time saver for users who need to work with data across multiple platforms. To try it out:\n\n1. Copy data from [this Google Sheets document](https://docs.google.com/spreadsheets/d/1Z0zd-5dF_HfqUaDDq4BWAOnsdlGCjkbTNwDZMBQ1dOY/edit?usp=sharing) to your clipboard.\n2. Single click any cell in the `name` column in the app above. Paste it in using hotkeys (`⌘+V` or `Ctrl+V`).\n\n<Note>\n\nEvery cell of the pasted data will be evaluated individually and inserted into the cells if the data is compatible with the column type. For example, pasting in non-numerical text data into a number column will be ignored.\n\n</Note>\n\n<Tip>\n\nIf you embed your apps with iframes, you'll need to allow the iframe to access the clipboard if you want to use the copy-paste functionality. To do so, give the iframe [`clipboard-write`](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write) and [`clipboard-read`](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/read) permissions. E.g.\n\n```javascript\n<iframe allow=\"clipboard-write;clipboard-read;\" ... src=\"https://your-app-url\"></iframe>\n```\n\nAs developers, ensure the app is served with a valid, trusted certificate when using TLS. If users encounter issues with copying and pasting data, direct them to check if their browser has activated clipboard access permissions for the Streamlit application, either when prompted or through the browser's site settings.\n\n</Tip>\n\n### Access edited data\n\nSometimes, it is more convenient to know which cells have been changed rather than getting the entire edited dataframe back. Streamlit makes this easy through the use of [Session State](/develop/concepts/architecture/session-state). If a `key` parameter is set, Streamlit will store any changes made to the dataframe in Session State.\n\nThis snippet shows how you can access changed data using Session State:\n\n```python\nst.data_editor(df, key=\"my_key\", num_rows=\"dynamic\") # 👈 Set a key\nst.write(\"Here's the value in Session State:\")\nst.write(st.session_state[\"my_key\"]) # 👈 Show the value in Session State\n```\n\nIn this code snippet, the `key` parameter is set to `\"my_key\"`. After the data editor is created, the value associated to `\"my_key\"` in Session State is displayed in the app using `st.write`. This shows the additions, edits, and deletions that were made.\n\nThis can be useful when working with large dataframes and you only need to know which cells have changed, rather than access the entire edited dataframe.\n\n<Cloud name=\"doc-data-editor-changed\" height=\"700px\"/>\n\nUse all we've learned so far and apply them to the above embedded app. Try editing cells, adding new rows, and deleting rows.\n\nNotice how edits to the table are reflected in Session State. When you make any edits, a rerun is triggered which sends the edits to the backend. The widget's state is a JSON object containing three properties: **edited_rows**, **added_rows**, and **deleted rows:**.\n\n<Warning>\n\nWhen going from `st.experimental_data_editor` to `st.data_editor` in 1.23.0, the data editor's representation in `st.session_state` was changed. The `edited_cells` dictionary is now called `edited_rows` and uses a different format (`{0: {\"column name\": \"edited value\"}}` instead of `{\"0:1\": \"edited value\"}`). You may need to adjust your code if your app uses `st.experimental_data_editor` in combination with `st.session_state`.\"\n\n</Warning>\n\n- `edited_rows` is a dictionary containing all edits. Keys are zero-based row indices and values are dictionaries that map column names to edits (e.g. `{0: {\"col1\": ..., \"col2\": ...}}`).\n- `added_rows` is a list of newly added rows. Each value is a dictionary with the same format as above (e.g. `[{\"col1\": ..., \"col2\": ...}]`).\n- `deleted_rows` is a list of row numbers that have been deleted from the table (e.g. `[0, 2]`).\n\n`st.data_editor` does not support reordering rows, so added rows will always be appended to the end of the dataframe with any edits and deletions applicable to the original rows.\n\n### Bulk edits\n\nThe data editor includes a feature that allows for bulk editing of cells. Similar to Excel, you can drag a handle across a selection of cells to edit their values in bulk. You can even apply commonly used [keyboard shortcuts](https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#keybindings) in spreadsheet software. This is useful when you need to make the same change across multiple cells, rather than editing each cell individually.\n\n### Edit common data structures\n\nEditing doesn't just work for Pandas DataFrames! You can also edit lists, tuples, sets, dictionaries, NumPy arrays, or Snowpark & PySpark DataFrames. Most data types will be returned in their original format. But some types (e.g. Snowpark and PySpark) are converted to Pandas DataFrames. To learn about all the supported types, read the [st.data_editor](/develop/api-reference/data/st.data_editor) API.\n\nFor example, you can easily let the user add items to a list:\n\n```python\nedited_list = st.data_editor([\"red\", \"green\", \"blue\"], num_rows= \"dynamic\")\nst.write(\"Here are all the colors you entered:\")\nst.write(edited_list)\n```\n\nOr numpy arrays:\n\n```python\nimport numpy as np\n\nst.data_editor(np.array([\n\t[\"st.text_area\", \"widget\", 4.92],\n\t[\"st.markdown\", \"element\", 47.22]\n]))\n```\n\nOr lists of records:\n\n```python\nst.data_editor([\n    {\"name\": \"st.text_area\", \"type\": \"widget\"},\n    {\"name\": \"st.markdown\", \"type\": \"element\"},\n])\n```\n\nOr dictionaries and many more types!\n\n```python\nst.data_editor({\n\t\"st.text_area\": \"widget\",\n\t\"st.markdown\": \"element\"\n})\n```\n\n### Automatic input validation\n\nThe data editor includes automatic input validation to help prevent errors when editing cells. For example, if you have a column that contains numerical data, the input field will automatically restrict the user to only entering numerical data. This helps to prevent errors that could occur if the user were to accidentally enter a non-numerical value. Additional input validation can be configured through the [Column configuration API](/develop/api-reference/data/st.column_config). Keep reading below for an overview of column configuration, including validation options.\n\n## Configuring columns\n\nYou can configure the display and editing behavior of columns in `st.dataframe` and `st.data_editor` via the [Column configuration API](/develop/api-reference/data/st.column_config). We have developed the API to let you add images, charts, and clickable URLs in dataframe and data editor columns. Additionally, you can make individual columns editable, set columns as categorical and specify which options they can take, hide the index of the dataframe, and much more.\n\nColumn configuration includes the following column types: Text, Number, Checkbox, Selectbox, Date, Time, Datetime, List, Link, Image, Line chart, Bar chart, and Progress. There is also a generic Column option. See the embedded app below to view these different column types. Each column type is individually previewed in the [Column configuration API](/develop/api-reference/data/st.column_config) documentation.\n\n<Cloud name=\"doc-column-config-overview\" query=\"embed_options=disable_scrolling\" height=\"480px\"/>\n\n### Format values\n\nA `format` parameter is available in column configuration for [Text](/develop/api-reference/data/st.column_config/st.column_config.textcolumn), [Date](/develop/api-reference/data/st.column_config/st.column_config.datecolumn), [Time](/develop/api-reference/data/st.column_config/st.column_config.timecolumn), and [Datetime](/develop/api-reference/data/st.column_config/st.column_config.datetimecolumn) columns. Chart-like columns can also be formatted. [Line chart](/develop/api-reference/data/st.column_config/st.column_config.linechartcolumn) and [Bar chart](/develop/api-reference/data/st.column_config/st.column_config.barchartcolumn) columns have a `y_min` and `y_max` parameters to set the vertical bounds. For a [Progress column](/develop/api-reference/data/st.column_config/st.column_config.progresscolumn), you can declare the horizontal bounds with `min_value` and `max_value`.\n\n### Validate input\n\nWhen specifying a column configuration, you can declare not only the data type of the column but also value restrictions. All column configuration elements allow you to make a column required with the keyword parameter `required=True`.\n\nFor Text and Link columns, you can specify the maximum number of characters with `max_chars` or use regular expressions to validate entries through `validate`. Numerical columns, including Number, Date, Time, and Datetime have `min_value` and `max_value` parameters. Selectbox columns have a configurable list of `options`.\n\nThe data type for Number columns is `float` by default. Passing a value of type `int` to any of `min_value`, `max_value`, `step`, or `default` will set the type for the column as `int`.\n\n### Configure an empty dataframe\n\nYou can use `st.data_editor` to collect tabular input from a user. When starting from an empty dataframe, default column types are text. Use column configuration to specify the data types you want to collect from users.\n\n```python\nimport streamlit as st\nimport pandas as pd\n\ndf = pd.DataFrame(columns=['name','age','color'])\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\nconfig = {\n    'name' : st.column_config.TextColumn('Full Name (required)', width='large', required=True),\n    'age' : st.column_config.NumberColumn('Age (years)', min_value=0, max_value=122),\n    'color' : st.column_config.SelectboxColumn('Favorite Color', options=colors)\n}\n\nresult = st.data_editor(df, column_config = config, num_rows='dynamic')\n\nif st.button('Get results'):\n    st.write(result)\n```\n\n<Cloud name=\"doc-column-config-empty\" height=\"300px\"/>\n\n## Additional formatting options\n\nIn addition to column configuration, `st.dataframe` and `st.data_editor` have a few more parameters to customize the display of your dataframe.\n\n- `hide_index` : Set to `True` to hide the dataframe's index.\n- `column_order` : Pass a list of column labels to specify the order of display.\n- `disabled` : Pass a list of column labels to disable them from editing. This let's you avoid disabling them individually.\n\n## Handling large datasets\n\n`st.dataframe` and `st.data_editor` have been designed to theoretically handle tables with millions of rows thanks to their highly performant implementation using the glide-data-grid library and HTML canvas. However, the maximum amount of data that an app can realistically handle will depend on several other factors, including:\n\n1. The maximum size of WebSocket messages: Streamlit's WebSocket messages are configurable via the `server.maxMessageSize` [config option](https://docs.streamlit.io/develop/concepts/configuration#view-all-configuration-options), which limits the amount of data that can be transferred via the WebSocket connection at once.\n2. The server memory: The amount of data that your app can handle will also depend on the amount of memory available on your server. If the server's memory is exceeded, the app may become slow or unresponsive.\n3. The user's browser memory: Since all the data needs to be transferred to the user's browser for rendering, the amount of memory available on the user's device can also affect the app's performance. If the browser's memory is exceeded, it may crash or become unresponsive.\n\nIn addition to these factors, a slow network connection can also significantly slow down apps that handle large datasets.\n\nWhen handling large datasets with more than 150,000 rows, Streamlit applies additional optimizations and disables column sorting. This can help to reduce the amount of data that needs to be processed at once and improve the app's performance.\n\n## Limitations\n\n- Streamlit casts all column names to strings internally, so `st.data_editor` will return a DataFrame where all column names are strings.\n- The dataframe toolbar is not currently configurable.\n- While Streamlit's data editing capabilities offer a lot of functionality, editing is enabled for a limited set of column types ([TextColumn](/develop/api-reference/data/st.column_config/st.column_config.textcolumn), [NumberColumn](/develop/api-reference/data/st.column_config/st.column_config.numbercolumn), [LinkColumn](/develop/api-reference/data/st.column_config/st.column_config.linkcolumn), [CheckboxColumn](/develop/api-reference/data/st.column_config/st.column_config.checkboxcolumn), [SelectboxColumn](/develop/api-reference/data/st.column_config/st.column_config.selectboxcolumn), [DateColumn](/develop/api-reference/data/st.column_config/st.column_config.datecolumn), [TimeColumn](/develop/api-reference/data/st.column_config/st.column_config.timecolumn), and [DatetimeColumn](/develop/api-reference/data/st.column_config/st.column_config.datetimecolumn)). We are actively working on supporting editing for other column types as well, such as images, lists, and charts.\n- Almost all editable datatypes are supported for index editing. However, `pandas.CategoricalIndex` and `pandas.MultiIndex` are not supported for editing.\n- Sorting is not supported for `st.data_editor` when `num_rows=\"dynamic\"`.\n- Sorting is deactivated to optimize performance on large datasets with more than 150,000 rows.\n\nWe are continually working to improve Streamlit's handling of DataFrame and add functionality to data editing, so keep an eye out for updates."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/design/animate",
    "content": "# Animate and update elements\n\nSometimes you display a chart or dataframe and want to modify it live as the app\nruns (for example, in a loop). Some elements have built-in methods to allow you\nto update them in-place without rerunning the app.\n\nUpdatable elements include the following:\n\n- `st.empty` containers can be written to in sequence and will always show the last thing written. They can also be cleared with an\n  additional `.empty()` called like a method.\n- `st.dataframe`, `st.table`, and many chart elements can be updated with the `.add_rows()` method which appends data.\n- `st.progress` elements can be updated with additional `.progress()` calls. They can also be cleared with a `.empty()` method call.\n- `st.status` containers have an `.update()` method to change their labels, expanded state, and status.\n- `st.toast` messages can be updated in place with additional `.toast()` calls.\n\n## `st.empty` containers\n\n`st.empty` can hold a single element. When you write any element to an `st.empty` container, Streamlit discards its previous content\ndisplays the new element. You can also `st.empty` containers by calling `.empty()` as a method. If you want to update a set of elements, use\na plain container (`st.container()`) inside `st.empty` and write contents to the plain container. Rewrite the plain container and its\ncontents as often as desired to update your app's display.\n\n## The `.add_rows()` method\n\n`st.dataframe`, `st.table`, and all chart functions can be mutated using the `.add_rows()` method on their output. In the following example, we use `my_data_element = st.line_chart(df)`. You can try the example with `st.table`, `st.dataframe`, and most of the other simple charts by just swapping out `st.line_chart`. Note that `st.dataframe` only shows the first ten rows by default and enables scrolling for additional rows. This means adding rows is not as visually apparent as it is with `st.table` or the chart elements.\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport time\n\ndf = pd.DataFrame(np.random.randn(15, 3), columns=([\"A\", \"B\", \"C\"]))\nmy_data_element = st.line_chart(df)\n\nfor tick in range(10):\n    time.sleep(.5)\n    add_df = pd.DataFrame(np.random.randn(1, 3), columns=([\"A\", \"B\", \"C\"]))\n    my_data_element.add_rows(add_df)\n\nst.button(\"Regenerate\")\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes",
    "content": "# Using custom Python classes in your Streamlit app\n\nIf you are building a complex Streamlit app or working with existing code, you may have custom Python classes defined in your script. Common examples include the following:\n\n- Defining a `@dataclass` to store related data within your app.\n- Defining an `Enum` class to represent a fixed set of options or values.\n- Defining custom interfaces to external services or databases not covered by [`st.connection`](/develop/api-reference/connections/st.connection).\n\nBecause Streamlit reruns your script after every user interaction, custom classes may be redefined multiple times within the same Streamlit session. This may result in unwanted effects, especially with class and instance comparisons. Read on to understand this common pitfall and how to avoid it.\n\nWe begin by covering some general-purpose patterns you can use for different types of custom classes, and follow with a few more technical details explaining why this matters. Finally, we go into more detail about [Using `Enum` classes](#using-enum-classes-in-streamlit) specifically, and describe a configuration option which can make them more convenient.\n\n## Patterns to define your custom classes\n\n### Pattern 1: Define your class in a separate module\n\nThis is the recommended, general solution. If possible, move class definitions into their own module file and import them into your app script. As long as you are not editing the files that define your app, Streamlit will not re-import those classes with each rerun. Therefore, if a class is defined in an external file and imported into your script, the class will not be redefined during the session, unless you are actively editing your app.\n\n#### Example: Move your class definition\n\nTry running the following Streamlit app where `MyClass` is defined within the page's script. `isinstance()` will return `True` on the first script run then return `False` on each rerun thereafter.\n\n```python\n# app.py\nimport streamlit as st\n\n# MyClass gets redefined every time app.py reruns\nclass MyClass:\n    def __init__(self, var1, var2):\n        self.var1 = var1\n        self.var2 = var2\n\nif \"my_instance\" not in st.session_state:\n  st.session_state.my_instance = MyClass(\"foo\", \"bar\")\n\n# Displays True on the first run then False on every rerun\nst.write(isinstance(st.session_state.my_instance, MyClass))\n\nst.button(\"Rerun\")\n```\n\nIf you move the class definition out of `app.py` into another file, you can make `isinstance()` consistently return `True`. Consider the following file structure:\n\n```\nmyproject/\n├── my_class.py\n└── app.py\n```\n\n```python\n# my_class.py\nclass MyClass:\n    def __init__(self, var1, var2):\n        self.var1 = var1\n        self.var2 = var2\n```\n\n```python\n# app.py\nimport streamlit as st\nfrom my_class import MyClass # MyClass doesn't get redefined with each rerun\n\nif \"my_instance\" not in st.session_state:\n  st.session_state.my_instance = MyClass(\"foo\", \"bar\")\n\n# Displays True on every rerun\nst.write(isinstance(st.session_state.my_instance, MyClass))\n\nst.button(\"Rerun\")\n```\n\nStreamlit only reloads code in imported modules when it detects the code has changed. Thus, if you are actively editing your app code, you may need to start a new session or restart your Streamlit server to avoid an undesirable class redefinition.\n\n### Pattern 2: Force your class to compare internal values\n\nFor classes that store data (like [dataclasses](https://docs.python.org/3/library/dataclasses.html)), you may be more interested in comparing the internally stored values rather than the class itself. If you define a custom `__eq__` method, you can force comparisons to be made on the internally stored values.\n\n#### Example: Define `__eq__`\n\nTry running the following Streamlit app and observe how the comparison is `True` on the first run then `False` on every rerun thereafter.\n\n```python\nimport streamlit as st\nfrom dataclasses import dataclass\n\n@dataclass\nclass MyDataclass:\n    var1: int\n    var2: float\n\nif \"my_dataclass\" not in st.session_state:\n    st.session_state.my_dataclass = MyDataclass(1, 5.5)\n\n# Displays True on the first run the False on every rerun\nst.session_state.my_dataclass == MyDataclass(1, 5.5)\n\nst.button(\"Rerun\")\n```\n\nSince `MyDataclass` gets redefined with each rerun, the instance stored in Session State will not be equal to any instance defined in a later script run. You can fix this by forcing a comparison of internal values as follows:\n\n```python\nimport streamlit as st\nfrom dataclasses import dataclass\n\n@dataclass\nclass MyDataclass:\n    var1: int\n    var2: float\n\n    def __eq__(self, other):\n        # An instance of MyDataclass is equal to another object if the object\n        # contains the same fields with the same values\n        return (self.var1, self.var2) == (other.var1, other.var2)\n\nif \"my_dataclass\" not in st.session_state:\n    st.session_state.my_dataclass = MyDataclass(1, 5.5)\n\n# Displays True on every rerun\nst.session_state.my_dataclass == MyDataclass(1, 5.5)\n\nst.button(\"Rerun\")\n```\n\nThe default Python `__eq__` implementation for a regular class or `@dataclass` depends on the in-memory ID of the class or class instance. To avoid problems in Streamlit, your custom `__eq__` method should not depend the `type()` of `self` and `other`.\n\n### Pattern 3: Store your class as serialized data\n\nAnother option for classes that store data is to define serialization and deserialization methods like `to_str` and `from_str` for your class. You can use these to store class instance data in `st.session_state` rather than storing the class instance itself. Similar to pattern 2, this is a way to force comparison of the internal data and bypass the changing in-memory IDs.\n\n#### Example: Save your class instance as a string\n\nUsing the same example from pattern 2, this can be done as follows:\n\n```python\nimport streamlit as st\nfrom dataclasses import dataclass\n\n@dataclass\nclass MyDataclass:\n    var1: int\n    var2: float\n\n    def to_str(self):\n        return f\"{self.var1},{self.var2}\"\n\n    @classmethod\n    def from_str(cls, serial_str):\n        values = serial_str.split(\",\")\n        var1 = int(values[0])\n        var2 = float(values[1])\n        return cls(var1, var2)\n\nif \"my_dataclass\" not in st.session_state:\n    st.session_state.my_dataclass = MyDataclass(1, 5.5).to_str()\n\n# Displays True on every rerun\nMyDataclass.from_str(st.session_state.my_dataclass) == MyDataclass(1, 5.5)\n\nst.button(\"Rerun\")\n```\n\n### Pattern 4: Use caching to preserve your class\n\nFor classes that are used as resources (database connections, state managers, APIs), consider using the cached singleton pattern. Use `@st.cache_resource` to decorate a `@staticmethod` of your class to generate a single, cached instance of the class. For example:\n\n```python\nimport streamlit as st\n\nclass MyResource:\n    def __init__(self, api_url: str):\n        self._url = api_url\n\n    @st.cache_resource(ttl=300)\n    @staticmethod\n    def get_resource_manager(api_url: str):\n        return MyResource(api_url)\n\n# This is cached until Session State is cleared or 5 minutes has elapsed.\nresource_manager = MyResource.get_resource_manager(\"http://example.com/api/\")\n```\n\nWhen you use one of Streamlit's caching decorators on a function, Streamlit doesn't use the function object to look up cached values. Instead, Streamlit's caching decorators index return values using the function's qualified name and module. So, even though Streamlit redefines `MyResource` with each script run, `st.cache_resource` is unaffected by this. `get_resource_manager()` will return its cached value with each rerun, until the value expires.\n\n## Understanding how Python defines and compares classes\n\nSo what's really happening here? We'll consider a simple example to illustrate why this is a pitfall. Feel free to skip this section if you don't want to deal more details. You can jump ahead to learn about [Using `Enum` classes](#using-enum-classes-in-streamlit).\n\n### Example: What happens when you define the same class twice?\n\nSet aside Streamlit for a moment and think about this simple Python script:\n\n```python\nfrom dataclasses import dataclass\n\n@dataclass\nclass Student:\n    student_id: int\n    name: str\n\nMarshall_A = Student(1, \"Marshall\")\nMarshall_B = Student(1, \"Marshall\")\n\n# This is True (because a dataclass will compare two of its instances by value)\nMarshall_A == Marshall_B\n\n# Redefine the class\n@dataclass\nclass Student:\n    student_id: int\n    name: str\n\nMarshall_C = Student(1, \"Marshall\")\n\n# This is False\nMarshall_A == Marshall_C\n```\n\nIn this example, the dataclass `Student` is defined twice. All three Marshalls have the same internal values. If you compare `Marshall_A` and `Marshall_B` they will be equal because they were both created from the first definition of `Student`. However, if you compare `Marshall_A` and `Marshall_C` they will not be equal because `Marshall_C` was created from the _second_ definition of `Student`. Even though both `Student` dataclasses are defined exactly the same, they have different in-memory IDs and are therefore different.\n\n### What's happening in Streamlit?\n\nIn Streamlit, you probably don't have the same class written twice in your page script. However, the rerun logic of Streamlit creates the same effect. Let's use the above example for an analogy. If you define a class in one script run and save an instance in Session State, then a later rerun will redefine the class and you may end up comparing a `Mashall_C` in your rerun to a `Marshall_A` in Session State. Since widgets rely on Session State under the hood, this is where things can get confusing.\n\n## How Streamlit widgets store options\n\nSeveral Streamlit UI elements, such as `st.selectbox` or `st.radio`, accept multiple-choice options via an `options` argument. The user of your application can typically select one or more of these options. The selected value is returned by the widget function. For example:\n\n```python\nnumber = st.selectbox(\"Pick a number, any number\", options=[1, 2, 3])\n# number == whatever value the user has selected from the UI.\n```\n\nWhen you call a function like `st.selectbox` and pass an `Iterable` to `options`, the `Iterable` and current selection are saved into a hidden portion of [Session State](/develop/concepts/architecture/session-state) called the Widget Metadata.\n\nWhen the user of your application interacts with the `st.selectbox` widget, the broswer sends the index of their selection to your Streamlit server. This index is used to determine which values from the original `options` list, _saved in the Widget Metadata from the previous page execution_, are returned to your application.\n\nThe key detail is that the value returned by `st.selectbox` (or similar widget function) is from an `Iterable` saved in Session State during a _previous_ execution of the page, NOT the values passed to `options` on the _current_ execution. There are a number of architectural reasons why Streamlit is designed this way, which we won't go into here. However, **this** is how we end up comparing instances of different classes when we think we are comparing instances of the same class.\n\n### A pathological example\n\nThe above explanation might be a bit confusing, so here's a pathological example to illustrate the idea.\n\n```python\nimport streamlit as st\nfrom dataclasses import dataclass\n\n@dataclass\nclass Student:\n    student_id: int\n    name: str\n\nMarshall_A = Student(1, \"Marshall\")\nif \"B\" not in st.session_state:\n    st.session_state.B = Student(1, \"Marshall\")\nMarshall_B = st.session_state.B\n\noptions = [Marshall_A,Marshall_B]\nselected = st.selectbox(\"Pick\", options)\n\n# This comparison does not return expected results:\nselected == Marshall_A\n# This comparison evaluates as expected:\nselected == Marshall_B\n```\n\nAs a final note, we used `@dataclass` in the example for this section to illustrate a point, but in fact it is possible to encounter these same problems with classes, in general. Any class which checks class identity inside of a comparison operator&mdash;such as `__eq__` or `__gt__`&mdash;can exhibit these issues.\n\n## Using `Enum` classes in Streamlit\n\nThe [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum) class from the Python standard library is a powerful way to define custom symbolic names that can be used as options for `st.multiselect` or `st.selectbox` in place of `str` values.\n\nFor example, you might add the following to your streamlit page:\n\n```python\nfrom enum import Enum\nimport streamlit as st\n\n# class syntax\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nselected_colors = set(st.multiselect(\"Pick colors\", options=Color))\n\nif selected_colors == {Color.RED, Color.GREEN}:\n    st.write(\"Hooray, you found the color YELLOW!\")\n```\n\nIf you're using the latest version of Streamlit, this Streamlit page will work as it appears it should. When a user picks both `Color.RED` and `Color.GREEN`, they are shown the special message.\n\nHowever, if you've read the rest of this page you might notice something tricky going on. Specifically, the `Enum` class `Color` gets redefined every time this script is run. In Python, if you define two `Enum` classes with the same class name, members, and values, the classes and their members are still considered unique from each other. This _should_ cause the above `if` condition to always evaluate to `False`. In any script rerun, the `Color` values returned by `st.multiselect` would be of a different class than the `Color` defined in that script run.\n\nIf you run the snippet above with Streamlit version 1.28.0 or less, you will not be able see the special message. Thankfully, as of version 1.29.0, Streamlit introduced a configuration option to greatly simplify the problem. That's where the enabled-by-default `enumCoercion` configuration option comes in.\n\n### Understanding the `enumCoercion` configuration option\n\nWhen `enumCoercion` is enabled, Streamlit tries to recognize when you are using an element like `st.multiselect` or `st.selectbox` with a set of `Enum` members as options.\n\nIf Streamlit detects this, it will convert the widget's returned values to members of the `Enum` class defined in the latest script run. This is something we call automatic `Enum` coercion.\n\nThis behavior is [configurable](/develop/concepts/configuration) via the `enumCoercion` setting in your Streamlit `config.toml` file. It is enabled by default, and may be disabled or set to a stricter set of matching criteria.\n\nIf you find that you still encounter issues with `enumCoercion` enabled, consider using the [custom class patterns](#patterns-to-define-your-custom-classes) described above, such as moving your `Enum` class definition to a separate module file."
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/design/buttons",
    "content": "# Button behavior and examples\n\n## Summary\n\nButtons created with [`st.button`](/develop/api-reference/widgets/st.button) do not retain state. They return `True` on the script rerun resulting from their click and immediately return to `False` on the next script rerun. If a displayed element is nested inside `if st.button('Click me'):`, the element will be visible when the button is clicked and disappear as soon as the user takes their next action. This is because the script reruns and the button return value becomes `False`.\n\nIn this guide, we will illustrate the use of buttons and explain common misconceptions. Read on to see a variety of examples that expand on `st.button` using [`st.session_state`](/develop/api-reference/caching-and-state/st.session_state). [Anti-patterns](#anti-patterns) are included at the end. Go ahead and pull up your favorite code editor so you can `streamlit run` the examples as you read. Check out Streamlit's [Basic concepts](/get-started/fundamentals/main-concepts) if you haven't run your own Streamlit scripts yet.\n\n## When to use `if st.button()`\n\nWhen code is conditioned on a button's value, it will execute once in response to the button being clicked and not again (until the button is clicked again).\n\nGood to nest inside buttons:\n\n- Transient messages that immediately disappear.\n- Once-per-click processes that saves data to session state, a file, or\n  a database.\n\nBad to nest inside buttons:\n\n- Displayed items that should persist as the user continues.\n- Other widgets which cause the script to rerun when used.\n- Processes that neither modify session state nor write to a file/database.\\*\n\n\\* This can be appropriate when disposable results are desired. If you\nhave a \"Validate\" button, that could be a process conditioned directly on a\nbutton. It could be used to create an alert to say 'Valid' or 'Invalid' with no\nneed to keep that info.\n\n## Common logic with buttons\n\n### Show a temporary message with a button\n\nIf you want to give the user a quick button to check if an entry is valid, but not keep that check displayed as the user continues.\n\nIn this example, a user can click a button to check if their `animal` string is in the `animal_shelter` list. When the user clicks \"**Check availability**\" they will see \"We have that animal!\" or \"We don't have that animal.\" If they change the animal in [`st.text_input`](/develop/api-reference/widgets/st.text_input), the script reruns and the message disappears until they click \"**Check availability**\" again.\n\n```python\nimport streamlit as st\n\nanimal_shelter = ['cat', 'dog', 'rabbit', 'bird']\n\nanimal = st.text_input('Type an animal')\n\nif st.button('Check availability'):\n    have_it = animal.lower() in animal_shelter\n    'We have that animal!' if have_it else 'We don\\'t have that animal.'\n```\n\nNote: The above example uses [magic](/develop/api-reference/write-magic/magic) to render the message on the frontend.\n\n### Stateful button\n\nIf you want a clicked button to continue to be `True`, create a value in `st.session_state` and use the button to set that value to `True` in a callback.\n\n```python\nimport streamlit as st\n\nif 'clicked' not in st.session_state:\n    st.session_state.clicked = False\n\ndef click_button():\n    st.session_state.clicked = True\n\nst.button('Click me', on_click=click_button)\n\nif st.session_state.clicked:\n    # The message and nested widget will remain on the page\n    st.write('Button clicked!')\n    st.slider('Select a value')\n```\n\n### Toggle button\n\nIf you want a button to work like a toggle switch, consider using [`st.checkbox`](/develop/api-reference/widgets/st.checkbox). Otherwise, you can use a button with a callback function to reverse a boolean value saved in `st.session_state`.\n\nIn this example, we use `st.button` to toggle another widget on and off. By displaying [`st.slider`](/develop/api-reference/widgets/st.slider) conditionally on a value in `st.session_state`, the user can interact with the slider without it disappearing.\n\n```python\nimport streamlit as st\n\nif 'button' not in st.session_state:\n    st.session_state.button = False\n\ndef click_button():\n    st.session_state.button = not st.session_state.button\n\nst.button('Click me', on_click=click_button)\n\nif st.session_state.button:\n    # The message and nested widget will remain on the page\n    st.write('Button is on!')\n    st.slider('Select a value')\nelse:\n    st.write('Button is off!')\n```\n\nAlternatively, you can use the value in `st.session_state` on the slider's `disabled` parameter.\n\n```python\nimport streamlit as st\n\nif 'button' not in st.session_state:\n    st.session_state.button = False\n\ndef click_button():\n    st.session_state.button = not st.session_state.button\n\nst.button('Click me', on_click=click_button)\n\nst.slider('Select a value', disabled=st.session_state.button)\n```\n\n### Buttons to continue or control stages of a process\n\nAnother alternative to nesting content inside a button is to use a value in `st.session_state` that designates the \"step\" or \"stage\" of a process. In this example, we have four stages in our script:\n\n0. Before the user begins.\n1. User enters their name.\n2. User chooses a color.\n3. User gets a thank-you message.\n\nA button at the beginning advances the stage from 0 to 1. A button at the end resets the stage from 3 to 0. The other widgets used in stage 1 and 2 have callbacks to set the stage. If you have a process with dependant steps and want to keep previous stages visible, such a callback forces a user to retrace subsequent stages if they change an earlier widget.\n\n```python\nimport streamlit as st\n\nif 'stage' not in st.session_state:\n    st.session_state.stage = 0\n\ndef set_state(i):\n    st.session_state.stage = i\n\nif st.session_state.stage == 0:\n    st.button('Begin', on_click=set_state, args=[1])\n\nif st.session_state.stage >= 1:\n    name = st.text_input('Name', on_change=set_state, args=[2])\n\nif st.session_state.stage >= 2:\n    st.write(f'Hello {name}!')\n    color = st.selectbox(\n        'Pick a Color',\n        [None, 'red', 'orange', 'green', 'blue', 'violet'],\n        on_change=set_state, args=[3]\n    )\n    if color is None:\n        set_state(2)\n\nif st.session_state.stage >= 3:\n    st.write(f':{color}[Thank you!]')\n    st.button('Start Over', on_click=set_state, args=[0])\n```\n\n### Buttons to modify `st.session_state`\n\nIf you modify `st.session_state` inside of a button, you must consider where that button is within the script.\n\n#### A slight problem\n\nIn this example, we access `st.session_state.name` both before and after the buttons which modify it. When a button (\"**Jane**\" or \"**John**\") is clicked, the script reruns. The info displayed before the buttons lags behind the info written after the button. The data in `st.session_state` before the button is not updated. When the script executes the button function, that is when the conditional code to update `st.session_state` creates the change. Thus, this change is reflected after the button.\n\n```python\nimport streamlit as st\nimport pandas as pd\n\nif 'name' not in st.session_state:\n    st.session_state['name'] = 'John Doe'\n\nst.header(st.session_state['name'])\n\nif st.button('Jane'):\n    st.session_state['name'] = 'Jane Doe'\n\nif st.button('John'):\n    st.session_state['name'] = 'John Doe'\n\nst.header(st.session_state['name'])\n```\n\n#### Logic used in a callback\n\nCallbacks are a clean way to modify `st.session_state`. Callbacks are executed as a prefix to the script rerunning, so the position of the button relative to accessing data is not important.\n\n```python\nimport streamlit as st\nimport pandas as pd\n\nif 'name' not in st.session_state:\n    st.session_state['name'] = 'John Doe'\n\ndef change_name(name):\n    st.session_state['name'] = name\n\nst.header(st.session_state['name'])\n\nst.button('Jane', on_click=change_name, args=['Jane Doe'])\nst.button('John', on_click=change_name, args=['John Doe'])\n\nst.header(st.session_state['name'])\n```\n\n#### Logic nested in a button with a rerun\n\nAlthough callbacks are often preferred to avoid extra reruns, our first 'John Doe'/'Jane Doe' example can be modified by adding [`st.rerun`](/develop/api-reference/execution-flow/st.rerun) instead. If you need to acces data in `st.session_state` before the button that modifies it, you can include `st.rerun` to rerun the script after the change has been committed. This means the script will rerun twice when a button is clicked.\n\n```python\nimport streamlit as st\nimport pandas as pd\n\nif 'name' not in st.session_state:\n    st.session_state['name'] = 'John Doe'\n\nst.header(st.session_state['name'])\n\nif st.button('Jane'):\n    st.session_state['name'] = 'Jane Doe'\n    st.rerun()\n\nif st.button('John'):\n    st.session_state['name'] = 'John Doe'\n    st.rerun()\n\nst.header(st.session_state['name'])\n```\n\n### Buttons to modify or reset other widgets\n\nWhen a button is used to modify or reset another widget, it is the same as the above examples to modify `st.session_state`. However, an extra consideration exists: you cannot modify a key-value pair in `st.session_state` if the widget with that key has already been rendered on the page for the current script run.\n\n<Important>\n\nDon't do this!\n\n```python\nimport streamlit as st\n\nst.text_input('Name', key='name')\n\n# These buttons will error because their nested code changes\n# a widget's state after that widget within the script.\nif st.button('Clear name'):\n    st.session_state.name = ''\nif st.button('Streamlit!'):\n    st.session_state.name = ('Streamlit')\n```\n\n</Important>\n\n#### Option 1: Use a key for the button and put the logic before the widget\n\nIf you assign a key to a button, you can condition code on a button's state by using its value in `st.session_state`. This means that logic depending on your button can be in your script before that button. In the following example, we use the `.get()` method on `st.session_state` because the keys for the buttons will not exist when the script runs for the first time. The `.get()` method will return `False` if it can't find the key. Otherwise, it will return the value of the key.\n\n```python\nimport streamlit as st\n\n# Use the get method since the keys won't be in session_state\n# on the first script run\nif st.session_state.get('clear'):\n    st.session_state['name'] = ''\nif st.session_state.get('streamlit'):\n    st.session_state['name'] = 'Streamlit'\n\nst.text_input('Name', key='name')\n\nst.button('Clear name', key='clear')\nst.button('Streamlit!', key='streamlit')\n```\n\n#### Option 2: Use a callback\n\n```python\nimport streamlit as st\n\nst.text_input('Name', key='name')\n\ndef set_name(name):\n    st.session_state.name = name\n\nst.button('Clear name', on_click=set_name, args=[''])\nst.button('Streamlit!', on_click=set_name, args=['Streamlit'])\n```\n\n#### Option 3: Use containers\n\nBy using [`st.container`](/develop/api-reference/layout/st.container) you can have widgets appear in different orders in your script and frontend view (webpage).\n\n```python\nimport streamlit as st\n\nbegin = st.container()\n\nif st.button('Clear name'):\n    st.session_state.name = ''\nif st.button('Streamlit!'):\n    st.session_state.name = ('Streamlit')\n\n# The widget is second in logic, but first in display\nbegin.text_input('Name', key='name')\n```\n\n### Buttons to add other widgets dynamically\n\nWhen dynamically adding widgets to the page, make sure to use an index to keep the keys unique and avoid a `DuplicateWidgetID` error. In this example, we define a function `display_input_row` which renders a row of widgets. That function accepts an `index` as a parameter. The widgets rendered by `display_input_row` use `index` within their keys so that `display_input_row` can be executed multiple times on a single script rerun without repeating any widget keys.\n\n```python\nimport streamlit as st\n\ndef display_input_row(index):\n    left, middle, right = st.columns(3)\n    left.text_input('First', key=f'first_{index}')\n    middle.text_input('Middle', key=f'middle_{index}')\n    right.text_input('Last', key=f'last_{index}')\n\nif 'rows' not in st.session_state:\n    st.session_state['rows'] = 0\n\ndef increase_rows():\n    st.session_state['rows'] += 1\n\nst.button('Add person', on_click=increase_rows)\n\nfor i in range(st.session_state['rows']):\n    display_input_row(i)\n\n# Show the results\nst.subheader('People')\nfor i in range(st.session_state['rows']):\n    st.write(\n        f'Person {i+1}:',\n        st.session_state[f'first_{i}'],\n        st.session_state[f'middle_{i}'],\n        st.session_state[f'last_{i}']\n    )\n```\n\n### Buttons to handle expensive or file-writing processes\n\nWhen you have expensive processes, set them to run upon clicking a button and save the results into `st.session_state`. This allows you to keep accessing the results of the process without re-executing it unnecessarily. This is especially helpful for processes that save to disk or write to a database. In this example, we have an `expensive_process` that depends on two parameters: `option` and `add`. Functionally, `add` changes the output, but `option` does not&mdash;`option` is there to provide a parameter\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport time\n\ndef expensive_process(option, add):\n    with st.spinner('Processing...'):\n        time.sleep(5)\n    df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C':[7, 8, 9]}) + add\n    return (df, add)\n\ncols = st.columns(2)\noption = cols[0].selectbox('Select a number', options=['1', '2', '3'])\nadd = cols[1].number_input('Add a number', min_value=0, max_value=10)\n\nif 'processed' not in st.session_state:\n    st.session_state.processed = {}\n\n# Process and save results\nif st.button('Process'):\n    result = expensive_process(option, add)\n    st.session_state.processed[option] = result\n    st.write(f'Option {option} processed with add {add}')\n    result[0]\n```\n\nAstute observers may think, \"This feels a little like caching.\" We are only saving results relative to one parameter, but the pattern could easily be expanded to save results relative to both parameters. In that sense, yes, it has some similarities to caching, but also some important differences. When you save results in `st.session_state`, the results are only available to the current user in their current session. If you use [`st.cache_data`](/develop/api-reference/caching-and-state/st.cache_data) instead, the results are available to all users across all sessions. Furthermore, if you want to update a saved result, you have to clear all saved results for that function to do so.\n\n## Anti-patterns\n\nHere are some simplified examples of how buttons can go wrong. Be on the lookout for these common mistakes.\n\n### Buttons nested inside buttons\n\n```python\nimport streamlit as st\n\nif st.button('Button 1'):\n    st.write('Button 1 was clicked')\n    if st.button('Button 2'):\n        # This will never be executed.\n        st.write('Button 2 was clicked')\n```\n\n### Other widgets nested inside buttons\n\n```python\nimport streamlit as st\n\nif st.button('Sign up'):\n    name = st.text_input('Name')\n\n    if name:\n        # This will never be executed.\n        st.success(f'Welcome {name}')\n```\n\n### Nesting a process inside a button without saving to session state\n\n```python\nimport streamlit as st\nimport pandas as pd\n\nfile = st.file_uploader(\"Upload a file\", type=\"csv\")\n\nif st.button('Get data'):\n    df = pd.read_csv(file)\n    # This display will go away with the user's next action.\n    st.write(df)\n\nif st.button('Save'):\n    # This will always error.\n    df.to_csv('data.csv')\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/concepts/design",
    "content": "# App design concepts and considerations\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/concepts/design/animate\">\n\n<h5>Animate and update elements</h5>\n\nUnderstand how to create dynamic, animated content or update elements without rerunning your app.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design/buttons\">\n\n<h5>Button behavior and examples</h5>\n\nUnderstand how buttons work with explanations and examples to avoid common mistakes.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design/dataframes\">\n\n<h5>Dataframes</h5>\n\nDataframes are a great way to display and edit data in a tabular format. Understand the UI and options available in Streamlit.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design/custom-classes\">\n\n<h5>Using custom Python classes in your Streamlit app</h5>\n\nUnderstand the impact of defining your own Python classes within Streamlit's rerun model.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design/multithreading\">\n\n<h5>Multithreading</h5>\n\nUnderstand how to use multithreading within Streamlit apps.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design/timezone-handling\">\n\n<h5>Working with timezones</h5>\n\nUnderstand how to localize time to your users.\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/configuration/st.get_option",
    "content": "<Autofunction function=\"streamlit.get_option\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/configuration/st.set_page_config",
    "content": "<Autofunction function=\"streamlit.set_page_config\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/configuration/config.toml",
    "content": "## config.toml\n\n`config.toml` is an optional file you can define for your working directory or global development environment. When `config.toml` is defined both globally and in your working directory, Streamlit combines the configuration options and gives precedence to the working-directory configuration. Additionally, you can use environment variables and command-line options to override additional configuration options. For more information, see [Configuration options](/develop/concepts/configuration/options).\n\n### File location\n\nTo define your configuration locally or per-project, add `.streamlit/config.toml` to your working directory. Your working directory is wherever you call `streamlit run`. If you haven't previously created the `.streamlit` directory, you will need to add it.\n\nTo define your configuration globally, you must first locate your global `.streamlit` directory. Streamlit adds this hidden directory to your OS user profile during installation. For MacOS/Linux, this will be `~/.streamlit/config.toml`. For Windows, this will be `%userprofile%/.streamlit/config.toml`.\n\n### File format\n\n`config.toml` is a [TOML](https://toml.io/en/) file.\n\n#### Example\n\n```toml\n[client]\nshowErrorDetails = \"none\"\n\n[theme]\nprimaryColor = \"#F63366\"\nbackgroundColor = \"black\"\n```\n\n### Available configuration options\n\nBelow are all the sections and options you can have in your `.streamlit/config.toml` file. To see all configurations, use the following command in your terminal or CLI:\n\n```bash\nstreamlit config show\n```\n\n#### Global\n\n```toml\n[global]\n\n# By default, Streamlit displays a warning when a user sets both a widget\n# default value in the function defining the widget and a widget value via\n# the widget's key in `st.session_state`.\n# If you'd like to turn off this warning, set this to True.\n# Default: false\ndisableWidgetStateDuplicationWarning = false\n\n# If True, will show a warning when you run a Streamlit-enabled script\n# via \"python my_script.py\".\n# Default: true\nshowWarningOnDirectExecution = true\n```\n\n#### Logger\n\n```toml\n[logger]\n\n# Level of logging for Streamlit's internal logger: \"error\", \"warning\",\n# \"info\", or \"debug\".\n# Default: \"info\"\nlevel = \"info\"\n\n# String format for logging messages. If logger.datetimeFormat is set,\n# logger messages will default to `%(asctime)s.%(msecs)03d %(message)s`.\n# See Python's documentation for available attributes:\n# https://docs.python.org/3/library/logging.html#formatter-objects\n# Default: \"%(asctime)s %(message)s\"\nmessageFormat = \"%(asctime)s %(message)s\"\n```\n\n#### Client\n\n```toml\n[client]\n\n# Controls whether uncaught app exceptions and deprecation warnings\n# are displayed in the browser. This can be one of the following:\n# - \"full\"       : In the browser, Streamlit displays app deprecation\n#                  warnings and exceptions, including exception types,\n#                  exception messages, and associated tracebacks.\n# - \"stacktrace\" : In the browser, Streamlit displays exceptions,\n#                  including exception types, generic exception messages,\n#                  and associated tracebacks. Deprecation warnings and\n#                  full exception messages will only print to the\n#                  console.\n# - \"type\"       : In the browser, Streamlit displays exception types and\n#                  generic exception messages. Deprecation warnings, full\n#                  exception messages, and associated tracebacks only\n#                  print to the console.\n# - \"none\"       : In the browser, Streamlit displays generic exception\n#                  messages. Deprecation warnings, full exception\n#                  messages, associated tracebacks, and exception types\n#                  will only print to the console.\n# - True         : This is deprecated. Streamlit displays \"full\"\n#                  error details.\n# - False        : This is deprecated. Streamlit displays \"stacktrace\"\n#                  error details.\n# Default: \"full\"\nshowErrorDetails = \"full\"\n\n# Change the visibility of items in the toolbar, options menu,\n# and settings dialog (top right of the app).\n# Allowed values:\n# - \"auto\"      : Show the developer options if the app is accessed through\n#                 localhost or through Streamlit Community Cloud as a developer.\n#                 Hide them otherwise.\n# - \"developer\" : Show the developer options.\n# - \"viewer\"    : Hide the developer options.\n# - \"minimal\"   : Show only options set externally (e.g. through\n#                 Streamlit Community Cloud) or through st.set_page_config.\n#                 If there are no options left, hide the menu.\n# Default: \"auto\"\ntoolbarMode = \"auto\"\n\n# Controls whether to display the default sidebar page navigation in a\n# multi-page app. This only applies when app's pages are defined by the\n# `pages/` directory.\n# Default: true\nshowSidebarNavigation = true\n```\n\n#### Runner\n\n```toml\n[runner]\n\n# Allows you to type a variable or string by itself in a single line of\n# Python code to write it to the app.\n# Default: true\nmagicEnabled = true\n\n# Handle script rerun requests immediately, rather than waiting for\n# script execution to reach a yield point.\n# This makes Streamlit much more responsive to user interaction, but it\n# can lead to race conditions in apps that mutate session_state data\n# outside of explicit session_state assignment statements.\n# Default: true\nfastReruns = true\n\n# Raise an exception after adding unserializable data to Session State.\n# Some execution environments may require serializing all data in Session\n# State, so it may be useful to detect incompatibility during development,\n# or when the execution environment will stop supporting it in the future.\n# Default: false\nenforceSerializableSessionState = false\n\n# Adjust how certain 'options' widgets like radio, selectbox, and\n# multiselect coerce Enum members.\n# This is useful when the Enum class gets re-defined during a script\n# re-run. For more information, check out the docs:\n# https://docs.streamlit.io/develop/concepts/design/custom-classes#enums\n# Allowed values:\n# - \"off\"          : Disables Enum coercion.\n# - \"nameOnly\"     : Enum classes can be coerced if their member names match.\n# - \"nameAndValue\" : Enum classes can be coerced if their member names AND\n#                    member values match.\n# Default: \"nameOnly\"\nenumCoercion = \"nameOnly\"\n```\n\n#### Server\n\n```toml\n[server]\n\n# List of directories to watch for changes.\n# By default, Streamlit watches files in the current working directory\n# and its subdirectories. Use this option to specify additional\n# directories to watch. Paths must be absolute.\n# Default: []\nfolderWatchList = []\n\n# List of directories to ignore for changes.\n# By default, Streamlit watches files in the current working directory\n# and its subdirectories. Use this option to specify exceptions within\n# watched directories. Paths can be absolute or relative to the current\n# working directory.\n# Example: ['/home/user1/env', 'relative/path/to/folder']\n# Default: []\nfolderWatchBlacklist = []\n\n# Change the type of file watcher used by Streamlit, or turn it off\n# completely.\n# Allowed values:\n# - \"auto\"     : Streamlit will attempt to use the watchdog module, and\n#                falls back to polling if watchdog is not available.\n# - \"watchdog\" : Force Streamlit to use the watchdog module.\n# - \"poll\"     : Force Streamlit to always use polling.\n# - \"none\"     : Streamlit will not watch files.\n# Default: \"auto\"\nfileWatcherType = \"auto\"\n\n# Symmetric key used to produce signed cookies. If deploying on multiple\n# replicas, this should be set to the same value across all replicas to ensure\n# they all share the same secret.\n# Default: randomly generated secret key.\ncookieSecret = \"a-random-key-appears-here\"\n\n# If false, will attempt to open a browser window on start.\n# Default: false unless (1) we are on a Linux box where DISPLAY is unset, or\n# (2) we are running in the Streamlit Atom plugin.\nheadless = false\n\n# Automatically rerun script when the file is modified on disk.\n# Default: false\nrunOnSave = false\n\n# The address where the server will listen for client and browser\n# connections.\n# Use this if you want to bind the server to a specific address.\n# If set, the server will only be accessible from this address, and not from\n# any aliases (like localhost).\n# Default: (unset)\naddress =\n\n# The port where the server will listen for browser connections.\n# Default: 8501\nport = 8501\n\n# The base path for the URL where Streamlit should be served from.\n# Default: \"\"\nbaseUrlPath = \"\"\n\n# Enables support for Cross-Origin Resource Sharing (CORS) protection,\n# for added security.\n# If XSRF protection is enabled and CORS protection is disabled at the\n# same time, Streamlit will enable them both instead.\n# Default: true\nenableCORS = true\n\n# Allowed list of origins.\n# If CORS protection is enabled (`server.enableCORS=True`), use this\n# option to set a list of allowed origins that the Streamlit server will\n# accept traffic from.\n# This config option does nothing if CORS protection is disabled.\n# Example: ['http://example.com', 'https://streamlit.io']\n# Default: []\ncorsAllowedOrigins = []\n\n# Enables support for Cross-Site Request Forgery (XSRF) protection, for\n# added security.\n# If XSRF protection is enabled and CORS protection is disabled at the\n# same time, Streamlit will enable them both instead.\n# Default: true\nenableXsrfProtection = true\n\n# Max size, in megabytes, for files uploaded with the file_uploader.\n# Default: 200\nmaxUploadSize = 200\n\n# Max size, in megabytes, of messages that can be sent via the WebSocket\n# connection.\n# Default: 200\nmaxMessageSize = 200\n\n# Enables support for websocket compression.\n# Default: false\nenableWebsocketCompression = false\n\n# Enable serving files from a `static` directory in the running app's\n# directory.\n# Default: false\nenableStaticServing = false\n\n# TTL in seconds for sessions whose websockets have been disconnected.\n# The server may choose to clean up session state, uploaded files, etc\n# for a given session with no active websocket connection at any point\n# after this time has passed.\n# Default: 120\ndisconnectedSessionTTL = 120\n\n# Server certificate file for connecting via HTTPS.\n# Must be set at the same time as \"server.sslKeyFile\".\n# ['DO NOT USE THIS OPTION IN A PRODUCTION ENVIRONMENT. It has not gone through\n# security audits or performance tests. For the production environment, we\n# recommend performing SSL termination by the load balancer or the reverse\n# proxy.']\nsslCertFile =\n\n# Cryptographic key file for connecting via HTTPS.\n# Must be set at the same time as \"server.sslCertFile\".\n# ['DO NOT USE THIS OPTION IN A PRODUCTION ENVIRONMENT. It has not gone through\n# security audits or performance tests. For the production environment, we\n# recommend performing SSL termination by the load balancer or the reverse\n# proxy.']\nsslKeyFile =\n```\n\n#### Browser\n\n```toml\n[browser]\n\n# Internet address where users should point their browsers in order to\n# connect to the app. Can be IP address or DNS name and path.\n# This is used to:\n# - Set the correct URL for CORS and XSRF protection purposes.\n# - Show the URL on the terminal\n# - Open the browser\n# Default: \"localhost\"\nserverAddress = \"localhost\"\n\n# Whether to send usage statistics to Streamlit.\n# Default: true\ngatherUsageStats = true\n\n# Port where users should point their browsers in order to connect to the\n# app.\n# This is used to:\n# - Set the correct URL for XSRF protection purposes.\n# - Show the URL on the terminal (part of `streamlit run`).\n# - Open the browser automatically (part of `streamlit run`).\n# This option is for advanced use cases. To change the port of your app, use\n# `server.Port` instead.\n# Default: whatever value is set in server.port.\nserverPort = 8501\n```\n\n#### Mapbox\n\n```toml\n[mapbox]\n\n# If you'd like to show maps using Mapbox rather than Carto, use this\n# to pass the Mapbox API token.\n# THIS IS DEPRECATED.\n# Instead of this, you should use either the MAPBOX_API_KEY environment\nvariable or PyDeck's `api_keys` argument.\n# This option will be removed on or after 2026-05-01.\n# Default: \"\"\ntoken = \"\"\n```\n\n#### Theme\n\n```toml\n[theme]\n\n# The preset Streamlit theme that your custom theme inherits from.\n# This can be one of the following: \"light\" or \"dark\".\nbase =\n\n# Primary accent color.\nprimaryColor =\n\n# Background color of the app.\nbackgroundColor =\n\n# Background color used for most interactive widgets.\nsecondaryBackgroundColor =\n\n# Color used for almost all text.\ntextColor =\n\n# Color used for all links.\nlinkColor =\n\n# Background color used for code blocks.\ncodeBackgroundColor =\n\n# The font family for all text, except code blocks.\n# This can be one of the following:\n# - \"sans-serif\"\n# - \"serif\"\n# - \"monospace\"\n# - The `family` value for a custom font table under [[theme.fontFaces]]\n# - A comma-separated list of these (as a single string) to specify\n#   fallbacks\n# For example, you can use the following:\n# font = \"cool-font, fallback-cool-font, sans-serif\"\nfont =\n\n# The font family to use for code (monospace) in the sidebar.\n# This can be one of the following:\n# - \"sans-serif\"\n# - \"serif\"\n# - \"monospace\"\n# - The `family` value for a custom font table under [[theme.fontFaces]]\n# - A comma-separated list of these (as a single string) to specify\n#   fallbacks\ncodeFont =\n\n# Sets the font size (in pixels or rem) for code blocks and code text.\n# This applies to `st.code`, `st.json`, and `st.help`.\n# It does not apply to inline code, which is set by default to 0.75em.\n# When unset, the code font size will be 0.875rem.\ncodeFontSize =\n\n# The font family to use for headings.\n# This can be one of the following:\n# - \"sans-serif\"\n# - \"serif\"\n# - \"monospace\"\n# - The `family` value for a custom font table under [[theme.fontFaces]]\n# - A comma-separated list of these (as a single string) to specify\n#   fallbacks\n# If no heading font is set, Streamlit uses `theme.font` for headings.\nheadingFont =\n\n# An array of fonts to use in your app.\n# Each font in the array is a table (dictionary) that can have the\n# following attributes, closely resembling CSS font-face definitions:\n# - family\n# - url\n# - weight (optional)\n# - style (optional)\n# - unicodeRange (optional)\n# To host a font with your app, enable static file serving with\n# `server.enableStaticServing=true`.\n# You can define multiple [[theme.fontFaces]] tables, including multiple\n# tables with the same family if your font is defined by multiple files.\n# For example, a font hosted with your app may have a [[theme.fontFaces]]\n# table as follows:\n# [[theme.fontFaces]]\n# family = \"font_name\"\n# url = \"app/static/font_file.woff\"\n# weight = \"400\"\n# style = \"normal\"\nfontFaces =\n\n# The radius used as basis for the corners of most UI elements.\n# This can be one of the following:\n# - \"none\"\n# - \"small\"\n# - \"medium\"\n# - \"large\"\n# - \"full\"\n# - The number in pixels or rem.\n# For example, you can use \"10px\", \"0.5rem\", or \"2rem\". To follow best\n# practices, use rem instead of pixels when specifying a numeric size.\nbaseRadius =\n\n# The radius used as basis for the corners of buttons.\n# This can be one of the following:\n# - \"none\"\n# - \"small\"\n# - \"medium\"\n# - \"large\"\n# - \"full\"\n# - The number in pixels or rem.\n# For example, you can use \"10px\", \"0.5rem\", or \"2rem\". To follow best\n# practices, use rem instead of pixels when specifying a numeric size.\n# If no button radius is set, Streamlit uses `theme.baseRadius` instead.\nbuttonRadius =\n\n# The color of the border around elements.\nborderColor =\n\n# The color of the border around dataframes and tables.\n# If no dataframe border color is set, Streamlit uses `theme.borderColor`\n# instead.\ndataframeBorderColor =\n\n# Whether to show a border around input widgets.\nshowWidgetBorder =\n\n# Sets the root font size (in pixels) for the app.\n# This determines the overall scale of text and UI elements.\n# When unset, the font size will be 16px.\nbaseFontSize =\n\n# Whether to show a vertical separator between the sidebar and the main\n# content area.\nshowSidebarBorder =\n```\n\n#### Sidebar theme\n\n```toml\n[theme.sidebar]\n\n# Primary accent color.\nprimaryColor =\n\n# Background color of the app.\nbackgroundColor =\n\n# Background color used for most interactive widgets.\nsecondaryBackgroundColor =\n\n# Color used for almost all text.\ntextColor =\n\n# Color used for all links.\nlinkColor =\n\n# Background color used for code blocks.\ncodeBackgroundColor =\n\n# The font family for all text, except code blocks.\n# This can be one of the following:\n# - \"sans-serif\"\n# - \"serif\"\n# - \"monospace\"\n# - The `family` value for a custom font table under [[theme.fontFaces]]\n# - A comma-separated list of these (as a single string) to specify\n#   fallbacks\n# For example, you can use the following:\n# font = \"cool-font, fallback-cool-font, sans-serif\"\nfont =\n\n# The font family to use for code (monospace) in the sidebar.\n# This can be one of the following:\n# - \"sans-serif\"\n# - \"serif\"\n# - \"monospace\"\n# - The `family` value for a custom font table under [[theme.fontFaces]]\n# - A comma-separated list of these (as a single string) to specify\n#   fallbacks\ncodeFont =\n\n# Sets the font size (in pixels or rem) for code blocks and code text.\n# This applies to `st.code`, `st.json`, and `st.help`.\n# It does not apply to inline code, which is set by default to 0.75em.\n# When unset, the code font size will be 0.875rem.\ncodeFontSize =\n\n# The font family to use for headings.\n# This can be one of the following:\n# - \"sans-serif\"\n# - \"serif\"\n# - \"monospace\"\n# - The `family` value for a custom font table under [[theme.fontFaces]]\n# - A comma-separated list of these (as a single string) to specify\n#   fallbacks\n# If no heading font is set, Streamlit uses `theme.font` for headings.\nheadingFont =\n\n# The radius used as basis for the corners of most UI elements.\n# This can be one of the following:\n# - \"none\"\n# - \"small\"\n# - \"medium\"\n# - \"large\"\n# - \"full\"\n# - The number in pixels or rem.\n# For example, you can use \"10px\", \"0.5rem\", or \"2rem\". To follow best\n# practices, use rem instead of pixels when specifying a numeric size.\nbaseRadius =\n\n# The radius used as basis for the corners of buttons.\n# This can be one of the following:\n# - \"none\"\n# - \"small\"\n# - \"medium\"\n# - \"large\"\n# - \"full\"\n# - The number in pixels or rem.\n# For example, you can use \"10px\", \"0.5rem\", or \"2rem\". To follow best\n# practices, use rem instead of pixels when specifying a numeric size.\n# If no button radius is set, Streamlit uses `theme.baseRadius` instead.\nbuttonRadius =\n\n# The color of the border around elements.\nborderColor =\n\n# The color of the border around dataframes and tables.\n# If no dataframe border color is set, Streamlit uses `theme.borderColor`\n# instead.\ndataframeBorderColor =\n\n# Whether to show a border around input widgets.\nshowWidgetBorder =\n```\n\n#### Secrets\n\n```toml\n[secrets]\n\n# List of locations where secrets are searched.\n# An entry can be a path to a TOML file or directory path where\n# Kubernetes style secrets are saved. Order is important, import is\n# first to last, so secrets in later files will take precedence over\n# earlier ones.\n# Default: [ <path to local environment's secrets.toml file>, <path to project's secrets.toml file>,]\nfiles = [ \"~/.streamlit/secrets.toml\", \"~/project directory/.streamlit/secrets.toml\",]\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/configuration/st.set_option",
    "content": "<Autofunction function=\"streamlit.set_option\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/configuration",
    "content": "# Configuration\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/configuration/config.toml\">\n\n<h4>Configuration file</h4>\n\nConfigures the default settings for your app.\n\n```\nyour-project/\n├── .streamlit/\n│   └── config.toml\n└── your_app.py\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/configuration/st.get_option\">\n\n<h4>Get config option</h4>\n\nRetrieve a single configuration option.\n\n```python\nst.get_option(\"theme.primaryColor\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/configuration/st.set_option\">\n\n<h4>Set config option</h4>\n\nSet a single configuration option. (This is very limited.)\n\n```python\nst.set_option(\"deprecation.showPyplotGlobalUse\", False)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/configuration/st.set_page_config\">\n\n<h4>Set page title, favicon, and more</h4>\n\nConfigures the default settings of the page.\n\n```python\nst.set_page_config(\n  page_title=\"My app\",\n  page_icon=\":shark:\",\n)\n```\n\n</RefCard>\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/chat/st.chat_message",
    "content": "<Tip>\n\nRead the [Build a basic LLM chat app](/develop/tutorials/llms/build-conversational-apps) tutorial to learn how to use `st.chat_message` and `st.chat_input` to build chat-based apps.\n\n</Tip>\n\n<Autofunction function=\"streamlit.chat_message\" />\n\nFor an overview of the `st.chat_message` and `st.chat_input` API, check out this video tutorial by Chanin Nantasenamat ([@dataprofessor](https://www.youtube.com/dataprofessor)), a Senior Developer Advocate at Streamlit.\n\n<YouTube videoId=\"4sPnOqeUDmk\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/chat/st.chat_input",
    "content": "<Tip>\n\nRead the [Build a basic LLM chat app](/develop/tutorials/llms/build-conversational-apps) tutorial to learn how to use `st.chat_message` and `st.chat_input` to build chat-based apps.\n\n</Tip>\n\n<Autofunction function=\"streamlit.chat_input\" />\n\nFor an overview of the `st.chat_input` and `st.chat_message` API, check out this video tutorial by Chanin Nantasenamat ([@dataprofessor](https://www.youtube.com/dataprofessor)), a Senior Developer Advocate at Streamlit.\n\n<YouTube videoId=\"4sPnOqeUDmk\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/chat",
    "content": "# Chat elements\n\nStreamlit provides a few commands to help you build conversational apps. These chat elements are designed to be used in conjunction with each other, but you can also use them separately.\n\n`st.chat_message` lets you insert a chat message container into the app so you can display messages from the user or the app. Chat containers can contain other Streamlit elements, including charts, tables, text, and more. `st.chat_input` lets you display a chat input widget so the user can type in a message. Remember to check out `st.status` to display output from long-running processes and external API calls.\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/chat/st.chat_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/chat_input.jpg\" />\n\n<h4>Chat input</h4>\n\nDisplay a chat input widget.\n\n```python\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    st.write(f\"The user has sent: {prompt}\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/chat/st.chat_message\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/chat_message.jpg\" />\n\n<h4>Chat message</h4>\n\nInsert a chat message container.\n\n```python\nimport numpy as np\nwith st.chat_message(\"user\"):\n    st.write(\"Hello 👋\")\n    st.line_chart(np.random.randn(30, 3))\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.status\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/status.jpg\" />\n\n<h4>Status container</h4>\n\nDisplay output of long-running tasks in a container.\n\n```python\nwith st.status('Running'):\n  do_something_slow()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/write-magic/st.write_stream\">\n\n<h4>st.write_stream</h4>\n\nWrite generators or streams to the app with a typewriter effect.\n\n```python\nst.write_stream(my_generator)\nst.write_stream(my_llm_stream)\n```\n\n</RefCard>\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/layout/st.expander",
    "content": "<Autofunction function=\"streamlit.expander\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/layout/st.columns",
    "content": "<Autofunction function=\"streamlit.columns\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/layout/st.container",
    "content": "<Autofunction function=\"streamlit.container\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/layout/st.popover",
    "content": "<Autofunction function=\"streamlit.popover\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/layout/st.tabs",
    "content": "<Autofunction function=\"streamlit.tabs\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/layout/st.sidebar",
    "content": "## st.sidebar\n\n## Add widgets to sidebar\n\nNot only can you add interactivity to your app with widgets, you can organize them into a sidebar. Elements can be passed to `st.sidebar` using object notation and `with` notation.\n\nThe following two snippets are equivalent:\n\n```python\n# Object notation\nst.sidebar.[element_name]\n```\n\n```python\n# \"with\" notation\nwith st.sidebar:\n    st.[element_name]\n```\n\nEach element that's passed to `st.sidebar` is pinned to the left, allowing users to focus on the content in your app.\n\n<Tip>\n\nThe sidebar is resizable! Drag and drop the right border of the sidebar to resize it! ↔️\n\n</Tip>\n\nHere's an example of how you'd add a selectbox and a radio button to your sidebar:\n\n```python\nimport streamlit as st\n\n# Using object notation\nadd_selectbox = st.sidebar.selectbox(\n    \"How would you like to be contacted?\",\n    (\"Email\", \"Home phone\", \"Mobile phone\")\n)\n\n# Using \"with\" notation\nwith st.sidebar:\n    add_radio = st.radio(\n        \"Choose a shipping method\",\n        (\"Standard (5-15 days)\", \"Express (2-5 days)\")\n    )\n```\n\n<Important>\n\nThe only elements that aren't supported using object notation are `st.echo`, `st.spinner`, and `st.toast`. To use these elements, you must use `with` notation.\n\n</Important>\n\nHere's an example of how you'd add [`st.echo`](/develop/api-reference/text/st.echo) and [`st.spinner`](/develop/api-reference/status/st.spinner) to your sidebar:\n\n```python\nimport streamlit as st\nimport time\n\nwith st.sidebar:\n    with st.echo():\n        st.write(\"This code will be printed to the sidebar.\")\n\n    with st.spinner(\"Loading...\"):\n        time.sleep(5)\n    st.success(\"Done!\")\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/layout/st.empty",
    "content": "<Autofunction function=\"streamlit.empty\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/layout",
    "content": "# Layouts and Containers\n\n## Complex layouts\n\nStreamlit provides several options for controlling how different elements are laid out on the screen.\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/layout/st.columns\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/columns.jpg\" />\n\n<h4>Columns</h4>\n\nInsert containers laid out as side-by-side columns.\n\n```python\ncol1, col2 = st.columns(2)\ncol1.write(\"this is column 1\")\ncol2.write(\"this is column 2\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.container\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/container.jpg\" />\n\n<h4>Container</h4>\n\nInsert a multi-element container.\n\n```python\nc = st.container()\nst.write(\"This will show last\")\nc.write(\"This will show first\")\nc.write(\"This will show second\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/execution-flow/st.dialog\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/dialog.jpg\" />\n\n<h4>Modal dialog</h4>\n\nInsert a modal dialog that can rerun independently from the rest of the script.\n\n```python\n@st.dialog(\"Sign up\")\ndef email_form():\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.empty\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/empty.jpg\" />\n\n<h4>Empty</h4>\n\nInsert a single-element container.\n\n```python\nc = st.empty()\nst.write(\"This will show last\")\nc.write(\"This will be replaced\")\nc.write(\"This will show first\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.expander\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/expander.jpg\" />\n\n<h4>Expander</h4>\n\nInsert a multi-element container that can be expanded/collapsed.\n\n```python\nwith st.expander(\"Open to see more\"):\n  st.write(\"This is more content\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.popover\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/popover.svg\" />\n\n<h4>Popover</h4>\n\nInsert a multi-element popover container that can be opened/closed.\n\n```python\nwith st.popover(\"Settings\"):\n  st.checkbox(\"Show completed\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.sidebar\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/sidebar.jpg\" />\n\n<h4>Sidebar</h4>\n\nDisplay items in a sidebar.\n\n```python\nst.sidebar.write(\"This lives in the sidebar\")\nst.sidebar.button(\"Click me!\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/layout/st.tabs\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/tabs.jpg\" />\n\n<h4>Tabs</h4>\n\nInsert containers separated into tabs.\n\n```python\ntab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\ntab1.write(\"this is tab 1\")\ntab2.write(\"this is tab 2\")\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/okld/streamlit-elements\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/elements.jpg\" />\n\n<h4>Streamlit Elements</h4>\n\nCreate a draggable and resizable dashboard in Streamlit. Created by [@okls](https://github.com/okls).\n\n```python\nfrom streamlit_elements import elements, mui, html\n\nwith elements(\"new_element\"):\n  mui.Typography(\"Hello world\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/lukasmasuch/streamlit-pydantic\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pydantic.jpg\" />\n\n<h4>Pydantic</h4>\n\nAuto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by [@lukasmasuch](https://github.com/lukasmasuch).\n\n```python\nimport streamlit_pydantic as sp\n\nsp.pydantic_form(key=\"my_form\",\n  model=ExampleModel)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/blackary/st_pages\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pages.jpg\" />\n\n<h4>Streamlit Pages</h4>\n\nAn experimental version of Streamlit Multi-Page Apps. Created by [@blackary](https://github.com/blackary).\n\n```python\nfrom st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"🏠\"),\n  Page(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n```\n\n</ComponentCard>\n\n</ComponentSlider>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/navigation/st.navigation",
    "content": "<Autofunction function=\"streamlit.navigation\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/navigation/st.switch_page",
    "content": "<Autofunction function=\"streamlit.switch_page\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/navigation/st.page",
    "content": "<Autofunction function=\"streamlit.Page\" />\n\n<Autofunction function=\"StreamlitPage\" />\n\n<Autofunction function=\"StreamlitPage.run\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/navigation",
    "content": "# Navigation and pages\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/navigation/st.navigation\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/navigation.jpg\" />\n\n<h4>Navigation</h4>\n\nConfigure the available pages in a multipage app.\n\n```python\nst.navigation({\n    \"Your account\" : [log_out, settings],\n    \"Reports\" : [overview, usage],\n    \"Tools\" : [search]\n})\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/navigation/st.page\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/page.jpg\" />\n\n<h4>Page</h4>\n\nDefine a page in a multipage app.\n\n```python\nhome = st.Page(\n    \"home.py\",\n    title=\"Home\",\n    icon=\":material/home:\"\n)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/widgets/st.page_link\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/page_link.jpg\" />\n\n<h4>Page link</h4>\n\nDisplay a link to another page in a multipage app.\n\n```python\nst.page_link(\"app.py\", label=\"Home\", icon=\"🏠\")\nst.page_link(\"pages/profile.py\", label=\"Profile\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/navigation/st.switch_page\">\n\n<h4>Switch page</h4>\n\nProgrammatically navigates to a specified page.\n\n```python\nst.switch_page(\"pages/my_page.py\")\n```\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.line_chart",
    "content": "<Autofunction function=\"streamlit.line_chart\" />\n\n<Autofunction function=\"DeltaGenerator.add_rows\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart",
    "content": "<Autofunction function=\"streamlit.bar_chart\" />\n\n<Autofunction function=\"DeltaGenerator.add_rows\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.map",
    "content": "<Autofunction function=\"streamlit.map\" />\n\n<Autofunction function=\"DeltaGenerator.add_rows\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.vega_lite_chart",
    "content": "<Autofunction function=\"streamlit.vega_lite_chart\" />\n\n## Chart selections\n\n<Autofunction function=\"VegaLiteState\" />\n\n<Autofunction function=\"DeltaGenerator.add_rows\" />\n\n## Theming\n\nVega-Lite charts are displayed using the Streamlit theme by default. This theme is sleek, user-friendly, and incorporates Streamlit's color palette. The added benefit is that your charts better integrate with the rest of your app's design.\n\nThe Streamlit theme is available from Streamlit 1.16.0 through the `theme=\"streamlit\"` keyword argument. To disable it, and use Vega-Lite's native theme, use `theme=None` instead.\n\nLet's look at an example of charts with the Streamlit theme and the native Vega-Lite theme:\n\n```python\nimport streamlit as st\nfrom vega_datasets import data\n\nsource = data.cars()\n\nchart = {\n    \"mark\": \"point\",\n    \"encoding\": {\n        \"x\": {\n            \"field\": \"Horsepower\",\n            \"type\": \"quantitative\",\n        },\n        \"y\": {\n            \"field\": \"Miles_per_Gallon\",\n            \"type\": \"quantitative\",\n        },\n        \"color\": {\"field\": \"Origin\", \"type\": \"nominal\"},\n        \"shape\": {\"field\": \"Origin\", \"type\": \"nominal\"},\n    },\n}\n\ntab1, tab2 = st.tabs([\"Streamlit theme (default)\", \"Vega-Lite native theme\"])\n\nwith tab1:\n    # Use the Streamlit theme.\n    # This is the default. So you can also omit the theme argument.\n    st.vega_lite_chart(\n        source, chart, theme=\"streamlit\", use_container_width=True\n    )\nwith tab2:\n    st.vega_lite_chart(\n        source, chart, theme=None, use_container_width=True\n    )\n```\n\nClick the tabs in the interactive app below to see the charts with the Streamlit theme enabled and disabled.\n\n<Cloud name=\"doc-vega-lite-theme\" height=\"500px\" />\n\nIf you're wondering if your own customizations will still be taken into account, don't worry! You can still make changes to your chart configurations. In other words, although we now enable the Streamlit theme by default, you can overwrite it with custom colors or fonts. For example, if you want a chart line to be green instead of the default red, you can do it!"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.scatter_chart",
    "content": "<Autofunction function=\"streamlit.scatter_chart\" />\n\n<Autofunction function=\"DeltaGenerator.add_rows\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.bokeh_chart",
    "content": "<Autofunction function=\"streamlit.bokeh_chart\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.area_chart",
    "content": "<Autofunction function=\"streamlit.area_chart\" />\n\n<Autofunction function=\"DeltaGenerator.add_rows\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart",
    "content": "<Autofunction function=\"streamlit.pydeck_chart\" />\n\n## Chart selections\n\n<Autofunction function=\"PydeckState\" />\n\n<Autofunction function=\"PydeckSelectionState\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.pyplot",
    "content": "<Autofunction function=\"streamlit.pyplot\" />\n\n<Warning>\n    Matplotlib [doesn't work well with threads](https://matplotlib.org/3.3.2/faq/howto_faq.html#working-with-threads). So if you're using Matplotlib you should wrap your code with locks. This Matplotlib bug is more prominent when you deploy and share your apps because you're more likely to get concurrent users then. The following example uses [`Rlock`](https://docs.python.org/3/library/threading.html#rlock-objects) from the `threading` module.\n\n    ```python\n    import streamlit as st\n    import matplotlib.pyplot as plt\n    import numpy as np\n    from threading import RLock\n\n    _lock = RLock()\n\n    x = np.random.normal(1, 1, 100)\n    y = np.random.normal(1, 1, 100)\n\n    with _lock:\n        fig, ax = plt.subplots()\n        ax.scatter(x, y)\n        st.pyplot(fig)\n    ```\n\n</Warning>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart",
    "content": "<Autofunction function=\"streamlit.plotly_chart\" />\n\n## Chart selections\n\n<Autofunction function=\"PlotlyState\" />\n\n<Autofunction function=\"PlotlySelectionState\" />\n\n## Theming\n\nPlotly charts are displayed using the Streamlit theme by default. This theme is sleek, user-friendly, and incorporates Streamlit's color palette. The added benefit is that your charts better integrate with the rest of your app's design.\n\nThe Streamlit theme is available from Streamlit 1.16.0 through the `theme=\"streamlit\"` keyword argument. To disable it, and use Plotly's native theme, use `theme=None` instead.\n\nLet's look at an example of charts with the Streamlit theme and the native Plotly theme:\n\n```python\nimport plotly.express as px\nimport streamlit as st\n\ndf = px.data.gapminder()\n\nfig = px.scatter(\n    df.query(\"year==2007\"),\n    x=\"gdpPercap\",\n    y=\"lifeExp\",\n    size=\"pop\",\n    color=\"continent\",\n    hover_name=\"country\",\n    log_x=True,\n    size_max=60,\n)\n\ntab1, tab2 = st.tabs([\"Streamlit theme (default)\", \"Plotly native theme\"])\nwith tab1:\n    # Use the Streamlit theme.\n    # This is the default. So you can also omit the theme argument.\n    st.plotly_chart(fig, theme=\"streamlit\", use_container_width=True)\nwith tab2:\n    # Use the native Plotly theme.\n    st.plotly_chart(fig, theme=None, use_container_width=True)\n```\n\nClick the tabs in the interactive app below to see the charts with the Streamlit theme enabled and disabled.\n\n<Cloud name=\"doc-plotly-chart-theme\" height=\"525px\" />\n\nIf you're wondering if your own customizations will still be taken into account, don't worry! You can still make changes to your chart configurations. In other words, although we now enable the Streamlit theme by default, you can overwrite it with custom colors or fonts. For example, if you want a chart line to be green instead of the default red, you can do it!\n\nHere's an example of an Plotly chart where a custom color scale is defined and reflected:\n\n```python\nimport plotly.express as px\nimport streamlit as st\n\nst.subheader(\"Define a custom colorscale\")\ndf = px.data.iris()\nfig = px.scatter(\n    df,\n    x=\"sepal_width\",\n    y=\"sepal_length\",\n    color=\"sepal_length\",\n    color_continuous_scale=\"reds\",\n)\n\ntab1, tab2 = st.tabs([\"Streamlit theme (default)\", \"Plotly native theme\"])\nwith tab1:\n    st.plotly_chart(fig, theme=\"streamlit\", use_container_width=True)\nwith tab2:\n    st.plotly_chart(fig, theme=None, use_container_width=True)\n```\n\nNotice how the custom color scale is still reflected in the chart, even when the Streamlit theme is enabled 👇\n\n<Cloud name=\"doc-plotly-custom-colors\" height=\"650px\" />\n\nFor many more examples of Plotly charts with and without the Streamlit theme, check out the [plotly.streamlit.app](https://plotly.streamlit.app)."
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.graphviz_chart",
    "content": "<Autofunction function=\"streamlit.graphviz_chart\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart",
    "content": "<Autofunction function=\"streamlit.altair_chart\" />\n\n## Chart selections\n\n<Autofunction function=\"VegaLiteState\" />\n\n<Autofunction function=\"DeltaGenerator.add_rows\" />\n\n## Theming\n\nAltair charts are displayed using the Streamlit theme by default. This theme is sleek, user-friendly, and incorporates Streamlit's color palette. The added benefit is that your charts better integrate with the rest of your app's design.\n\nThe Streamlit theme is available from Streamlit 1.16.0 through the `theme=\"streamlit\"` keyword argument. To disable it, and use Altair's native theme, use `theme=None` instead.\n\nLet's look at an example of charts with the Streamlit theme and the native Altair theme:\n\n```python\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nchart = alt.Chart(source).mark_circle().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color='Origin',\n).interactive()\n\ntab1, tab2 = st.tabs([\"Streamlit theme (default)\", \"Altair native theme\"])\n\nwith tab1:\n    # Use the Streamlit theme.\n    # This is the default. So you can also omit the theme argument.\n    st.altair_chart(chart, theme=\"streamlit\", use_container_width=True)\nwith tab2:\n    # Use the native Altair theme.\n    st.altair_chart(chart, theme=None, use_container_width=True)\n```\n\nClick the tabs in the interactive app below to see the charts with the Streamlit theme enabled and disabled.\n\n<Cloud name=\"doc-altair-chart\" height=\"500px\" />\n\nIf you're wondering if your own customizations will still be taken into account, don't worry! You can still make changes to your chart configurations. In other words, although we now enable the Streamlit theme by default, you can overwrite it with custom colors or fonts. For example, if you want a chart line to be green instead of the default red, you can do it!\n\nHere's an example of an Altair chart where manual color passing is done and reflected:\n\n<Collapse title=\"See the code\">\n\n```python\nimport altair as alt\nimport streamlit as st\nfrom vega_datasets import data\n\nsource = data.seattle_weather()\n\nscale = alt.Scale(\n    domain=[\"sun\", \"fog\", \"drizzle\", \"rain\", \"snow\"],\n    range=[\"#e7ba52\", \"#a7a7a7\", \"#aec7e8\", \"#1f77b4\", \"#9467bd\"],\n)\ncolor = alt.Color(\"weather:N\", scale=scale)\n\n# We create two selections:\n# - a brush that is active on the top panel\n# - a multi-click that is active on the bottom panel\nbrush = alt.selection_interval(encodings=[\"x\"])\nclick = alt.selection_multi(encodings=[\"color\"])\n\n# Top panel is scatter plot of temperature vs time\npoints = (\n    alt.Chart()\n    .mark_point()\n    .encode(\n        alt.X(\"monthdate(date):T\", title=\"Date\"),\n        alt.Y(\n            \"temp_max:Q\",\n            title=\"Maximum Daily Temperature (C)\",\n            scale=alt.Scale(domain=[-5, 40]),\n        ),\n        color=alt.condition(brush, color, alt.value(\"lightgray\")),\n        size=alt.Size(\"precipitation:Q\", scale=alt.Scale(range=[5, 200])),\n    )\n    .properties(width=550, height=300)\n    .add_selection(brush)\n    .transform_filter(click)\n)\n\n# Bottom panel is a bar chart of weather type\nbars = (\n    alt.Chart()\n    .mark_bar()\n    .encode(\n        x=\"count()\",\n        y=\"weather:N\",\n        color=alt.condition(click, color, alt.value(\"lightgray\")),\n    )\n    .transform_filter(brush)\n    .properties(\n        width=550,\n    )\n    .add_selection(click)\n)\n\nchart = alt.vconcat(points, bars, data=source, title=\"Seattle Weather: 2012-2015\")\n\ntab1, tab2 = st.tabs([\"Streamlit theme (default)\", \"Altair native theme\"])\n\nwith tab1:\n    st.altair_chart(chart, theme=\"streamlit\", use_container_width=True)\nwith tab2:\n    st.altair_chart(chart, theme=None, use_container_width=True)\n```\n\n</Collapse>\n\nNotice how the custom colors are still reflected in the chart, even when the Streamlit theme is enabled 👇\n\n<Cloud name=\"doc-altair-custom-colors\" height=\"675px\" />\n\nFor many more examples of Altair charts with and without the Streamlit theme, check out the [altair.streamlit.app](https://altair.streamlit.app)."
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/charts",
    "content": "# Chart elements\n\nStreamlit supports several different charting libraries, and our goal is to\ncontinually add support for more. Right now, the most basic library in our\narsenal is [Matplotlib](https://matplotlib.org/). Then there are also\ninteractive charting libraries like [Vega\nLite](https://vega.github.io/vega-lite/) (2D charts) and\n[deck.gl](https://github.com/uber/deck.gl) (maps and 3D charts). And\nfinally we also provide a few chart types that are \"native\" to Streamlit,\nlike `st.line_chart` and `st.area_chart`.\n\n## Simple chart elements\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/charts/st.area_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/area_chart.jpg\" />\n\n<h4>Simple area charts</h4>\n\nDisplay an area chart.\n\n```python\nst.area_chart(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.bar_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/bar_chart.jpg\" />\n\n<h4>Simple bar charts</h4>\n\nDisplay a bar chart.\n\n```python\nst.bar_chart(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.line_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/line_chart.jpg\" />\n\n<h4>Simple line charts</h4>\n\nDisplay a line chart.\n\n```python\nst.line_chart(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.scatter_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/scatter_chart.svg\" />\n\n<h4>Simple scatter charts</h4>\n\nDisplay a line chart.\n\n```python\nst.scatter_chart(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.map\">\n<Image pure alt=\"screenshot\" src=\"/images/api/map.jpg\" />\n\n<h4>Scatterplots on maps</h4>\n\nDisplay a map with points on it.\n\n```python\nst.map(my_data_frame)\n```\n\n</RefCard>\n</TileContainer>\n\n## Advanced chart elements\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/charts/st.pyplot\">\n<Image pure alt=\"screenshot\" src=\"/images/api/pyplot.jpg\" />\n\n<h4>Matplotlib</h4>\n\nDisplay a matplotlib.pyplot figure.\n\n```python\nst.pyplot(my_mpl_figure)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.altair_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/vega_lite_chart.jpg\" />\n\n<h4>Altair</h4>\n\nDisplay a chart using the Altair library.\n\n```python\nst.altair_chart(my_altair_chart)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.vega_lite_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/vega_lite_chart.jpg\" />\n\n<h4>Vega-Lite</h4>\n\nDisplay a chart using the Vega-Lite library.\n\n```python\nst.vega_lite_chart(my_vega_lite_chart)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.plotly_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/plotly_chart.jpg\" />\n\n<h4>Plotly</h4>\n\nDisplay an interactive Plotly chart.\n\n```python\nst.plotly_chart(my_plotly_chart)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.bokeh_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/bokeh_chart.jpg\" />\n\n<h4>Bokeh</h4>\n\nDisplay an interactive Bokeh chart.\n\n```python\nst.bokeh_chart(my_bokeh_chart)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.pydeck_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/pydeck_chart.jpg\" />\n\n<h4>PyDeck</h4>\n\nDisplay a chart using the PyDeck library.\n\n```python\nst.pydeck_chart(my_pydeck_chart)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/charts/st.graphviz_chart\">\n<Image pure alt=\"screenshot\" src=\"/images/api/graphviz_chart.jpg\" />\n\n<h4>GraphViz</h4>\n\nDisplay a graph using the dagre-d3 library.\n\n```python\nst.graphviz_chart(my_graphviz_spec)\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/tvst/plost\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/plost.jpg\" />\n\n<h4>Plost</h4>\n\nA deceptively simple plotting library for Streamlit. Created by [@tvst](https://github.com/tvst).\n\n```python\nimport plost\nplost.line_chart(my_dataframe, x='time', y='stock_value', color='stock_name',)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/facebookresearch/hiplot\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/hiplot.jpg\" />\n\n<h4>HiPlot</h4>\n\nHigh dimensional Interactive Plotting. Created by [@facebookresearch](https://github.com/facebookresearch).\n\n```python\ndata = [{'dropout':0.1, 'lr': 0.001, 'loss': 10.0, 'optimizer': 'SGD'}, {'dropout':0.15, 'lr': 0.01, 'loss': 3.5, 'optimizer': 'Adam'}, {'dropout':0.3, 'lr': 0.1, 'loss': 4.5, 'optimizer': 'Adam'}]\nhip.Experiment.from_iterable(data).display()\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/andfanilo/streamlit-echarts\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/echarts.jpg\" />\n\n<h4>ECharts</h4>\n\nHigh dimensional Interactive Plotting. Created by [@andfanilo](https://github.com/andfanilo).\n\n```python\nfrom streamlit_echarts import st_echarts\nst_echarts(options=options)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/randyzwitch/streamlit-folium\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/folium.jpg\" />\n\n<h4>Streamlit Folium</h4>\n\nStreamlit Component for rendering Folium maps. Created by [@randyzwitch](https://github.com/randyzwitch).\n\n```python\nm = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/explosion/spacy-streamlit\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/spacy.jpg\" />\n\n<h4>Spacy-Streamlit</h4>\n\nspaCy building blocks and visualizers for Streamlit apps. Created by [@explosion](https://github.com/explosion).\n\n```python\nmodels = [\"en_core_web_sm\", \"en_core_web_md\"]\nspacy_streamlit.visualize(models, \"Sundar Pichai is the CEO of Google.\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/ChrisDelClea/streamlit-agraph\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/agraph.jpg\" />\n\n<h4>Streamlit Agraph</h4>\n\nA Streamlit Graph Vis, based on [react-grah-vis](https://github.com/crubier/react-graph-vis). Created by [@ChrisDelClea](https://github.com/ChrisDelClea).\n\n```python\nfrom streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/andfanilo/streamlit-lottie\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/lottie.jpg\" />\n\n<h4>Streamlit Lottie</h4>\n\nIntegrate [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n```python\nlottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/null-jones/streamlit-plotly-events\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/plotly-events.jpg\" />\n\n<h4>Plotly Events</h4>\n\nMake Plotly charts interactive!. Created by [@null-jones](https://github.com/null-jones/).\n\n```python\nfig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://extras.streamlit.app/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/extras-chart-annotations.jpg\" />\n\n<h4>Streamlit Extras</h4>\n\nA library with useful Streamlit extras. Created by [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n```python\nchart += get_annotations_chart(annotations=[(\"Mar 01, 2008\", \"Pretty good day for GOOG\"), (\"Dec 01, 2007\", \"Something's going wrong for GOOG & AAPL\"), (\"Nov 01, 2008\", \"Market starts again thanks to...\"), (\"Dec 01, 2009\", \"Small crash for GOOG after...\"),],)\nst.altair_chart(chart, use_container_width=True)\n```\n\n</ComponentCard>\n\n</ComponentSlider>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.iframe",
    "content": "<Autofunction function=\"streamlit.components.v1.iframe\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.declare_component",
    "content": "<Autofunction function=\"streamlit.components.v1.declare_component\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/custom-components",
    "content": "# Custom components\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/custom-components/st.components.v1.declare_component\">\n\n<h4>Declare a component</h4>\n\nCreate and register a custom component.\n\n```python\nfrom st.components.v1 import declare_component\ndeclare_component(\n    \"custom_slider\",\n    \"/frontend\",\n)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/custom-components/st.components.v1.html\">\n\n<h4>HTML</h4>\n\nDisplay an HTML string in an iframe.\n\n```python\nfrom st.components.v1 import html\nhtml(\n    \"<p>Foo bar.</p>\"\n)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/custom-components/st.components.v1.iframe\">\n\n<h4>iframe</h4>\n\nLoad a remote URL in an iframe.\n\n```python\nfrom st.components.v1 import iframe\niframe(\n    \"docs.streamlit.io\"\n)\n```\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.html",
    "content": "<Autofunction function=\"streamlit.components.v1.html\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/user/st.login",
    "content": "<Tip>\n\nLearn more in [User authentication and information](/develop/concepts/connections/authentication).\n\n</Tip>\n\n<Autofunction function=\"streamlit.login\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/user/st.logout",
    "content": "<Tip>\n\nLearn more in [User authentication and information](/develop/concepts/connections/authentication).\n\n</Tip>\n\n<Autofunction function=\"streamlit.logout\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/user/st.user",
    "content": "<Autofunction function=\"streamlit.user\" oldName=\"streamlit.experimental_user\" />\n\n### Community Cloud\n\nStarting from Streamlit version 1.42.0, you can't use `st.user` to retrieve a user's Community Cloud account email. To access user information, you must set up an identity provider and configure authentication (`[auth]`) in your app's secrets. Remember to update your identity provider's configuration and your app's secrets to allow your new domain. A list of [IP addresses](/deploy/streamlit-community-cloud/status#ip-addresses) used by Community Cloud is available if needed. An authentication-configured app counts as your single allowed private app.\n\n<Autofunction function=\"streamlit.user.to_dict\" oldName=\"streamlit.experimental_user.to_dict\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/user",
    "content": "# Authentication and user info\n\nStreamlit provides native support for user authentication so you can personalize your apps. You can also directly read headers and cookies.\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/user/st.login\">\n\n<h4>Log in a user</h4>\n\n`st.login()` starts an authentication flow with an identity provider.\n\n```python\nst.login()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/user/st.logout\">\n\n<h4>Log out a user</h4>\n\n`st.logout()` removes a user's identity information.\n\n```python\nst.logout()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/user/st.user\">\n\n<h4>User info</h4>\n\n`st.user` returns information about a logged-in user.\n\n```python\nif st.user.is_logged_in:\n  st.write(f\"Welcome back, {st.user.name}!\")\n```\n\n</RefCard>\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.toast",
    "content": "<Autofunction function=\"streamlit.toast\" />\n\nWhen multiple toasts are generated, they will stack. Hovering over a toast will\nstop it from disappearing. When hovering ends, the toast will disappear after\nfour more seconds.\n\n```python\nimport streamlit as st\nimport time\n\nif st.button('Three cheers'):\n    st.toast('Hip!')\n    time.sleep(.5)\n    st.toast('Hip!')\n    time.sleep(.5)\n    st.toast('Hooray!', icon='🎉')\n```\n\n<Cloud name=\"doc-status-toast1\" height=\"300px\" />\n\nToast messages can also be updated. Assign `st.toast(my_message)` to a variable\nand use the `.toast()` method to update it. Note: if a toast has already disappeared\nor been dismissed, the update will not be seen.\n\n```python\nimport streamlit as st\nimport time\n\ndef cook_breakfast():\n    msg = st.toast('Gathering ingredients...')\n    time.sleep(1)\n    msg.toast('Cooking...')\n    time.sleep(1)\n    msg.toast('Ready!', icon = \"🥞\")\n\nif st.button('Cook breakfast'):\n    cook_breakfast()\n```\n\n<Cloud name=\"doc-status-toast2\" height=\"200px\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.success",
    "content": "<Autofunction function=\"streamlit.success\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.status",
    "content": "<Autofunction function=\"streamlit.status\" />\n\n<Autofunction function=\"StatusContainer.update\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.progress",
    "content": "<Autofunction function=\"streamlit.progress\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.balloons",
    "content": "<Autofunction function=\"streamlit.balloons\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.info",
    "content": "<Autofunction function=\"streamlit.info\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.spinner",
    "content": "<Autofunction function=\"streamlit.spinner\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.error",
    "content": "<Autofunction function=\"streamlit.error\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.exception",
    "content": "<Autofunction function=\"streamlit.exception\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.warning",
    "content": "<Autofunction function=\"streamlit.warning\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status/st.snow",
    "content": "<Autofunction function=\"streamlit.snow\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/status",
    "content": "# Display progress and status\n\nStreamlit provides a few methods that allow you to add animation to your\napps. These animations include progress bars, status messages (like\nwarnings), and celebratory balloons.\n\n## Animated status elements\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/status/st.progress\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/progress.jpg\" />\n\n<h4>Progress bar</h4>\n\nDisplay a progress bar.\n\n```python\nfor i in range(101):\n  st.progress(i)\n  do_something_slow()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.spinner\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/spinner.jpg\" />\n\n<h4>Spinner</h4>\n\nTemporarily displays a message while executing a block of code.\n\n```python\nwith st.spinner(\"Please wait...\"):\n  do_something_slow()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.status\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/status.jpg\" />\n\n<h4>Status container</h4>\n\nDisplay output of long-running tasks in a container.\n\n```python\nwith st.status('Running'):\n  do_something_slow()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.toast\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/toast.jpg\" />\n\n<h4>Toast</h4>\n\nBriefly displays a toast message in the bottom-right corner.\n\n```python\nst.toast('Butter!', icon='🧈')\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.balloons\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/balloons.jpg\" />\n\n<h4>Balloons</h4>\n\nDisplay celebratory balloons!\n\n```python\nst.balloons()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.snow\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/snow.jpg\" />\n\n<h4>Snowflakes</h4>\n\nDisplay celebratory snowflakes!\n\n```python\nst.snow()\n```\n\n</RefCard>\n</TileContainer>\n\n## Simple callout messages\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/status/st.success\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/success.jpg\" />\n\n<h4>Success box</h4>\n\nDisplay a success message.\n\n```python\nst.success(\"Match found!\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.info\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/info.jpg\" />\n\n<h4>Info box</h4>\n\nDisplay an informational message.\n\n```python\nst.info(\"Dataset is updated every day at midnight.\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.warning\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/warning.jpg\" />\n\n<h4>Warning box</h4>\n\nDisplay warning message.\n\n```python\nst.warning(\"Unable to fetch image. Skipping...\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.error\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/error.jpg\" />\n\n<h4>Error box</h4>\n\nDisplay error message.\n\n```python\nst.error(\"We encountered an error\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/status/st.exception\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/exception.jpg\" />\n\n<h4>Exception output</h4>\n\nDisplay an exception.\n\n```python\ne = RuntimeError(\"This is an exception of type RuntimeError\")\nst.exception(e)\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/Wirg/stqdm\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/stqdm.jpg\" />\n\n<h4>Stqdm</h4>\n\nThe simplest way to handle a progress bar in streamlit app. Created by [@Wirg](https://github.com/Wirg).\n\n```python\nfrom stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/Socvest/streamlit-custom-notification-box\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/custom-notification-box.jpg\" />\n\n<h4>Custom notification box</h4>\n\nA custom notification box with the ability to close it out. Created by [@Socvest](https://github.com/Socvest).\n\n```python\nfrom streamlit_custom_notification_box import custom_notification_box\n\nstyles = {'material-icons':{'color': 'red'}, 'text-icon-link-close-container': {'box-shadow': '#3896de 0px 4px'}, 'notification-text': {'':''}, 'close-button':{'':''}, 'link':{'':''}}\ncustom_notification_box(icon='info', textDisplay='We are almost done with your registration...', externalLink='more info', url='#', styles=styles, key=\"foo\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://extras.streamlit.app/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/extras-emojis.jpg\" />\n\n<h4>Streamlit Extras</h4>\n\nA library with useful Streamlit extras. Created by [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n```python\nfrom streamlit_extras.let_it_rain import rain\n\nrain(emoji=\"🎈\", font_size=54,\n  falling_speed=5, animation_length=\"infinite\",)\n```\n\n</ComponentCard>\n\n</ComponentSlider>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/cli/help",
    "content": "## `$ streamlit help`\n\nPrint the available commands for the Streamlit CLI tool. This command is equivalent to executing `streamlit --help`.\n\n### Syntax\n\n```\nstreamlit help\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/cli/init",
    "content": "## `$ streamlit init`\n\nThis command creates the files for a new Streamlit app.\n\n### Syntax\n\n```\nstreamlit init <directory>\n```\n\n### Arguments\n\n`<directory>` (Optional): The directory location of the new project. If no directory is provided, the current working directory will be used.\n\n### Examples\n\n#### Example 1: Create project files the current working directory\n\n1. In your current working directory (CWD), execute the following:\n\n   ```bash\n   streamlit init\n   ```\n\n   Streamlit creates the following files:\n   ```\n   CWD/\n   ├── requirements.txt\n   └── streamlit_app.py\n   ```\n\n2. In your terminal, Streamlit prompts, `❓ Run the app now? [Y/n]`. Enter `Y` for yes.\n\n   This is equivalent to executing `streamlit run streamlit_app.py` from your current working directory.\n\n3. Begin editing your `streamlit_app.py` file and save your changes.\n\n#### Example 2: Create project files in another directory\n\n1. In your current working directory (CWD), execute the following:\n\n   ```bash\n   streamlit init project\n   ```\n\n   Streamlit creates the following files:\n   ```\n   CWD/\n   └── project/\n       ├── requirements.txt\n       └── streamlit_app.py\n   ```\n\n2. In your terminal, Streamlit prompts, `❓ Run the app now? [Y/n]`. Enter `Y` for yes.\n\n   This is equivalent to executing `streamlit run project/streamlit_app.py` from your current working directory.\n\n3. Begin editing your `streamlit_app.py` file and save your changes."
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/cli/config",
    "content": "## `$ streamlit config show`\n\nPrint all the available configuration options, including their descriptions, default values, and current values. For more information about configuration options, see [`config.toml`](/develop/api-reference/configuration/config.toml).\n\n### Syntax\n\n```\nstreamlit config show\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/cli/version",
    "content": "## `$ streamlit version`\n\nPrint Streamlit's version number. This command is equivalent to executing `streamlit --version`.\n\n### Syntax\n\n```\nstreamlit version\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/cli/hello",
    "content": "## `$ streamlit hello`\n\nRun the Hello app, an example Streamlit app included with the Streamlit library.\n\n### Syntax\n\n```\nstreamlit hello\n```\n\n### Options\n\nThe `hello` command accepts configuration options (just like the `run` command does). Configuration options are passed in the form of `--<section>.<option>=<value>`. For example, if you want to set the primary color of your app to blue, you could use one of the three equivalent options:\n\n- `--theme.primaryColor=blue`\n- `--theme.primaryColor=\"blue\"`\n- `--theme.primaryColor=#0000FF`\n\nFor a complete list of configuration options, see [`config.toml`](/develop/api-reference/configuration/config.toml) in the API reference. For examples, see below.\n\n### Example\n\n#### Example 1: Run the Hello app with default settings\n\nTo verify that Streamlit is installed correctly, this command runs an example app included in the Streamlit library. From any directory, execute the following:\n\n```\nstreamlit hello\n```\n\nStreamlit will start the Hello app and open it in your default browser. The source for the Hello app can be [viewed in GitHub](https://github.com/streamlit/streamlit/tree/develop/lib/streamlit/hello).\n\n#### Example 2: Run the Hello app with a custom config option value\n\nTo run the Hello app with a blue accent color, from any directory, execute the following:\n\n```\nstreamlit hello --theme.primaryColor=blue\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/cli/run",
    "content": "## `$ streamlit run`\n\nThis command starts your Streamlit app.\n\n### Syntax\n\n```\nstreamlit run <entrypoint file> [-- config options] [script args]\n```\n\n### Arguments\n\n`<entrypoint file>`: The path to your entrypoint file for your Streamlit app. In a multipage app with `st.navigation`, your entrypoint file acts as a router between your pages. Otherwise, your entrypoint file is your app's homepage.\n\n### Options\n\nConfiguration options are passed in the form of `--<section>.<option>=<value>`. For example, if you want to set the primary color of your app to blue, you could use one of the three equivalent options:\n\n- `--theme.primaryColor=blue`\n- `--theme.primaryColor=\"blue\"`\n- `--theme.primaryColor=#0000FF`\n\nFor a complete list of configuration options, see [`config.toml`](/develop/api-reference/configuration/config.toml) in the API reference. For examples, see below.\n\n### Script arguments\n\nIf you need to pass arguments directly to your script, you can pass them as positional arguments. If you use `sys.argv` to read your arguments, `sys.arfgv` returns a list of all arugments and does _not_ include any configuration options. Python interprets all arguments as strings.\n\n- `sys.argv[0]` returns the provided path to your entrypoint file (`<entrypoint file>`).\n- `sys.argv[1:]` returns a list of arguments in order and does not include any configuration options.\n\n### Examples\n\n- If your app is in your working directory, run it as follows:\n\n  ```\n  streamlit run your_app.py\n  ```\n\n- If your app is in a subdirectory, run it as follows:\n\n  ```\n  streamlit run your_subdirectory/your_app.py\n  ```\n\n- If your app is saved in a public GitHub repo or gist, run it as follows:\n\n  ```\n  streamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py\n  ```\n\n- If you need to set one or more configuration options, run it as follows:\n\n  ```\n  streamlit run your_app.py --client.showErrorDetails=False --theme.primaryColor=blue\n  ```\n\n- If you need to pass an argument to your script, run it as follows:\n\n  ```\n  streamlit run your_app.py \"my list\" of arguments\n  ```\n\n  Within your script, the following statement will be true:\n\n  ```\n  sys.argv[0] == \"your_app.py\"\n  sys.argv[1] == \"my list\"\n  sys.argv[2] == \"of\"\n  sys.argv[3] == \"arguments\"\n  ```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/cli/docs",
    "content": "## `$ streamlit docs`\n\nOpen the Streamlit docs in your default browser.\n\n### Syntax\n\n```\nstreamlit docs\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/cli/cache",
    "content": "## `$ streamlit cache clear`\n\nClear persisted files from the on-disk [Streamlit cache](/develop/api-reference/caching-and-state), if present.\n\n### Syntax\n\n```\nstreamlit cache clear\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/cli",
    "content": "# Command-line interface\n\nWhen you install Streamlit, a command-line (CLI) tool gets installed\nas well. The purpose of this tool is to run Streamlit apps, change Streamlit configuration options,\nand help you diagnose and fix issues.\n\n## Available commands\n\n- [`streamlit cache clear`](/develop/api-reference/cli/cache): Clear the on-disk cache.\n- [`streamlit config show`](/develop/api-reference/cli/config): Show all configuration options.\n- [`streamlit docs`](/develop/api-reference/cli/docs): Open the Streamlit docs.\n- [`streamlit hello`](/develop/api-reference/cli/hello): Run an example Streamlit app.\n- [`streamlit help`](/develop/api-reference/cli/help): Show the available CLI commands.\n- [`streamlit init`](/develop/api-reference/cli/init): Create the files for a new Streamlit app.\n- [`streamlit run`](/develop/api-reference/cli/run): Run your Streamlit app.\n- [`streamlit version`](/develop/api-reference/cli/version): Show the version of Streamlit.\n\n### Run your app\n\nThe most important command is `streamlit run`, which is summarized for convenience here:\n\n```bash\nstreamlit run your_script.py\n```\n\nAt any time, in your terminal, you can stop the server with **Ctrl+C**."
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/app-testing/testing-element-classes",
    "content": "# Testing element classes\n\n## st.testing.v1.element_tree.Block\n\nThe `Block` class has the same methods and attributes as `AppTest`. A `Block` instance represents a container of elements just as `AppTest` represents the entire app. For example, `Block.button` will produce a `WidgetList` of `Button` in the same manner as [`AppTest.button`](/develop/api-reference/testing/st.testing.v1.apptest#apptestbutton).\n\n`ChatMessage`, `Column`, and `Tab` all inherit from `Block`. For all container classes, parameters of the original element can be obtained as properties. For example, `ChatMessage.avatar` and `Tab.label`.\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.Element\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.Button\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.ChatInput\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.Checkbox\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.ColorPicker\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.DateInput\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.Multiselect\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.NumberInput\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.Radio\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.SelectSlider\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.Selectbox\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.Slider\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.TextArea\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.TextInput\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.TimeInput\" />\n\n<Autofunction function=\"streamlit.testing.v1.element_tree.Toggle\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest",
    "content": "<h1 style={{display: \"none\"}}></h1>\n\n# The AppTest class\n\n<Autofunction function=\"streamlit.testing.v1.AppTest\" />\n\n# Initialize a simulated app using AppTest\n\n<Autofunction function=\"AppTest.from_file\" />\n\n<Autofunction function=\"AppTest.from_string\" />\n\n<Autofunction function=\"AppTest.from_function\" />\n\n# Run an AppTest script\n\n<Autofunction function=\"AppTest.run\" />\n\n<Autofunction function=\"AppTest.switch_page\" />\n\n# Get AppTest script elements\n\nThe main value of `AppTest` is providing an API to programmatically inspect and interact with the elements and widgets produced by a running Streamlit app. Using the `AppTest.<element type>` properties or `AppTest.get()` method returns a collection of all the elements or widgets of the specified type that would have been displayed by running the app.\n\nNote that you can also retrieve elements within a specific container in the same way - first retrieve the container, then retrieve the elements just in that container.\n\n<Autofunction function=\"AppTest.get\" />\n\n<Autofunction function=\"AppTest.button\" is_property />\n\n<Autofunction function=\"AppTest.caption\" />\n\n<Autofunction function=\"AppTest.chat_input\" />\n\n<Autofunction function=\"AppTest.chat_message\" />\n\n<Autofunction function=\"AppTest.checkbox\" />\n\n<Autofunction function=\"AppTest.code\" />\n\n<Autofunction function=\"AppTest.color_picker\" />\n\n<Autofunction function=\"AppTest.columns\" />\n\n<Autofunction function=\"AppTest.dataframe\" />\n\n<Autofunction function=\"AppTest.date_input\" />\n\n<Autofunction function=\"AppTest.divider\" />\n\n<Autofunction function=\"AppTest.error\" />\n\n<Autofunction function=\"AppTest.exception\" />\n\n<Autofunction function=\"AppTest.expander\" />\n\n<Autofunction function=\"AppTest.header\" />\n\n<Autofunction function=\"AppTest.info\" />\n\n<Autofunction function=\"AppTest.json\" />\n\n<Autofunction function=\"AppTest.latex\" />\n\n<Autofunction function=\"AppTest.main\" />\n\n<Autofunction function=\"AppTest.markdown\" />\n\n<Autofunction function=\"AppTest.metric\" />\n\n<Autofunction function=\"AppTest.multiselect\" />\n\n<Autofunction function=\"AppTest.number_input\" />\n\n<Autofunction function=\"AppTest.radio\" />\n\n<Autofunction function=\"AppTest.select_slider\" />\n\n<Autofunction function=\"AppTest.selectbox\" />\n\n<Autofunction function=\"AppTest.sidebar\" />\n\n<Autofunction function=\"AppTest.slider\" />\n\n<Autofunction function=\"AppTest.subheader\" />\n\n<Autofunction function=\"AppTest.success\" />\n\n<Autofunction function=\"AppTest.status\" />\n\n<Autofunction function=\"AppTest.table\" />\n\n<Autofunction function=\"AppTest.tabs\" />\n\n<Autofunction function=\"AppTest.text\" />\n\n<Autofunction function=\"AppTest.text_area\" />\n\n<Autofunction function=\"AppTest.text_input\" />\n\n<Autofunction function=\"AppTest.time_input\" />\n\n<Autofunction function=\"AppTest.title\" />\n\n<Autofunction function=\"AppTest.toast\" />\n\n<Autofunction function=\"AppTest.toggle\" />\n\n<Autofunction function=\"AppTest.warning\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/app-testing",
    "content": "# App testing\n\nStreamlit app testing framework enables developers to build and run headless tests that execute their app code directly, simulate user input, and inspect rendered outputs for correctness.\n\nThe provided class, AppTest, simulates a running app and provides methods to set up, manipulate, and inspect the app contents via API instead of a browser UI. It can be used to write automated tests of an app in various scenarios. These can then be run using a tool like pytest. A typical pattern is to build a suite of tests for an app that ensure consistent functionality as the app evolves, and run the tests locally and/or in a CI environment like Github Actions.\n\n## The AppTest class\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/app-testing/st.testing.v1.apptest\" size=\"full\">\n\n<h3>st.testing.v1.AppTest</h3>\n\n`st.testing.v1.AppTest` simulates a running Streamlit app for testing.\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"streamlit_app.py\")\nat.secrets[\"WORD\"] = \"Foobar\"\nat.run()\nassert not at.exception\n\nat.text_input(\"word\").input(\"Bazbat\").run()\nassert at.warning[0].value == \"Try again.\"\n```\n\n</RefCard>\n\n<RefCard href=\"\">\n\n{/** TODO: Bug fix. The second RefCard does not render. Empty card is a workaround. **/}\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_file\" size=\"full\">\n\n<h3>AppTest.from_file</h3>\n\n`st.testing.v1.AppTest.from_file` initializes a simulated app from a file.\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"streamlit_app.py\")\nat.secrets[\"WORD\"] = \"Foobar\"\nat.run()\nassert not at.exception\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_string\" size=\"full\">\n\n<h3>AppTest.from_string</h3>\n\n`st.testing.v1.AppTest.from_string` initializes a simulated app from a string.\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\napp_script = \"\"\"\nimport streamlit as st\n\nword_of_the_day = st.text_input(\"What's the word of the day?\", key=\"word\")\nif word_of_the_day == st.secrets[\"WORD\"]:\n    st.success(\"That's right!\")\nelif word_of_the_day and word_of_the_day != st.secrets[\"WORD\"]:\n    st.warn(\"Try again.\")\n\"\"\"\n\nat = AppTest.from_string(app_script)\nat.secrets[\"WORD\"] = \"Foobar\"\nat.run()\nassert not at.exception\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_function\" size=\"full\">\n\n<h3>AppTest.from_function</h3>\n\n`st.testing.v1.AppTest.from_function` initializes a simulated app from a function.\n\n```python\nfrom streamlit.testing.v1 import AppTest\n\ndef app_script ():\n    import streamlit as st\n\n    word_of_the_day = st.text_input(\"What's the word of the day?\", key=\"word\")\n    if word_of_the_day == st.secrets[\"WORD\"]:\n        st.success(\"That's right!\")\n    elif word_of_the_day and word_of_the_day != st.secrets[\"WORD\"]:\n        st.warn(\"Try again.\")\n\nat = AppTest.from_function(app_script)\nat.secrets[\"WORD\"] = \"Foobar\"\nat.run()\nassert not at.exception\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Testing-element classes\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeblock\" size=\"half\">\n\n<h4>Block</h4>\n\nA representation of container elements, including:\n\n- `st.chat_message`\n- `st.columns`\n- `st.sidebar`\n- `st.tabs`\n- The main body of the app.\n\n```python\n# at.sidebar returns a Block\nat.sidebar.button[0].click().run()\nassert not at.exception\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeelement\" size=\"half\">\n\n<h4>Element</h4>\n\nThe base class for representation of all elements, including:\n\n- `st.title`\n- `st.header`\n- `st.markdown`\n- `st.dataframe`\n\n```python\n# at.title returns a sequence of Title\n# Title inherits from Element\nassert at.title[0].value == \"My awesome app\"\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treebutton\" size=\"third\">\n\n<h4>Button</h4>\n\nA representation of `st.button` and `st.form_submit_button`.\n\n```python\nat.button[0].click().run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treechatinput\" size=\"third\">\n\n<h4>ChatInput</h4>\n\nA representation of `st.chat_input`.\n\n```python\nat.chat_input[0].set_value(\"What is Streamlit?\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treecheckbox\" size=\"third\">\n\n<h4>Checkbox</h4>\n\nA representation of `st.checkbox`.\n\n```python\nat.checkbox[0].check().run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treecolorpicker\" size=\"third\">\n\n<h4>ColorPicker</h4>\n\nA representation of `st.color_picker`.\n\n```python\nat.color_picker[0].pick(\"#FF4B4B\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treedateinput\" size=\"third\">\n\n<h4>DateInput</h4>\n\nA representation of `st.date_input`.\n\n```python\nrelease_date = datetime.date(2023, 10, 26)\nat.date_input[0].set_value(release_date).run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treemultiselect\" size=\"third\">\n\n<h4>Multiselect</h4>\n\nA representation of `st.multiselect`.\n\n```python\nat.multiselect[0].select(\"New York\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treenumberinput\" size=\"third\">\n\n<h4>NumberInput</h4>\n\nA representation of `st.number_input`.\n\n```python\nat.number_input[0].increment().run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeradio\" size=\"third\">\n\n<h4>Radio</h4>\n\nA representation of `st.radio`.\n\n```python\nat.radio[0].set_value(\"New York\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeselectslider\" size=\"third\">\n\n<h4>SelectSlider</h4>\n\nA representation of `st.select_slider`.\n\n```python\nat.select_slider[0].set_range(\"A\",\"C\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeselectbox\" size=\"third\">\n\n<h4>Selectbox</h4>\n\nA representation of `st.selectbox`.\n\n```python\nat.selectbox[0].select(\"New York\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeslider\" size=\"third\">\n\n<h4>Slider</h4>\n\nA representation of `st.slider`.\n\n```python\nat.slider[0].set_range(2,5).run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetextarea\" size=\"third\">\n\n<h4>TextArea</h4>\n\nA representation of `st.text_area`.\n\n```python\nat.text_area[0].input(\"Streamlit is awesome!\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetextinput\" size=\"third\">\n\n<h4>TextInput</h4>\n\nA representation of `st.text_input`.\n\n```python\nat.text_input[0].input(\"Streamlit\").run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetimeinput\" size=\"third\">\n\n<h4>TimeInput</h4>\n\nA representation of `st.time_input`.\n\n```python\nat.time_input[0].increment().run()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treetoggle\" size=\"third\">\n\n<h4>Toggle</h4>\n\nA representation of `st.toggle`.\n\n```python\nat.toggle[0].set_value(\"True\").run()\n```\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connections.experimentalbaseconnection",
    "content": "<Important>\n\nThis is an experimental feature. Experimental features and their APIs may change or be removed at any time. To learn more, click [here](/develop/quick-reference/prerelease#experimental-features).\n\n</Important>\n\n<Tip>\n\nThis page only contains information on the `st.connections.ExperimentalBaseConnection` class. For a deeper dive into creating and managing data connections within Streamlit apps, read [Connecting to data](/develop/concepts/connections/connecting-to-data).\n\n</Tip>\n\n<Autofunction function=\"streamlit.connections.ExperimentalBaseConnection\" deprecated={true} deprecatedText=\"<code>st.connections.ExperimentalBaseConnection</code> was deprecated in version 1.28.0. Use <a href='/develop/api-reference/connections/st.connections.baseconnection'><code>st.connections.BaseConnection</code></a> instead.\" />\n\n<Autofunction function=\"streamlit.connections.ExperimentalBaseConnection.reset\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connection",
    "content": "<Tip>\n\nThis page only contains the `st.connection` API. For a deeper dive into creating and managing data connections within Streamlit apps, read [Connecting to data](/develop/concepts/connections/connecting-to-data).\n\n</Tip>\n\n<Autofunction function=\"streamlit.connection\" oldName=\"streamlit.experimental_connection\" />\n\nFor a comprehensive overview of this feature, check out this video tutorial by Joshua Carroll, Streamlit's Product Manager for Developer Experience. You'll learn about the feature's utility in creating and managing data connections within your apps by using real-world examples.\n\n<YouTube videoId=\"xQwDfW7UHMo\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/connections/st.secrets",
    "content": "## st.secrets\n\n`st.secrets` provides a dictionary-like interface to access secrets stored in a `secrets.toml` file. It behaves similarly to `st.session_state`. `st.secrets` can be used with both key and attribute notation. For example, `st.secrets.your_key` and `st.secrets[\"your_key\"]` refer to the same value. For more information about using `st.secrets`, see [Secrets management](/develop/concepts/connections/secrets-management).\n\n### secrets.toml\n\nBy default, secrets can be saved globally or per-project. When both types of secrets are saved, Streamlit will combine the saved values but give precedence to per-project secrets if there are duplicate keys. For information on how to format and locate your `secrets.toml` file for your development environment, see [`secrets.toml`](/develop/api-reference/connections/secrets.toml).\n\n### Configure secrets locations\n\nYou can configure where Streamlit searches for secrets through the configuration option, [`secrets.files`](/develop/api-reference/configuration/config.toml#secrets). With this option, you can list additional secrets locations and change the order of precedence. You can specify other TOML files or include Kubernetes style secret files.\n\n#### Example\n\n```toml\nOpenAI_key = \"your OpenAI key\"\nwhitelist = [\"sally\", \"bob\", \"joe\"]\n\n[database]\nuser = \"your username\"\npassword = \"your password\"\n```\n\nIn your Streamlit app, the following values would be true:\n\n```python\nst.secrets[\"OpenAI_key\"] == \"your OpenAI key\"\n\"sally\" in st.secrets.whitelist\nst.secrets[\"database\"][\"user\"] == \"your username\"\nst.secrets.database.password == \"your password\"\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connections.sqlconnection",
    "content": "<Tip>\n\nThis page only contains the `st.connections.SQLConnection` class. For a deeper dive into creating and managing data connections within Streamlit apps, read [Connecting to data](/develop/concepts/connections/connecting-to-data).\n\n</Tip>\n\n<Autofunction function=\"streamlit.connections.SQLConnection\" />\n\n<Autofunction function=\"streamlit.connections.SQLConnection.connect\" />\n\n<Autofunction function=\"streamlit.connections.SQLConnection.query\" />\n\n<Autofunction function=\"streamlit.connections.SQLConnection.reset\" />\n\n<Autofunction function=\"streamlit.connections.SQLConnection.driver\" />\n\n<Autofunction function=\"streamlit.connections.SQLConnection.engine\" />\n\n<Autofunction function=\"streamlit.connections.SQLConnection.session\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connections.snowparkconnection",
    "content": "<Tip>\n\nThis page only contains the `st.connections.SnowparkConnection` class. For a deeper dive into creating and managing data connections within Streamlit apps, read [Connecting to data](/develop/concepts/connections/connecting-to-data).\n\n</Tip>\n\n<Autofunction function=\"streamlit.connections.SnowparkConnection\" deprecated={true} deprecatedText=\"<code>st.connections.SnowParkConnection</code> was deprecated in version 1.28.0. Use <a href='/develop/api-reference/connections/st.connections.snowflakeconnection'><code>st.connections.SnowflakeConnection</code></a> instead.\" />\n\n<Autofunction function=\"streamlit.connections.SnowparkConnection.query\" />\n\n<Autofunction function=\"streamlit.connections.SnowparkConnection.reset\" />\n\n<Autofunction function=\"streamlit.connections.SnowparkConnection.safe_session\" />\n\n<Autofunction function=\"streamlit.connections.SnowparkConnection.session\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connections.snowflakeconnection",
    "content": "<Tip>\n\nThis page only contains the `st.connections.SnowflakeConnection` class. For a deeper dive into creating and managing data connections within Streamlit apps, see [Connect Streamlit to Snowflake](/develop/tutorials/databases/snowflake) and [Connecting to data](/develop/concepts/connections/connecting-to-data).\n\n</Tip>\n\n<Autofunction function=\"streamlit.connections.SnowflakeConnection\" />\n\n<Autofunction function=\"streamlit.connections.SnowflakeConnection.cursor\" />\n\n<Autofunction function=\"streamlit.connections.SnowflakeConnection.query\" />\n\n<Autofunction function=\"streamlit.connections.SnowflakeConnection.raw_connection\" />\n\n<Autofunction function=\"streamlit.connections.SnowflakeConnection.reset\" />\n\n<Autofunction function=\"streamlit.connections.SnowflakeConnection.session\" />\n\n<Autofunction function=\"streamlit.connections.SnowflakeConnection.write_pandas\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connections.baseconnection",
    "content": "<Tip>\n\nThis page only contains information on the `st.connections.BaseConnection` class. For a deeper dive into creating and managing data connections within Streamlit apps, read [Connecting to data](/develop/concepts/connections/connecting-to-data).\n\n</Tip>\n\n<Autofunction function=\"streamlit.connections.BaseConnection\" oldName=\"streamlit.connections.ExperimentalBaseConnection\" />\n\n<Autofunction function=\"streamlit.connections.BaseConnection.reset\" oldName=\"streamlit.connections.ExperimentalBaseConnection.reset\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/connections/secrets.toml",
    "content": "## secrets.toml\n\n`secrets.toml` is an optional file you can define for your working directory or global development environment. When `secrets.toml` is defined both globally and in your working directory, Streamlit combines the secrets and gives precendence to the working-directory secrets. For more information, see [Secrets management](/develop/concepts/connections/secrets-management).\n\n### File location\n\nTo define your secrets locally or per-project, add `.streamlit/secrets.toml` to your working directory. Your working directory is wherever you call `streamlit run`. If you haven't previously created the `.streamlit` directory, you will need to add it.\n\nTo define your configuration globally, you must first locate your global `.streamlit` directory. Streamlit adds this hidden directory to your OS user profile during installation. For MacOS/Linux, this will be `~/.streamlit/secrets.toml`. For Windows, this will be `%userprofile%/.streamlit/secrets.toml`.\n\nOptionally, you can change where Streamlit searches for secrets through the configuration option, [`secrets.files`](/develop/api-reference/configuration/config.toml#secrets).\n\n### File format\n\n`secrets.toml` is a [TOML](https://toml.io/en/) file.\n\n#### Example\n\n```toml\nOpenAI_key = \"your OpenAI key\"\nwhitelist = [\"sally\", \"bob\", \"joe\"]\n\n[database]\nuser = \"your username\"\npassword = \"your password\"\n```\n\nIn your Streamlit app, the following values would be true:\n\n```python\nst.secrets[\"OpenAI_key\"] == \"your OpenAI key\"\n\"sally\" in st.secrets.whitelist\nst.secrets[\"database\"][\"user\"] == \"your username\"\nst.secrets.database.password == \"your password\"\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/connections/st.experimental_connection",
    "content": "<Important>\n\nThis is an experimental feature. Experimental features and their APIs may change or be removed at any time. To learn more, click [here](/develop/quick-reference/prerelease#experimental-features).\n\n</Important>\n\n<Tip>\n\nThis page only contains the `st.experimental_connection` API. For a deeper dive into creating and managing data connections within Streamlit apps, read [Connecting to data](/develop/concepts/connections/connecting-to-data).\n\n</Tip>\n\n<Autofunction function=\"streamlit.experimental_connection\" deprecated={true} deprecatedText=\"<code>st.experimental_connection</code> was deprecated in version 1.28.0. Use <a href='/develop/api-reference/connections/st.connection'><code>st.connection</code></a> instead.\"/>\n\nFor a comprehensive overview of this feature, check out this video tutorial by Joshua Carroll, Streamlit's Product Manager for Developer Experience. You'll learn about the feature's utility in creating and managing data connections within your apps by using real-world examples.\n\n<YouTube videoId=\"xQwDfW7UHMo\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/connections",
    "content": "# Connections and databases\n\n## Setup your connection\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/connections/st.connection\" size=\"half\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/connection.svg\" />\n\n<h4>Create a connection</h4>\n\nConnect to a data source or API\n\n```python\nconn = st.connection('pets_db', type='sql')\npet_owners = conn.query('select * from pet_owners')\nst.dataframe(pet_owners)\n```\n\n</RefCard>\n</TileContainer>\n\n## Built-in connections\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/connections/st.connections.snowflakeconnection\" size=\"half\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/connections.SnowflakeConnection.svg\" />\n\n<h4>SnowflakeConnection</h4>\n\nA connection to Snowflake.\n\n```python\nconn = st.connection('snowflake')\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/connections/st.connections.sqlconnection\" size=\"half\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/connections.SQLConnection.svg\" />\n\n<h4>SQLConnection</h4>\n\nA connection to a SQL database using SQLAlchemy.\n\n```python\nconn = st.connection('sql')\n```\n\n</RefCard>\n</TileContainer>\n\n## Third-party connections\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/connections/st.connections.baseconnection\" size=\"half\">\n\n<h4>Connection base class</h4>\n\nBuild your own connection with `BaseConnection`.\n\n```python\nclass MyConnection(BaseConnection[myconn.MyConnection]):\n    def _connect(self, **kwargs) -> MyConnection:\n        return myconn.connect(**self._secrets, **kwargs)\n    def query(self, query):\n        return self._instance.query(query)\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Secrets\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/connections/st.secrets\" size=\"half\">\n\n<h4>Secrets singleton</h4>\n\nAccess secrets from a local TOML file.\n\n```python\nkey = st.secrets[\"OpenAI_key\"]\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/connections/secrets.toml\" size=\"half\">\n\n<h4>Secrets file</h4>\n\nSave your secrets in a per-project or per-profile TOML file.\n\n```python\nOpenAI_key = \"<YOUR_SECRET_KEY>\"\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Deprecated classes\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/connections/st.connections.snowparkconnection\" size=\"half\" deprecated={true}>\n\n<h4>SnowparkConnection</h4>\n\nA connection to Snowflake.\n\n```python\nconn = st.connection(\"snowpark\")\n```\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.experimental_get_query_params",
    "content": "<Autofunction function=\"streamlit.experimental_get_query_params\" deprecated={true} deprecatedText=\"<code>st.experimental_get_query_params</code> was deprecated in version 1.30.0. Use <a href='/develop/api-reference/caching-and-state/st.query_params'><code>st.query_params</code></a> instead.\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.query_params",
    "content": "## st.query_params\n\n`st.query_params` provides a dictionary-like interface to access query parameters in your app's URL and is available as of Streamlit 1.30.0. It behaves similarly to `st.session_state` with the notable exception that keys may be repeated in an app's URL. Handling of repeated keys requires special consideration as explained below.\n\n`st.query_params` can be used with both key and attribute notation. For example, `st.query_params.my_key` and `st.query_params[\"my_key\"]`. All keys and values will be set and returned as strings. When you write to `st.query_params`, key-value pair prefixed with `?` is added to the end of your app's URL. Each additional pair is prefixed with `&` instead of `?`. Query parameters are cleared when navigating between pages in a multipage app.\n\nFor example, consider the following URL:\n\n```javascript\nhttps://your_app.streamlit.app/?first_key=1&second_key=two&third_key=true\n```\n\nThe parameters in the URL above will be accessible in `st.query_params` as:\n\n```python\n{\n    \"first_key\" : \"1\",\n    \"second_key\" : \"two\",\n    \"third_key\" : \"true\"\n}\n```\n\nThis means you can use those parameters in your app like this:\n\n```python\n# You can read query params using key notation\nif st.query_params[\"first_key\"] == \"1\":\n    do_something()\n\n# ...or using attribute notation\nif st.query_params.second_key == \"two\":\n    do_something_else()\n\n# And you can change a param by just writing to it\nst.query_params.first_key = 2  # This gets converted to str automatically\n```\n\n### Repeated keys\n\nWhen a key is repeated in your app's URL (`?a=1&a=2&a=3`), dict-like methods will return only the last value. In this example, `st.query_params[\"a\"]` returns `\"3\"`. To get all keys as a list, use the [`.get_all()`](/develop/api-reference/caching-and-state/st.query_params#stquery_paramsget_all) method shown below. To set the value of a repeated key, assign the values as a list. For example, `st.query_params.a = [\"1\", \"2\", \"3\"]` produces the repeated key given at the beginning of this paragraph.\n\n### Limitation\n\n`st.query_params` can't get or set embedding settings as described in [Embed your app](/deploy/streamlit-community-cloud/share-your-app/embed-your-app#embed-options). `st.query_params.embed` and `st.query_params.embed_options` will raise an `AttributeError` or `StreamlitAPIException` when trying to get or set their values, respectively.\n\n<Autofunction function=\"streamlit.query_params.clear\" />\n\n<Autofunction function=\"streamlit.query_params.from_dict\" />\n\n<Autofunction function=\"streamlit.query_params.get_all\" />\n\n<Autofunction function=\"streamlit.query_params.to_dict\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.context",
    "content": "<Autofunction function=\"streamlit.context\" />\n\n<Autofunction function=\"context.cookies\" />\n\n<Autofunction function=\"context.headers\" />\n\n<Autofunction function=\"context.ip_address\" />\n\n<Autofunction function=\"context.is_embedded\" />\n\n<Autofunction function=\"context.locale\" />\n\n<Autofunction function=\"context.theme\" />\n\n<Autofunction function=\"context.timezone\" />\n\n<Autofunction function=\"context.timezone_offset\" />\n\n<Autofunction function=\"context.url\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data",
    "content": "<Tip>\n\nThis page only contains information on the `st.cache_data` API. For a deeper dive into caching and how to use it, check out [Caching](/develop/concepts/architecture/caching).\n\n</Tip>\n\n<Autofunction function=\"streamlit.cache_data\" oldName=\"streamlit.experimental_memo\" />\n\n<Warning>\n\n`st.cache_data` implicitly uses the `pickle` module, which is known to be insecure. Anything your cached function returns is pickled and stored, then unpickled on retrieval. Ensure your cached functions return trusted values because it is possible to construct malicious pickle data that will execute arbitrary code during unpickling. Never load data that could have come from an untrusted source in an unsafe mode or that could have been tampered with. **Only load data you trust**.\n\n</Warning>\n\n<Autofunction function=\"streamlit.cache_data.clear\" oldName=\"streamlit.experimental_memo.clear\" />\n\n#### Example\n\nIn the example below, pressing the \"Clear All\" button will clear memoized values from all functions decorated with `@st.cache_data`.\n\n```python\nimport streamlit as st\n\n@st.cache_data\ndef square(x):\n    return x**2\n\n@st.cache_data\ndef cube(x):\n    return x**3\n\nif st.button(\"Clear All\"):\n    # Clear values from *all* all in-memory and on-disk data caches:\n    # i.e. clear values from both square and cube\n    st.cache_data.clear()\n```\n\n<Autofunction function=\"CachedFunc.clear\" />\n\n## Using Streamlit commands in cached functions\n\n### Static elements\n\nSince version 1.16.0, cached functions can contain Streamlit commands! For example, you can do this:\n\n```python\n@st.cache_data\ndef get_api_data():\n    data = api.get(...)\n    st.success(\"Fetched data from API!\")  # 👈 Show a success message\n    return data\n```\n\nAs we know, Streamlit only runs this function if it hasn’t been cached before. On this first run, the `st.success` message will appear in the app. But what happens on subsequent runs? It still shows up! Streamlit realizes that there is an `st.` command inside the cached function, saves it during the first run, and replays it on subsequent runs. Replaying static elements works for both caching decorators.\n\nYou can also use this functionality to cache entire parts of your UI:\n\n```python\n@st.cache_data\ndef show_data():\n    st.header(\"Data analysis\")\n    data = api.get(...)\n    st.success(\"Fetched data from API!\")\n    st.write(\"Here is a plot of the data:\")\n    st.line_chart(data)\n    st.write(\"And here is the raw data:\")\n    st.dataframe(data)\n```\n\n### Input widgets\n\nYou can also use [interactive input widgets](/develop/api-reference/widgets) like `st.slider` or `st.text_input` in cached functions. Widget replay is an experimental feature at the moment. To enable it, you need to set the `experimental_allow_widgets` parameter:\n\n```python\n@st.cache_data(experimental_allow_widgets=True)  # 👈 Set the parameter\ndef get_data():\n    num_rows = st.slider(\"Number of rows to get\")  # 👈 Add a slider\n    data = api.get(..., num_rows)\n    return data\n```\n\nStreamlit treats the slider like an additional input parameter to the cached function. If you change the slider position, Streamlit will see if it has already cached the function for this slider value. If yes, it will return the cached value. If not, it will rerun the function using the new slider value.\n\nUsing widgets in cached functions is extremely powerful because it lets you cache entire parts of your app. But it can be dangerous! Since Streamlit treats the widget value as an additional input parameter, it can easily lead to excessive memory usage. Imagine your cached function has five sliders and returns a 100 MB DataFrame. Then we’ll add 100 MB to the cache for _every permutation_ of these five slider values – even if the sliders do not influence the returned data! These additions can make your cache explode very quickly. Please be aware of this limitation if you use widgets in cached functions. We recommend using this feature only for isolated parts of your UI where the widgets directly influence the cached return value.\n\n<Warning>\n\nSupport for widgets in cached functions is currently experimental. We may change or remove it anytime without warning. Please use it with care!\n</Warning>\n\n<Note>\n\nTwo widgets are currently not supported in cached functions: `st.file_uploader` and `st.camera_input`. We may support them in the future. Feel free to [open a GitHub issue](https://github.com/streamlit/streamlit/issues) if you need them!\n</Note>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state",
    "content": "# Session State\n\nSession State is a way to share variables between reruns, for each user session. In addition to the ability to store and persist state, Streamlit also exposes the ability to manipulate state using Callbacks. Session state also persists across apps inside a [multipage app](/develop/concepts/multipage-apps).\n\nCheck out this Session State basics tutorial video by Streamlit Developer Advocate Dr. Marisa Smith to get started:\n\n<YouTube videoId=\"92jUAXBmZyU\" />\n\n### Initialize values in Session State\n\nThe Session State API follows a field-based API, which is very similar to Python dictionaries:\n\n```python\n# Initialization\nif 'key' not in st.session_state:\n    st.session_state['key'] = 'value'\n\n# Session State also supports attribute based syntax\nif 'key' not in st.session_state:\n    st.session_state.key = 'value'\n```\n\n### Reads and updates\n\nRead the value of an item in Session State and display it by passing to `st.write` :\n\n```python\n# Read\nst.write(st.session_state.key)\n\n# Outputs: value\n```\n\nUpdate an item in Session State by assigning it a value:\n\n```python\nst.session_state.key = 'value2'     # Attribute API\nst.session_state['key'] = 'value2'  # Dictionary like API\n```\n\nCurious about what is in Session State? Use `st.write` or magic:\n\n```python\nst.write(st.session_state)\n\n# With magic:\nst.session_state\n```\n\nStreamlit throws a handy exception if an uninitialized variable is accessed:\n\n```python\nst.write(st.session_state['value'])\n\n# Throws an exception!\n```\n\n![state-uninitialized-exception](/images/state_uninitialized_exception.png)\n\n### Delete items\n\nDelete items in Session State using the syntax to delete items in any Python dictionary:\n\n```python\n# Delete a single key-value pair\ndel st.session_state[key]\n\n# Delete all the items in Session state\nfor key in st.session_state.keys():\n    del st.session_state[key]\n```\n\nSession State can also be cleared by going to Settings → Clear Cache, followed by Rerunning the app.\n\n![state-clear-cache](/images/clear_cache.png)\n\n### Session State and Widget State association\n\nEvery widget with a key is automatically added to Session State:\n\n```python\nst.text_input(\"Your name\", key=\"name\")\n\n# This exists now:\nst.session_state.name\n```\n\n### Use Callbacks to update Session State\n\nA callback is a python function which gets called when an input widget changes.\n\n**Order of execution**: When updating Session state in response to **events**, a callback function gets executed first, and then the app is executed from top to bottom.\n\nCallbacks can be used with widgets using the parameters `on_change` (or `on_click`), `args`, and `kwargs`:\n\n**Parameters**\n\n- **on_change** or **on_click** - The function name to be used as a callback\n- **args** (_tuple_) - List of arguments to be passed to the callback function\n- **kwargs** (_dict_) - Named arguments to be passed to the callback function\n\nWidgets which support the `on_change` event:\n\n- `st.checkbox`\n- `st.color_picker`\n- `st.date_input`\n- `st.data_editor`\n- `st.file_uploader`\n- `st.multiselect`\n- `st.number_input`\n- `st.radio`\n- `st.select_slider`\n- `st.selectbox`\n- `st.slider`\n- `st.text_area`\n- `st.text_input`\n- `st.time_input`\n- `st.toggle`\n\nWidgets which support the `on_click` event:\n\n- `st.button`\n- `st.download_button`\n- `st.form_submit_button`\n\nTo add a callback, define a callback function **above** the widget declaration and pass it to the widget via the `on_change` (or `on_click` ) parameter.\n\n### Forms and Callbacks\n\nWidgets inside a form can have their values be accessed and set via the Session State API. `st.form_submit_button` can have a callback associated with it. The callback gets executed upon clicking on the submit button. For example:\n\n```python\ndef form_callback():\n    st.write(st.session_state.my_slider)\n    st.write(st.session_state.my_checkbox)\n\nwith st.form(key='my_form'):\n    slider_input = st.slider('My slider', 0, 10, 5, key='my_slider')\n    checkbox_input = st.checkbox('Yes or No', key='my_checkbox')\n    submit_button = st.form_submit_button(label='Submit', on_click=form_callback)\n```\n\n### Serializable Session State\n\nSerialization refers to the process of converting an object or data structure into a format that can be persisted and shared, and allowing you to recover the data’s original structure. Python’s built-in [pickle](https://docs.python.org/3/develop/pickle.html) module serializes Python objects to a byte stream (\"pickling\") and deserializes the stream into an object (\"unpickling\").\n\nBy default, Streamlit’s [Session State](/develop/concepts/architecture/session-state) allows you to persist any Python object for the duration of the session, irrespective of the object’s pickle-serializability. This property lets you store Python primitives such as integers, floating-point numbers, complex numbers and booleans, dataframes, and even [lambdas](https://docs.python.org/3/reference/expressions.html#lambda) returned by functions. However, some execution environments may require serializing all data in Session State, so it may be useful to detect incompatibility during development, or when the execution environment will stop supporting it in the future.\n\nTo that end, Streamlit provides a `runner.enforceSerializableSessionState` [configuration option](/develop/concepts/configuration) that, when set to `true`, only allows pickle-serializable objects in Session State. To enable the option, either create a global or project config file with the following or use it as a command-line flag:\n\n```toml\n# .streamlit/config.toml\n[runner]\nenforceSerializableSessionState = true\n```\n\nBy \"_pickle-serializable_\", we mean calling `pickle.dumps(obj)` should not raise a [`PicklingError`](https://docs.python.org/3/develop/pickle.html#pickle.PicklingError) exception. When the config option is enabled, adding unserializable data to session state should result in an exception. E.g.,\n\n```python\nimport streamlit as st\n\ndef unserializable_data():\n\t\treturn lambda x: x\n\n#👇 results in an exception when enforceSerializableSessionState is on\nst.session_state.unserializable = unserializable_data()\n```\n\n<Image alt=\"UnserializableSessionStateError\" src=\"/images/unserializable-session-state-error.png\" clean />\n\n<Warning>\n\nWhen `runner.enforceSerializableSessionState` is set to `true`, Session State implicitly uses the `pickle` module, which is known to be insecure. Ensure all data saved and retrieved from Session State is trusted because it is possible to construct malicious pickle data that will execute arbitrary code during unpickling. Never load data that could have come from an untrusted source in an unsafe mode or that could have been tampered with. **Only load data you trust**.\n\n</Warning>\n\n### Caveats and limitations\n\n- Only the `st.form_submit_button` has a callback in forms. Other widgets inside a form are not allowed to have callbacks.\n- `on_change` and `on_click` events are only supported on input type widgets.\n- Modifying the value of a widget via the Session state API, after instantiating it, is not allowed and will raise a `StreamlitAPIException`. For example:\n\n  ```python\n  slider = st.slider(\n      label='My Slider', min_value=1,\n      max_value=10, value=5, key='my_slider')\n\n  st.session_state.my_slider = 7\n\n  # Throws an exception!\n  ```\n\n  ![state-modified-instantiated-exception](/images/state_modified_instantiated_exception.png)\n\n- Setting the widget state via the Session State API and using the `value` parameter in the widget declaration is not recommended, and will throw a warning on the first run. For example:\n\n  ```python\n  st.session_state.my_slider = 7\n\n  slider = st.slider(\n      label='Choose a Value', min_value=1,\n      max_value=10, value=5, key='my_slider')\n  ```\n\n  ![state-value-api-exception](/images/state_value_api_exception.png)\n\n- Setting the state of button-like widgets: `st.button`, `st.download_button`, and `st.file_uploader` via the Session State API is not allowed. Such type of widgets are by default _False_ and have ephemeral _True_ states which are only valid for a single run. For example:\n\n  ```python\n  if 'my_button' not in st.session_state:\n      st.session_state.my_button = True\n\n  st.button('My button', key='my_button')\n\n  # Throws an exception!\n  ```\n\n  ![state-button-exception](/images/state_button_exception.png)"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_resource",
    "content": "<Tip>\n\nThis page only contains information on the `st.cache_resource` API. For a deeper dive into caching and how to use it, check out [Caching](/develop/concepts/architecture/caching).\n\n</Tip>\n\n<Autofunction function=\"streamlit.cache_resource\" oldName=\"streamlit.experimental_singleton\" />\n\n<Autofunction function=\"streamlit.cache_resource.clear\" oldName=\"streamlit.experimental_singleton.clear\" />\n\n#### Example\n\nIn the example below, pressing the \"Clear All\" button will clear _all_ cache_resource caches. i.e. Clears cached global resources from all functions decorated with `@st.cache_resource`.\n\n```python\nimport streamlit as st\nfrom transformers import BertModel\n\n@st.cache_resource\n def get_database_session(url):\n     # Create a database session object that points to the URL.\n     return session\n\n@st.cache_resource\ndef get_model(model_type):\n    # Create a model of the specified type.\n    return BertModel.from_pretrained(model_type)\n\nif st.button(\"Clear All\"):\n    # Clears all st.cache_resource caches:\n    st.cache_resource.clear()\n```\n\n<Autofunction function=\"CachedFunc.clear\" />\n\n## Using Streamlit commands in cached functions\n\n### Static elements\n\nSince version 1.16.0, cached functions can contain Streamlit commands! For example, you can do this:\n\n```python\nfrom transformers import pipeline\n\n@st.cache_resource\ndef load_model():\n    model = pipeline(\"sentiment-analysis\")\n    st.success(\"Loaded NLP model from Hugging Face!\")  # 👈 Show a success message\n    return model\n```\n\nAs we know, Streamlit only runs this function if it hasn’t been cached before. On this first run, the `st.success` message will appear in the app. But what happens on subsequent runs? It still shows up! Streamlit realizes that there is an `st.` command inside the cached function, saves it during the first run, and replays it on subsequent runs. Replaying static elements works for both caching decorators.\n\nYou can also use this functionality to cache entire parts of your UI:\n\n```python\n@st.cache_resource\ndef load_model():\n    st.header(\"Data analysis\")\n    model = torchvision.models.resnet50(weights=ResNet50_Weights.DEFAULT)\n    st.success(\"Loaded model!\")\n    st.write(\"Turning on evaluation mode...\")\n    model.eval()\n    st.write(\"Here's the model:\")\n    return model\n```\n\n### Input widgets\n\nYou can also use [interactive input widgets](/develop/api-reference/widgets) like `st.slider` or `st.text_input` in cached functions. Widget replay is an experimental feature at the moment. To enable it, you need to set the `experimental_allow_widgets` parameter:\n\n```python\n@st.cache_resource(experimental_allow_widgets=True)  # 👈 Set the parameter\ndef load_model():\n    pretrained = st.checkbox(\"Use pre-trained model:\")  # 👈 Add a checkbox\n    model = torchvision.models.resnet50(weights=ResNet50_Weights.DEFAULT, pretrained=pretrained)\n    return model\n```\n\nStreamlit treats the checkbox like an additional input parameter to the cached function. If you uncheck it, Streamlit will see if it has already cached the function for this checkbox state. If yes, it will return the cached value. If not, it will rerun the function using the new slider value.\n\nUsing widgets in cached functions is extremely powerful because it lets you cache entire parts of your app. But it can be dangerous! Since Streamlit treats the widget value as an additional input parameter, it can easily lead to excessive memory usage. Imagine your cached function has five sliders and returns a 100 MB DataFrame. Then we’ll add 100 MB to the cache for _every permutation_ of these five slider values – even if the sliders do not influence the returned data! These additions can make your cache explode very quickly. Please be aware of this limitation if you use widgets in cached functions. We recommend using this feature only for isolated parts of your UI where the widgets directly influence the cached return value.\n\n<Warning>\n\nSupport for widgets in cached functions is currently experimental. We may change or remove it anytime without warning. Please use it with care!\n</Warning>\n\n<Note>\n\nTwo widgets are currently not supported in cached functions: `st.file_uploader` and `st.camera_input`. We may support them in the future. Feel free to [open a GitHub issue](https://github.com/streamlit/streamlit/issues) if you need them!\n</Note>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.experimental_set_query_params",
    "content": "<Autofunction function=\"streamlit.experimental_set_query_params\" deprecated={true} deprecatedText=\"<code>st.experimental_set_query_params</code> was deprecated in version 1.30.0. Use <a href='/develop/api-reference/caching-and-state/st.query_params'><code>st.query_params</code></a> instead.\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state",
    "content": "# Caching and state\n\nOptimize performance and add statefulness to your app!\n\n## Caching\n\nStreamlit provides powerful [cache primitives](/develop/concepts/architecture/caching) for data and global resources. They allow your app to stay performant even when loading data from the web, manipulating large datasets, or performing expensive computations.\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/caching-and-state/st.cache_data\" size=\"half\">\n\n<h4>Cache data</h4>\n\nFunction decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).\n\n```python\n@st.cache_data\ndef long_function(param1, param2):\n  # Perform expensive computation here or\n  # fetch data from the web here\n  return data\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/caching-and-state/st.cache_resource\" size=\"half\">\n\n<h4>Cache resource</h4>\n\nFunction decorator to cache functions that return global resources (e.g. database connections, ML models).\n\n```python\n@st.cache_resource\ndef init_model():\n  # Return a global resource here\n  return pipeline(\n    \"sentiment-analysis\",\n    model=\"distilbert-base-uncased-finetuned-sst-2-english\"\n  )\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Browser and server state\n\nStreamlit re-executes your script with each user interaction. Widgets have built-in statefulness between reruns, but Session State lets you do more!\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/caching-and-state/st.context\">\n\n<h4>Context</h4>\n\n`st.context` provides a read-only interface to access cookies, headers, locale, and other browser-session information.\n\n```python\nst.context.cookies\nst.context.headers\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/caching-and-state/st.session_state\">\n\n<h4>Session State</h4>\n\nSave data between reruns and across pages.\n\n```python\nst.session_state[\"foo\"] = \"bar\"\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/caching-and-state/st.query_params\">\n\n<h4>Query parameters</h4>\n\nGet, set, or clear the query parameters that are shown in the browser's URL bar.\n\n```python\nst.query_params[key] = value\nst.query_params.clear()\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Deprecated commands\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/caching-and-state/st.experimental_get_query_params\" size=\"half\" deprecated={true}>\n\n<h4>Get query parameters</h4>\n\nGet query parameters that are shown in the browser's URL bar.\n\n```python\nparam_dict = st.experimental_get_query_params()\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/caching-and-state/st.experimental_set_query_params\" size=\"half\" deprecated={true}>\n\n<h4>Set query parameters</h4>\n\nSet query parameters that are shown in the browser's URL bar.\n\n```python\nst.experimental_set_query_params(\n  {\"show_all\"=True, \"selected\"=[\"asia\", \"america\"]}\n)\n```\n\n</RefCard>\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.form_submit_button",
    "content": "<Autofunction function=\"streamlit.form_submit_button\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.fragment",
    "content": "<Autofunction function=\"streamlit.fragment\" oldName=\"streamlit.experimental_fragment\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.rerun",
    "content": "<Autofunction function=\"streamlit.rerun\" oldName=\"streamlit.experimental_rerun\" />\n\n### Caveats for `st.rerun`\n\n`st.rerun` is one of the tools to control the logic of your app. While it is great for prototyping, there can be adverse side effects:\n\n- Additional script runs may be inefficient and slower.\n- Excessive reruns may complicate your app's logic and be harder to follow.\n- If misused, infinite looping may crash your app.\n\nIn many cases where `st.rerun` works, [callbacks](/develop/api-reference/caching-and-state/st.session_state#use-callbacks-to-update-session-state) may be a cleaner alternative. [Containers](/develop/api-reference/layout) may also be helpful.\n\n### A simple example in three variations\n\n###### Using `st.rerun` to update an earlier header\n\n```python\nimport streamlit as st\n\nif \"value\" not in st.session_state:\n    st.session_state.value = \"Title\"\n\n##### Option using st.rerun #####\nst.header(st.session_state.value)\n\nif st.button(\"Foo\"):\n    st.session_state.value = \"Foo\"\n    st.rerun()\n```\n\n###### Using a callback to update an earlier header\n\n```python\n##### Option using a callback #####\nst.header(st.session_state.value)\n\ndef update_value():\n    st.session_state.value = \"Bar\"\n\nst.button(\"Bar\", on_click=update_value)\n```\n\n###### Using containers to update an earlier header\n\n```python\n##### Option using a container #####\ncontainer = st.container()\n\nif st.button(\"Baz\"):\n    st.session_state.value = \"Baz\"\n\ncontainer.header(st.session_state.value)\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.form",
    "content": "<Tip>\n\nThis page only contains information on the `st.forms` API. For a deeper dive into creating and using forms within Streamlit apps, read our guide on [Using forms](/develop/concepts/architecture/forms).\n\n</Tip>\n\n<Autofunction function=\"streamlit.form\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.experimental_rerun",
    "content": "<Autofunction function=\"streamlit.experimental_rerun\" deprecated={true} deprecatedText=\"<code>st.experimental_rerun</code> was deprecated in version 1.27.0. Use <a href='/develop/api-reference/execution-flow/st.rerun'><code>st.rerun</code></a> instead.\"/>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.dialog",
    "content": "<Autofunction function=\"streamlit.dialog\" oldName=\"streamlit.experimental_dialog\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/execution-flow",
    "content": "# Execution flow\n\n## Change execution\n\nBy default, Streamlit apps execute the script entirely, but we allow some functionality to handle control flow in your applications.\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/execution-flow/st.dialog\" size=\"full\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/dialog.jpg\" />\n\n<h4>Modal dialog</h4>\n\nInsert a modal dialog that can rerun independently from the rest of the script.\n\n```python\n@st.dialog(\"Sign up\")\ndef email_form():\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/execution-flow/st.fragment\">\n\n<h4>Fragments</h4>\n\nDefine a fragment to rerun independently from the rest of the script.\n\n```python\n@st.fragment(run_every=\"10s\")\ndef fragment():\n    df = get_data()\n    st.line_chart(df)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/execution-flow/st.rerun\">\n\n<h4>Rerun script</h4>\n\nRerun the script immediately.\n\n```python\nst.rerun()\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/execution-flow/st.stop\">\n\n<h4>Stop execution</h4>\n\nStops execution immediately.\n\n```python\nst.stop()\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Group multiple widgets\n\nBy default, Streamlit reruns your script everytime a user interacts with your app.\nHowever, sometimes it's a better user experience to wait until a group of related\nwidgets is filled before actually rerunning the script. That's what `st.form` is for!\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/execution-flow/st.form\" size=\"half\">\n\n<h4>Forms</h4>\n\nCreate a form that batches elements together with a “Submit\" button.\n\n```python\nwith st.form(key='my_form'):\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n    st.form_submit_button(\"Sign up\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/execution-flow/st.form_submit_button\" size=\"half\">\n\n<h4>Form submit button</h4>\n\nDisplay a form submit button.\n\n```python\nwith st.form(key='my_form'):\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n    st.form_submit_button(\"Sign up\")\n```\n\n</RefCard>\n\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/kmcgrady/streamlit-autorefresh\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/autorefresh.jpg\" />\n\n<h4>Autorefresh</h4>\n\nForce a refresh without tying up a script. Created by [@kmcgrady](https://github.com/kmcgrady).\n\n```python\nfrom streamlit_autorefresh import st_autorefresh\n\nst_autorefresh(interval=2000, limit=100,\n  key=\"fizzbuzzcounter\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/lukasmasuch/streamlit-pydantic\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pydantic.jpg\" />\n\n<h4>Pydantic</h4>\n\nAuto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by [@lukasmasuch](https://github.com/lukasmasuch).\n\n```python\nimport streamlit_pydantic as sp\n\nsp.pydantic_form(key=\"my_form\",\n  model=ExampleModel)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/blackary/st_pages\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pages.jpg\" />\n\n<h4>Streamlit Pages</h4>\n\nAn experimental version of Streamlit Multi-Page Apps. Created by [@blackary](https://github.com/blackary).\n\n```python\nfrom st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"🏠\"),\n  Page(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n```\n\n</ComponentCard>\n\n</ComponentSlider>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.stop",
    "content": "<Autofunction function=\"streamlit.stop\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.text",
    "content": "<Autofunction function=\"streamlit.text\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.markdown",
    "content": "<Autofunction function=\"streamlit.markdown\" />\n\n```python\nimport streamlit as st\n\nmd = st.text_area('Type in your markdown string (without outer quotes)',\n                  \"Happy Streamlit-ing! :balloon:\")\n\nst.code(f\"\"\"\nimport streamlit as st\n\nst.markdown('''{md}''')\n\"\"\")\n\nst.markdown(md)\n```\n\n<Cloud name=\"doc-markdown1\" height=\"500px\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.caption",
    "content": "<Autofunction function=\"streamlit.caption\" />\n\n<Image src=\"/images/api/st.caption.png\" clean />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.echo",
    "content": "<Autofunction function=\"streamlit.echo\" />\n\n### Display code\n\nSometimes you want your Streamlit app to contain _both_ your usual\nStreamlit graphic elements _and_ the code that generated those elements.\nThat's where `st.echo()` comes in.\n\nOk so let's say you have the following file, and you want to make its\napp a little bit more self-explanatory by making that middle section\nvisible in the Streamlit app:\n\n```python\nimport streamlit as st\n\ndef get_user_name():\n    return 'John'\n\n# ------------------------------------------------\n# Want people to see this part of the code...\n\ndef get_punctuation():\n    return '!!!'\n\ngreeting = \"Hi there, \"\nuser_name = get_user_name()\npunctuation = get_punctuation()\n\nst.write(greeting, user_name, punctuation)\n\n# ...up to here\n# ------------------------------------------------\n\nfoo = 'bar'\nst.write('Done!')\n```\n\nThe file above creates a Streamlit app containing the words \"Hi there,\n`John`\", and then \"Done!\".\n\nNow let's use `st.echo()` to make that middle section of the code visible\nin the app:\n\n```python\nimport streamlit as st\n\ndef get_user_name():\n    return 'John'\n\nwith st.echo():\n    # Everything inside this block will be both printed to the screen\n    # and executed.\n\n    def get_punctuation():\n        return '!!!'\n\n    greeting = \"Hi there, \"\n    value = get_user_name()\n    punctuation = get_punctuation()\n\n    st.write(greeting, value, punctuation)\n\n# And now we're back to _not_ printing to the screen\nfoo = 'bar'\nst.write('Done!')\n```\n\nIt's _that_ simple!\n\n<Note>\n\nYou can have multiple `st.echo()` blocks in the same file.\nUse it as often as you wish!\n\n</Note>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.title",
    "content": "<Autofunction function=\"streamlit.title\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.latex",
    "content": "<Autofunction function=\"streamlit.latex\" />\n\n<Image src=\"/images/api/st.latex.png\" clean />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.help",
    "content": "<Autofunction function=\"streamlit.help\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.header",
    "content": "<Autofunction function=\"streamlit.header\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.subheader",
    "content": "<Autofunction function=\"streamlit.subheader\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.code",
    "content": "<Autofunction function=\"streamlit.code\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.badge",
    "content": "<Autofunction function=\"streamlit.badge\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text",
    "content": "# Text elements\n\nStreamlit apps usually start with a call to `st.title` to set the\napp's title. After that, there are 2 heading levels you can use:\n`st.header` and `st.subheader`.\n\nPure text is entered with `st.text`, and Markdown with\n`st.markdown`.\n\nWe also offer a \"swiss-army knife\" command called `st.write`, which accepts\nmultiple arguments, and multiple data types. And as described above, you can\nalso use [magic commands](/develop/api-reference/write-magic/magic) in place of `st.write`.\n\n## Headings and body text\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/text/st.markdown\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/markdown.jpg\" />\n\n<h4>Markdown</h4>\n\nDisplay string formatted as Markdown.\n\n```python\nst.markdown(\"Hello **world**!\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.title\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/title.jpg\" />\n\n<h4>Title</h4>\n\nDisplay text in title formatting.\n\n```python\nst.title(\"The app title\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.header\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/header.jpg\" />\n\n<h4>Header</h4>\n\nDisplay text in header formatting.\n\n```python\nst.header(\"This is a header\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.subheader\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/subheader.jpg\" />\n\n<h4>Subheader</h4>\n\nDisplay text in subheader formatting.\n\n```python\nst.subheader(\"This is a subheader\")\n```\n\n</RefCard>\n</TileContainer>\n\n## Formatted text\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/text/st.badge\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/badge.jpg\" />\n\n<h4>Badge</h4>\n\nDisplay a small, colored badge.\n\n```python\nst.badge(\"New\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.caption\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/caption.jpg\" />\n\n<h4>Caption</h4>\n\nDisplay text in small font.\n\n```python\nst.caption(\"This is written small caption text\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.code\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/code.jpg\" />\n\n<h4>Code block</h4>\n\nDisplay a code block with optional syntax highlighting.\n\n```python\nst.code(\"a = 1234\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.echo\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/code.jpg\" />\n\n<h4>Echo</h4>\n\nDisplay some code on the app, then execute it. Useful for tutorials.\n\n```python\nwith st.echo():\n  st.write('This code will be printed')\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.text\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/text.jpg\" />\n\n<h4>Preformatted text</h4>\n\nWrite fixed-width and preformatted text.\n\n```python\nst.text(\"Hello world\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.latex\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/latex.jpg\" />\n\n<h4>LaTeX</h4>\n\nDisplay mathematical expressions formatted as LaTeX.\n\n```python\nst.latex(\"\\int a x^2 \\,dx\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.divider\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/divider.jpg\" />\n\n<h4>Divider</h4>\n\nDisplay a horizontal rule.\n\n```python\nst.divider()\n```\n\n</RefCard>\n</TileContainer>\n\n## Utilities\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/text/st.help\" size=\"half\">\n\n<h4>Get help</h4>\n\nDisplay object’s doc string, nicely formatted.\n\n```python\nst.help(st.write)\nst.help(pd.DataFrame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/text/st.html\" size=\"half\">\n\n<h4>Render HTML</h4>\n\nRenders HTML strings to your app.\n\n```python\nst.html(\"<p>Foo bar.</p>\")\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n<ComponentCard href=\"https://github.com/tvst/st-annotated-text\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/annotated-text.jpg\" />\n\n<h4>Annotated text</h4>\n\nDisplay annotated text in Streamlit apps. Created by [@tvst](https://github.com/tvst).\n\n```python\nannotated_text(\"This \", (\"is\", \"verb\"), \" some \", (\"annotated\", \"adj\"), (\"text\", \"noun\"), \" for those of \", (\"you\", \"pronoun\"), \" who \", (\"like\", \"verb\"), \" this sort of \", (\"thing\", \"noun\"), \".\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/andfanilo/streamlit-drawable-canvas\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/drawable-canvas.jpg\" />\n\n<h4>Drawable Canvas</h4>\n\nProvides a sketching canvas using [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n```python\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/gagan3012/streamlit-tags\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/tags.jpg\" />\n\n<h4>Tags</h4>\n\nAdd tags to your Streamlit apps. Created by [@gagan3012](https://github.com/gagan3012).\n\n```python\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'], suggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/JohnSnowLabs/nlu\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/nlu.jpg\" />\n\n<h4>NLU</h4>\n\nApply text mining on a dataframe. Created by [@JohnSnowLabs](https://github.com/JohnSnowLabs/).\n\n```python\nnlu.load('sentiment').predict('I love NLU! <3')\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://extras.streamlit.app/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/extras-mentions.jpg\" />\n\n<h4>Streamlit Extras</h4>\n\nA library with useful Streamlit extras. Created by [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n```python\nmention(label=\"An awesome Streamlit App\", icon=\"streamlit\",  url=\"https://extras.streamlit.app\",)\n```\n\n</ComponentCard>\n</ComponentSlider>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.html",
    "content": "<Autofunction function=\"streamlit.html\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/text/st.divider",
    "content": "<Autofunction function=\"streamlit.divider\" />\n\nHere's what it looks like in action when you have multiple elements in the app:\n\n```python\nimport streamlit as st\n\nst.write(\"This is some text.\")\n\nst.slider(\"This is a slider\", 0, 100, (25, 75))\n\nst.divider()  # 👈 Draws a horizontal rule\n\nst.write(\"This text is between the horizontal rules.\")\n\nst.divider()  # 👈 Another horizontal rule\n```\n\n<Image src=\"/images/api/st.divider.png\" clean />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.metric",
    "content": "<Autofunction function=\"streamlit.metric\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.json",
    "content": "<Autofunction function=\"streamlit.json\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.table",
    "content": "<Tip>\n\nStatic tables with `st.table` are the most basic way to display dataframes. For the majority of cases, we recommend using [`st.dataframe`](/develop/api-reference/data/st.dataframe) to display interactive dataframes, and [`st.data_editor`](/develop/api-reference/data/st.data_editor) to let users edit dataframes.\n\n</Tip>\n\n<Autofunction function=\"streamlit.table\" />\n\n<Autofunction function=\"DeltaGenerator.add_rows\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.data_editor",
    "content": "<Tip>\n\nThis page only contains information on the `st.data_editor` API. For an overview of working with dataframes and to learn more about the data editor's capabilities and limitations, read [Dataframes](/develop/concepts/design/dataframes).\n\n</Tip>\n\n<Autofunction function=\"streamlit.data_editor\" oldName=\"streamlit.experimental_data_editor\" />\n\n### Configuring columns\n\nYou can configure the display and editing behavior of columns in `st.dataframe` and `st.data_editor` via the [Column configuration API](/develop/api-reference/data/st.column_config). We have developed the API to let you add images, charts, and clickable URLs in dataframe and data editor columns. Additionally, you can make individual columns editable, set columns as categorical and specify which options they can take, hide the index of the dataframe, and much more.\n\n<Cloud name=\"doc-column-config-overview\" query=\"embed_options=disable_scrolling\" height=\"480px\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.experimental_data_editor",
    "content": "<Autofunction function=\"streamlit.experimental_data_editor\" deprecated={true} deprecatedText=\"<code>st.experimental_data_editor</code> was deprecated in version 1.23.0. Use <a href='/develop/api-reference/data/st.data_editor'><code>st.data_editor</code></a> instead.\"/>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.dataframe",
    "content": "<Tip>\n\nLearn more in our [Dataframes](/develop/concepts/design/dataframes) guide and check out our tutorial, [Get dataframe row-selections from users](/develop/tutorials/elements/dataframe-row-selections).\n\n</Tip>\n\n<Autofunction function=\"streamlit.dataframe\" />\n\n## Dataframe selections\n\n<Autofunction function=\"DataframeState\" />\n\n<Autofunction function=\"DataframeSelectionState\" />\n\n<Autofunction function=\"DeltaGenerator.add_rows\" />\n\n## Interactivity\n\nDataframes displayed with `st.dataframe` are interactive. End users can sort, resize, search, and copy data to their clipboard. For on overview of features, read our [Dataframes](/develop/concepts/design/dataframes#additional-ui-features) guide.\n\n## Configuring columns\n\nYou can configure the display and editing behavior of columns in `st.dataframe` and `st.data_editor` via the [Column configuration API](/develop/api-reference/data/st.column_config). We have developed the API to let you add images, charts, and clickable URLs in dataframe and data editor columns. Additionally, you can make individual columns editable, set columns as categorical and specify which options they can take, hide the index of the dataframe, and much more.\n\n<Cloud name=\"doc-column-config-overview\" query=\"embed_options=disable_scrolling\" height=\"480px\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data",
    "content": "# Data elements\n\nWhen you're working with data, it is extremely valuable to visualize that\ndata quickly, interactively, and from multiple different angles. That's what\nStreamlit is actually built and optimized for.\n\nYou can display data via [charts](#display-charts), and you can display it in\nraw form. These are the Streamlit commands you can use to display and interact with raw data.\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/data/st.dataframe\">\n<Image pure alt=\"screenshot\" src=\"/images/api/dataframe.jpg\" />\n\n<h4>Dataframes</h4>\n\nDisplay a dataframe as an interactive table.\n\n```python\nst.dataframe(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.data_editor\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/data_editor.jpg\" />\n\n<h4>Data editor</h4>\n\nDisplay a data editor widget.\n\n```python\nedited = st.data_editor(df, num_rows=\"dynamic\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.column_config\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.jpg\" />\n\n<h4>Column configuration</h4>\n\nConfigure the display and editing behavior of dataframes and data editors.\n\n```python\nst.column_config.NumberColumn(\"Price (in USD)\", min_value=0, format=\"$%d\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.table\">\n<Image pure alt=\"screenshot\" src=\"/images/api/table.jpg\" />\n\n<h4>Static tables</h4>\n\nDisplay a static table.\n\n```python\nst.table(my_data_frame)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.metric\">\n<Image pure alt=\"screenshot\" src=\"/images/api/metric.jpg\" />\n\n<h4>Metrics</h4>\n\nDisplay a metric in big bold font, with an optional indicator of how the metric changed.\n\n```python\nst.metric(\"My metric\", 42, 2)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.json\">\n<Image pure alt=\"screenshot\" src=\"/images/api/json.jpg\" />\n\n<h4>Dicts and JSON</h4>\n\nDisplay object or string as a pretty-printed JSON string.\n\n```python\nst.json(my_dict)\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/PablocFonseca/streamlit-aggrid\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/aggrid.jpg\" />\n\n<h4>Streamlit Aggrid</h4>\n\nImplementation of Ag-Grid component for Streamlit. Created by [@PablocFonseca](https://github.com/PablocFonseca).\n\n```python\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ngrid_return = AgGrid(df, editable=True)\n\nnew_df = grid_return['data']\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/randyzwitch/streamlit-folium\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/folium.jpg\" />\n\n<h4>Streamlit Folium</h4>\n\nStreamlit Component for rendering Folium maps. Created by [@randyzwitch](https://github.com/randyzwitch).\n\n```python\nm = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nfolium.Marker([39.949610, -75.150282], popup=\"Liberty Bell\", tooltip=\"Liberty Bell\").add_to(m)\n\nst_data = st_folium(m, width=725)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/okld/streamlit-pandas-profiling\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/pandas-profiling.jpg\" />\n\n<h4>Pandas Profiling</h4>\n\nPandas profiling component for Streamlit. Created by [@okld](https://github.com/okld/).\n\n```python\ndf = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\n\nst_profile_report(pr)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/blackary/streamlit-image-coordinates\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/image-coordinates.jpg\" />\n\n<h4>Image Coordinates</h4>\n\nGet the coordinates of clicks on an image. Created by [@blackary](https://github.com/blackary/).\n\n```python\nfrom streamlit_image_coordinates import streamlit_image_coordinates\nvalue = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\n\nst.write(value)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/null-jones/streamlit-plotly-events\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/plotly-events.jpg\" />\n\n<h4>Plotly Events</h4>\n\nMake Plotly charts interactive!. Created by [@null-jones](https://github.com/null-jones/).\n\n```python\nfrom streamlit_plotly_events import plotly_events\nfig = px.line(x=[1], y=[1])\n\nselected_points = plotly_events(fig)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://extras.streamlit.app/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/extras-metric-cards.jpg\" />\n\n<h4>Streamlit Extras</h4>\n\nA library with useful Streamlit extras. Created by [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n```python\nfrom streamlit_extras.metric_cards import style_metric_cards\ncol3.metric(label=\"No Change\", value=5000, delta=0)\n\nstyle_metric_cards()\n```\n\n</ComponentCard>\n\n</ComponentSlider>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/write-magic/st.write",
    "content": "<Autofunction function=\"streamlit.write\" />\n\n### Featured video\n\nLearn what the [`st.write`](/develop/api-reference/write-magic/st.write) and [magic](/develop/api-reference/write-magic/magic) commands are and how to use them.\n\n<YouTube videoId=\"wpDuY9I2fDg\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/write-magic/magic",
    "content": "## Magic\n\nMagic commands are a feature in Streamlit that allows you to write almost anything (markdown, data,\ncharts) without having to type an explicit command at all. Just put the thing you want to show on\nits own line of code, and it will appear in your app. Here's an example:\n\n```python\n# Draw a title and some text to the app:\n'''\n# This is the document title\n\nThis is some _markdown_.\n'''\n\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1,2,3]})\ndf  # 👈 Draw the dataframe\n\nx = 10\n'x', x  # 👈 Draw the string 'x' and then the value of x\n\n# Also works with most supported chart types\nimport matplotlib.pyplot as plt\nimport numpy as np\n\narr = np.random.normal(1, 1, size=100)\nfig, ax = plt.subplots()\nax.hist(arr, bins=20)\n\nfig  # 👈 Draw a Matplotlib chart\n```\n\n### How Magic works\n\nAny time Streamlit sees either a variable or literal\nvalue on its own line, it automatically writes that to your app using\n[`st.write`](/develop/api-reference/write-magic/st.write) (which you'll learn about later).\n\nAlso, magic is smart enough to ignore docstrings. That is, it ignores the\nstrings at the top of files and functions.\n\nIf you prefer to call Streamlit commands more explicitly, you can always turn\nmagic off in your `~/.streamlit/config.toml` with the following setting:\n\n```toml\n[runner]\nmagicEnabled = false\n```\n\n<Important>\n    <p>Right now, Magic only works in the main Python app file, not in imported files. See GitHub issue #288 for a discussion of the issues.</p>\n</Important>\n\n### Featured video\n\nLearn what the [`st.write`](/develop/api-reference/write-magic/st.write) and [magic](/develop/api-reference/write-magic/magic) commands are and how to use them.\n\n<YouTube videoId=\"wpDuY9I2fDg\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/write-magic/st.write_stream",
    "content": "<Autofunction function=\"streamlit.write_stream\" />\n\n<Tip>\n\nIf your stream object is not compatible with `st.write_stream`, define a wrapper around your stream object to create a compatible generator function.\n\n```python\nfor chunk in unsupported_stream:\n    yield preprocess(chunk)\n```\n\nFor an example, see how we use [Replicate](https://replicate.com/docs/get-started/python) with [Snowflake Arctic](https://www.snowflake.com/en/data-cloud/arctic/) in [this code](https://github.com/streamlit/snowflake-arctic-st-demo/blob/0f0d8b49f328f72ae58ced2e9000790fb5e56e6f/simple_app.py#L58).\n\n</Tip>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/write-magic",
    "content": "# st.write and magic commands\n\nStreamlit has two easy ways to display information into your app, which should typically be the\nfirst thing you try: `st.write` and magic.\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/write-magic/st.write\">\n\n<h4>st.write</h4>\n\nWrite arguments to the app.\n\n```python\nst.write(\"Hello **world**!\")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/write-magic/st.write_stream\">\n\n<h4>st.write_stream</h4>\n\nWrite generators or streams to the app with a typewriter effect.\n\n```python\nst.write_stream(my_generator)\nst.write_stream(my_llm_stream)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/write-magic/magic\">\n\n<h4>Magic</h4>\n\nAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using `st.write`\n\n```python\n\"Hello **world**!\"\nmy_data_frame\nmy_mpl_figure\n```\n\n</RefCard>\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.file_uploader",
    "content": "<Autofunction function=\"streamlit.file_uploader\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.radio",
    "content": "<Autofunction function=\"streamlit.radio\" />\n\n<br />\n\nWidgets can customize how to hide their labels with the `label_visibility` parameter. If \"hidden\", the label doesn’t show but there is still empty space for it above the widget (equivalent to `label=\"\"`). If \"collapsed\", both the label and the space are removed. Default is \"visible\". Radio buttons can also be disabled with the `disabled` parameter, and oriented horizontally with the `horizontal` parameter:\n\n```python\nimport streamlit as st\n\n# Store the initial value of widgets in session state\nif \"visibility\" not in st.session_state:\n    st.session_state.visibility = \"visible\"\n    st.session_state.disabled = False\n    st.session_state.horizontal = False\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.checkbox(\"Disable radio widget\", key=\"disabled\")\n    st.checkbox(\"Orient radio options horizontally\", key=\"horizontal\")\n\nwith col2:\n    st.radio(\n        \"Set label visibility 👇\",\n        [\"visible\", \"hidden\", \"collapsed\"],\n        key=\"visibility\",\n        label_visibility=st.session_state.visibility,\n        disabled=st.session_state.disabled,\n        horizontal=st.session_state.horizontal,\n    )\n```\n\n<Cloud name=\"doc-radio1\" height=\"300px\" />\n\n### Featured videos\n\nCheck out our video on how to use one of Streamlit's core functions, the radio button! 🔘\n\n<YouTube videoId=\"CVHIMGVAzwA\" />\n\nIn the video below, we'll take it a step further and learn how to combine a [button](/develop/api-reference/widgets/st.button), [checkbox](/develop/api-reference/widgets/st.checkbox) and radio button!\n\n<YouTube videoId=\"EnXJBsCIl_A\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.audio_input",
    "content": "<Autofunction function=\"streamlit.audio_input\" oldName=\"streamlit.experimental_audio_input\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.link_button",
    "content": "<Autofunction function=\"streamlit.link_button\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.slider",
    "content": "<Autofunction function=\"streamlit.slider\" />\n\n### Featured videos\n\nCheck out our video on how to use one of Streamlit's core functions, the slider!\n<YouTube videoId=\"tzAdd-MuWPw\" />\n\nIn the video below, we'll take it a step further and make a double-ended slider.\n<YouTube videoId=\"sCvdt79asrE\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.download_button",
    "content": "<Autofunction function=\"streamlit.download_button\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.color_picker",
    "content": "<Autofunction function=\"streamlit.color_picker\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.button",
    "content": "<Autofunction function=\"streamlit.button\" />\n\n### Advanced functionality\n\nAlthough a button is the simplest of input widgets, it's very common for buttons to be deeply tied to the use of [`st.session_state`](/develop/api-reference/caching-and-state/st.session_state). Check out our advanced guide on [Button behavior and examples](/develop/concepts/design/buttons).\n\n### Featured videos\n\nCheck out our video on how to use one of Streamlit's core functions, the button!\n\n<YouTube videoId=\"JSeQSnGovSE\" />\n\nIn the video below, we'll take it a step further and learn how to combine a [button](/develop/api-reference/widgets/st.button), [checkbox](/develop/api-reference/widgets/st.checkbox) and [radio button](/develop/api-reference/widgets/st.radio)!\n\n<YouTube videoId=\"EnXJBsCIl_A\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.pills",
    "content": "<Autofunction function=\"streamlit.pills\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.page_link",
    "content": "<Tip>\n\nCheck out our [tutorial](/develop/tutorials/multipage/st.page_link-nav) to learn about building custom, dynamic menus with `st.page_link`.\n\n</Tip>\n\n<Autofunction function=\"streamlit.page_link\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.selectbox",
    "content": "<Autofunction function=\"streamlit.selectbox\" />\n\n<br />\n\nSelect widgets can customize how to hide their labels with the `label_visibility` parameter. If \"hidden\", the label doesn’t show but there is still empty space for it above the widget (equivalent to `label=\"\"`). If \"collapsed\", both the label and the space are removed. Default is \"visible\". Select widgets can also be disabled with the `disabled` parameter:\n\n```python\nimport streamlit as st\n\n# Store the initial value of widgets in session state\nif \"visibility\" not in st.session_state:\n    st.session_state.visibility = \"visible\"\n    st.session_state.disabled = False\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.checkbox(\"Disable selectbox widget\", key=\"disabled\")\n    st.radio(\n        \"Set selectbox label visibility 👉\",\n        key=\"visibility\",\n        options=[\"visible\", \"hidden\", \"collapsed\"],\n    )\n\nwith col2:\n    option = st.selectbox(\n        \"How would you like to be contacted?\",\n        (\"Email\", \"Home phone\", \"Mobile phone\"),\n        label_visibility=st.session_state.visibility,\n        disabled=st.session_state.disabled,\n    )\n```\n\n<Cloud name=\"doc-selectbox1\" height=\"300px\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.number_input",
    "content": "<Autofunction function=\"streamlit.number_input\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.checkbox",
    "content": "<Autofunction function=\"streamlit.checkbox\" />\n\n### Featured videos\n\nCheck out our video on how to use one of Streamlit's core functions, the checkbox! ☑\n\n<YouTube videoId=\"Jte0Reue7z8\" />\n\nIn the video below, we'll take it a step further and learn how to combine a [button](/develop/api-reference/widgets/st.button), [checkbox](/develop/api-reference/widgets/st.checkbox) and [radio button](/develop/api-reference/widgets/st.radio)!\n\n<YouTube videoId=\"EnXJBsCIl_A\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.segmented_control",
    "content": "<Autofunction function=\"streamlit.segmented_control\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.text_area",
    "content": "<Autofunction function=\"streamlit.text_area\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.select_slider",
    "content": "<Autofunction function=\"streamlit.select_slider\" />\n\n### Featured videos\n\nCheck out our video on how to use one of Streamlit's core functions, the select slider! 🎈\n<YouTube videoId=\"MTaL_1UCb2g\" />\n\nIn the video below, we'll take it a step further and make a double-ended slider.\n<YouTube videoId=\"sCvdt79asrE\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.toggle",
    "content": "<Autofunction function=\"streamlit.toggle\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.text_input",
    "content": "<Autofunction function=\"streamlit.text_input\" />\n\n<br />\n\nText input widgets can customize how to hide their labels with the `label_visibility` parameter. If \"hidden\", the label doesn’t show but there is still empty space for it above the widget (equivalent to `label=\"\"`). If \"collapsed\", both the label and the space are removed. Default is \"visible\". Text input widgets can also be disabled with the `disabled` parameter, and can display an optional placeholder text when the text input is empty using the `placeholder` parameter:\n\n```python\nimport streamlit as st\n\n# Store the initial value of widgets in session state\nif \"visibility\" not in st.session_state:\n    st.session_state.visibility = \"visible\"\n    st.session_state.disabled = False\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.checkbox(\"Disable text input widget\", key=\"disabled\")\n    st.radio(\n        \"Set text input label visibility 👉\",\n        key=\"visibility\",\n        options=[\"visible\", \"hidden\", \"collapsed\"],\n    )\n    st.text_input(\n        \"Placeholder for the other text input widget\",\n        \"This is a placeholder\",\n        key=\"placeholder\",\n    )\n\nwith col2:\n    text_input = st.text_input(\n        \"Enter some text 👇\",\n        label_visibility=st.session_state.visibility,\n        disabled=st.session_state.disabled,\n        placeholder=st.session_state.placeholder,\n    )\n\n    if text_input:\n        st.write(\"You entered: \", text_input)\n```\n\n<Cloud name=\"doc-text-input1\" height=\"400px\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.date_input",
    "content": "<Autofunction function=\"streamlit.date_input\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.camera_input",
    "content": "<Autofunction function=\"streamlit.camera_input\" />\n\nTo read the image file buffer as bytes, you can use `getvalue()` on the `UploadedFile` object.\n\n```python\nimport streamlit as st\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer as bytes:\n    bytes_data = img_file_buffer.getvalue()\n    # Check the type of bytes_data:\n    # Should output: <class 'bytes'>\n    st.write(type(bytes_data))\n```\n\n<Important>\n\n`st.camera_input` returns an object of the `UploadedFile` class, which a subclass of BytesIO. Therefore it is a \"file-like\" object. This means you can pass it anywhere where a file is expected, similar to `st.file_uploader`.\n\n</Important>\n\n## Image processing examples\n\nYou can use the output of `st.camera_input` for various downstream tasks, including image processing. Below, we demonstrate how to use the `st.camera_input` widget with popular image and data processing libraries such as [Pillow](https://pillow.readthedocs.io/en/stable/installation.html), [NumPy](https://numpy.org/), [OpenCV](https://pypi.org/project/opencv-python-headless/), [TensorFlow](https://www.tensorflow.org/), [torchvision](https://pytorch.org/vision/stable/index.html), and [PyTorch](https://pytorch.org/).\n\nWhile we provide examples for the most popular use-cases and libraries, you are welcome to adapt these examples to your own needs and favorite libraries.\n\n### Pillow (PIL) and NumPy\n\nEnsure you have installed [Pillow](https://pillow.readthedocs.io/en/stable/installation.html) and [NumPy](https://numpy.org/).\n\nTo read the image file buffer as a PIL Image and convert it to a NumPy array:\n\n```python\nimport streamlit as st\nfrom PIL import Image\nimport numpy as np\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer as a PIL Image:\n    img = Image.open(img_file_buffer)\n\n    # To convert PIL Image to numpy array:\n    img_array = np.array(img)\n\n    # Check the type of img_array:\n    # Should output: <class 'numpy.ndarray'>\n    st.write(type(img_array))\n\n    # Check the shape of img_array:\n    # Should output shape: (height, width, channels)\n    st.write(img_array.shape)\n```\n\n### OpenCV (cv2)\n\nEnsure you have installed [OpenCV](https://pypi.org/project/opencv-python-headless/) and [NumPy](https://numpy.org/).\n\nTo read the image file buffer with OpenCV:\n\n```python\nimport streamlit as st\nimport cv2\nimport numpy as np\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer with OpenCV:\n    bytes_data = img_file_buffer.getvalue()\n    cv2_img = cv2.imdecode(np.frombuffer(bytes_data, np.uint8), cv2.IMREAD_COLOR)\n\n    # Check the type of cv2_img:\n    # Should output: <class 'numpy.ndarray'>\n    st.write(type(cv2_img))\n\n    # Check the shape of cv2_img:\n    # Should output shape: (height, width, channels)\n    st.write(cv2_img.shape)\n```\n\n### TensorFlow\n\nEnsure you have installed [TensorFlow](https://www.tensorflow.org/install/).\n\nTo read the image file buffer as a 3 dimensional uint8 tensor with TensorFlow:\n\n```python\nimport streamlit as st\nimport tensorflow as tf\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer as a 3D uint8 tensor with TensorFlow:\n    bytes_data = img_file_buffer.getvalue()\n    img_tensor = tf.io.decode_image(bytes_data, channels=3)\n\n    # Check the type of img_tensor:\n    # Should output: <class 'tensorflow.python.framework.ops.EagerTensor'>\n    st.write(type(img_tensor))\n\n    # Check the shape of img_tensor:\n    # Should output shape: (height, width, channels)\n    st.write(img_tensor.shape)\n```\n\n### Torchvision\n\nEnsure you have installed [Torchvision](https://pypi.org/project/torchvision/) (it is not bundled with PyTorch) and [PyTorch](https://pytorch.org/).\n\nTo read the image file buffer as a 3 dimensional uint8 tensor with `torchvision.io`:\n\n```python\nimport streamlit as st\nimport torch\nimport torchvision\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer as a 3D uint8 tensor with `torchvision.io`:\n    bytes_data = img_file_buffer.getvalue()\n    torch_img = torchvision.io.decode_image(\n        torch.frombuffer(bytes_data, dtype=torch.uint8)\n    )\n\n    # Check the type of torch_img:\n    # Should output: <class 'torch.Tensor'>\n    st.write(type(torch_img))\n\n    # Check the shape of torch_img:\n    # Should output shape: torch.Size([channels, height, width])\n    st.write(torch_img.shape)\n```\n\n### PyTorch\n\nEnsure you have installed [PyTorch](https://pytorch.org/) and [NumPy](https://numpy.org/).\n\nTo read the image file buffer as a 3 dimensional uint8 tensor with PyTorch:\n\n```python\nimport streamlit as st\nimport torch\nimport numpy as np\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer as a 3D uint8 tensor with PyTorch:\n    bytes_data = img_file_buffer.getvalue()\n    torch_img = torch.ops.image.decode_image(\n        torch.from_numpy(np.frombuffer(bytes_data, np.uint8)), 3\n    )\n\n    # Check the type of torch_img:\n    # Should output: <class 'torch.Tensor'>\n    st.write(type(torch_img))\n\n    # Check the shape of torch_img:\n    # Should output shape: torch.Size([channels, height, width])\n    st.write(torch_img.shape)\n```"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.feedback",
    "content": "<Autofunction function=\"streamlit.feedback\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.time_input",
    "content": "<Autofunction function=\"streamlit.time_input\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets",
    "content": "# Input widgets\n\nWith widgets, Streamlit allows you to bake interactivity directly into your apps with buttons, sliders, text inputs, and more.\n\n## Button elements\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/widgets/st.button\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/button.svg\" />\n\n<h4>Button</h4>\n\nDisplay a button widget.\n\n```python\nclicked = st.button(\"Click me\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/widgets/st.download_button\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/download_button.svg\" />\n\n<h4>Download button</h4>\n\nDisplay a download button widget.\n\n```python\nst.download_button(\"Download file\", file)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/execution-flow/st.form_submit_button\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/form_submit_button.svg\" />\n\n<h4>Form button</h4>\n\nDisplay a form submit button. For use with `st.form`.\n\n```python\nst.form_submit_button(\"Sign up\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/widgets/st.link_button\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/link_button.svg\" />\n\n<h4>Link button</h4>\n\nDisplay a link button.\n\n```python\nst.link_button(\"Go to gallery\", url)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/widgets/st.page_link\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/page_link.jpg\" />\n\n<h4>Page link</h4>\n\nDisplay a link to another page in a multipage app.\n\n```python\nst.page_link(\"app.py\", label=\"Home\", icon=\"🏠\")\nst.page_link(\"pages/profile.py\", label=\"My profile\")\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Selection elements\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/widgets/st.checkbox\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/checkbox.jpg\" />\n\n<h4>Checkbox</h4>\n\nDisplay a checkbox widget.\n\n```python\nselected = st.checkbox(\"I agree\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.color_picker\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/color_picker.jpg\" />\n\n<h4>Color picker</h4>\n\nDisplay a color picker widget.\n\n```python\ncolor = st.color_picker(\"Pick a color\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.feedback\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/feedback.jpg\" />\n\n<h4>Feedback</h4>\n\nDisplay a rating or sentiment button group.\n\n```python\nst.feedback(\"stars\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.multiselect\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/multiselect.jpg\" />\n\n<h4>Multiselect</h4>\n\nDisplay a multiselect widget. The multiselect widget starts as empty.\n\n```python\nchoices = st.multiselect(\"Buy\", [\"milk\", \"apples\", \"potatoes\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.pills\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/pills.jpg\" />\n\n<h4>Pills</h4>\n\nDisplay a pill-button selection widget.\n\n```python\nst.pills(\"Tags\", [\"Sports\", \"AI\", \"Politics\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.radio\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/radio.jpg\" />\n\n<h4>Radio</h4>\n\nDisplay a radio button widget.\n\n```python\nchoice = st.radio(\"Pick one\", [\"cats\", \"dogs\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.segmented_control\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/segmented_control.jpg\" />\n\n<h4>Segmented control</h4>\n\nDisplay a segmented-button selection widget.\n\n```python\nst.segmented_control(\"Filter\", [\"Open\", \"Closed\", \"All\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.select_slider\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/select_slider.jpg\" />\n\n<h4>Select slider</h4>\n\nDisplay a slider widget to select items from a list.\n\n```python\nsize = st.select_slider(\"Pick a size\", [\"S\", \"M\", \"L\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.selectbox\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/selectbox.jpg\" />\n\n<h4>Selectbox</h4>\n\nDisplay a select widget.\n\n```python\nchoice = st.selectbox(\"Pick one\", [\"cats\", \"dogs\"])\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.toggle\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/toggle.jpg\" />\n\n<h4>Toggle</h4>\n\nDisplay a toggle widget.\n\n```python\nactivated = st.toggle(\"Activate\")\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Numeric input elements\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/widgets/st.number_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/number_input.jpg\" />\n\n<h4>Number input</h4>\n\nDisplay a numeric input widget.\n\n```python\nchoice = st.number_input(\"Pick a number\", 0, 10)\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.slider\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/slider.jpg\" />\n\n<h4>Slider</h4>\n\nDisplay a slider widget.\n\n```python\nnumber = st.slider(\"Pick a number\", 0, 100)\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Date and time input elements\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/widgets/st.date_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/date_input.jpg\" />\n\n<h4>Date input</h4>\n\nDisplay a date input widget.\n\n```python\ndate = st.date_input(\"Your birthday\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.time_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/time_input.jpg\" />\n\n<h4>Time input</h4>\n\nDisplay a time input widget.\n\n```python\ntime = st.time_input(\"Meeting time\")\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Text input elements\n\n<TileContainer>\n\n<RefCard href=\"/develop/api-reference/widgets/st.text_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/text_input.jpg\" />\n\n<h4>Text input</h4>\n\nDisplay a single-line text input widget.\n\n```python\nname = st.text_input(\"First name\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.text_area\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/text_area.jpg\" />\n\n<h4>Text area</h4>\n\nDisplay a multi-line text input widget.\n\n```python\ntext = st.text_area(\"Text to translate\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/chat/st.chat_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/chat_input.jpg\" />\n\n<h4>Chat input</h4>\n\nDisplay a chat input widget.\n\n```python\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    st.write(f\"The user has sent: {prompt}\")\n```\n\n</RefCard>\n\n</TileContainer>\n\n## Other input elements\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/widgets/st.audio_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/audio_input.jpg\" />\n\n<h4>Audio input</h4>\n\nDisplay a widget that allows users to record with their microphone.\n\n```python\nspeech = st.audio_input(\"Record a voice message\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.data_editor\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/data_editor.jpg\" />\n\n<h4>Data editor</h4>\n\nDisplay a data editor widget.\n\n```python\nedited = st.data_editor(df, num_rows=\"dynamic\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.file_uploader\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/file_uploader.jpg\" />\n\n<h4>File uploader</h4>\n\nDisplay a file uploader widget.\n\n```python\ndata = st.file_uploader(\"Upload a CSV\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/widgets/st.camera_input\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/camera_input.jpg\" />\n\n<h4>Camera input</h4>\n\nDisplay a widget that allows users to upload images directly from a camera.\n\n```python\nimage = st.camera_input(\"Take a picture\")\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/okld/streamlit-elements\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/elements.jpg\" />\n\n<h4>Streamlit Elements</h4>\n\nCreate a draggable and resizable dashboard in Streamlit. Created by [@okls](https://github.com/okls).\n\n```python\nfrom streamlit_elements import elements, mui, html\n\nwith elements(\"new_element\"):\n  mui.Typography(\"Hello world\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/gagan3012/streamlit-tags\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/tags.jpg\" />\n\n<h4>Tags</h4>\n\nAdd tags to your Streamlit apps. Created by [@gagan3012](https://github.com/gagan3012).\n\n```python\nfrom streamlit_tags import st_tags\n\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'],\nsuggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/Wirg/stqdm\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/stqdm.jpg\" />\n\n<h4>Stqdm</h4>\n\nThe simplest way to handle a progress bar in streamlit app. Created by [@Wirg](https://github.com/Wirg).\n\n```python\nfrom stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/innerdoc/streamlit-timeline\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/timeline.jpg\" />\n\n<h4>Timeline</h4>\n\nDisplay a Timeline in Streamlit apps using [TimelineJS](https://timeline.knightlab.com/). Created by [@innerdoc](https://github.com/innerdoc).\n\n```python\nfrom streamlit_timeline import timeline\n\nwith open('example.json', \"r\") as f:\n  timeline(f.read(), height=800)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/blackary/streamlit-camera-input-live\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/camera-live.jpg\" />\n\n<h4>Camera input live</h4>\n\nAlternative for st.camera_input which returns the webcam images live. Created by [@blackary](https://github.com/blackary).\n\n```python\nfrom camera_input_live import camera_input_live\n\nimage = camera_input_live()\nst.image(value)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/okld/streamlit-ace\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/ace.jpg\" />\n\n<h4>Streamlit Ace</h4>\n\nAce editor component for Streamlit. Created by [@okld](https://github.com/okld).\n\n```python\nfrom streamlit_ace import st_ace\n\ncontent = st_ace()\ncontent\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/AI-Yash/st-chat\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/chat.jpg\" />\n\n<h4>Streamlit Chat</h4>\n\nStreamlit Component for a Chatbot UI. Created by [@AI-Yash](https://github.com/AI-Yash).\n\n```python\nfrom streamlit_chat import message\n\nmessage(\"My message\")\nmessage(\"Hello bot!\", is_user=True)  # align's the message to the right\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/victoryhb/streamlit-option-menu\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/option-menu.jpg\" />\n\n<h4>Streamlit Option Menu</h4>\n\nSelect a single item from a list of options in a menu. Created by [@victoryhb](https://github.com/victoryhb).\n\n```python\nfrom streamlit_option_menu import option_menu\n\noption_menu(\"Main Menu\", [\"Home\", 'Settings'],\n  icons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://extras.streamlit.app/\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/extras-toggle.jpg\" />\n\n<h4>Streamlit Extras</h4>\n\nA library with useful Streamlit extras. Created by [@arnaudmiribel](https://github.com/arnaudmiribel/).\n\n```python\nfrom streamlit_extras.stoggle import stoggle\n\nstoggle(\n    \"Click me!\", \"\"\"🥷 Surprise! Here's some additional content\"\"\",)\n```\n\n</ComponentCard>\n\n</ComponentSlider>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.multiselect",
    "content": "<Autofunction function=\"streamlit.multiselect\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/media/st.logo",
    "content": "<Autofunction function=\"streamlit.logo\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/media/st.image",
    "content": "<Autofunction function=\"streamlit.image\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/media/st.video",
    "content": "<Autofunction function=\"streamlit.video\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/media/st.audio",
    "content": "<Autofunction function=\"streamlit.audio\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/media",
    "content": "# Media elements\n\nIt's easy to embed images, videos, and audio files directly into your Streamlit apps.\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/media/st.image\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/image.jpg\" />\n\n<h4>Image</h4>\n\nDisplay an image or list of images.\n\n```python\nst.image(numpy_array)\nst.image(image_bytes)\nst.image(file)\nst.image(\"https://example.com/myimage.jpg\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/media/st.logo\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/logo.jpg\" />\n\n<h4>Logo</h4>\n\nDisplay a logo in the upper-left corner of your app and its sidebar.\n\n```python\nst.logo(\"logo.jpg\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/media/st.audio\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/audio.jpg\" />\n\n<h4>Audio</h4>\n\nDisplay an audio player.\n\n```python\nst.audio(numpy_array)\nst.audio(audio_bytes)\nst.audio(file)\nst.audio(\"https://example.com/myaudio.mp3\", format=\"audio/mp3\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/media/st.video\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/video.jpg\" />\n\n<h4>Video</h4>\n\nDisplay a video player.\n\n```python\nst.video(numpy_array)\nst.video(video_bytes)\nst.video(file)\nst.video(\"https://example.com/myvideo.mp4\", format=\"video/mp4\")\n```\n\n</RefCard>\n</TileContainer>\n\n<ComponentSlider>\n\n<ComponentCard href=\"https://github.com/whitphx/streamlit-webrtc\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/webrtc.jpg\" />\n\n<h4>Streamlit Webrtc</h4>\n\nHandling and transmitting real-time video/audio streams with Streamlit. Created by [@whitphx](https://github.com/whitphx).\n\n```python\nfrom streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=\"sample\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/andfanilo/streamlit-drawable-canvas\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/drawable-canvas.jpg\" />\n\n<h4>Drawable Canvas</h4>\n\nProvides a sketching canvas using [Fabric.js](http://fabricjs.com/). Created by [@andfanilo](https://github.com/andfanilo).\n\n```python\nfrom streamlit_drawable_canvas import st_canvas\n\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/fcakyon/streamlit-image-comparison\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/image-comparison.jpg\" />\n\n<h4>Image Comparison</h4>\n\nCompare images with a slider using [JuxtaposeJS](https://juxtapose.knightlab.com/). Created by [@fcakyon](https://github.com/fcakyon).\n\n```python\nfrom streamlit_image_comparison import image_comparison\n\nimage_comparison(img1=\"image1.jpg\", img2=\"image2.jpg\",)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/turner-anderson/streamlit-cropper\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/cropper.jpg\" />\n\n<h4>Streamlit Cropper</h4>\n\nA simple image cropper for Streamlit. Created by [@turner-anderson](https://github.com/turner-anderson).\n\n```python\nfrom streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/blackary/streamlit-image-coordinates\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/image-coordinates.jpg\" />\n\n<h4>Image Coordinates</h4>\n\nGet the coordinates of clicks on an image. Created by [@blackary](https://github.com/blackary/).\n\n```python\nfrom streamlit_image_coordinates import streamlit_image_coordinates\n\nstreamlit_image_coordinates(\"https://placekitten.com/200/300\")\n```\n\n</ComponentCard>\n\n<ComponentCard href=\"https://github.com/andfanilo/streamlit-lottie\">\n\n<Image pure alt=\"screenshot\" src=\"/images/api/components/lottie.jpg\" />\n\n<h4>Streamlit Lottie</h4>\n\nIntegrate [Lottie](https://lottiefiles.com/) animations inside your Streamlit app. Created by [@andfanilo](https://github.com/andfanilo).\n\n```python\nlottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\n\nst_lottie(lottie_hello, key=\"hello\")\n```\n\n</ComponentCard>\n\n</ComponentSlider>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.datetimecolumn",
    "content": "<Autofunction function=\"streamlit.column_config.DatetimeColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.linechartcolumn",
    "content": "<Autofunction function=\"streamlit.column_config.LineChartColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.linkcolumn",
    "content": "<Autofunction function=\"streamlit.column_config.LinkColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.progresscolumn",
    "content": "<Autofunction function=\"streamlit.column_config.ProgressColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.column",
    "content": "<Autofunction function=\"streamlit.column_config.Column\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.barchartcolumn",
    "content": "<Autofunction function=\"streamlit.column_config.BarChartColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.numbercolumn",
    "content": "<Autofunction function=\"streamlit.column_config.NumberColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.jsoncolumn",
    "content": "<Autofunction function=\"streamlit.column_config.JsonColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.textcolumn",
    "content": "<Autofunction function=\"streamlit.column_config.TextColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.areachartcolumn",
    "content": "<Autofunction function=\"streamlit.column_config.AreaChartColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.imagecolumn",
    "content": "<Autofunction function=\"streamlit.column_config.ImageColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.timecolumn",
    "content": "<Autofunction function=\"streamlit.column_config.TimeColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.selectboxcolumn",
    "content": "<Autofunction function=\"streamlit.column_config.SelectboxColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.checkboxcolumn",
    "content": "<Autofunction function=\"streamlit.column_config.CheckboxColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.datecolumn",
    "content": "<Autofunction function=\"streamlit.column_config.DateColumn\" />"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config",
    "content": "# Column configuration\n\nWhen working with data in Streamlit, the `st.column_config` class is a powerful tool for configuring data display and interaction. Specifically designed for the `column_config` parameter in [`st.dataframe`](/develop/api-reference/data/st.dataframe) and [`st.data_editor`](/develop/api-reference/data/st.data_editor), it provides a suite of methods to tailor your columns to various data types - from simple text and numbers to lists, URLs, images, and more.\n\nWhether it's translating temporal data into user-friendly formats or utilizing charts and progress bars for clearer data visualization, column configuration not only provides the user with an enriched data viewing experience but also ensures that you're equipped with the tools to present and interact with your data, just the way you want it.\n\n<TileContainer>\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.column\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.column.jpg\" />\n\n<h4>Column</h4>\n\nConfigure a generic column.\n\n```python\nColumn(\"Streamlit Widgets\", width=\"medium\", help=\"Streamlit **widget** commands 🎈\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.textcolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.textcolumn.jpg\" />\n\n<h4>Text column</h4>\n\nConfigure a text column.\n\n```python\nTextColumn(\"Widgets\", max_chars=50, validate=\"^st\\.[a-z_]+$\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.numbercolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.numbercolumn.jpg\" />\n\n<h4>Number column</h4>\n\nConfigure a number column.\n\n```python\nNumberColumn(\"Price (in USD)\", min_value=0, format=\"$%d\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.checkboxcolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.checkboxcolumn.jpg\" />\n\n<h4>Checkbox column</h4>\n\nConfigure a checkbox column.\n\n```python\nCheckboxColumn(\"Your favorite?\", help=\"Select your **favorite** widgets\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.selectboxcolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.selectboxcolumn.jpg\" />\n\n<h4>Selectbox column</h4>\n\nConfigure a selectbox column.\n\n```python\nSelectboxColumn(\"App Category\", options=[\"🤖 LLM\", \"📈 Data Viz\"])\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.datetimecolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.datetimecolumn.jpg\" />\n\n<h4>Datetime column</h4>\n\nConfigure a datetime column.\n\n```python\nDatetimeColumn(\"Appointment\", min_value=datetime(2023, 6, 1), format=\"D MMM YYYY, h:mm a\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.datecolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.datecolumn.jpg\" />\n\n<h4>Date column</h4>\n\nConfigure a date column.\n\n```python\nDateColumn(\"Birthday\", max_value=date(2005, 1, 1), format=\"DD.MM.YYYY\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.timecolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.timecolumn.jpg\" />\n\n<h4>Time column</h4>\n\nConfigure a time column.\n\n```python\nTimeColumn(\"Appointment\", min_value=time(8, 0, 0), format=\"hh:mm a\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.jsoncolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.jsoncolumn.jpg\" />\n\n<h4>JSON column</h4>\n\nConfigure a JSON column.\n\n```python\nJSONColumn(\"Properties\", width=\"medium\")\n```\n\n</RefCard>\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.listcolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.listcolumn.jpg\" />\n\n<h4>List column</h4>\n\nConfigure a list column.\n\n```python\nListColumn(\"Sales (last 6 months)\", width=\"medium\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.linkcolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.linkcolumn.jpg\" />\n\n<h4>Link column</h4>\n\nConfigure a link column.\n\n```python\nLinkColumn(\"Trending apps\", max_chars=100, validate=\"^https://.*$\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.imagecolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.imagecolumn.jpg\" />\n\n<h4>Image column</h4>\n\nConfigure an image column.\n\n```python\nImageColumn(\"Preview Image\", help=\"The preview screenshots\")\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.areachartcolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.areachartcolumn.jpg\" />\n\n<h4>Area chart column</h4>\n\nConfigure an area chart column.\n\n```python\nAreaChartColumn(\"Sales (last 6 months)\" y_min=0, y_max=100)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.linechartcolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.linechartcolumn.jpg\" />\n\n<h4>Line chart column</h4>\n\nConfigure a line chart column.\n\n```python\nLineChartColumn(\"Sales (last 6 months)\" y_min=0, y_max=100)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.barchartcolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.barchartcolumn.jpg\" />\n\n<h4>Bar chart column</h4>\n\nConfigure a bar chart column.\n\n```python\nBarChartColumn(\"Marketing spend\" y_min=0, y_max=100)\n```\n\n</RefCard>\n\n<RefCard href=\"/develop/api-reference/data/st.column_config/st.column_config.progresscolumn\">\n<Image pure alt=\"screenshot\" src=\"/images/api/column_config.progresscolumn.jpg\" />\n\n<h4>Progress column</h4>\n\nConfigure a progress column.\n\n```python\nProgressColumn(\"Sales volume\", min_value=0, max_value=1000, format=\"$%f\")\n```\n\n</RefCard>\n\n</TileContainer>"
  },
  {
    "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.listcolumn",
    "content": "<Autofunction function=\"streamlit.column_config.ListColumn\" />"
  }
]